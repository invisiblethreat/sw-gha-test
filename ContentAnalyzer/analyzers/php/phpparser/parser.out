Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> top_statement_list
Rule 2     top_statement_list -> top_statement_list top_statement
Rule 3     top_statement_list -> empty
Rule 4     top_statement -> statement
Rule 5     top_statement -> function_declaration_statement
Rule 6     top_statement -> class_declaration_statement
Rule 7     top_statement -> HALT_COMPILER LPAREN RPAREN SEMI
Rule 8     top_statement -> NAMESPACE namespace_name SEMI
Rule 9     top_statement -> NAMESPACE LBRACE top_statement_list RBRACE
Rule 10    top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE
Rule 11    top_statement -> CONST constant_declarations SEMI
Rule 12    top_statement -> USE use_declarations SEMI
Rule 13    use_declarations -> use_declarations COMMA use_declaration
Rule 14    use_declarations -> use_declaration
Rule 15    use_declaration -> namespace_name
Rule 16    use_declaration -> NS_SEPARATOR namespace_name
Rule 17    use_declaration -> namespace_name AS STRING
Rule 18    use_declaration -> NS_SEPARATOR namespace_name AS STRING
Rule 19    constant_declarations -> constant_declarations COMMA constant_declaration
Rule 20    constant_declarations -> constant_declaration
Rule 21    constant_declaration -> STRING EQUALS static_expr
Rule 22    inner_statement_list -> inner_statement_list inner_statement
Rule 23    inner_statement_list -> empty
Rule 24    inner_statement -> statement
Rule 25    inner_statement -> function_declaration_statement
Rule 26    inner_statement -> class_declaration_statement
Rule 27    inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI
Rule 28    inner_statement -> YIELD SEMI
Rule 29    inner_statement -> YIELD expr SEMI
Rule 30    statement -> LBRACE inner_statement_list RBRACE
Rule 31    statement -> IF LPAREN expr RPAREN statement elseif_list else_single
Rule 32    statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
Rule 33    statement -> WHILE LPAREN expr RPAREN while_statement
Rule 34    statement -> DO statement WHILE LPAREN expr RPAREN SEMI
Rule 35    statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
Rule 36    statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
Rule 37    statement -> SWITCH LPAREN expr RPAREN switch_case_list
Rule 38    statement -> BREAK SEMI
Rule 39    statement -> BREAK expr SEMI
Rule 40    statement -> CONTINUE SEMI
Rule 41    statement -> CONTINUE expr SEMI
Rule 42    statement -> RETURN SEMI
Rule 43    statement -> RETURN expr SEMI
Rule 44    statement -> GLOBAL global_var_list SEMI
Rule 45    statement -> STATIC static_var_list SEMI
Rule 46    statement -> ECHO echo_expr_list SEMI
Rule 47    statement -> INLINE_HTML
Rule 48    statement -> expr SEMI
Rule 49    statement -> UNSET LPAREN unset_variables RPAREN SEMI
Rule 50    statement -> SEMI
Rule 51    statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
Rule 52    additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE
Rule 53    additional_catches -> empty
Rule 54    maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE
Rule 55    maybe_finally -> empty
Rule 56    statement -> THROW expr SEMI
Rule 57    statement -> DECLARE LPAREN declare_list RPAREN declare_statement
Rule 58    declare_list -> STRING EQUALS static_scalar
Rule 59    declare_list -> declare_list COMMA STRING EQUALS static_scalar
Rule 60    declare_statement -> statement
Rule 61    declare_statement -> COLON inner_statement_list ENDDECLARE SEMI
Rule 62    elseif_list -> empty
Rule 63    elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement
Rule 64    else_single -> empty
Rule 65    else_single -> ELSE statement
Rule 66    new_elseif_list -> empty
Rule 67    new_elseif_list -> new_elseif_list ELSEIF LPAREN expr RPAREN COLON inner_statement_list
Rule 68    new_else_single -> empty
Rule 69    new_else_single -> ELSE COLON inner_statement_list
Rule 70    while_statement -> statement
Rule 71    while_statement -> COLON inner_statement_list ENDWHILE SEMI
Rule 72    for_expr -> empty
Rule 73    for_expr -> non_empty_for_expr
Rule 74    non_empty_for_expr -> non_empty_for_expr COMMA expr
Rule 75    non_empty_for_expr -> expr
Rule 76    for_statement -> statement
Rule 77    for_statement -> COLON inner_statement_list ENDFOR SEMI
Rule 78    foreach_variable -> LIST LPAREN assignment_list RPAREN
Rule 79    foreach_variable -> variable
Rule 80    foreach_variable -> AND variable
Rule 81    foreach_optional_arg -> empty
Rule 82    foreach_optional_arg -> DOUBLE_ARROW foreach_variable
Rule 83    foreach_statement -> statement
Rule 84    foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI
Rule 85    switch_case_list -> LBRACE case_list RBRACE
Rule 86    switch_case_list -> LBRACE SEMI case_list RBRACE
Rule 87    switch_case_list -> COLON case_list ENDSWITCH SEMI
Rule 88    switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI
Rule 89    case_list -> empty
Rule 90    case_list -> case_list CASE expr case_separator inner_statement_list
Rule 91    case_list -> case_list DEFAULT case_separator inner_statement_list
Rule 92    case_separator -> COLON
Rule 93    case_separator -> SEMI
Rule 94    global_var_list -> global_var_list COMMA global_var
Rule 95    global_var_list -> global_var
Rule 96    global_var -> VARIABLE
Rule 97    global_var -> DOLLAR variable
Rule 98    global_var -> DOLLAR LBRACE expr RBRACE
Rule 99    static_var_list -> static_var_list COMMA static_var
Rule 100   static_var_list -> static_var
Rule 101   static_var -> VARIABLE EQUALS static_scalar
Rule 102   static_var -> VARIABLE
Rule 103   echo_expr_list -> echo_expr_list COMMA expr
Rule 104   echo_expr_list -> expr
Rule 105   unset_variables -> unset_variables COMMA unset_variable
Rule 106   unset_variables -> unset_variable
Rule 107   unset_variable -> variable
Rule 108   function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
Rule 109   class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
Rule 110   class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
Rule 111   class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE
Rule 112   class_entry_type -> CLASS
Rule 113   class_entry_type -> ABSTRACT CLASS
Rule 114   class_entry_type -> FINAL CLASS
Rule 115   extends_from -> empty
Rule 116   extends_from -> EXTENDS fully_qualified_class_name
Rule 117   fully_qualified_class_name -> namespace_name
Rule 118   fully_qualified_class_name -> NS_SEPARATOR namespace_name
Rule 119   fully_qualified_class_name -> NAMESPACE NS_SEPARATOR namespace_name
Rule 120   implements_list -> IMPLEMENTS interface_list
Rule 121   implements_list -> empty
Rule 122   trait_modifiers_list -> trait_modifiers_list trait_modifier
Rule 123   trait_modifiers_list -> empty
Rule 124   trait_member -> fully_qualified_class_name DOUBLE_COLON STRING
Rule 125   trait_member -> STRING
Rule 126   trait_modifier -> trait_member AS STRING SEMI
Rule 127   trait_modifier -> trait_member AS visibility_modifier STRING SEMI
Rule 128   trait_modifier -> trait_member AS visibility_modifier SEMI
Rule 129   trait_statement_list -> trait_statement_list trait_statement
Rule 130   trait_statement_list -> empty
Rule 131   trait_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body
Rule 132   trait_statement -> variable_modifiers class_variable_declaration SEMI
Rule 133   trait_statement -> USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE
Rule 134   trait_statement -> USE fully_qualified_class_name SEMI
Rule 135   class_statement_list -> class_statement_list class_statement
Rule 136   class_statement_list -> empty
Rule 137   class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body
Rule 138   class_statement -> variable_modifiers class_variable_declaration SEMI
Rule 139   class_statement -> class_constant_declaration SEMI
Rule 140   class_statement -> USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE
Rule 141   class_statement -> USE fully_qualified_class_name SEMI
Rule 142   class_variable_declaration -> class_variable_declaration COMMA VARIABLE EQUALS static_scalar
Rule 143   class_variable_declaration -> VARIABLE EQUALS static_scalar
Rule 144   class_variable_declaration -> class_variable_declaration COMMA VARIABLE
Rule 145   class_variable_declaration -> VARIABLE
Rule 146   class_constant_declaration -> class_constant_declaration COMMA STRING EQUALS static_expr
Rule 147   class_constant_declaration -> CONST STRING EQUALS static_expr
Rule 148   interface_list -> interface_list COMMA fully_qualified_class_name
Rule 149   interface_list -> fully_qualified_class_name
Rule 150   interface_extends_list -> EXTENDS interface_list
Rule 151   interface_extends_list -> empty
Rule 152   variable_modifiers -> non_empty_member_modifiers
Rule 153   variable_modifiers -> VAR
Rule 154   method_modifiers -> non_empty_member_modifiers
Rule 155   method_modifiers -> empty
Rule 156   method_body -> LBRACE inner_statement_list RBRACE
Rule 157   method_body -> SEMI
Rule 158   non_empty_member_modifiers -> non_empty_member_modifiers member_modifier
Rule 159   non_empty_member_modifiers -> member_modifier
Rule 160   visibility_modifier -> PUBLIC
Rule 161   visibility_modifier -> PROTECTED
Rule 162   visibility_modifier -> PRIVATE
Rule 163   member_modifier -> visibility_modifier
Rule 164   member_modifier -> STATIC
Rule 165   member_modifier -> ABSTRACT
Rule 166   member_modifier -> FINAL
Rule 167   is_reference -> AND
Rule 168   is_reference -> empty
Rule 169   parameter_list -> parameter_list COMMA parameter
Rule 170   parameter_list -> parameter
Rule 171   parameter_list -> empty
Rule 172   parameter -> VARIABLE
Rule 173   parameter -> class_name VARIABLE
Rule 174   parameter -> AND VARIABLE
Rule 175   parameter -> class_name AND VARIABLE
Rule 176   parameter -> VARIABLE EQUALS static_scalar
Rule 177   parameter -> class_name VARIABLE EQUALS static_scalar
Rule 178   parameter -> AND VARIABLE EQUALS static_scalar
Rule 179   parameter -> class_name AND VARIABLE EQUALS static_scalar
Rule 180   expr -> variable
Rule 181   expr -> variable EQUALS expr
Rule 182   expr -> variable EQUALS AND expr
Rule 183   expr -> NEW class_name_reference ctor_arguments
Rule 184   expr -> expr OBJECT_OPERATOR object_property method_or_not
Rule 185   class_name_reference -> class_name
Rule 186   class_name_reference -> dynamic_class_name_reference
Rule 187   class_name -> namespace_name
Rule 188   class_name -> NS_SEPARATOR namespace_name
Rule 189   class_name -> NAMESPACE NS_SEPARATOR namespace_name
Rule 190   class_name -> STATIC
Rule 191   dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties
Rule 192   dynamic_class_name_reference -> base_variable
Rule 193   dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property
Rule 194   dynamic_class_name_variable_properties -> empty
Rule 195   dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property
Rule 196   ctor_arguments -> LPAREN function_call_parameter_list RPAREN
Rule 197   ctor_arguments -> empty
Rule 198   expr -> CLONE expr
Rule 199   expr -> LIST LPAREN assignment_list RPAREN EQUALS expr
Rule 200   assignment_list -> assignment_list COMMA assignment_list_element
Rule 201   assignment_list -> assignment_list_element
Rule 202   assignment_list_element -> variable
Rule 203   assignment_list_element -> empty
Rule 204   assignment_list_element -> LIST LPAREN assignment_list RPAREN
Rule 205   variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
Rule 206   variable -> base_variable_with_function_calls
Rule 207   base_variable_with_function_calls -> base_variable
Rule 208   base_variable_with_function_calls -> function_call
Rule 209   function_call -> namespace_name LPAREN function_call_parameter_list RPAREN
Rule 210   function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
Rule 211   function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
Rule 212   function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
Rule 213   function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
Rule 214   function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
Rule 215   function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
Rule 216   function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
Rule 217   function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
Rule 218   function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN
Rule 219   function_call -> BACKTICK encaps_list BACKTICK
Rule 220   method_or_not -> LPAREN function_call_parameter_list RPAREN
Rule 221   method_or_not -> empty
Rule 222   variable_properties -> variable_properties variable_property
Rule 223   variable_properties -> empty
Rule 224   variable_property -> OBJECT_OPERATOR object_property method_or_not
Rule 225   base_variable -> simple_indirect_reference
Rule 226   base_variable -> static_member
Rule 227   simple_indirect_reference -> DOLLAR simple_indirect_reference
Rule 228   simple_indirect_reference -> reference_variable
Rule 229   static_member -> class_name DOUBLE_COLON variable_without_objects
Rule 230   static_member -> variable_class_name DOUBLE_COLON variable_without_objects
Rule 231   static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE
Rule 232   static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE
Rule 233   variable_class_name -> reference_variable
Rule 234   variable -> variable LBRACKET dim_offset RBRACKET
Rule 235   reference_variable -> reference_variable LBRACKET dim_offset RBRACKET
Rule 236   reference_variable -> reference_variable LBRACE expr RBRACE
Rule 237   reference_variable -> compound_variable
Rule 238   expr -> expr LBRACE dim_offset RBRACE
Rule 239   compound_variable -> VARIABLE
Rule 240   compound_variable -> DOLLAR LBRACE expr RBRACE
Rule 241   dim_offset -> expr
Rule 242   dim_offset -> empty
Rule 243   object_property -> variable_name object_dim_list
Rule 244   object_property -> variable_without_objects
Rule 245   object_dim_list -> empty
Rule 246   object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET
Rule 247   object_dim_list -> object_dim_list LBRACE expr RBRACE
Rule 248   variable_name -> STRING
Rule 249   variable_name -> LBRACE expr RBRACE
Rule 250   variable_without_objects -> simple_indirect_reference
Rule 251   expr -> scalar
Rule 252   expr -> ARRAY LPAREN array_pair_list RPAREN
Rule 253   expr -> LBRACKET array_pair_list RBRACKET
Rule 254   array_pair_list -> empty
Rule 255   array_pair_list -> non_empty_array_pair_list possible_comma
Rule 256   non_empty_array_pair_list -> non_empty_array_pair_list COMMA AND variable
Rule 257   non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr
Rule 258   non_empty_array_pair_list -> AND variable
Rule 259   non_empty_array_pair_list -> expr
Rule 260   non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr DOUBLE_ARROW AND variable
Rule 261   non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr DOUBLE_ARROW expr
Rule 262   non_empty_array_pair_list -> expr DOUBLE_ARROW AND variable
Rule 263   non_empty_array_pair_list -> expr DOUBLE_ARROW expr
Rule 264   possible_comma -> empty
Rule 265   possible_comma -> COMMA
Rule 266   function_call_parameter_list -> function_call_parameter_list COMMA function_call_parameter
Rule 267   function_call_parameter_list -> function_call_parameter
Rule 268   function_call_parameter_list -> empty
Rule 269   function_call_parameter -> expr
Rule 270   function_call_parameter -> AND variable
Rule 271   expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
Rule 272   lexical_vars -> USE LPAREN lexical_var_list RPAREN
Rule 273   lexical_vars -> empty
Rule 274   lexical_var_list -> lexical_var_list COMMA AND VARIABLE
Rule 275   lexical_var_list -> lexical_var_list COMMA VARIABLE
Rule 276   lexical_var_list -> AND VARIABLE
Rule 277   lexical_var_list -> VARIABLE
Rule 278   expr -> variable PLUS_EQUAL expr
Rule 279   expr -> variable MINUS_EQUAL expr
Rule 280   expr -> variable MUL_EQUAL expr
Rule 281   expr -> variable DIV_EQUAL expr
Rule 282   expr -> variable CONCAT_EQUAL expr
Rule 283   expr -> variable MOD_EQUAL expr
Rule 284   expr -> variable AND_EQUAL expr
Rule 285   expr -> variable OR_EQUAL expr
Rule 286   expr -> variable XOR_EQUAL expr
Rule 287   expr -> variable SL_EQUAL expr
Rule 288   expr -> variable SR_EQUAL expr
Rule 289   expr -> expr BOOLEAN_AND expr
Rule 290   expr -> expr BOOLEAN_OR expr
Rule 291   expr -> expr LOGICAL_AND expr
Rule 292   expr -> expr LOGICAL_OR expr
Rule 293   expr -> expr LOGICAL_XOR expr
Rule 294   expr -> expr AND expr
Rule 295   expr -> expr OR expr
Rule 296   expr -> expr XOR expr
Rule 297   expr -> expr CONCAT expr
Rule 298   expr -> expr PLUS expr
Rule 299   expr -> expr MINUS expr
Rule 300   expr -> expr MUL expr
Rule 301   expr -> expr DIV expr
Rule 302   expr -> expr SL expr
Rule 303   expr -> expr SR expr
Rule 304   expr -> expr MOD expr
Rule 305   expr -> expr IS_IDENTICAL expr
Rule 306   expr -> expr IS_NOT_IDENTICAL expr
Rule 307   expr -> expr IS_EQUAL expr
Rule 308   expr -> expr IS_NOT_EQUAL expr
Rule 309   expr -> expr IS_SMALLER expr
Rule 310   expr -> expr IS_SMALLER_OR_EQUAL expr
Rule 311   expr -> expr IS_GREATER expr
Rule 312   expr -> expr IS_GREATER_OR_EQUAL expr
Rule 313   expr -> expr INSTANCEOF expr
Rule 314   expr -> expr INSTANCEOF STATIC
Rule 315   expr -> PLUS expr
Rule 316   expr -> MINUS expr
Rule 317   expr -> NOT expr
Rule 318   expr -> BOOLEAN_NOT expr
Rule 319   expr -> expr QUESTION expr COLON expr
Rule 320   expr -> expr QUESTION COLON expr
Rule 321   expr -> INC variable
Rule 322   expr -> DEC variable
Rule 323   expr -> variable INC
Rule 324   expr -> variable DEC
Rule 325   expr -> INT_CAST expr
Rule 326   expr -> DOUBLE_CAST expr
Rule 327   expr -> STRING_CAST expr
Rule 328   expr -> ARRAY_CAST expr
Rule 329   expr -> OBJECT_CAST expr
Rule 330   expr -> BOOL_CAST expr
Rule 331   expr -> UNSET_CAST expr
Rule 332   expr -> BINARY_CAST expr
Rule 333   expr -> ISSET LPAREN isset_variables RPAREN
Rule 334   isset_variables -> isset_variables COMMA variable
Rule 335   isset_variables -> variable
Rule 336   expr -> EMPTY LPAREN expr RPAREN
Rule 337   expr -> EVAL LPAREN expr RPAREN
Rule 338   expr -> INCLUDE expr
Rule 339   expr -> INCLUDE_ONCE expr
Rule 340   expr -> REQUIRE expr
Rule 341   expr -> REQUIRE_ONCE expr
Rule 342   exit_or_die -> EXIT
Rule 343   exit_or_die -> DIE
Rule 344   expr -> exit_or_die
Rule 345   expr -> exit_or_die LPAREN RPAREN
Rule 346   expr -> exit_or_die LPAREN expr RPAREN
Rule 347   expr -> PRINT expr
Rule 348   expr -> AT expr
Rule 349   expr -> LPAREN expr RPAREN
Rule 350   scalar -> class_constant
Rule 351   scalar -> common_scalar
Rule 352   scalar -> QUOTE encaps_list QUOTE
Rule 353   scalar -> STRING QUOTE encaps_list QUOTE
Rule 354   scalar -> scalar_heredoc
Rule 355   scalar -> nowdoc
Rule 356   scalar -> class_name_constant
Rule 357   scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC
Rule 358   nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC
Rule 359   nowdoc_text_content -> nowdoc_text_content ENCAPSED_AND_WHITESPACE
Rule 360   nowdoc_text_content -> empty
Rule 361   scalar -> STRING_VARNAME
Rule 362   scalar -> namespace_name
Rule 363   scalar -> NS_SEPARATOR namespace_name
Rule 364   scalar -> NAMESPACE NS_SEPARATOR namespace_name
Rule 365   class_constant -> class_name DOUBLE_COLON STRING
Rule 366   class_constant -> variable_class_name DOUBLE_COLON STRING
Rule 367   common_scalar -> LNUMBER
Rule 368   common_scalar -> DNUMBER
Rule 369   common_scalar -> CONSTANT_ENCAPSED_STRING
Rule 370   common_scalar -> STRING CONSTANT_ENCAPSED_STRING
Rule 371   common_scalar -> LINE
Rule 372   common_scalar -> FILE
Rule 373   common_scalar -> DIR
Rule 374   common_scalar -> CLASS_C
Rule 375   common_scalar -> METHOD_C
Rule 376   common_scalar -> FUNC_C
Rule 377   common_scalar -> NS_C
Rule 378   static_scalar -> common_scalar
Rule 379   static_scalar -> class_constant
Rule 380   static_scalar -> QUOTE QUOTE
Rule 381   static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE
Rule 382   static_scalar -> static_heredoc
Rule 383   static_scalar -> nowdoc
Rule 384   static_scalar -> class_name_constant
Rule 385   class_name_constant -> class_name DOUBLE_COLON CLASS
Rule 386   static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC
Rule 387   multiple_encapsed -> multiple_encapsed ENCAPSED_AND_WHITESPACE
Rule 388   multiple_encapsed -> empty
Rule 389   static_scalar -> namespace_name
Rule 390   static_scalar -> NS_SEPARATOR namespace_name
Rule 391   static_scalar -> NAMESPACE NS_SEPARATOR namespace_name
Rule 392   static_scalar -> PLUS static_scalar
Rule 393   static_scalar -> MINUS static_scalar
Rule 394   static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN
Rule 395   static_scalar -> LBRACKET static_array_pair_list RBRACKET
Rule 396   static_array_pair_list -> empty
Rule 397   static_array_pair_list -> static_non_empty_array_pair_list possible_comma
Rule 398   static_non_empty_array_pair_list -> static_non_empty_array_pair_list COMMA static_expr
Rule 399   static_non_empty_array_pair_list -> static_expr
Rule 400   static_non_empty_array_pair_list -> static_non_empty_array_pair_list COMMA static_scalar DOUBLE_ARROW static_expr
Rule 401   static_non_empty_array_pair_list -> static_scalar DOUBLE_ARROW static_expr
Rule 402   static_expr -> static_scalar
Rule 403   static_expr -> static_expr BOOLEAN_AND static_expr
Rule 404   static_expr -> static_expr BOOLEAN_OR static_expr
Rule 405   static_expr -> static_expr LOGICAL_AND static_expr
Rule 406   static_expr -> static_expr LOGICAL_OR static_expr
Rule 407   static_expr -> static_expr LOGICAL_XOR static_expr
Rule 408   static_expr -> static_expr AND static_expr
Rule 409   static_expr -> static_expr OR static_expr
Rule 410   static_expr -> static_expr XOR static_expr
Rule 411   static_expr -> static_expr CONCAT static_expr
Rule 412   static_expr -> static_expr PLUS static_expr
Rule 413   static_expr -> static_expr MINUS static_expr
Rule 414   static_expr -> static_expr MUL static_expr
Rule 415   static_expr -> static_expr DIV static_expr
Rule 416   static_expr -> static_expr SL static_expr
Rule 417   static_expr -> static_expr SR static_expr
Rule 418   static_expr -> static_expr MOD static_expr
Rule 419   static_expr -> static_expr IS_IDENTICAL static_expr
Rule 420   static_expr -> static_expr IS_NOT_IDENTICAL static_expr
Rule 421   static_expr -> static_expr IS_EQUAL static_expr
Rule 422   static_expr -> static_expr IS_NOT_EQUAL static_expr
Rule 423   static_expr -> static_expr IS_SMALLER static_expr
Rule 424   static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr
Rule 425   static_expr -> static_expr IS_GREATER static_expr
Rule 426   static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr
Rule 427   static_expr -> LPAREN static_expr RPAREN
Rule 428   namespace_name -> namespace_name NS_SEPARATOR STRING
Rule 429   namespace_name -> STRING
Rule 430   namespace_name -> ARRAY
Rule 431   encaps_list -> encaps_list encaps_var
Rule 432   encaps_list -> empty
Rule 433   encaps_list -> encaps_list ENCAPSED_AND_WHITESPACE
Rule 434   encaps_var -> VARIABLE
Rule 435   encaps_var -> VARIABLE LBRACKET encaps_var_offset RBRACKET
Rule 436   encaps_var -> VARIABLE OBJECT_OPERATOR STRING
Rule 437   encaps_var -> DOLLAR_OPEN_CURLY_BRACES expr RBRACE
Rule 438   encaps_var -> DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET expr RBRACKET RBRACE
Rule 439   encaps_var -> CURLY_OPEN variable RBRACE
Rule 440   encaps_var_offset -> STRING
Rule 441   encaps_var_offset -> NUM_STRING
Rule 442   encaps_var_offset -> VARIABLE
Rule 443   empty -> <empty>

Terminals, with rules where they appear

ABSTRACT             : 113 165
AND                  : 80 167 174 175 178 179 182 256 258 260 262 270 274 276 294 408
AND_EQUAL            : 284
ARRAY                : 252 394 430
ARRAY_CAST           : 328
AS                   : 17 18 36 126 127 128
AT                   : 348
BACKTICK             : 219 219
BINARY_CAST          : 332
BOOLEAN_AND          : 289 403
BOOLEAN_NOT          : 318
BOOLEAN_OR           : 290 404
BOOL_CAST            : 330
BREAK                : 38 39
CASE                 : 90
CATCH                : 52
CLASS                : 112 113 114 385
CLASS_C              : 374
CLONE                : 198
COLON                : 32 61 67 69 71 77 84 87 88 92 319 320
COMMA                : 13 19 59 74 94 99 103 105 142 144 146 148 169 200 256 257 260 261 265 266 274 275 334 398 400
CONCAT               : 297 411
CONCAT_EQUAL         : 282
CONST                : 11 147
CONSTANT_ENCAPSED_STRING : 369 370
CONTINUE             : 40 41
CURLY_OPEN           : 439
DEC                  : 322 324
DECLARE              : 57
DEFAULT              : 91
DIE                  : 343
DIR                  : 373
DIV                  : 301 415
DIV_EQUAL            : 281
DNUMBER              : 368
DO                   : 34
DOLLAR               : 97 98 227 240
DOLLAR_OPEN_CURLY_BRACES : 437 438
DOUBLE_ARROW         : 82 260 261 262 263 400 401
DOUBLE_CAST          : 326
DOUBLE_COLON         : 124 212 213 214 215 216 217 229 230 231 232 365 366 385
ECHO                 : 46
ELSE                 : 65 69
ELSEIF               : 63 67
EMPTY                : 336
ENCAPSED_AND_WHITESPACE : 359 381 387 433
ENDDECLARE           : 61
ENDFOR               : 77
ENDFOREACH           : 84
ENDIF                : 32
ENDSWITCH            : 87 88
ENDWHILE             : 71
END_HEREDOC          : 357 386
END_NOWDOC           : 358
EQUALS               : 21 58 59 101 142 143 146 147 176 177 178 179 181 182 199
EVAL                 : 337
EXIT                 : 342
EXTENDS              : 116 150
FILE                 : 372
FINAL                : 114 166
FINALLY              : 54
FOR                  : 35
FOREACH              : 36
FUNCTION             : 108 131 137 271
FUNC_C               : 376
GLOBAL               : 44
HALT_COMPILER        : 7 27
IF                   : 31 32
IMPLEMENTS           : 120
INC                  : 321 323
INCLUDE              : 338
INCLUDE_ONCE         : 339
INLINE_HTML          : 47
INSTANCEOF           : 313 314
INTERFACE            : 110
INT_CAST             : 325
ISSET                : 333
IS_EQUAL             : 307 421
IS_GREATER           : 311 425
IS_GREATER_OR_EQUAL  : 312 426
IS_IDENTICAL         : 305 419
IS_NOT_EQUAL         : 308 422
IS_NOT_IDENTICAL     : 306 420
IS_SMALLER           : 309 423
IS_SMALLER_OR_EQUAL  : 310 424
LBRACE               : 9 10 30 51 52 54 85 86 98 108 109 110 111 133 140 156 216 217 231 232 236 238 240 247 249 271
LBRACKET             : 234 235 246 253 395 435 438
LINE                 : 371
LIST                 : 78 199 204
LNUMBER              : 367
LOGICAL_AND          : 291 405
LOGICAL_OR           : 292 406
LOGICAL_XOR          : 293 407
LPAREN               : 7 27 31 32 33 34 35 36 37 49 52 57 63 67 78 108 131 137 196 199 204 209 210 211 212 213 214 215 216 217 218 220 252 271 272 333 336 337 345 346 349 394 427
METHOD_C             : 375
MINUS                : 299 316 393 413
MINUS_EQUAL          : 279
MOD                  : 304 418
MOD_EQUAL            : 283
MUL                  : 300 414
MUL_EQUAL            : 280
NAMESPACE            : 8 9 10 119 189 211 364 391
NEW                  : 183
NOT                  : 317
NS_C                 : 377
NS_SEPARATOR         : 16 18 118 119 188 189 210 211 363 364 390 391 428
NUM_STRING           : 441
OBJECT_CAST          : 329
OBJECT_OPERATOR      : 184 191 195 205 224 436
OR                   : 295 409
OR_EQUAL             : 285
PLUS                 : 298 315 392 412
PLUS_EQUAL           : 278
PRINT                : 347
PRIVATE              : 162
PROTECTED            : 161
PUBLIC               : 160
QUESTION             : 319 320
QUOTE                : 352 352 353 353 380 380 381 381
RBRACE               : 9 10 30 51 52 54 85 86 98 108 109 110 111 133 140 156 216 217 231 232 236 238 240 247 249 271 437 438 439
RBRACKET             : 234 235 246 253 395 435 438
REQUIRE              : 340
REQUIRE_ONCE         : 341
RETURN               : 42 43
RPAREN               : 7 27 31 32 33 34 35 36 37 49 52 57 63 67 78 108 131 137 196 199 204 209 210 211 212 213 214 215 216 217 218 220 252 271 272 333 336 337 345 346 349 394 427
SEMI                 : 7 8 11 12 27 28 29 32 34 35 35 38 39 40 41 42 43 44 45 46 48 49 50 56 61 71 77 84 86 87 88 88 93 126 127 128 132 134 138 139 141 157
SL                   : 302 416
SL_EQUAL             : 287
SR                   : 303 417
SR_EQUAL             : 288
START_HEREDOC        : 357 386
START_NOWDOC         : 358
STATIC               : 45 164 190 314
STRING               : 17 18 21 58 59 108 109 110 111 124 125 126 127 131 137 146 147 212 214 248 353 365 366 370 428 429 436 440
STRING_CAST          : 327
STRING_VARNAME       : 361 438
SWITCH               : 37
THROW                : 56
TRAIT                : 111
TRY                  : 51
UNSET                : 49
UNSET_CAST           : 331
USE                  : 12 133 134 140 141 272
VAR                  : 153
VARIABLE             : 52 96 101 102 142 143 144 145 172 173 174 175 176 177 178 179 239 274 275 276 277 434 435 436 442
WHILE                : 33 34
XOR                  : 296 410
XOR_EQUAL            : 286
YIELD                : 28 29
error                : 

Nonterminals, with rules where they appear

additional_catches   : 51 52
array_pair_list      : 252 253
assignment_list      : 78 199 200 204
assignment_list_element : 200 201
base_variable        : 191 192 207
base_variable_with_function_calls : 205 206
case_list            : 85 86 87 88 90 91
case_separator       : 90 91
class_constant       : 350 379
class_constant_declaration : 139 146
class_declaration_statement : 6 26
class_entry_type     : 109
class_name           : 173 175 177 179 185 212 213 216 229 231 365 385
class_name_constant  : 356 384
class_name_reference : 183
class_statement      : 135
class_statement_list : 109 110 135
class_variable_declaration : 132 138 142 144
common_scalar        : 351 378
compound_variable    : 237
constant_declaration : 19 20
constant_declarations : 11 19
ctor_arguments       : 183
declare_list         : 57 59
declare_statement    : 57
dim_offset           : 234 235 238 246
dynamic_class_name_reference : 186
dynamic_class_name_variable_properties : 191 193
dynamic_class_name_variable_property : 193
echo_expr_list       : 46 103
else_single          : 31
elseif_list          : 31 63
empty                : 3 23 53 55 62 64 66 68 72 81 89 115 121 123 130 136 151 155 168 171 194 197 203 221 223 242 245 254 264 268 273 360 388 396 432
encaps_list          : 219 352 353 357 431 433
encaps_var           : 431
encaps_var_offset    : 435
exit_or_die          : 344 345 346
expr                 : 29 31 32 33 34 36 37 39 41 43 48 56 63 67 74 75 90 98 103 104 181 182 184 198 199 216 217 231 232 236 238 240 241 247 249 257 259 260 261 261 262 263 263 269 278 279 280 281 282 283 284 285 286 287 288 289 289 290 290 291 291 292 292 293 293 294 294 295 295 296 296 297 297 298 298 299 299 300 300 301 301 302 302 303 303 304 304 305 305 306 306 307 307 308 308 309 309 310 310 311 311 312 312 313 313 314 315 316 317 318 319 319 319 320 320 325 326 327 328 329 330 331 332 336 337 338 339 340 341 346 347 348 349 437 438
extends_from         : 109
for_expr             : 35 35 35
for_statement        : 35
foreach_optional_arg : 36
foreach_statement    : 36
foreach_variable     : 36 82
fully_qualified_class_name : 52 116 124 133 134 140 141 148 149
function_call        : 208
function_call_parameter : 266 267
function_call_parameter_list : 196 209 210 211 212 213 214 215 216 217 218 220 266
function_declaration_statement : 5 25
global_var           : 94 95
global_var_list      : 44 94
implements_list      : 109
inner_statement      : 22
inner_statement_list : 22 30 32 51 52 54 61 67 69 71 77 84 90 91 108 156 271
interface_extends_list : 110
interface_list       : 120 148 150
is_reference         : 108 131 137 271
isset_variables      : 333 334
lexical_var_list     : 272 274 275
lexical_vars         : 271
maybe_finally        : 51
member_modifier      : 158 159
method_body          : 131 137
method_modifiers     : 131 137
method_or_not        : 184 205 224
multiple_encapsed    : 386 387
namespace_name       : 8 10 15 16 17 18 117 118 119 187 188 189 209 210 211 362 363 364 389 390 391 428
new_else_single      : 32
new_elseif_list      : 32 67
non_empty_array_pair_list : 255 256 257 260 261
non_empty_for_expr   : 73 74
non_empty_member_modifiers : 152 154 158
nowdoc               : 355 383
nowdoc_text_content  : 358 359
object_dim_list      : 243 246 247
object_property      : 184 191 195 205 224
parameter            : 169 170
parameter_list       : 108 131 137 169 271
possible_comma       : 255 397
reference_variable   : 228 233 235 236
scalar               : 251
scalar_heredoc       : 354
simple_indirect_reference : 225 227 250
start                : 0
statement            : 4 24 31 34 60 63 65 70 76 83
static_array_pair_list : 394 395
static_expr          : 21 146 147 398 399 400 401 403 403 404 404 405 405 406 406 407 407 408 408 409 409 410 410 411 411 412 412 413 413 414 414 415 415 416 416 417 417 418 418 419 419 420 420 421 421 422 422 423 423 424 424 425 425 426 426 427
static_heredoc       : 382
static_member        : 226
static_non_empty_array_pair_list : 397 398 400
static_scalar        : 58 59 101 142 143 176 177 178 179 392 393 400 401 402
static_var           : 99 100
static_var_list      : 45 99
switch_case_list     : 37
top_statement        : 2
top_statement_list   : 1 2 9 10
trait_member         : 126 127 128
trait_modifier       : 122
trait_modifiers_list : 122 133 140
trait_statement      : 129
trait_statement_list : 111 129
unset_variable       : 105 106
unset_variables      : 49 105
use_declaration      : 13 14
use_declarations     : 12 13
variable             : 79 80 97 107 180 181 182 202 234 256 258 260 262 270 278 279 280 281 282 283 284 285 286 287 288 321 322 323 324 334 335 439
variable_class_name  : 214 215 217 230 232 366
variable_modifiers   : 132 138
variable_name        : 243
variable_properties  : 205 222
variable_property    : 222
variable_without_objects : 213 215 218 229 230 244
visibility_modifier  : 127 128 163
while_statement      : 33

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . top_statement_list
    (2) top_statement_list -> . top_statement_list top_statement
    (3) top_statement_list -> . empty
    (443) empty -> .

    HALT_COMPILER   reduce using rule 443 (empty -> .)
    NAMESPACE       reduce using rule 443 (empty -> .)
    CONST           reduce using rule 443 (empty -> .)
    USE             reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    IF              reduce using rule 443 (empty -> .)
    WHILE           reduce using rule 443 (empty -> .)
    DO              reduce using rule 443 (empty -> .)
    FOR             reduce using rule 443 (empty -> .)
    FOREACH         reduce using rule 443 (empty -> .)
    SWITCH          reduce using rule 443 (empty -> .)
    BREAK           reduce using rule 443 (empty -> .)
    CONTINUE        reduce using rule 443 (empty -> .)
    RETURN          reduce using rule 443 (empty -> .)
    GLOBAL          reduce using rule 443 (empty -> .)
    STATIC          reduce using rule 443 (empty -> .)
    ECHO            reduce using rule 443 (empty -> .)
    INLINE_HTML     reduce using rule 443 (empty -> .)
    UNSET           reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    TRY             reduce using rule 443 (empty -> .)
    THROW           reduce using rule 443 (empty -> .)
    DECLARE         reduce using rule 443 (empty -> .)
    FUNCTION        reduce using rule 443 (empty -> .)
    INTERFACE       reduce using rule 443 (empty -> .)
    TRAIT           reduce using rule 443 (empty -> .)
    NEW             reduce using rule 443 (empty -> .)
    CLONE           reduce using rule 443 (empty -> .)
    LIST            reduce using rule 443 (empty -> .)
    ARRAY           reduce using rule 443 (empty -> .)
    LBRACKET        reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    NOT             reduce using rule 443 (empty -> .)
    BOOLEAN_NOT     reduce using rule 443 (empty -> .)
    INC             reduce using rule 443 (empty -> .)
    DEC             reduce using rule 443 (empty -> .)
    INT_CAST        reduce using rule 443 (empty -> .)
    DOUBLE_CAST     reduce using rule 443 (empty -> .)
    STRING_CAST     reduce using rule 443 (empty -> .)
    ARRAY_CAST      reduce using rule 443 (empty -> .)
    OBJECT_CAST     reduce using rule 443 (empty -> .)
    BOOL_CAST       reduce using rule 443 (empty -> .)
    UNSET_CAST      reduce using rule 443 (empty -> .)
    BINARY_CAST     reduce using rule 443 (empty -> .)
    ISSET           reduce using rule 443 (empty -> .)
    EMPTY           reduce using rule 443 (empty -> .)
    EVAL            reduce using rule 443 (empty -> .)
    INCLUDE         reduce using rule 443 (empty -> .)
    INCLUDE_ONCE    reduce using rule 443 (empty -> .)
    REQUIRE         reduce using rule 443 (empty -> .)
    REQUIRE_ONCE    reduce using rule 443 (empty -> .)
    PRINT           reduce using rule 443 (empty -> .)
    AT              reduce using rule 443 (empty -> .)
    LPAREN          reduce using rule 443 (empty -> .)
    CLASS           reduce using rule 443 (empty -> .)
    ABSTRACT        reduce using rule 443 (empty -> .)
    FINAL           reduce using rule 443 (empty -> .)
    QUOTE           reduce using rule 443 (empty -> .)
    STRING          reduce using rule 443 (empty -> .)
    STRING_VARNAME  reduce using rule 443 (empty -> .)
    NS_SEPARATOR    reduce using rule 443 (empty -> .)
    EXIT            reduce using rule 443 (empty -> .)
    DIE             reduce using rule 443 (empty -> .)
    LNUMBER         reduce using rule 443 (empty -> .)
    DNUMBER         reduce using rule 443 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 443 (empty -> .)
    LINE            reduce using rule 443 (empty -> .)
    FILE            reduce using rule 443 (empty -> .)
    DIR             reduce using rule 443 (empty -> .)
    CLASS_C         reduce using rule 443 (empty -> .)
    METHOD_C        reduce using rule 443 (empty -> .)
    FUNC_C          reduce using rule 443 (empty -> .)
    NS_C            reduce using rule 443 (empty -> .)
    START_HEREDOC   reduce using rule 443 (empty -> .)
    START_NOWDOC    reduce using rule 443 (empty -> .)
    BACKTICK        reduce using rule 443 (empty -> .)
    DOLLAR          reduce using rule 443 (empty -> .)
    VARIABLE        reduce using rule 443 (empty -> .)
    $end            reduce using rule 443 (empty -> .)

    start                          shift and go to state 1
    top_statement_list             shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> start .



state 2

    (1) start -> top_statement_list .
    (2) top_statement_list -> top_statement_list . top_statement
    (4) top_statement -> . statement
    (5) top_statement -> . function_declaration_statement
    (6) top_statement -> . class_declaration_statement
    (7) top_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (8) top_statement -> . NAMESPACE namespace_name SEMI
    (9) top_statement -> . NAMESPACE LBRACE top_statement_list RBRACE
    (10) top_statement -> . NAMESPACE namespace_name LBRACE top_statement_list RBRACE
    (11) top_statement -> . CONST constant_declarations SEMI
    (12) top_statement -> . USE use_declarations SEMI
    (30) statement -> . LBRACE inner_statement_list RBRACE
    (31) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (33) statement -> . WHILE LPAREN expr RPAREN while_statement
    (34) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (35) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (36) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (37) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (38) statement -> . BREAK SEMI
    (39) statement -> . BREAK expr SEMI
    (40) statement -> . CONTINUE SEMI
    (41) statement -> . CONTINUE expr SEMI
    (42) statement -> . RETURN SEMI
    (43) statement -> . RETURN expr SEMI
    (44) statement -> . GLOBAL global_var_list SEMI
    (45) statement -> . STATIC static_var_list SEMI
    (46) statement -> . ECHO echo_expr_list SEMI
    (47) statement -> . INLINE_HTML
    (48) statement -> . expr SEMI
    (49) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (50) statement -> . SEMI
    (51) statement -> . TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
    (56) statement -> . THROW expr SEMI
    (57) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (108) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (109) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (110) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (111) class_declaration_statement -> . TRAIT STRING LBRACE trait_statement_list RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (112) class_entry_type -> . CLASS
    (113) class_entry_type -> . ABSTRACT CLASS
    (114) class_entry_type -> . FINAL CLASS
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    $end            reduce using rule 1 (start -> top_statement_list .)
    HALT_COMPILER   shift and go to state 8
    NAMESPACE       shift and go to state 11
    CONST           shift and go to state 14
    USE             shift and go to state 15
    LBRACE          shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    FOREACH         shift and go to state 21
    SWITCH          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    GLOBAL          shift and go to state 26
    STATIC          shift and go to state 27
    ECHO            shift and go to state 28
    INLINE_HTML     shift and go to state 29
    UNSET           shift and go to state 30
    SEMI            shift and go to state 10
    TRY             shift and go to state 31
    THROW           shift and go to state 32
    DECLARE         shift and go to state 33
    FUNCTION        shift and go to state 34
    INTERFACE       shift and go to state 37
    TRAIT           shift and go to state 38
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    CLASS           shift and go to state 70
    ABSTRACT        shift and go to state 71
    FINAL           shift and go to state 72
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    top_statement                  shift and go to state 4
    statement                      shift and go to state 5
    function_declaration_statement shift and go to state 6
    class_declaration_statement    shift and go to state 7
    namespace_name                 shift and go to state 12
    expr                           shift and go to state 17
    class_entry_type               shift and go to state 36
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 3

    (3) top_statement_list -> empty .

    HALT_COMPILER   reduce using rule 3 (top_statement_list -> empty .)
    NAMESPACE       reduce using rule 3 (top_statement_list -> empty .)
    CONST           reduce using rule 3 (top_statement_list -> empty .)
    USE             reduce using rule 3 (top_statement_list -> empty .)
    LBRACE          reduce using rule 3 (top_statement_list -> empty .)
    IF              reduce using rule 3 (top_statement_list -> empty .)
    WHILE           reduce using rule 3 (top_statement_list -> empty .)
    DO              reduce using rule 3 (top_statement_list -> empty .)
    FOR             reduce using rule 3 (top_statement_list -> empty .)
    FOREACH         reduce using rule 3 (top_statement_list -> empty .)
    SWITCH          reduce using rule 3 (top_statement_list -> empty .)
    BREAK           reduce using rule 3 (top_statement_list -> empty .)
    CONTINUE        reduce using rule 3 (top_statement_list -> empty .)
    RETURN          reduce using rule 3 (top_statement_list -> empty .)
    GLOBAL          reduce using rule 3 (top_statement_list -> empty .)
    STATIC          reduce using rule 3 (top_statement_list -> empty .)
    ECHO            reduce using rule 3 (top_statement_list -> empty .)
    INLINE_HTML     reduce using rule 3 (top_statement_list -> empty .)
    UNSET           reduce using rule 3 (top_statement_list -> empty .)
    SEMI            reduce using rule 3 (top_statement_list -> empty .)
    TRY             reduce using rule 3 (top_statement_list -> empty .)
    THROW           reduce using rule 3 (top_statement_list -> empty .)
    DECLARE         reduce using rule 3 (top_statement_list -> empty .)
    FUNCTION        reduce using rule 3 (top_statement_list -> empty .)
    INTERFACE       reduce using rule 3 (top_statement_list -> empty .)
    TRAIT           reduce using rule 3 (top_statement_list -> empty .)
    NEW             reduce using rule 3 (top_statement_list -> empty .)
    CLONE           reduce using rule 3 (top_statement_list -> empty .)
    LIST            reduce using rule 3 (top_statement_list -> empty .)
    ARRAY           reduce using rule 3 (top_statement_list -> empty .)
    LBRACKET        reduce using rule 3 (top_statement_list -> empty .)
    PLUS            reduce using rule 3 (top_statement_list -> empty .)
    MINUS           reduce using rule 3 (top_statement_list -> empty .)
    NOT             reduce using rule 3 (top_statement_list -> empty .)
    BOOLEAN_NOT     reduce using rule 3 (top_statement_list -> empty .)
    INC             reduce using rule 3 (top_statement_list -> empty .)
    DEC             reduce using rule 3 (top_statement_list -> empty .)
    INT_CAST        reduce using rule 3 (top_statement_list -> empty .)
    DOUBLE_CAST     reduce using rule 3 (top_statement_list -> empty .)
    STRING_CAST     reduce using rule 3 (top_statement_list -> empty .)
    ARRAY_CAST      reduce using rule 3 (top_statement_list -> empty .)
    OBJECT_CAST     reduce using rule 3 (top_statement_list -> empty .)
    BOOL_CAST       reduce using rule 3 (top_statement_list -> empty .)
    UNSET_CAST      reduce using rule 3 (top_statement_list -> empty .)
    BINARY_CAST     reduce using rule 3 (top_statement_list -> empty .)
    ISSET           reduce using rule 3 (top_statement_list -> empty .)
    EMPTY           reduce using rule 3 (top_statement_list -> empty .)
    EVAL            reduce using rule 3 (top_statement_list -> empty .)
    INCLUDE         reduce using rule 3 (top_statement_list -> empty .)
    INCLUDE_ONCE    reduce using rule 3 (top_statement_list -> empty .)
    REQUIRE         reduce using rule 3 (top_statement_list -> empty .)
    REQUIRE_ONCE    reduce using rule 3 (top_statement_list -> empty .)
    PRINT           reduce using rule 3 (top_statement_list -> empty .)
    AT              reduce using rule 3 (top_statement_list -> empty .)
    LPAREN          reduce using rule 3 (top_statement_list -> empty .)
    CLASS           reduce using rule 3 (top_statement_list -> empty .)
    ABSTRACT        reduce using rule 3 (top_statement_list -> empty .)
    FINAL           reduce using rule 3 (top_statement_list -> empty .)
    QUOTE           reduce using rule 3 (top_statement_list -> empty .)
    STRING          reduce using rule 3 (top_statement_list -> empty .)
    STRING_VARNAME  reduce using rule 3 (top_statement_list -> empty .)
    NS_SEPARATOR    reduce using rule 3 (top_statement_list -> empty .)
    EXIT            reduce using rule 3 (top_statement_list -> empty .)
    DIE             reduce using rule 3 (top_statement_list -> empty .)
    LNUMBER         reduce using rule 3 (top_statement_list -> empty .)
    DNUMBER         reduce using rule 3 (top_statement_list -> empty .)
    CONSTANT_ENCAPSED_STRING reduce using rule 3 (top_statement_list -> empty .)
    LINE            reduce using rule 3 (top_statement_list -> empty .)
    FILE            reduce using rule 3 (top_statement_list -> empty .)
    DIR             reduce using rule 3 (top_statement_list -> empty .)
    CLASS_C         reduce using rule 3 (top_statement_list -> empty .)
    METHOD_C        reduce using rule 3 (top_statement_list -> empty .)
    FUNC_C          reduce using rule 3 (top_statement_list -> empty .)
    NS_C            reduce using rule 3 (top_statement_list -> empty .)
    START_HEREDOC   reduce using rule 3 (top_statement_list -> empty .)
    START_NOWDOC    reduce using rule 3 (top_statement_list -> empty .)
    BACKTICK        reduce using rule 3 (top_statement_list -> empty .)
    DOLLAR          reduce using rule 3 (top_statement_list -> empty .)
    VARIABLE        reduce using rule 3 (top_statement_list -> empty .)
    $end            reduce using rule 3 (top_statement_list -> empty .)
    RBRACE          reduce using rule 3 (top_statement_list -> empty .)


state 4

    (2) top_statement_list -> top_statement_list top_statement .

    HALT_COMPILER   reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    NAMESPACE       reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    CONST           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    USE             reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    LBRACE          reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    IF              reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    WHILE           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    DO              reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    FOR             reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    FOREACH         reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    SWITCH          reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    BREAK           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    CONTINUE        reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    RETURN          reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    GLOBAL          reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    STATIC          reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    ECHO            reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    INLINE_HTML     reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    UNSET           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    SEMI            reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    TRY             reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    THROW           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    DECLARE         reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    FUNCTION        reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    INTERFACE       reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    TRAIT           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    NEW             reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    CLONE           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    LIST            reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    ARRAY           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    LBRACKET        reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    PLUS            reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    MINUS           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    NOT             reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    BOOLEAN_NOT     reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    INC             reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    DEC             reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    INT_CAST        reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    DOUBLE_CAST     reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    STRING_CAST     reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    ARRAY_CAST      reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    OBJECT_CAST     reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    BOOL_CAST       reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    UNSET_CAST      reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    BINARY_CAST     reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    ISSET           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    EMPTY           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    EVAL            reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    INCLUDE         reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    INCLUDE_ONCE    reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    REQUIRE         reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    REQUIRE_ONCE    reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    PRINT           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    AT              reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    LPAREN          reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    CLASS           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    ABSTRACT        reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    FINAL           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    QUOTE           reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    STRING          reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    STRING_VARNAME  reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    NS_SEPARATOR    reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    EXIT            reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    DIE             reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    LNUMBER         reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    DNUMBER         reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    LINE            reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    FILE            reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    DIR             reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    CLASS_C         reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    METHOD_C        reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    FUNC_C          reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    NS_C            reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    START_HEREDOC   reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    START_NOWDOC    reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    BACKTICK        reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    DOLLAR          reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    VARIABLE        reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    $end            reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)
    RBRACE          reduce using rule 2 (top_statement_list -> top_statement_list top_statement .)


state 5

    (4) top_statement -> statement .

    HALT_COMPILER   reduce using rule 4 (top_statement -> statement .)
    NAMESPACE       reduce using rule 4 (top_statement -> statement .)
    CONST           reduce using rule 4 (top_statement -> statement .)
    USE             reduce using rule 4 (top_statement -> statement .)
    LBRACE          reduce using rule 4 (top_statement -> statement .)
    IF              reduce using rule 4 (top_statement -> statement .)
    WHILE           reduce using rule 4 (top_statement -> statement .)
    DO              reduce using rule 4 (top_statement -> statement .)
    FOR             reduce using rule 4 (top_statement -> statement .)
    FOREACH         reduce using rule 4 (top_statement -> statement .)
    SWITCH          reduce using rule 4 (top_statement -> statement .)
    BREAK           reduce using rule 4 (top_statement -> statement .)
    CONTINUE        reduce using rule 4 (top_statement -> statement .)
    RETURN          reduce using rule 4 (top_statement -> statement .)
    GLOBAL          reduce using rule 4 (top_statement -> statement .)
    STATIC          reduce using rule 4 (top_statement -> statement .)
    ECHO            reduce using rule 4 (top_statement -> statement .)
    INLINE_HTML     reduce using rule 4 (top_statement -> statement .)
    UNSET           reduce using rule 4 (top_statement -> statement .)
    SEMI            reduce using rule 4 (top_statement -> statement .)
    TRY             reduce using rule 4 (top_statement -> statement .)
    THROW           reduce using rule 4 (top_statement -> statement .)
    DECLARE         reduce using rule 4 (top_statement -> statement .)
    FUNCTION        reduce using rule 4 (top_statement -> statement .)
    INTERFACE       reduce using rule 4 (top_statement -> statement .)
    TRAIT           reduce using rule 4 (top_statement -> statement .)
    NEW             reduce using rule 4 (top_statement -> statement .)
    CLONE           reduce using rule 4 (top_statement -> statement .)
    LIST            reduce using rule 4 (top_statement -> statement .)
    ARRAY           reduce using rule 4 (top_statement -> statement .)
    LBRACKET        reduce using rule 4 (top_statement -> statement .)
    PLUS            reduce using rule 4 (top_statement -> statement .)
    MINUS           reduce using rule 4 (top_statement -> statement .)
    NOT             reduce using rule 4 (top_statement -> statement .)
    BOOLEAN_NOT     reduce using rule 4 (top_statement -> statement .)
    INC             reduce using rule 4 (top_statement -> statement .)
    DEC             reduce using rule 4 (top_statement -> statement .)
    INT_CAST        reduce using rule 4 (top_statement -> statement .)
    DOUBLE_CAST     reduce using rule 4 (top_statement -> statement .)
    STRING_CAST     reduce using rule 4 (top_statement -> statement .)
    ARRAY_CAST      reduce using rule 4 (top_statement -> statement .)
    OBJECT_CAST     reduce using rule 4 (top_statement -> statement .)
    BOOL_CAST       reduce using rule 4 (top_statement -> statement .)
    UNSET_CAST      reduce using rule 4 (top_statement -> statement .)
    BINARY_CAST     reduce using rule 4 (top_statement -> statement .)
    ISSET           reduce using rule 4 (top_statement -> statement .)
    EMPTY           reduce using rule 4 (top_statement -> statement .)
    EVAL            reduce using rule 4 (top_statement -> statement .)
    INCLUDE         reduce using rule 4 (top_statement -> statement .)
    INCLUDE_ONCE    reduce using rule 4 (top_statement -> statement .)
    REQUIRE         reduce using rule 4 (top_statement -> statement .)
    REQUIRE_ONCE    reduce using rule 4 (top_statement -> statement .)
    PRINT           reduce using rule 4 (top_statement -> statement .)
    AT              reduce using rule 4 (top_statement -> statement .)
    LPAREN          reduce using rule 4 (top_statement -> statement .)
    CLASS           reduce using rule 4 (top_statement -> statement .)
    ABSTRACT        reduce using rule 4 (top_statement -> statement .)
    FINAL           reduce using rule 4 (top_statement -> statement .)
    QUOTE           reduce using rule 4 (top_statement -> statement .)
    STRING          reduce using rule 4 (top_statement -> statement .)
    STRING_VARNAME  reduce using rule 4 (top_statement -> statement .)
    NS_SEPARATOR    reduce using rule 4 (top_statement -> statement .)
    EXIT            reduce using rule 4 (top_statement -> statement .)
    DIE             reduce using rule 4 (top_statement -> statement .)
    LNUMBER         reduce using rule 4 (top_statement -> statement .)
    DNUMBER         reduce using rule 4 (top_statement -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 4 (top_statement -> statement .)
    LINE            reduce using rule 4 (top_statement -> statement .)
    FILE            reduce using rule 4 (top_statement -> statement .)
    DIR             reduce using rule 4 (top_statement -> statement .)
    CLASS_C         reduce using rule 4 (top_statement -> statement .)
    METHOD_C        reduce using rule 4 (top_statement -> statement .)
    FUNC_C          reduce using rule 4 (top_statement -> statement .)
    NS_C            reduce using rule 4 (top_statement -> statement .)
    START_HEREDOC   reduce using rule 4 (top_statement -> statement .)
    START_NOWDOC    reduce using rule 4 (top_statement -> statement .)
    BACKTICK        reduce using rule 4 (top_statement -> statement .)
    DOLLAR          reduce using rule 4 (top_statement -> statement .)
    VARIABLE        reduce using rule 4 (top_statement -> statement .)
    $end            reduce using rule 4 (top_statement -> statement .)
    RBRACE          reduce using rule 4 (top_statement -> statement .)


state 6

    (5) top_statement -> function_declaration_statement .

    HALT_COMPILER   reduce using rule 5 (top_statement -> function_declaration_statement .)
    NAMESPACE       reduce using rule 5 (top_statement -> function_declaration_statement .)
    CONST           reduce using rule 5 (top_statement -> function_declaration_statement .)
    USE             reduce using rule 5 (top_statement -> function_declaration_statement .)
    LBRACE          reduce using rule 5 (top_statement -> function_declaration_statement .)
    IF              reduce using rule 5 (top_statement -> function_declaration_statement .)
    WHILE           reduce using rule 5 (top_statement -> function_declaration_statement .)
    DO              reduce using rule 5 (top_statement -> function_declaration_statement .)
    FOR             reduce using rule 5 (top_statement -> function_declaration_statement .)
    FOREACH         reduce using rule 5 (top_statement -> function_declaration_statement .)
    SWITCH          reduce using rule 5 (top_statement -> function_declaration_statement .)
    BREAK           reduce using rule 5 (top_statement -> function_declaration_statement .)
    CONTINUE        reduce using rule 5 (top_statement -> function_declaration_statement .)
    RETURN          reduce using rule 5 (top_statement -> function_declaration_statement .)
    GLOBAL          reduce using rule 5 (top_statement -> function_declaration_statement .)
    STATIC          reduce using rule 5 (top_statement -> function_declaration_statement .)
    ECHO            reduce using rule 5 (top_statement -> function_declaration_statement .)
    INLINE_HTML     reduce using rule 5 (top_statement -> function_declaration_statement .)
    UNSET           reduce using rule 5 (top_statement -> function_declaration_statement .)
    SEMI            reduce using rule 5 (top_statement -> function_declaration_statement .)
    TRY             reduce using rule 5 (top_statement -> function_declaration_statement .)
    THROW           reduce using rule 5 (top_statement -> function_declaration_statement .)
    DECLARE         reduce using rule 5 (top_statement -> function_declaration_statement .)
    FUNCTION        reduce using rule 5 (top_statement -> function_declaration_statement .)
    INTERFACE       reduce using rule 5 (top_statement -> function_declaration_statement .)
    TRAIT           reduce using rule 5 (top_statement -> function_declaration_statement .)
    NEW             reduce using rule 5 (top_statement -> function_declaration_statement .)
    CLONE           reduce using rule 5 (top_statement -> function_declaration_statement .)
    LIST            reduce using rule 5 (top_statement -> function_declaration_statement .)
    ARRAY           reduce using rule 5 (top_statement -> function_declaration_statement .)
    LBRACKET        reduce using rule 5 (top_statement -> function_declaration_statement .)
    PLUS            reduce using rule 5 (top_statement -> function_declaration_statement .)
    MINUS           reduce using rule 5 (top_statement -> function_declaration_statement .)
    NOT             reduce using rule 5 (top_statement -> function_declaration_statement .)
    BOOLEAN_NOT     reduce using rule 5 (top_statement -> function_declaration_statement .)
    INC             reduce using rule 5 (top_statement -> function_declaration_statement .)
    DEC             reduce using rule 5 (top_statement -> function_declaration_statement .)
    INT_CAST        reduce using rule 5 (top_statement -> function_declaration_statement .)
    DOUBLE_CAST     reduce using rule 5 (top_statement -> function_declaration_statement .)
    STRING_CAST     reduce using rule 5 (top_statement -> function_declaration_statement .)
    ARRAY_CAST      reduce using rule 5 (top_statement -> function_declaration_statement .)
    OBJECT_CAST     reduce using rule 5 (top_statement -> function_declaration_statement .)
    BOOL_CAST       reduce using rule 5 (top_statement -> function_declaration_statement .)
    UNSET_CAST      reduce using rule 5 (top_statement -> function_declaration_statement .)
    BINARY_CAST     reduce using rule 5 (top_statement -> function_declaration_statement .)
    ISSET           reduce using rule 5 (top_statement -> function_declaration_statement .)
    EMPTY           reduce using rule 5 (top_statement -> function_declaration_statement .)
    EVAL            reduce using rule 5 (top_statement -> function_declaration_statement .)
    INCLUDE         reduce using rule 5 (top_statement -> function_declaration_statement .)
    INCLUDE_ONCE    reduce using rule 5 (top_statement -> function_declaration_statement .)
    REQUIRE         reduce using rule 5 (top_statement -> function_declaration_statement .)
    REQUIRE_ONCE    reduce using rule 5 (top_statement -> function_declaration_statement .)
    PRINT           reduce using rule 5 (top_statement -> function_declaration_statement .)
    AT              reduce using rule 5 (top_statement -> function_declaration_statement .)
    LPAREN          reduce using rule 5 (top_statement -> function_declaration_statement .)
    CLASS           reduce using rule 5 (top_statement -> function_declaration_statement .)
    ABSTRACT        reduce using rule 5 (top_statement -> function_declaration_statement .)
    FINAL           reduce using rule 5 (top_statement -> function_declaration_statement .)
    QUOTE           reduce using rule 5 (top_statement -> function_declaration_statement .)
    STRING          reduce using rule 5 (top_statement -> function_declaration_statement .)
    STRING_VARNAME  reduce using rule 5 (top_statement -> function_declaration_statement .)
    NS_SEPARATOR    reduce using rule 5 (top_statement -> function_declaration_statement .)
    EXIT            reduce using rule 5 (top_statement -> function_declaration_statement .)
    DIE             reduce using rule 5 (top_statement -> function_declaration_statement .)
    LNUMBER         reduce using rule 5 (top_statement -> function_declaration_statement .)
    DNUMBER         reduce using rule 5 (top_statement -> function_declaration_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 5 (top_statement -> function_declaration_statement .)
    LINE            reduce using rule 5 (top_statement -> function_declaration_statement .)
    FILE            reduce using rule 5 (top_statement -> function_declaration_statement .)
    DIR             reduce using rule 5 (top_statement -> function_declaration_statement .)
    CLASS_C         reduce using rule 5 (top_statement -> function_declaration_statement .)
    METHOD_C        reduce using rule 5 (top_statement -> function_declaration_statement .)
    FUNC_C          reduce using rule 5 (top_statement -> function_declaration_statement .)
    NS_C            reduce using rule 5 (top_statement -> function_declaration_statement .)
    START_HEREDOC   reduce using rule 5 (top_statement -> function_declaration_statement .)
    START_NOWDOC    reduce using rule 5 (top_statement -> function_declaration_statement .)
    BACKTICK        reduce using rule 5 (top_statement -> function_declaration_statement .)
    DOLLAR          reduce using rule 5 (top_statement -> function_declaration_statement .)
    VARIABLE        reduce using rule 5 (top_statement -> function_declaration_statement .)
    $end            reduce using rule 5 (top_statement -> function_declaration_statement .)
    RBRACE          reduce using rule 5 (top_statement -> function_declaration_statement .)


state 7

    (6) top_statement -> class_declaration_statement .

    HALT_COMPILER   reduce using rule 6 (top_statement -> class_declaration_statement .)
    NAMESPACE       reduce using rule 6 (top_statement -> class_declaration_statement .)
    CONST           reduce using rule 6 (top_statement -> class_declaration_statement .)
    USE             reduce using rule 6 (top_statement -> class_declaration_statement .)
    LBRACE          reduce using rule 6 (top_statement -> class_declaration_statement .)
    IF              reduce using rule 6 (top_statement -> class_declaration_statement .)
    WHILE           reduce using rule 6 (top_statement -> class_declaration_statement .)
    DO              reduce using rule 6 (top_statement -> class_declaration_statement .)
    FOR             reduce using rule 6 (top_statement -> class_declaration_statement .)
    FOREACH         reduce using rule 6 (top_statement -> class_declaration_statement .)
    SWITCH          reduce using rule 6 (top_statement -> class_declaration_statement .)
    BREAK           reduce using rule 6 (top_statement -> class_declaration_statement .)
    CONTINUE        reduce using rule 6 (top_statement -> class_declaration_statement .)
    RETURN          reduce using rule 6 (top_statement -> class_declaration_statement .)
    GLOBAL          reduce using rule 6 (top_statement -> class_declaration_statement .)
    STATIC          reduce using rule 6 (top_statement -> class_declaration_statement .)
    ECHO            reduce using rule 6 (top_statement -> class_declaration_statement .)
    INLINE_HTML     reduce using rule 6 (top_statement -> class_declaration_statement .)
    UNSET           reduce using rule 6 (top_statement -> class_declaration_statement .)
    SEMI            reduce using rule 6 (top_statement -> class_declaration_statement .)
    TRY             reduce using rule 6 (top_statement -> class_declaration_statement .)
    THROW           reduce using rule 6 (top_statement -> class_declaration_statement .)
    DECLARE         reduce using rule 6 (top_statement -> class_declaration_statement .)
    FUNCTION        reduce using rule 6 (top_statement -> class_declaration_statement .)
    INTERFACE       reduce using rule 6 (top_statement -> class_declaration_statement .)
    TRAIT           reduce using rule 6 (top_statement -> class_declaration_statement .)
    NEW             reduce using rule 6 (top_statement -> class_declaration_statement .)
    CLONE           reduce using rule 6 (top_statement -> class_declaration_statement .)
    LIST            reduce using rule 6 (top_statement -> class_declaration_statement .)
    ARRAY           reduce using rule 6 (top_statement -> class_declaration_statement .)
    LBRACKET        reduce using rule 6 (top_statement -> class_declaration_statement .)
    PLUS            reduce using rule 6 (top_statement -> class_declaration_statement .)
    MINUS           reduce using rule 6 (top_statement -> class_declaration_statement .)
    NOT             reduce using rule 6 (top_statement -> class_declaration_statement .)
    BOOLEAN_NOT     reduce using rule 6 (top_statement -> class_declaration_statement .)
    INC             reduce using rule 6 (top_statement -> class_declaration_statement .)
    DEC             reduce using rule 6 (top_statement -> class_declaration_statement .)
    INT_CAST        reduce using rule 6 (top_statement -> class_declaration_statement .)
    DOUBLE_CAST     reduce using rule 6 (top_statement -> class_declaration_statement .)
    STRING_CAST     reduce using rule 6 (top_statement -> class_declaration_statement .)
    ARRAY_CAST      reduce using rule 6 (top_statement -> class_declaration_statement .)
    OBJECT_CAST     reduce using rule 6 (top_statement -> class_declaration_statement .)
    BOOL_CAST       reduce using rule 6 (top_statement -> class_declaration_statement .)
    UNSET_CAST      reduce using rule 6 (top_statement -> class_declaration_statement .)
    BINARY_CAST     reduce using rule 6 (top_statement -> class_declaration_statement .)
    ISSET           reduce using rule 6 (top_statement -> class_declaration_statement .)
    EMPTY           reduce using rule 6 (top_statement -> class_declaration_statement .)
    EVAL            reduce using rule 6 (top_statement -> class_declaration_statement .)
    INCLUDE         reduce using rule 6 (top_statement -> class_declaration_statement .)
    INCLUDE_ONCE    reduce using rule 6 (top_statement -> class_declaration_statement .)
    REQUIRE         reduce using rule 6 (top_statement -> class_declaration_statement .)
    REQUIRE_ONCE    reduce using rule 6 (top_statement -> class_declaration_statement .)
    PRINT           reduce using rule 6 (top_statement -> class_declaration_statement .)
    AT              reduce using rule 6 (top_statement -> class_declaration_statement .)
    LPAREN          reduce using rule 6 (top_statement -> class_declaration_statement .)
    CLASS           reduce using rule 6 (top_statement -> class_declaration_statement .)
    ABSTRACT        reduce using rule 6 (top_statement -> class_declaration_statement .)
    FINAL           reduce using rule 6 (top_statement -> class_declaration_statement .)
    QUOTE           reduce using rule 6 (top_statement -> class_declaration_statement .)
    STRING          reduce using rule 6 (top_statement -> class_declaration_statement .)
    STRING_VARNAME  reduce using rule 6 (top_statement -> class_declaration_statement .)
    NS_SEPARATOR    reduce using rule 6 (top_statement -> class_declaration_statement .)
    EXIT            reduce using rule 6 (top_statement -> class_declaration_statement .)
    DIE             reduce using rule 6 (top_statement -> class_declaration_statement .)
    LNUMBER         reduce using rule 6 (top_statement -> class_declaration_statement .)
    DNUMBER         reduce using rule 6 (top_statement -> class_declaration_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 6 (top_statement -> class_declaration_statement .)
    LINE            reduce using rule 6 (top_statement -> class_declaration_statement .)
    FILE            reduce using rule 6 (top_statement -> class_declaration_statement .)
    DIR             reduce using rule 6 (top_statement -> class_declaration_statement .)
    CLASS_C         reduce using rule 6 (top_statement -> class_declaration_statement .)
    METHOD_C        reduce using rule 6 (top_statement -> class_declaration_statement .)
    FUNC_C          reduce using rule 6 (top_statement -> class_declaration_statement .)
    NS_C            reduce using rule 6 (top_statement -> class_declaration_statement .)
    START_HEREDOC   reduce using rule 6 (top_statement -> class_declaration_statement .)
    START_NOWDOC    reduce using rule 6 (top_statement -> class_declaration_statement .)
    BACKTICK        reduce using rule 6 (top_statement -> class_declaration_statement .)
    DOLLAR          reduce using rule 6 (top_statement -> class_declaration_statement .)
    VARIABLE        reduce using rule 6 (top_statement -> class_declaration_statement .)
    $end            reduce using rule 6 (top_statement -> class_declaration_statement .)
    RBRACE          reduce using rule 6 (top_statement -> class_declaration_statement .)


state 8

    (7) top_statement -> HALT_COMPILER . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 108


state 9

    (349) expr -> LPAREN . expr RPAREN
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 109
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 10

    (50) statement -> SEMI .

    HALT_COMPILER   reduce using rule 50 (statement -> SEMI .)
    NAMESPACE       reduce using rule 50 (statement -> SEMI .)
    CONST           reduce using rule 50 (statement -> SEMI .)
    USE             reduce using rule 50 (statement -> SEMI .)
    LBRACE          reduce using rule 50 (statement -> SEMI .)
    IF              reduce using rule 50 (statement -> SEMI .)
    WHILE           reduce using rule 50 (statement -> SEMI .)
    DO              reduce using rule 50 (statement -> SEMI .)
    FOR             reduce using rule 50 (statement -> SEMI .)
    FOREACH         reduce using rule 50 (statement -> SEMI .)
    SWITCH          reduce using rule 50 (statement -> SEMI .)
    BREAK           reduce using rule 50 (statement -> SEMI .)
    CONTINUE        reduce using rule 50 (statement -> SEMI .)
    RETURN          reduce using rule 50 (statement -> SEMI .)
    GLOBAL          reduce using rule 50 (statement -> SEMI .)
    STATIC          reduce using rule 50 (statement -> SEMI .)
    ECHO            reduce using rule 50 (statement -> SEMI .)
    INLINE_HTML     reduce using rule 50 (statement -> SEMI .)
    UNSET           reduce using rule 50 (statement -> SEMI .)
    SEMI            reduce using rule 50 (statement -> SEMI .)
    TRY             reduce using rule 50 (statement -> SEMI .)
    THROW           reduce using rule 50 (statement -> SEMI .)
    DECLARE         reduce using rule 50 (statement -> SEMI .)
    FUNCTION        reduce using rule 50 (statement -> SEMI .)
    INTERFACE       reduce using rule 50 (statement -> SEMI .)
    TRAIT           reduce using rule 50 (statement -> SEMI .)
    NEW             reduce using rule 50 (statement -> SEMI .)
    CLONE           reduce using rule 50 (statement -> SEMI .)
    LIST            reduce using rule 50 (statement -> SEMI .)
    ARRAY           reduce using rule 50 (statement -> SEMI .)
    LBRACKET        reduce using rule 50 (statement -> SEMI .)
    PLUS            reduce using rule 50 (statement -> SEMI .)
    MINUS           reduce using rule 50 (statement -> SEMI .)
    NOT             reduce using rule 50 (statement -> SEMI .)
    BOOLEAN_NOT     reduce using rule 50 (statement -> SEMI .)
    INC             reduce using rule 50 (statement -> SEMI .)
    DEC             reduce using rule 50 (statement -> SEMI .)
    INT_CAST        reduce using rule 50 (statement -> SEMI .)
    DOUBLE_CAST     reduce using rule 50 (statement -> SEMI .)
    STRING_CAST     reduce using rule 50 (statement -> SEMI .)
    ARRAY_CAST      reduce using rule 50 (statement -> SEMI .)
    OBJECT_CAST     reduce using rule 50 (statement -> SEMI .)
    BOOL_CAST       reduce using rule 50 (statement -> SEMI .)
    UNSET_CAST      reduce using rule 50 (statement -> SEMI .)
    BINARY_CAST     reduce using rule 50 (statement -> SEMI .)
    ISSET           reduce using rule 50 (statement -> SEMI .)
    EMPTY           reduce using rule 50 (statement -> SEMI .)
    EVAL            reduce using rule 50 (statement -> SEMI .)
    INCLUDE         reduce using rule 50 (statement -> SEMI .)
    INCLUDE_ONCE    reduce using rule 50 (statement -> SEMI .)
    REQUIRE         reduce using rule 50 (statement -> SEMI .)
    REQUIRE_ONCE    reduce using rule 50 (statement -> SEMI .)
    PRINT           reduce using rule 50 (statement -> SEMI .)
    AT              reduce using rule 50 (statement -> SEMI .)
    LPAREN          reduce using rule 50 (statement -> SEMI .)
    CLASS           reduce using rule 50 (statement -> SEMI .)
    ABSTRACT        reduce using rule 50 (statement -> SEMI .)
    FINAL           reduce using rule 50 (statement -> SEMI .)
    QUOTE           reduce using rule 50 (statement -> SEMI .)
    STRING          reduce using rule 50 (statement -> SEMI .)
    STRING_VARNAME  reduce using rule 50 (statement -> SEMI .)
    NS_SEPARATOR    reduce using rule 50 (statement -> SEMI .)
    EXIT            reduce using rule 50 (statement -> SEMI .)
    DIE             reduce using rule 50 (statement -> SEMI .)
    LNUMBER         reduce using rule 50 (statement -> SEMI .)
    DNUMBER         reduce using rule 50 (statement -> SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 50 (statement -> SEMI .)
    LINE            reduce using rule 50 (statement -> SEMI .)
    FILE            reduce using rule 50 (statement -> SEMI .)
    DIR             reduce using rule 50 (statement -> SEMI .)
    CLASS_C         reduce using rule 50 (statement -> SEMI .)
    METHOD_C        reduce using rule 50 (statement -> SEMI .)
    FUNC_C          reduce using rule 50 (statement -> SEMI .)
    NS_C            reduce using rule 50 (statement -> SEMI .)
    START_HEREDOC   reduce using rule 50 (statement -> SEMI .)
    START_NOWDOC    reduce using rule 50 (statement -> SEMI .)
    BACKTICK        reduce using rule 50 (statement -> SEMI .)
    DOLLAR          reduce using rule 50 (statement -> SEMI .)
    VARIABLE        reduce using rule 50 (statement -> SEMI .)
    $end            reduce using rule 50 (statement -> SEMI .)
    RBRACE          reduce using rule 50 (statement -> SEMI .)
    YIELD           reduce using rule 50 (statement -> SEMI .)
    ELSEIF          reduce using rule 50 (statement -> SEMI .)
    ELSE            reduce using rule 50 (statement -> SEMI .)
    ENDIF           reduce using rule 50 (statement -> SEMI .)
    ENDWHILE        reduce using rule 50 (statement -> SEMI .)
    ENDDECLARE      reduce using rule 50 (statement -> SEMI .)
    ENDFOREACH      reduce using rule 50 (statement -> SEMI .)
    CASE            reduce using rule 50 (statement -> SEMI .)
    DEFAULT         reduce using rule 50 (statement -> SEMI .)
    ENDSWITCH       reduce using rule 50 (statement -> SEMI .)
    ENDFOR          reduce using rule 50 (statement -> SEMI .)


state 11

    (8) top_statement -> NAMESPACE . namespace_name SEMI
    (9) top_statement -> NAMESPACE . LBRACE top_statement_list RBRACE
    (10) top_statement -> NAMESPACE . namespace_name LBRACE top_statement_list RBRACE
    (364) scalar -> NAMESPACE . NS_SEPARATOR namespace_name
    (211) function_call -> NAMESPACE . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) class_name -> NAMESPACE . NS_SEPARATOR namespace_name
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    LBRACE          shift and go to state 114
    NS_SEPARATOR    shift and go to state 115
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117

    namespace_name                 shift and go to state 113

state 12

    (362) scalar -> namespace_name .
    (428) namespace_name -> namespace_name . NS_SEPARATOR STRING
    (209) function_call -> namespace_name . LPAREN function_call_parameter_list RPAREN
    (187) class_name -> namespace_name .

    SEMI            reduce using rule 362 (scalar -> namespace_name .)
    OBJECT_OPERATOR reduce using rule 362 (scalar -> namespace_name .)
    LBRACE          reduce using rule 362 (scalar -> namespace_name .)
    BOOLEAN_AND     reduce using rule 362 (scalar -> namespace_name .)
    BOOLEAN_OR      reduce using rule 362 (scalar -> namespace_name .)
    LOGICAL_AND     reduce using rule 362 (scalar -> namespace_name .)
    LOGICAL_OR      reduce using rule 362 (scalar -> namespace_name .)
    LOGICAL_XOR     reduce using rule 362 (scalar -> namespace_name .)
    AND             reduce using rule 362 (scalar -> namespace_name .)
    OR              reduce using rule 362 (scalar -> namespace_name .)
    XOR             reduce using rule 362 (scalar -> namespace_name .)
    CONCAT          reduce using rule 362 (scalar -> namespace_name .)
    PLUS            reduce using rule 362 (scalar -> namespace_name .)
    MINUS           reduce using rule 362 (scalar -> namespace_name .)
    MUL             reduce using rule 362 (scalar -> namespace_name .)
    DIV             reduce using rule 362 (scalar -> namespace_name .)
    SL              reduce using rule 362 (scalar -> namespace_name .)
    SR              reduce using rule 362 (scalar -> namespace_name .)
    MOD             reduce using rule 362 (scalar -> namespace_name .)
    IS_IDENTICAL    reduce using rule 362 (scalar -> namespace_name .)
    IS_NOT_IDENTICAL reduce using rule 362 (scalar -> namespace_name .)
    IS_EQUAL        reduce using rule 362 (scalar -> namespace_name .)
    IS_NOT_EQUAL    reduce using rule 362 (scalar -> namespace_name .)
    IS_SMALLER      reduce using rule 362 (scalar -> namespace_name .)
    IS_SMALLER_OR_EQUAL reduce using rule 362 (scalar -> namespace_name .)
    IS_GREATER      reduce using rule 362 (scalar -> namespace_name .)
    IS_GREATER_OR_EQUAL reduce using rule 362 (scalar -> namespace_name .)
    INSTANCEOF      reduce using rule 362 (scalar -> namespace_name .)
    QUESTION        reduce using rule 362 (scalar -> namespace_name .)
    RPAREN          reduce using rule 362 (scalar -> namespace_name .)
    COMMA           reduce using rule 362 (scalar -> namespace_name .)
    DOUBLE_ARROW    reduce using rule 362 (scalar -> namespace_name .)
    RBRACKET        reduce using rule 362 (scalar -> namespace_name .)
    RBRACE          reduce using rule 362 (scalar -> namespace_name .)
    COLON           reduce using rule 362 (scalar -> namespace_name .)
    AS              reduce using rule 362 (scalar -> namespace_name .)
    NS_SEPARATOR    shift and go to state 118
    LPAREN          shift and go to state 119
    DOUBLE_COLON    reduce using rule 187 (class_name -> namespace_name .)


state 13

    (30) statement -> LBRACE . inner_statement_list RBRACE
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (443) empty -> .

    RBRACE          reduce using rule 443 (empty -> .)
    HALT_COMPILER   reduce using rule 443 (empty -> .)
    YIELD           reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    IF              reduce using rule 443 (empty -> .)
    WHILE           reduce using rule 443 (empty -> .)
    DO              reduce using rule 443 (empty -> .)
    FOR             reduce using rule 443 (empty -> .)
    FOREACH         reduce using rule 443 (empty -> .)
    SWITCH          reduce using rule 443 (empty -> .)
    BREAK           reduce using rule 443 (empty -> .)
    CONTINUE        reduce using rule 443 (empty -> .)
    RETURN          reduce using rule 443 (empty -> .)
    GLOBAL          reduce using rule 443 (empty -> .)
    STATIC          reduce using rule 443 (empty -> .)
    ECHO            reduce using rule 443 (empty -> .)
    INLINE_HTML     reduce using rule 443 (empty -> .)
    UNSET           reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    TRY             reduce using rule 443 (empty -> .)
    THROW           reduce using rule 443 (empty -> .)
    DECLARE         reduce using rule 443 (empty -> .)
    FUNCTION        reduce using rule 443 (empty -> .)
    INTERFACE       reduce using rule 443 (empty -> .)
    TRAIT           reduce using rule 443 (empty -> .)
    NEW             reduce using rule 443 (empty -> .)
    CLONE           reduce using rule 443 (empty -> .)
    LIST            reduce using rule 443 (empty -> .)
    ARRAY           reduce using rule 443 (empty -> .)
    LBRACKET        reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    NOT             reduce using rule 443 (empty -> .)
    BOOLEAN_NOT     reduce using rule 443 (empty -> .)
    INC             reduce using rule 443 (empty -> .)
    DEC             reduce using rule 443 (empty -> .)
    INT_CAST        reduce using rule 443 (empty -> .)
    DOUBLE_CAST     reduce using rule 443 (empty -> .)
    STRING_CAST     reduce using rule 443 (empty -> .)
    ARRAY_CAST      reduce using rule 443 (empty -> .)
    OBJECT_CAST     reduce using rule 443 (empty -> .)
    BOOL_CAST       reduce using rule 443 (empty -> .)
    UNSET_CAST      reduce using rule 443 (empty -> .)
    BINARY_CAST     reduce using rule 443 (empty -> .)
    ISSET           reduce using rule 443 (empty -> .)
    EMPTY           reduce using rule 443 (empty -> .)
    EVAL            reduce using rule 443 (empty -> .)
    INCLUDE         reduce using rule 443 (empty -> .)
    INCLUDE_ONCE    reduce using rule 443 (empty -> .)
    REQUIRE         reduce using rule 443 (empty -> .)
    REQUIRE_ONCE    reduce using rule 443 (empty -> .)
    PRINT           reduce using rule 443 (empty -> .)
    AT              reduce using rule 443 (empty -> .)
    LPAREN          reduce using rule 443 (empty -> .)
    CLASS           reduce using rule 443 (empty -> .)
    ABSTRACT        reduce using rule 443 (empty -> .)
    FINAL           reduce using rule 443 (empty -> .)
    QUOTE           reduce using rule 443 (empty -> .)
    STRING          reduce using rule 443 (empty -> .)
    STRING_VARNAME  reduce using rule 443 (empty -> .)
    NS_SEPARATOR    reduce using rule 443 (empty -> .)
    NAMESPACE       reduce using rule 443 (empty -> .)
    EXIT            reduce using rule 443 (empty -> .)
    DIE             reduce using rule 443 (empty -> .)
    LNUMBER         reduce using rule 443 (empty -> .)
    DNUMBER         reduce using rule 443 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 443 (empty -> .)
    LINE            reduce using rule 443 (empty -> .)
    FILE            reduce using rule 443 (empty -> .)
    DIR             reduce using rule 443 (empty -> .)
    CLASS_C         reduce using rule 443 (empty -> .)
    METHOD_C        reduce using rule 443 (empty -> .)
    FUNC_C          reduce using rule 443 (empty -> .)
    NS_C            reduce using rule 443 (empty -> .)
    START_HEREDOC   reduce using rule 443 (empty -> .)
    START_NOWDOC    reduce using rule 443 (empty -> .)
    BACKTICK        reduce using rule 443 (empty -> .)
    DOLLAR          reduce using rule 443 (empty -> .)
    VARIABLE        reduce using rule 443 (empty -> .)

    inner_statement_list           shift and go to state 120
    empty                          shift and go to state 121

state 14

    (11) top_statement -> CONST . constant_declarations SEMI
    (19) constant_declarations -> . constant_declarations COMMA constant_declaration
    (20) constant_declarations -> . constant_declaration
    (21) constant_declaration -> . STRING EQUALS static_expr

    STRING          shift and go to state 124

    constant_declarations          shift and go to state 122
    constant_declaration           shift and go to state 123

state 15

    (12) top_statement -> USE . use_declarations SEMI
    (13) use_declarations -> . use_declarations COMMA use_declaration
    (14) use_declarations -> . use_declaration
    (15) use_declaration -> . namespace_name
    (16) use_declaration -> . NS_SEPARATOR namespace_name
    (17) use_declaration -> . namespace_name AS STRING
    (18) use_declaration -> . NS_SEPARATOR namespace_name AS STRING
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    NS_SEPARATOR    shift and go to state 128
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117

    use_declarations               shift and go to state 125
    use_declaration                shift and go to state 126
    namespace_name                 shift and go to state 127

state 16

    (31) statement -> IF . LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> IF . LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI

    LPAREN          shift and go to state 129


state 17

    (48) statement -> expr . SEMI
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            shift and go to state 130
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 18

    (33) statement -> WHILE . LPAREN expr RPAREN while_statement

    LPAREN          shift and go to state 159


state 19

    (34) statement -> DO . statement WHILE LPAREN expr RPAREN SEMI
    (30) statement -> . LBRACE inner_statement_list RBRACE
    (31) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (33) statement -> . WHILE LPAREN expr RPAREN while_statement
    (34) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (35) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (36) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (37) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (38) statement -> . BREAK SEMI
    (39) statement -> . BREAK expr SEMI
    (40) statement -> . CONTINUE SEMI
    (41) statement -> . CONTINUE expr SEMI
    (42) statement -> . RETURN SEMI
    (43) statement -> . RETURN expr SEMI
    (44) statement -> . GLOBAL global_var_list SEMI
    (45) statement -> . STATIC static_var_list SEMI
    (46) statement -> . ECHO echo_expr_list SEMI
    (47) statement -> . INLINE_HTML
    (48) statement -> . expr SEMI
    (49) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (50) statement -> . SEMI
    (51) statement -> . TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
    (56) statement -> . THROW expr SEMI
    (57) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LBRACE          shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    FOREACH         shift and go to state 21
    SWITCH          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    GLOBAL          shift and go to state 26
    STATIC          shift and go to state 27
    ECHO            shift and go to state 28
    INLINE_HTML     shift and go to state 29
    UNSET           shift and go to state 30
    SEMI            shift and go to state 10
    TRY             shift and go to state 31
    THROW           shift and go to state 32
    DECLARE         shift and go to state 33
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    statement                      shift and go to state 160
    expr                           shift and go to state 17
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 20

    (35) statement -> FOR . LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement

    LPAREN          shift and go to state 161


state 21

    (36) statement -> FOREACH . LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement

    LPAREN          shift and go to state 162


state 22

    (37) statement -> SWITCH . LPAREN expr RPAREN switch_case_list

    LPAREN          shift and go to state 163


state 23

    (38) statement -> BREAK . SEMI
    (39) statement -> BREAK . expr SEMI
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    SEMI            shift and go to state 164
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 165
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 24

    (40) statement -> CONTINUE . SEMI
    (41) statement -> CONTINUE . expr SEMI
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    SEMI            shift and go to state 166
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 167
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 25

    (42) statement -> RETURN . SEMI
    (43) statement -> RETURN . expr SEMI
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    SEMI            shift and go to state 168
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 169
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 26

    (44) statement -> GLOBAL . global_var_list SEMI
    (94) global_var_list -> . global_var_list COMMA global_var
    (95) global_var_list -> . global_var
    (96) global_var -> . VARIABLE
    (97) global_var -> . DOLLAR variable
    (98) global_var -> . DOLLAR LBRACE expr RBRACE

    VARIABLE        shift and go to state 172
    DOLLAR          shift and go to state 173

    global_var_list                shift and go to state 170
    global_var                     shift and go to state 171

state 27

    (45) statement -> STATIC . static_var_list SEMI
    (190) class_name -> STATIC .
    (99) static_var_list -> . static_var_list COMMA static_var
    (100) static_var_list -> . static_var
    (101) static_var -> . VARIABLE EQUALS static_scalar
    (102) static_var -> . VARIABLE

    DOUBLE_COLON    reduce using rule 190 (class_name -> STATIC .)
    VARIABLE        shift and go to state 176

    static_var_list                shift and go to state 174
    static_var                     shift and go to state 175

state 28

    (46) statement -> ECHO . echo_expr_list SEMI
    (103) echo_expr_list -> . echo_expr_list COMMA expr
    (104) echo_expr_list -> . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    echo_expr_list                 shift and go to state 177
    expr                           shift and go to state 178
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 29

    (47) statement -> INLINE_HTML .

    HALT_COMPILER   reduce using rule 47 (statement -> INLINE_HTML .)
    NAMESPACE       reduce using rule 47 (statement -> INLINE_HTML .)
    CONST           reduce using rule 47 (statement -> INLINE_HTML .)
    USE             reduce using rule 47 (statement -> INLINE_HTML .)
    LBRACE          reduce using rule 47 (statement -> INLINE_HTML .)
    IF              reduce using rule 47 (statement -> INLINE_HTML .)
    WHILE           reduce using rule 47 (statement -> INLINE_HTML .)
    DO              reduce using rule 47 (statement -> INLINE_HTML .)
    FOR             reduce using rule 47 (statement -> INLINE_HTML .)
    FOREACH         reduce using rule 47 (statement -> INLINE_HTML .)
    SWITCH          reduce using rule 47 (statement -> INLINE_HTML .)
    BREAK           reduce using rule 47 (statement -> INLINE_HTML .)
    CONTINUE        reduce using rule 47 (statement -> INLINE_HTML .)
    RETURN          reduce using rule 47 (statement -> INLINE_HTML .)
    GLOBAL          reduce using rule 47 (statement -> INLINE_HTML .)
    STATIC          reduce using rule 47 (statement -> INLINE_HTML .)
    ECHO            reduce using rule 47 (statement -> INLINE_HTML .)
    INLINE_HTML     reduce using rule 47 (statement -> INLINE_HTML .)
    UNSET           reduce using rule 47 (statement -> INLINE_HTML .)
    SEMI            reduce using rule 47 (statement -> INLINE_HTML .)
    TRY             reduce using rule 47 (statement -> INLINE_HTML .)
    THROW           reduce using rule 47 (statement -> INLINE_HTML .)
    DECLARE         reduce using rule 47 (statement -> INLINE_HTML .)
    FUNCTION        reduce using rule 47 (statement -> INLINE_HTML .)
    INTERFACE       reduce using rule 47 (statement -> INLINE_HTML .)
    TRAIT           reduce using rule 47 (statement -> INLINE_HTML .)
    NEW             reduce using rule 47 (statement -> INLINE_HTML .)
    CLONE           reduce using rule 47 (statement -> INLINE_HTML .)
    LIST            reduce using rule 47 (statement -> INLINE_HTML .)
    ARRAY           reduce using rule 47 (statement -> INLINE_HTML .)
    LBRACKET        reduce using rule 47 (statement -> INLINE_HTML .)
    PLUS            reduce using rule 47 (statement -> INLINE_HTML .)
    MINUS           reduce using rule 47 (statement -> INLINE_HTML .)
    NOT             reduce using rule 47 (statement -> INLINE_HTML .)
    BOOLEAN_NOT     reduce using rule 47 (statement -> INLINE_HTML .)
    INC             reduce using rule 47 (statement -> INLINE_HTML .)
    DEC             reduce using rule 47 (statement -> INLINE_HTML .)
    INT_CAST        reduce using rule 47 (statement -> INLINE_HTML .)
    DOUBLE_CAST     reduce using rule 47 (statement -> INLINE_HTML .)
    STRING_CAST     reduce using rule 47 (statement -> INLINE_HTML .)
    ARRAY_CAST      reduce using rule 47 (statement -> INLINE_HTML .)
    OBJECT_CAST     reduce using rule 47 (statement -> INLINE_HTML .)
    BOOL_CAST       reduce using rule 47 (statement -> INLINE_HTML .)
    UNSET_CAST      reduce using rule 47 (statement -> INLINE_HTML .)
    BINARY_CAST     reduce using rule 47 (statement -> INLINE_HTML .)
    ISSET           reduce using rule 47 (statement -> INLINE_HTML .)
    EMPTY           reduce using rule 47 (statement -> INLINE_HTML .)
    EVAL            reduce using rule 47 (statement -> INLINE_HTML .)
    INCLUDE         reduce using rule 47 (statement -> INLINE_HTML .)
    INCLUDE_ONCE    reduce using rule 47 (statement -> INLINE_HTML .)
    REQUIRE         reduce using rule 47 (statement -> INLINE_HTML .)
    REQUIRE_ONCE    reduce using rule 47 (statement -> INLINE_HTML .)
    PRINT           reduce using rule 47 (statement -> INLINE_HTML .)
    AT              reduce using rule 47 (statement -> INLINE_HTML .)
    LPAREN          reduce using rule 47 (statement -> INLINE_HTML .)
    CLASS           reduce using rule 47 (statement -> INLINE_HTML .)
    ABSTRACT        reduce using rule 47 (statement -> INLINE_HTML .)
    FINAL           reduce using rule 47 (statement -> INLINE_HTML .)
    QUOTE           reduce using rule 47 (statement -> INLINE_HTML .)
    STRING          reduce using rule 47 (statement -> INLINE_HTML .)
    STRING_VARNAME  reduce using rule 47 (statement -> INLINE_HTML .)
    NS_SEPARATOR    reduce using rule 47 (statement -> INLINE_HTML .)
    EXIT            reduce using rule 47 (statement -> INLINE_HTML .)
    DIE             reduce using rule 47 (statement -> INLINE_HTML .)
    LNUMBER         reduce using rule 47 (statement -> INLINE_HTML .)
    DNUMBER         reduce using rule 47 (statement -> INLINE_HTML .)
    CONSTANT_ENCAPSED_STRING reduce using rule 47 (statement -> INLINE_HTML .)
    LINE            reduce using rule 47 (statement -> INLINE_HTML .)
    FILE            reduce using rule 47 (statement -> INLINE_HTML .)
    DIR             reduce using rule 47 (statement -> INLINE_HTML .)
    CLASS_C         reduce using rule 47 (statement -> INLINE_HTML .)
    METHOD_C        reduce using rule 47 (statement -> INLINE_HTML .)
    FUNC_C          reduce using rule 47 (statement -> INLINE_HTML .)
    NS_C            reduce using rule 47 (statement -> INLINE_HTML .)
    START_HEREDOC   reduce using rule 47 (statement -> INLINE_HTML .)
    START_NOWDOC    reduce using rule 47 (statement -> INLINE_HTML .)
    BACKTICK        reduce using rule 47 (statement -> INLINE_HTML .)
    DOLLAR          reduce using rule 47 (statement -> INLINE_HTML .)
    VARIABLE        reduce using rule 47 (statement -> INLINE_HTML .)
    $end            reduce using rule 47 (statement -> INLINE_HTML .)
    RBRACE          reduce using rule 47 (statement -> INLINE_HTML .)
    YIELD           reduce using rule 47 (statement -> INLINE_HTML .)
    ELSEIF          reduce using rule 47 (statement -> INLINE_HTML .)
    ELSE            reduce using rule 47 (statement -> INLINE_HTML .)
    ENDIF           reduce using rule 47 (statement -> INLINE_HTML .)
    ENDWHILE        reduce using rule 47 (statement -> INLINE_HTML .)
    ENDDECLARE      reduce using rule 47 (statement -> INLINE_HTML .)
    ENDFOREACH      reduce using rule 47 (statement -> INLINE_HTML .)
    CASE            reduce using rule 47 (statement -> INLINE_HTML .)
    DEFAULT         reduce using rule 47 (statement -> INLINE_HTML .)
    ENDSWITCH       reduce using rule 47 (statement -> INLINE_HTML .)
    ENDFOR          reduce using rule 47 (statement -> INLINE_HTML .)


state 30

    (49) statement -> UNSET . LPAREN unset_variables RPAREN SEMI

    LPAREN          shift and go to state 179


state 31

    (51) statement -> TRY . LBRACE inner_statement_list RBRACE additional_catches maybe_finally

    LBRACE          shift and go to state 180


state 32

    (56) statement -> THROW . expr SEMI
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 181
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 33

    (57) statement -> DECLARE . LPAREN declare_list RPAREN declare_statement

    LPAREN          shift and go to state 182


state 34

    (108) function_declaration_statement -> FUNCTION . is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (271) expr -> FUNCTION . is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (167) is_reference -> . AND
    (168) is_reference -> . empty
    (443) empty -> .

    AND             shift and go to state 184
    STRING          reduce using rule 443 (empty -> .)
    LPAREN          reduce using rule 443 (empty -> .)

    is_reference                   shift and go to state 183
    empty                          shift and go to state 185

state 35

    (353) scalar -> STRING . QUOTE encaps_list QUOTE
    (370) common_scalar -> STRING . CONSTANT_ENCAPSED_STRING
    (429) namespace_name -> STRING .

    QUOTE           shift and go to state 186
    CONSTANT_ENCAPSED_STRING shift and go to state 187
    NS_SEPARATOR    reduce using rule 429 (namespace_name -> STRING .)
    LPAREN          reduce using rule 429 (namespace_name -> STRING .)
    SEMI            reduce using rule 429 (namespace_name -> STRING .)
    OBJECT_OPERATOR reduce using rule 429 (namespace_name -> STRING .)
    LBRACE          reduce using rule 429 (namespace_name -> STRING .)
    BOOLEAN_AND     reduce using rule 429 (namespace_name -> STRING .)
    BOOLEAN_OR      reduce using rule 429 (namespace_name -> STRING .)
    LOGICAL_AND     reduce using rule 429 (namespace_name -> STRING .)
    LOGICAL_OR      reduce using rule 429 (namespace_name -> STRING .)
    LOGICAL_XOR     reduce using rule 429 (namespace_name -> STRING .)
    AND             reduce using rule 429 (namespace_name -> STRING .)
    OR              reduce using rule 429 (namespace_name -> STRING .)
    XOR             reduce using rule 429 (namespace_name -> STRING .)
    CONCAT          reduce using rule 429 (namespace_name -> STRING .)
    PLUS            reduce using rule 429 (namespace_name -> STRING .)
    MINUS           reduce using rule 429 (namespace_name -> STRING .)
    MUL             reduce using rule 429 (namespace_name -> STRING .)
    DIV             reduce using rule 429 (namespace_name -> STRING .)
    SL              reduce using rule 429 (namespace_name -> STRING .)
    SR              reduce using rule 429 (namespace_name -> STRING .)
    MOD             reduce using rule 429 (namespace_name -> STRING .)
    IS_IDENTICAL    reduce using rule 429 (namespace_name -> STRING .)
    IS_NOT_IDENTICAL reduce using rule 429 (namespace_name -> STRING .)
    IS_EQUAL        reduce using rule 429 (namespace_name -> STRING .)
    IS_NOT_EQUAL    reduce using rule 429 (namespace_name -> STRING .)
    IS_SMALLER      reduce using rule 429 (namespace_name -> STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 429 (namespace_name -> STRING .)
    IS_GREATER      reduce using rule 429 (namespace_name -> STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 429 (namespace_name -> STRING .)
    INSTANCEOF      reduce using rule 429 (namespace_name -> STRING .)
    QUESTION        reduce using rule 429 (namespace_name -> STRING .)
    DOUBLE_COLON    reduce using rule 429 (namespace_name -> STRING .)
    RPAREN          reduce using rule 429 (namespace_name -> STRING .)
    COMMA           reduce using rule 429 (namespace_name -> STRING .)
    DOUBLE_ARROW    reduce using rule 429 (namespace_name -> STRING .)
    RBRACKET        reduce using rule 429 (namespace_name -> STRING .)
    RBRACE          reduce using rule 429 (namespace_name -> STRING .)
    COLON           reduce using rule 429 (namespace_name -> STRING .)
    AS              reduce using rule 429 (namespace_name -> STRING .)


state 36

    (109) class_declaration_statement -> class_entry_type . STRING extends_from implements_list LBRACE class_statement_list RBRACE

    STRING          shift and go to state 188


state 37

    (110) class_declaration_statement -> INTERFACE . STRING interface_extends_list LBRACE class_statement_list RBRACE

    STRING          shift and go to state 189


state 38

    (111) class_declaration_statement -> TRAIT . STRING LBRACE trait_statement_list RBRACE

    STRING          shift and go to state 190


state 39

    (180) expr -> variable .
    (181) expr -> variable . EQUALS expr
    (182) expr -> variable . EQUALS AND expr
    (278) expr -> variable . PLUS_EQUAL expr
    (279) expr -> variable . MINUS_EQUAL expr
    (280) expr -> variable . MUL_EQUAL expr
    (281) expr -> variable . DIV_EQUAL expr
    (282) expr -> variable . CONCAT_EQUAL expr
    (283) expr -> variable . MOD_EQUAL expr
    (284) expr -> variable . AND_EQUAL expr
    (285) expr -> variable . OR_EQUAL expr
    (286) expr -> variable . XOR_EQUAL expr
    (287) expr -> variable . SL_EQUAL expr
    (288) expr -> variable . SR_EQUAL expr
    (323) expr -> variable . INC
    (324) expr -> variable . DEC
    (234) variable -> variable . LBRACKET dim_offset RBRACKET

    SEMI            reduce using rule 180 (expr -> variable .)
    OBJECT_OPERATOR reduce using rule 180 (expr -> variable .)
    LBRACE          reduce using rule 180 (expr -> variable .)
    BOOLEAN_AND     reduce using rule 180 (expr -> variable .)
    BOOLEAN_OR      reduce using rule 180 (expr -> variable .)
    LOGICAL_AND     reduce using rule 180 (expr -> variable .)
    LOGICAL_OR      reduce using rule 180 (expr -> variable .)
    LOGICAL_XOR     reduce using rule 180 (expr -> variable .)
    AND             reduce using rule 180 (expr -> variable .)
    OR              reduce using rule 180 (expr -> variable .)
    XOR             reduce using rule 180 (expr -> variable .)
    CONCAT          reduce using rule 180 (expr -> variable .)
    PLUS            reduce using rule 180 (expr -> variable .)
    MINUS           reduce using rule 180 (expr -> variable .)
    MUL             reduce using rule 180 (expr -> variable .)
    DIV             reduce using rule 180 (expr -> variable .)
    SL              reduce using rule 180 (expr -> variable .)
    SR              reduce using rule 180 (expr -> variable .)
    MOD             reduce using rule 180 (expr -> variable .)
    IS_IDENTICAL    reduce using rule 180 (expr -> variable .)
    IS_NOT_IDENTICAL reduce using rule 180 (expr -> variable .)
    IS_EQUAL        reduce using rule 180 (expr -> variable .)
    IS_NOT_EQUAL    reduce using rule 180 (expr -> variable .)
    IS_SMALLER      reduce using rule 180 (expr -> variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 180 (expr -> variable .)
    IS_GREATER      reduce using rule 180 (expr -> variable .)
    IS_GREATER_OR_EQUAL reduce using rule 180 (expr -> variable .)
    INSTANCEOF      reduce using rule 180 (expr -> variable .)
    QUESTION        reduce using rule 180 (expr -> variable .)
    RPAREN          reduce using rule 180 (expr -> variable .)
    COMMA           reduce using rule 180 (expr -> variable .)
    DOUBLE_ARROW    reduce using rule 180 (expr -> variable .)
    RBRACKET        reduce using rule 180 (expr -> variable .)
    RBRACE          reduce using rule 180 (expr -> variable .)
    COLON           reduce using rule 180 (expr -> variable .)
    AS              reduce using rule 180 (expr -> variable .)
    EQUALS          shift and go to state 191
    PLUS_EQUAL      shift and go to state 192
    MINUS_EQUAL     shift and go to state 193
    MUL_EQUAL       shift and go to state 194
    DIV_EQUAL       shift and go to state 195
    CONCAT_EQUAL    shift and go to state 196
    MOD_EQUAL       shift and go to state 197
    AND_EQUAL       shift and go to state 198
    OR_EQUAL        shift and go to state 199
    XOR_EQUAL       shift and go to state 200
    SL_EQUAL        shift and go to state 201
    SR_EQUAL        shift and go to state 202
    INC             shift and go to state 203
    DEC             shift and go to state 204
    LBRACKET        shift and go to state 205


state 40

    (183) expr -> NEW . class_name_reference ctor_arguments
    (185) class_name_reference -> . class_name
    (186) class_name_reference -> . dynamic_class_name_reference
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (191) dynamic_class_name_reference -> . base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties
    (192) dynamic_class_name_reference -> . base_variable
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (233) variable_class_name -> . reference_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NS_SEPARATOR    shift and go to state 210
    NAMESPACE       shift and go to state 211
    STATIC          shift and go to state 111
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    class_name_reference           shift and go to state 206
    class_name                     shift and go to state 207
    dynamic_class_name_reference   shift and go to state 208
    namespace_name                 shift and go to state 209
    base_variable                  shift and go to state 212
    simple_indirect_reference      shift and go to state 213
    static_member                  shift and go to state 101
    reference_variable             shift and go to state 214
    variable_class_name            shift and go to state 215
    compound_variable              shift and go to state 106

state 41

    (198) expr -> CLONE . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 216
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 42

    (199) expr -> LIST . LPAREN assignment_list RPAREN EQUALS expr

    LPAREN          shift and go to state 217


state 43

    (251) expr -> scalar .

    SEMI            reduce using rule 251 (expr -> scalar .)
    OBJECT_OPERATOR reduce using rule 251 (expr -> scalar .)
    LBRACE          reduce using rule 251 (expr -> scalar .)
    BOOLEAN_AND     reduce using rule 251 (expr -> scalar .)
    BOOLEAN_OR      reduce using rule 251 (expr -> scalar .)
    LOGICAL_AND     reduce using rule 251 (expr -> scalar .)
    LOGICAL_OR      reduce using rule 251 (expr -> scalar .)
    LOGICAL_XOR     reduce using rule 251 (expr -> scalar .)
    AND             reduce using rule 251 (expr -> scalar .)
    OR              reduce using rule 251 (expr -> scalar .)
    XOR             reduce using rule 251 (expr -> scalar .)
    CONCAT          reduce using rule 251 (expr -> scalar .)
    PLUS            reduce using rule 251 (expr -> scalar .)
    MINUS           reduce using rule 251 (expr -> scalar .)
    MUL             reduce using rule 251 (expr -> scalar .)
    DIV             reduce using rule 251 (expr -> scalar .)
    SL              reduce using rule 251 (expr -> scalar .)
    SR              reduce using rule 251 (expr -> scalar .)
    MOD             reduce using rule 251 (expr -> scalar .)
    IS_IDENTICAL    reduce using rule 251 (expr -> scalar .)
    IS_NOT_IDENTICAL reduce using rule 251 (expr -> scalar .)
    IS_EQUAL        reduce using rule 251 (expr -> scalar .)
    IS_NOT_EQUAL    reduce using rule 251 (expr -> scalar .)
    IS_SMALLER      reduce using rule 251 (expr -> scalar .)
    IS_SMALLER_OR_EQUAL reduce using rule 251 (expr -> scalar .)
    IS_GREATER      reduce using rule 251 (expr -> scalar .)
    IS_GREATER_OR_EQUAL reduce using rule 251 (expr -> scalar .)
    INSTANCEOF      reduce using rule 251 (expr -> scalar .)
    QUESTION        reduce using rule 251 (expr -> scalar .)
    RPAREN          reduce using rule 251 (expr -> scalar .)
    COMMA           reduce using rule 251 (expr -> scalar .)
    DOUBLE_ARROW    reduce using rule 251 (expr -> scalar .)
    RBRACKET        reduce using rule 251 (expr -> scalar .)
    RBRACE          reduce using rule 251 (expr -> scalar .)
    COLON           reduce using rule 251 (expr -> scalar .)
    AS              reduce using rule 251 (expr -> scalar .)


state 44

    (252) expr -> ARRAY . LPAREN array_pair_list RPAREN
    (430) namespace_name -> ARRAY .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 218
    NS_SEPARATOR    reduce using rule 430 (namespace_name -> ARRAY .)
    SEMI            reduce using rule 430 (namespace_name -> ARRAY .)
    OBJECT_OPERATOR reduce using rule 430 (namespace_name -> ARRAY .)
    LBRACE          reduce using rule 430 (namespace_name -> ARRAY .)
    BOOLEAN_AND     reduce using rule 430 (namespace_name -> ARRAY .)
    BOOLEAN_OR      reduce using rule 430 (namespace_name -> ARRAY .)
    LOGICAL_AND     reduce using rule 430 (namespace_name -> ARRAY .)
    LOGICAL_OR      reduce using rule 430 (namespace_name -> ARRAY .)
    LOGICAL_XOR     reduce using rule 430 (namespace_name -> ARRAY .)
    AND             reduce using rule 430 (namespace_name -> ARRAY .)
    OR              reduce using rule 430 (namespace_name -> ARRAY .)
    XOR             reduce using rule 430 (namespace_name -> ARRAY .)
    CONCAT          reduce using rule 430 (namespace_name -> ARRAY .)
    PLUS            reduce using rule 430 (namespace_name -> ARRAY .)
    MINUS           reduce using rule 430 (namespace_name -> ARRAY .)
    MUL             reduce using rule 430 (namespace_name -> ARRAY .)
    DIV             reduce using rule 430 (namespace_name -> ARRAY .)
    SL              reduce using rule 430 (namespace_name -> ARRAY .)
    SR              reduce using rule 430 (namespace_name -> ARRAY .)
    MOD             reduce using rule 430 (namespace_name -> ARRAY .)
    IS_IDENTICAL    reduce using rule 430 (namespace_name -> ARRAY .)
    IS_NOT_IDENTICAL reduce using rule 430 (namespace_name -> ARRAY .)
    IS_EQUAL        reduce using rule 430 (namespace_name -> ARRAY .)
    IS_NOT_EQUAL    reduce using rule 430 (namespace_name -> ARRAY .)
    IS_SMALLER      reduce using rule 430 (namespace_name -> ARRAY .)
    IS_SMALLER_OR_EQUAL reduce using rule 430 (namespace_name -> ARRAY .)
    IS_GREATER      reduce using rule 430 (namespace_name -> ARRAY .)
    IS_GREATER_OR_EQUAL reduce using rule 430 (namespace_name -> ARRAY .)
    INSTANCEOF      reduce using rule 430 (namespace_name -> ARRAY .)
    QUESTION        reduce using rule 430 (namespace_name -> ARRAY .)
    DOUBLE_COLON    reduce using rule 430 (namespace_name -> ARRAY .)
    RPAREN          reduce using rule 430 (namespace_name -> ARRAY .)
    COMMA           reduce using rule 430 (namespace_name -> ARRAY .)
    DOUBLE_ARROW    reduce using rule 430 (namespace_name -> ARRAY .)
    RBRACKET        reduce using rule 430 (namespace_name -> ARRAY .)
    RBRACE          reduce using rule 430 (namespace_name -> ARRAY .)
    COLON           reduce using rule 430 (namespace_name -> ARRAY .)
    AS              reduce using rule 430 (namespace_name -> ARRAY .)

  ! LPAREN          [ reduce using rule 430 (namespace_name -> ARRAY .) ]


state 45

    (253) expr -> LBRACKET . array_pair_list RBRACKET
    (254) array_pair_list -> . empty
    (255) array_pair_list -> . non_empty_array_pair_list possible_comma
    (443) empty -> .
    (256) non_empty_array_pair_list -> . non_empty_array_pair_list COMMA AND variable
    (257) non_empty_array_pair_list -> . non_empty_array_pair_list COMMA expr
    (258) non_empty_array_pair_list -> . AND variable
    (259) non_empty_array_pair_list -> . expr
    (260) non_empty_array_pair_list -> . non_empty_array_pair_list COMMA expr DOUBLE_ARROW AND variable
    (261) non_empty_array_pair_list -> . non_empty_array_pair_list COMMA expr DOUBLE_ARROW expr
    (262) non_empty_array_pair_list -> . expr DOUBLE_ARROW AND variable
    (263) non_empty_array_pair_list -> . expr DOUBLE_ARROW expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RBRACKET        reduce using rule 443 (empty -> .)
    AND             shift and go to state 222
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    array_pair_list                shift and go to state 219
    empty                          shift and go to state 220
    non_empty_array_pair_list      shift and go to state 221
    variable                       shift and go to state 39
    expr                           shift and go to state 223
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 46

    (315) expr -> PLUS . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 224
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 47

    (316) expr -> MINUS . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 225
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 48

    (317) expr -> NOT . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 226
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 49

    (318) expr -> BOOLEAN_NOT . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 227
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 50

    (321) expr -> INC . variable
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NS_SEPARATOR    shift and go to state 230
    NAMESPACE       shift and go to state 231
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107

    variable                       shift and go to state 228
    base_variable_with_function_calls shift and go to state 73
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    namespace_name                 shift and go to state 229
    class_name                     shift and go to state 232
    variable_without_objects       shift and go to state 102
    variable_class_name            shift and go to state 233
    reference_variable             shift and go to state 234
    compound_variable              shift and go to state 106

state 51

    (322) expr -> DEC . variable
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NS_SEPARATOR    shift and go to state 230
    NAMESPACE       shift and go to state 231
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107

    variable                       shift and go to state 235
    base_variable_with_function_calls shift and go to state 73
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    namespace_name                 shift and go to state 229
    class_name                     shift and go to state 232
    variable_without_objects       shift and go to state 102
    variable_class_name            shift and go to state 233
    reference_variable             shift and go to state 234
    compound_variable              shift and go to state 106

state 52

    (325) expr -> INT_CAST . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 236
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 53

    (326) expr -> DOUBLE_CAST . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 237
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 54

    (327) expr -> STRING_CAST . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 238
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 55

    (328) expr -> ARRAY_CAST . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 239
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 56

    (329) expr -> OBJECT_CAST . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 240
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 57

    (330) expr -> BOOL_CAST . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 241
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 58

    (331) expr -> UNSET_CAST . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 242
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 59

    (332) expr -> BINARY_CAST . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 243
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 60

    (333) expr -> ISSET . LPAREN isset_variables RPAREN

    LPAREN          shift and go to state 244


state 61

    (336) expr -> EMPTY . LPAREN expr RPAREN

    LPAREN          shift and go to state 245


state 62

    (337) expr -> EVAL . LPAREN expr RPAREN

    LPAREN          shift and go to state 246


state 63

    (338) expr -> INCLUDE . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 247
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 64

    (339) expr -> INCLUDE_ONCE . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 248
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 65

    (340) expr -> REQUIRE . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 249
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 66

    (341) expr -> REQUIRE_ONCE . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 250
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 67

    (344) expr -> exit_or_die .
    (345) expr -> exit_or_die . LPAREN RPAREN
    (346) expr -> exit_or_die . LPAREN expr RPAREN

    SEMI            reduce using rule 344 (expr -> exit_or_die .)
    OBJECT_OPERATOR reduce using rule 344 (expr -> exit_or_die .)
    LBRACE          reduce using rule 344 (expr -> exit_or_die .)
    BOOLEAN_AND     reduce using rule 344 (expr -> exit_or_die .)
    BOOLEAN_OR      reduce using rule 344 (expr -> exit_or_die .)
    LOGICAL_AND     reduce using rule 344 (expr -> exit_or_die .)
    LOGICAL_OR      reduce using rule 344 (expr -> exit_or_die .)
    LOGICAL_XOR     reduce using rule 344 (expr -> exit_or_die .)
    AND             reduce using rule 344 (expr -> exit_or_die .)
    OR              reduce using rule 344 (expr -> exit_or_die .)
    XOR             reduce using rule 344 (expr -> exit_or_die .)
    CONCAT          reduce using rule 344 (expr -> exit_or_die .)
    PLUS            reduce using rule 344 (expr -> exit_or_die .)
    MINUS           reduce using rule 344 (expr -> exit_or_die .)
    MUL             reduce using rule 344 (expr -> exit_or_die .)
    DIV             reduce using rule 344 (expr -> exit_or_die .)
    SL              reduce using rule 344 (expr -> exit_or_die .)
    SR              reduce using rule 344 (expr -> exit_or_die .)
    MOD             reduce using rule 344 (expr -> exit_or_die .)
    IS_IDENTICAL    reduce using rule 344 (expr -> exit_or_die .)
    IS_NOT_IDENTICAL reduce using rule 344 (expr -> exit_or_die .)
    IS_EQUAL        reduce using rule 344 (expr -> exit_or_die .)
    IS_NOT_EQUAL    reduce using rule 344 (expr -> exit_or_die .)
    IS_SMALLER      reduce using rule 344 (expr -> exit_or_die .)
    IS_SMALLER_OR_EQUAL reduce using rule 344 (expr -> exit_or_die .)
    IS_GREATER      reduce using rule 344 (expr -> exit_or_die .)
    IS_GREATER_OR_EQUAL reduce using rule 344 (expr -> exit_or_die .)
    INSTANCEOF      reduce using rule 344 (expr -> exit_or_die .)
    QUESTION        reduce using rule 344 (expr -> exit_or_die .)
    RPAREN          reduce using rule 344 (expr -> exit_or_die .)
    COMMA           reduce using rule 344 (expr -> exit_or_die .)
    DOUBLE_ARROW    reduce using rule 344 (expr -> exit_or_die .)
    RBRACKET        reduce using rule 344 (expr -> exit_or_die .)
    RBRACE          reduce using rule 344 (expr -> exit_or_die .)
    COLON           reduce using rule 344 (expr -> exit_or_die .)
    AS              reduce using rule 344 (expr -> exit_or_die .)
    LPAREN          shift and go to state 251


state 68

    (347) expr -> PRINT . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 252
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 69

    (348) expr -> AT . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 253
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 70

    (112) class_entry_type -> CLASS .

    STRING          reduce using rule 112 (class_entry_type -> CLASS .)


state 71

    (113) class_entry_type -> ABSTRACT . CLASS

    CLASS           shift and go to state 254


state 72

    (114) class_entry_type -> FINAL . CLASS

    CLASS           shift and go to state 255


state 73

    (205) variable -> base_variable_with_function_calls . OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> base_variable_with_function_calls .

  ! shift/reduce conflict for OBJECT_OPERATOR resolved as shift
    OBJECT_OPERATOR shift and go to state 256
    EQUALS          reduce using rule 206 (variable -> base_variable_with_function_calls .)
    PLUS_EQUAL      reduce using rule 206 (variable -> base_variable_with_function_calls .)
    MINUS_EQUAL     reduce using rule 206 (variable -> base_variable_with_function_calls .)
    MUL_EQUAL       reduce using rule 206 (variable -> base_variable_with_function_calls .)
    DIV_EQUAL       reduce using rule 206 (variable -> base_variable_with_function_calls .)
    CONCAT_EQUAL    reduce using rule 206 (variable -> base_variable_with_function_calls .)
    MOD_EQUAL       reduce using rule 206 (variable -> base_variable_with_function_calls .)
    AND_EQUAL       reduce using rule 206 (variable -> base_variable_with_function_calls .)
    OR_EQUAL        reduce using rule 206 (variable -> base_variable_with_function_calls .)
    XOR_EQUAL       reduce using rule 206 (variable -> base_variable_with_function_calls .)
    SL_EQUAL        reduce using rule 206 (variable -> base_variable_with_function_calls .)
    SR_EQUAL        reduce using rule 206 (variable -> base_variable_with_function_calls .)
    INC             reduce using rule 206 (variable -> base_variable_with_function_calls .)
    DEC             reduce using rule 206 (variable -> base_variable_with_function_calls .)
    LBRACKET        reduce using rule 206 (variable -> base_variable_with_function_calls .)
    SEMI            reduce using rule 206 (variable -> base_variable_with_function_calls .)
    LBRACE          reduce using rule 206 (variable -> base_variable_with_function_calls .)
    BOOLEAN_AND     reduce using rule 206 (variable -> base_variable_with_function_calls .)
    BOOLEAN_OR      reduce using rule 206 (variable -> base_variable_with_function_calls .)
    LOGICAL_AND     reduce using rule 206 (variable -> base_variable_with_function_calls .)
    LOGICAL_OR      reduce using rule 206 (variable -> base_variable_with_function_calls .)
    LOGICAL_XOR     reduce using rule 206 (variable -> base_variable_with_function_calls .)
    AND             reduce using rule 206 (variable -> base_variable_with_function_calls .)
    OR              reduce using rule 206 (variable -> base_variable_with_function_calls .)
    XOR             reduce using rule 206 (variable -> base_variable_with_function_calls .)
    CONCAT          reduce using rule 206 (variable -> base_variable_with_function_calls .)
    PLUS            reduce using rule 206 (variable -> base_variable_with_function_calls .)
    MINUS           reduce using rule 206 (variable -> base_variable_with_function_calls .)
    MUL             reduce using rule 206 (variable -> base_variable_with_function_calls .)
    DIV             reduce using rule 206 (variable -> base_variable_with_function_calls .)
    SL              reduce using rule 206 (variable -> base_variable_with_function_calls .)
    SR              reduce using rule 206 (variable -> base_variable_with_function_calls .)
    MOD             reduce using rule 206 (variable -> base_variable_with_function_calls .)
    IS_IDENTICAL    reduce using rule 206 (variable -> base_variable_with_function_calls .)
    IS_NOT_IDENTICAL reduce using rule 206 (variable -> base_variable_with_function_calls .)
    IS_EQUAL        reduce using rule 206 (variable -> base_variable_with_function_calls .)
    IS_NOT_EQUAL    reduce using rule 206 (variable -> base_variable_with_function_calls .)
    IS_SMALLER      reduce using rule 206 (variable -> base_variable_with_function_calls .)
    IS_SMALLER_OR_EQUAL reduce using rule 206 (variable -> base_variable_with_function_calls .)
    IS_GREATER      reduce using rule 206 (variable -> base_variable_with_function_calls .)
    IS_GREATER_OR_EQUAL reduce using rule 206 (variable -> base_variable_with_function_calls .)
    INSTANCEOF      reduce using rule 206 (variable -> base_variable_with_function_calls .)
    QUESTION        reduce using rule 206 (variable -> base_variable_with_function_calls .)
    RPAREN          reduce using rule 206 (variable -> base_variable_with_function_calls .)
    COMMA           reduce using rule 206 (variable -> base_variable_with_function_calls .)
    DOUBLE_ARROW    reduce using rule 206 (variable -> base_variable_with_function_calls .)
    RBRACKET        reduce using rule 206 (variable -> base_variable_with_function_calls .)
    RBRACE          reduce using rule 206 (variable -> base_variable_with_function_calls .)
    COLON           reduce using rule 206 (variable -> base_variable_with_function_calls .)
    AS              reduce using rule 206 (variable -> base_variable_with_function_calls .)

  ! OBJECT_OPERATOR [ reduce using rule 206 (variable -> base_variable_with_function_calls .) ]


state 74

    (350) scalar -> class_constant .

    SEMI            reduce using rule 350 (scalar -> class_constant .)
    OBJECT_OPERATOR reduce using rule 350 (scalar -> class_constant .)
    LBRACE          reduce using rule 350 (scalar -> class_constant .)
    BOOLEAN_AND     reduce using rule 350 (scalar -> class_constant .)
    BOOLEAN_OR      reduce using rule 350 (scalar -> class_constant .)
    LOGICAL_AND     reduce using rule 350 (scalar -> class_constant .)
    LOGICAL_OR      reduce using rule 350 (scalar -> class_constant .)
    LOGICAL_XOR     reduce using rule 350 (scalar -> class_constant .)
    AND             reduce using rule 350 (scalar -> class_constant .)
    OR              reduce using rule 350 (scalar -> class_constant .)
    XOR             reduce using rule 350 (scalar -> class_constant .)
    CONCAT          reduce using rule 350 (scalar -> class_constant .)
    PLUS            reduce using rule 350 (scalar -> class_constant .)
    MINUS           reduce using rule 350 (scalar -> class_constant .)
    MUL             reduce using rule 350 (scalar -> class_constant .)
    DIV             reduce using rule 350 (scalar -> class_constant .)
    SL              reduce using rule 350 (scalar -> class_constant .)
    SR              reduce using rule 350 (scalar -> class_constant .)
    MOD             reduce using rule 350 (scalar -> class_constant .)
    IS_IDENTICAL    reduce using rule 350 (scalar -> class_constant .)
    IS_NOT_IDENTICAL reduce using rule 350 (scalar -> class_constant .)
    IS_EQUAL        reduce using rule 350 (scalar -> class_constant .)
    IS_NOT_EQUAL    reduce using rule 350 (scalar -> class_constant .)
    IS_SMALLER      reduce using rule 350 (scalar -> class_constant .)
    IS_SMALLER_OR_EQUAL reduce using rule 350 (scalar -> class_constant .)
    IS_GREATER      reduce using rule 350 (scalar -> class_constant .)
    IS_GREATER_OR_EQUAL reduce using rule 350 (scalar -> class_constant .)
    INSTANCEOF      reduce using rule 350 (scalar -> class_constant .)
    QUESTION        reduce using rule 350 (scalar -> class_constant .)
    RPAREN          reduce using rule 350 (scalar -> class_constant .)
    COMMA           reduce using rule 350 (scalar -> class_constant .)
    DOUBLE_ARROW    reduce using rule 350 (scalar -> class_constant .)
    RBRACKET        reduce using rule 350 (scalar -> class_constant .)
    RBRACE          reduce using rule 350 (scalar -> class_constant .)
    COLON           reduce using rule 350 (scalar -> class_constant .)
    AS              reduce using rule 350 (scalar -> class_constant .)


state 75

    (351) scalar -> common_scalar .

    SEMI            reduce using rule 351 (scalar -> common_scalar .)
    OBJECT_OPERATOR reduce using rule 351 (scalar -> common_scalar .)
    LBRACE          reduce using rule 351 (scalar -> common_scalar .)
    BOOLEAN_AND     reduce using rule 351 (scalar -> common_scalar .)
    BOOLEAN_OR      reduce using rule 351 (scalar -> common_scalar .)
    LOGICAL_AND     reduce using rule 351 (scalar -> common_scalar .)
    LOGICAL_OR      reduce using rule 351 (scalar -> common_scalar .)
    LOGICAL_XOR     reduce using rule 351 (scalar -> common_scalar .)
    AND             reduce using rule 351 (scalar -> common_scalar .)
    OR              reduce using rule 351 (scalar -> common_scalar .)
    XOR             reduce using rule 351 (scalar -> common_scalar .)
    CONCAT          reduce using rule 351 (scalar -> common_scalar .)
    PLUS            reduce using rule 351 (scalar -> common_scalar .)
    MINUS           reduce using rule 351 (scalar -> common_scalar .)
    MUL             reduce using rule 351 (scalar -> common_scalar .)
    DIV             reduce using rule 351 (scalar -> common_scalar .)
    SL              reduce using rule 351 (scalar -> common_scalar .)
    SR              reduce using rule 351 (scalar -> common_scalar .)
    MOD             reduce using rule 351 (scalar -> common_scalar .)
    IS_IDENTICAL    reduce using rule 351 (scalar -> common_scalar .)
    IS_NOT_IDENTICAL reduce using rule 351 (scalar -> common_scalar .)
    IS_EQUAL        reduce using rule 351 (scalar -> common_scalar .)
    IS_NOT_EQUAL    reduce using rule 351 (scalar -> common_scalar .)
    IS_SMALLER      reduce using rule 351 (scalar -> common_scalar .)
    IS_SMALLER_OR_EQUAL reduce using rule 351 (scalar -> common_scalar .)
    IS_GREATER      reduce using rule 351 (scalar -> common_scalar .)
    IS_GREATER_OR_EQUAL reduce using rule 351 (scalar -> common_scalar .)
    INSTANCEOF      reduce using rule 351 (scalar -> common_scalar .)
    QUESTION        reduce using rule 351 (scalar -> common_scalar .)
    RPAREN          reduce using rule 351 (scalar -> common_scalar .)
    COMMA           reduce using rule 351 (scalar -> common_scalar .)
    DOUBLE_ARROW    reduce using rule 351 (scalar -> common_scalar .)
    RBRACKET        reduce using rule 351 (scalar -> common_scalar .)
    RBRACE          reduce using rule 351 (scalar -> common_scalar .)
    COLON           reduce using rule 351 (scalar -> common_scalar .)
    AS              reduce using rule 351 (scalar -> common_scalar .)


state 76

    (352) scalar -> QUOTE . encaps_list QUOTE
    (431) encaps_list -> . encaps_list encaps_var
    (432) encaps_list -> . empty
    (433) encaps_list -> . encaps_list ENCAPSED_AND_WHITESPACE
    (443) empty -> .

    QUOTE           reduce using rule 443 (empty -> .)
    ENCAPSED_AND_WHITESPACE reduce using rule 443 (empty -> .)
    VARIABLE        reduce using rule 443 (empty -> .)
    DOLLAR_OPEN_CURLY_BRACES reduce using rule 443 (empty -> .)
    CURLY_OPEN      reduce using rule 443 (empty -> .)

    encaps_list                    shift and go to state 257
    empty                          shift and go to state 258

state 77

    (354) scalar -> scalar_heredoc .

    SEMI            reduce using rule 354 (scalar -> scalar_heredoc .)
    OBJECT_OPERATOR reduce using rule 354 (scalar -> scalar_heredoc .)
    LBRACE          reduce using rule 354 (scalar -> scalar_heredoc .)
    BOOLEAN_AND     reduce using rule 354 (scalar -> scalar_heredoc .)
    BOOLEAN_OR      reduce using rule 354 (scalar -> scalar_heredoc .)
    LOGICAL_AND     reduce using rule 354 (scalar -> scalar_heredoc .)
    LOGICAL_OR      reduce using rule 354 (scalar -> scalar_heredoc .)
    LOGICAL_XOR     reduce using rule 354 (scalar -> scalar_heredoc .)
    AND             reduce using rule 354 (scalar -> scalar_heredoc .)
    OR              reduce using rule 354 (scalar -> scalar_heredoc .)
    XOR             reduce using rule 354 (scalar -> scalar_heredoc .)
    CONCAT          reduce using rule 354 (scalar -> scalar_heredoc .)
    PLUS            reduce using rule 354 (scalar -> scalar_heredoc .)
    MINUS           reduce using rule 354 (scalar -> scalar_heredoc .)
    MUL             reduce using rule 354 (scalar -> scalar_heredoc .)
    DIV             reduce using rule 354 (scalar -> scalar_heredoc .)
    SL              reduce using rule 354 (scalar -> scalar_heredoc .)
    SR              reduce using rule 354 (scalar -> scalar_heredoc .)
    MOD             reduce using rule 354 (scalar -> scalar_heredoc .)
    IS_IDENTICAL    reduce using rule 354 (scalar -> scalar_heredoc .)
    IS_NOT_IDENTICAL reduce using rule 354 (scalar -> scalar_heredoc .)
    IS_EQUAL        reduce using rule 354 (scalar -> scalar_heredoc .)
    IS_NOT_EQUAL    reduce using rule 354 (scalar -> scalar_heredoc .)
    IS_SMALLER      reduce using rule 354 (scalar -> scalar_heredoc .)
    IS_SMALLER_OR_EQUAL reduce using rule 354 (scalar -> scalar_heredoc .)
    IS_GREATER      reduce using rule 354 (scalar -> scalar_heredoc .)
    IS_GREATER_OR_EQUAL reduce using rule 354 (scalar -> scalar_heredoc .)
    INSTANCEOF      reduce using rule 354 (scalar -> scalar_heredoc .)
    QUESTION        reduce using rule 354 (scalar -> scalar_heredoc .)
    RPAREN          reduce using rule 354 (scalar -> scalar_heredoc .)
    COMMA           reduce using rule 354 (scalar -> scalar_heredoc .)
    DOUBLE_ARROW    reduce using rule 354 (scalar -> scalar_heredoc .)
    RBRACKET        reduce using rule 354 (scalar -> scalar_heredoc .)
    RBRACE          reduce using rule 354 (scalar -> scalar_heredoc .)
    COLON           reduce using rule 354 (scalar -> scalar_heredoc .)
    AS              reduce using rule 354 (scalar -> scalar_heredoc .)


state 78

    (355) scalar -> nowdoc .

    SEMI            reduce using rule 355 (scalar -> nowdoc .)
    OBJECT_OPERATOR reduce using rule 355 (scalar -> nowdoc .)
    LBRACE          reduce using rule 355 (scalar -> nowdoc .)
    BOOLEAN_AND     reduce using rule 355 (scalar -> nowdoc .)
    BOOLEAN_OR      reduce using rule 355 (scalar -> nowdoc .)
    LOGICAL_AND     reduce using rule 355 (scalar -> nowdoc .)
    LOGICAL_OR      reduce using rule 355 (scalar -> nowdoc .)
    LOGICAL_XOR     reduce using rule 355 (scalar -> nowdoc .)
    AND             reduce using rule 355 (scalar -> nowdoc .)
    OR              reduce using rule 355 (scalar -> nowdoc .)
    XOR             reduce using rule 355 (scalar -> nowdoc .)
    CONCAT          reduce using rule 355 (scalar -> nowdoc .)
    PLUS            reduce using rule 355 (scalar -> nowdoc .)
    MINUS           reduce using rule 355 (scalar -> nowdoc .)
    MUL             reduce using rule 355 (scalar -> nowdoc .)
    DIV             reduce using rule 355 (scalar -> nowdoc .)
    SL              reduce using rule 355 (scalar -> nowdoc .)
    SR              reduce using rule 355 (scalar -> nowdoc .)
    MOD             reduce using rule 355 (scalar -> nowdoc .)
    IS_IDENTICAL    reduce using rule 355 (scalar -> nowdoc .)
    IS_NOT_IDENTICAL reduce using rule 355 (scalar -> nowdoc .)
    IS_EQUAL        reduce using rule 355 (scalar -> nowdoc .)
    IS_NOT_EQUAL    reduce using rule 355 (scalar -> nowdoc .)
    IS_SMALLER      reduce using rule 355 (scalar -> nowdoc .)
    IS_SMALLER_OR_EQUAL reduce using rule 355 (scalar -> nowdoc .)
    IS_GREATER      reduce using rule 355 (scalar -> nowdoc .)
    IS_GREATER_OR_EQUAL reduce using rule 355 (scalar -> nowdoc .)
    INSTANCEOF      reduce using rule 355 (scalar -> nowdoc .)
    QUESTION        reduce using rule 355 (scalar -> nowdoc .)
    RPAREN          reduce using rule 355 (scalar -> nowdoc .)
    COMMA           reduce using rule 355 (scalar -> nowdoc .)
    DOUBLE_ARROW    reduce using rule 355 (scalar -> nowdoc .)
    RBRACKET        reduce using rule 355 (scalar -> nowdoc .)
    RBRACE          reduce using rule 355 (scalar -> nowdoc .)
    COLON           reduce using rule 355 (scalar -> nowdoc .)
    AS              reduce using rule 355 (scalar -> nowdoc .)


state 79

    (356) scalar -> class_name_constant .

    SEMI            reduce using rule 356 (scalar -> class_name_constant .)
    OBJECT_OPERATOR reduce using rule 356 (scalar -> class_name_constant .)
    LBRACE          reduce using rule 356 (scalar -> class_name_constant .)
    BOOLEAN_AND     reduce using rule 356 (scalar -> class_name_constant .)
    BOOLEAN_OR      reduce using rule 356 (scalar -> class_name_constant .)
    LOGICAL_AND     reduce using rule 356 (scalar -> class_name_constant .)
    LOGICAL_OR      reduce using rule 356 (scalar -> class_name_constant .)
    LOGICAL_XOR     reduce using rule 356 (scalar -> class_name_constant .)
    AND             reduce using rule 356 (scalar -> class_name_constant .)
    OR              reduce using rule 356 (scalar -> class_name_constant .)
    XOR             reduce using rule 356 (scalar -> class_name_constant .)
    CONCAT          reduce using rule 356 (scalar -> class_name_constant .)
    PLUS            reduce using rule 356 (scalar -> class_name_constant .)
    MINUS           reduce using rule 356 (scalar -> class_name_constant .)
    MUL             reduce using rule 356 (scalar -> class_name_constant .)
    DIV             reduce using rule 356 (scalar -> class_name_constant .)
    SL              reduce using rule 356 (scalar -> class_name_constant .)
    SR              reduce using rule 356 (scalar -> class_name_constant .)
    MOD             reduce using rule 356 (scalar -> class_name_constant .)
    IS_IDENTICAL    reduce using rule 356 (scalar -> class_name_constant .)
    IS_NOT_IDENTICAL reduce using rule 356 (scalar -> class_name_constant .)
    IS_EQUAL        reduce using rule 356 (scalar -> class_name_constant .)
    IS_NOT_EQUAL    reduce using rule 356 (scalar -> class_name_constant .)
    IS_SMALLER      reduce using rule 356 (scalar -> class_name_constant .)
    IS_SMALLER_OR_EQUAL reduce using rule 356 (scalar -> class_name_constant .)
    IS_GREATER      reduce using rule 356 (scalar -> class_name_constant .)
    IS_GREATER_OR_EQUAL reduce using rule 356 (scalar -> class_name_constant .)
    INSTANCEOF      reduce using rule 356 (scalar -> class_name_constant .)
    QUESTION        reduce using rule 356 (scalar -> class_name_constant .)
    RPAREN          reduce using rule 356 (scalar -> class_name_constant .)
    COMMA           reduce using rule 356 (scalar -> class_name_constant .)
    DOUBLE_ARROW    reduce using rule 356 (scalar -> class_name_constant .)
    RBRACKET        reduce using rule 356 (scalar -> class_name_constant .)
    RBRACE          reduce using rule 356 (scalar -> class_name_constant .)
    COLON           reduce using rule 356 (scalar -> class_name_constant .)
    AS              reduce using rule 356 (scalar -> class_name_constant .)


state 80

    (361) scalar -> STRING_VARNAME .

    SEMI            reduce using rule 361 (scalar -> STRING_VARNAME .)
    OBJECT_OPERATOR reduce using rule 361 (scalar -> STRING_VARNAME .)
    LBRACE          reduce using rule 361 (scalar -> STRING_VARNAME .)
    BOOLEAN_AND     reduce using rule 361 (scalar -> STRING_VARNAME .)
    BOOLEAN_OR      reduce using rule 361 (scalar -> STRING_VARNAME .)
    LOGICAL_AND     reduce using rule 361 (scalar -> STRING_VARNAME .)
    LOGICAL_OR      reduce using rule 361 (scalar -> STRING_VARNAME .)
    LOGICAL_XOR     reduce using rule 361 (scalar -> STRING_VARNAME .)
    AND             reduce using rule 361 (scalar -> STRING_VARNAME .)
    OR              reduce using rule 361 (scalar -> STRING_VARNAME .)
    XOR             reduce using rule 361 (scalar -> STRING_VARNAME .)
    CONCAT          reduce using rule 361 (scalar -> STRING_VARNAME .)
    PLUS            reduce using rule 361 (scalar -> STRING_VARNAME .)
    MINUS           reduce using rule 361 (scalar -> STRING_VARNAME .)
    MUL             reduce using rule 361 (scalar -> STRING_VARNAME .)
    DIV             reduce using rule 361 (scalar -> STRING_VARNAME .)
    SL              reduce using rule 361 (scalar -> STRING_VARNAME .)
    SR              reduce using rule 361 (scalar -> STRING_VARNAME .)
    MOD             reduce using rule 361 (scalar -> STRING_VARNAME .)
    IS_IDENTICAL    reduce using rule 361 (scalar -> STRING_VARNAME .)
    IS_NOT_IDENTICAL reduce using rule 361 (scalar -> STRING_VARNAME .)
    IS_EQUAL        reduce using rule 361 (scalar -> STRING_VARNAME .)
    IS_NOT_EQUAL    reduce using rule 361 (scalar -> STRING_VARNAME .)
    IS_SMALLER      reduce using rule 361 (scalar -> STRING_VARNAME .)
    IS_SMALLER_OR_EQUAL reduce using rule 361 (scalar -> STRING_VARNAME .)
    IS_GREATER      reduce using rule 361 (scalar -> STRING_VARNAME .)
    IS_GREATER_OR_EQUAL reduce using rule 361 (scalar -> STRING_VARNAME .)
    INSTANCEOF      reduce using rule 361 (scalar -> STRING_VARNAME .)
    QUESTION        reduce using rule 361 (scalar -> STRING_VARNAME .)
    RPAREN          reduce using rule 361 (scalar -> STRING_VARNAME .)
    COMMA           reduce using rule 361 (scalar -> STRING_VARNAME .)
    DOUBLE_ARROW    reduce using rule 361 (scalar -> STRING_VARNAME .)
    RBRACKET        reduce using rule 361 (scalar -> STRING_VARNAME .)
    RBRACE          reduce using rule 361 (scalar -> STRING_VARNAME .)
    COLON           reduce using rule 361 (scalar -> STRING_VARNAME .)
    AS              reduce using rule 361 (scalar -> STRING_VARNAME .)


state 81

    (363) scalar -> NS_SEPARATOR . namespace_name
    (210) function_call -> NS_SEPARATOR . namespace_name LPAREN function_call_parameter_list RPAREN
    (188) class_name -> NS_SEPARATOR . namespace_name
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    STRING          shift and go to state 116
    ARRAY           shift and go to state 117

    namespace_name                 shift and go to state 259

state 82

    (342) exit_or_die -> EXIT .

    LPAREN          reduce using rule 342 (exit_or_die -> EXIT .)
    SEMI            reduce using rule 342 (exit_or_die -> EXIT .)
    OBJECT_OPERATOR reduce using rule 342 (exit_or_die -> EXIT .)
    LBRACE          reduce using rule 342 (exit_or_die -> EXIT .)
    BOOLEAN_AND     reduce using rule 342 (exit_or_die -> EXIT .)
    BOOLEAN_OR      reduce using rule 342 (exit_or_die -> EXIT .)
    LOGICAL_AND     reduce using rule 342 (exit_or_die -> EXIT .)
    LOGICAL_OR      reduce using rule 342 (exit_or_die -> EXIT .)
    LOGICAL_XOR     reduce using rule 342 (exit_or_die -> EXIT .)
    AND             reduce using rule 342 (exit_or_die -> EXIT .)
    OR              reduce using rule 342 (exit_or_die -> EXIT .)
    XOR             reduce using rule 342 (exit_or_die -> EXIT .)
    CONCAT          reduce using rule 342 (exit_or_die -> EXIT .)
    PLUS            reduce using rule 342 (exit_or_die -> EXIT .)
    MINUS           reduce using rule 342 (exit_or_die -> EXIT .)
    MUL             reduce using rule 342 (exit_or_die -> EXIT .)
    DIV             reduce using rule 342 (exit_or_die -> EXIT .)
    SL              reduce using rule 342 (exit_or_die -> EXIT .)
    SR              reduce using rule 342 (exit_or_die -> EXIT .)
    MOD             reduce using rule 342 (exit_or_die -> EXIT .)
    IS_IDENTICAL    reduce using rule 342 (exit_or_die -> EXIT .)
    IS_NOT_IDENTICAL reduce using rule 342 (exit_or_die -> EXIT .)
    IS_EQUAL        reduce using rule 342 (exit_or_die -> EXIT .)
    IS_NOT_EQUAL    reduce using rule 342 (exit_or_die -> EXIT .)
    IS_SMALLER      reduce using rule 342 (exit_or_die -> EXIT .)
    IS_SMALLER_OR_EQUAL reduce using rule 342 (exit_or_die -> EXIT .)
    IS_GREATER      reduce using rule 342 (exit_or_die -> EXIT .)
    IS_GREATER_OR_EQUAL reduce using rule 342 (exit_or_die -> EXIT .)
    INSTANCEOF      reduce using rule 342 (exit_or_die -> EXIT .)
    QUESTION        reduce using rule 342 (exit_or_die -> EXIT .)
    RPAREN          reduce using rule 342 (exit_or_die -> EXIT .)
    COMMA           reduce using rule 342 (exit_or_die -> EXIT .)
    DOUBLE_ARROW    reduce using rule 342 (exit_or_die -> EXIT .)
    RBRACKET        reduce using rule 342 (exit_or_die -> EXIT .)
    RBRACE          reduce using rule 342 (exit_or_die -> EXIT .)
    COLON           reduce using rule 342 (exit_or_die -> EXIT .)
    AS              reduce using rule 342 (exit_or_die -> EXIT .)


state 83

    (343) exit_or_die -> DIE .

    LPAREN          reduce using rule 343 (exit_or_die -> DIE .)
    SEMI            reduce using rule 343 (exit_or_die -> DIE .)
    OBJECT_OPERATOR reduce using rule 343 (exit_or_die -> DIE .)
    LBRACE          reduce using rule 343 (exit_or_die -> DIE .)
    BOOLEAN_AND     reduce using rule 343 (exit_or_die -> DIE .)
    BOOLEAN_OR      reduce using rule 343 (exit_or_die -> DIE .)
    LOGICAL_AND     reduce using rule 343 (exit_or_die -> DIE .)
    LOGICAL_OR      reduce using rule 343 (exit_or_die -> DIE .)
    LOGICAL_XOR     reduce using rule 343 (exit_or_die -> DIE .)
    AND             reduce using rule 343 (exit_or_die -> DIE .)
    OR              reduce using rule 343 (exit_or_die -> DIE .)
    XOR             reduce using rule 343 (exit_or_die -> DIE .)
    CONCAT          reduce using rule 343 (exit_or_die -> DIE .)
    PLUS            reduce using rule 343 (exit_or_die -> DIE .)
    MINUS           reduce using rule 343 (exit_or_die -> DIE .)
    MUL             reduce using rule 343 (exit_or_die -> DIE .)
    DIV             reduce using rule 343 (exit_or_die -> DIE .)
    SL              reduce using rule 343 (exit_or_die -> DIE .)
    SR              reduce using rule 343 (exit_or_die -> DIE .)
    MOD             reduce using rule 343 (exit_or_die -> DIE .)
    IS_IDENTICAL    reduce using rule 343 (exit_or_die -> DIE .)
    IS_NOT_IDENTICAL reduce using rule 343 (exit_or_die -> DIE .)
    IS_EQUAL        reduce using rule 343 (exit_or_die -> DIE .)
    IS_NOT_EQUAL    reduce using rule 343 (exit_or_die -> DIE .)
    IS_SMALLER      reduce using rule 343 (exit_or_die -> DIE .)
    IS_SMALLER_OR_EQUAL reduce using rule 343 (exit_or_die -> DIE .)
    IS_GREATER      reduce using rule 343 (exit_or_die -> DIE .)
    IS_GREATER_OR_EQUAL reduce using rule 343 (exit_or_die -> DIE .)
    INSTANCEOF      reduce using rule 343 (exit_or_die -> DIE .)
    QUESTION        reduce using rule 343 (exit_or_die -> DIE .)
    RPAREN          reduce using rule 343 (exit_or_die -> DIE .)
    COMMA           reduce using rule 343 (exit_or_die -> DIE .)
    DOUBLE_ARROW    reduce using rule 343 (exit_or_die -> DIE .)
    RBRACKET        reduce using rule 343 (exit_or_die -> DIE .)
    RBRACE          reduce using rule 343 (exit_or_die -> DIE .)
    COLON           reduce using rule 343 (exit_or_die -> DIE .)
    AS              reduce using rule 343 (exit_or_die -> DIE .)


state 84

    (207) base_variable_with_function_calls -> base_variable .

    OBJECT_OPERATOR reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    EQUALS          reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    PLUS_EQUAL      reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    MINUS_EQUAL     reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    MUL_EQUAL       reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    DIV_EQUAL       reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    CONCAT_EQUAL    reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    MOD_EQUAL       reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    AND_EQUAL       reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    OR_EQUAL        reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    XOR_EQUAL       reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    SL_EQUAL        reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    SR_EQUAL        reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    INC             reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    DEC             reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    LBRACKET        reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    SEMI            reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    LBRACE          reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    BOOLEAN_AND     reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    BOOLEAN_OR      reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    LOGICAL_AND     reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    LOGICAL_OR      reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    LOGICAL_XOR     reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    AND             reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    OR              reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    XOR             reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    CONCAT          reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    PLUS            reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    MINUS           reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    MUL             reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    DIV             reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    SL              reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    SR              reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    MOD             reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    IS_IDENTICAL    reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    IS_NOT_IDENTICAL reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    IS_EQUAL        reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    IS_NOT_EQUAL    reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    IS_SMALLER      reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    IS_GREATER      reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    INSTANCEOF      reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    QUESTION        reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    RPAREN          reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    COMMA           reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    DOUBLE_ARROW    reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    RBRACKET        reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    RBRACE          reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    COLON           reduce using rule 207 (base_variable_with_function_calls -> base_variable .)
    AS              reduce using rule 207 (base_variable_with_function_calls -> base_variable .)


state 85

    (208) base_variable_with_function_calls -> function_call .

    OBJECT_OPERATOR reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    EQUALS          reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    PLUS_EQUAL      reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    MINUS_EQUAL     reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    MUL_EQUAL       reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    DIV_EQUAL       reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    CONCAT_EQUAL    reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    MOD_EQUAL       reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    AND_EQUAL       reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    OR_EQUAL        reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    XOR_EQUAL       reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    SL_EQUAL        reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    SR_EQUAL        reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    INC             reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    DEC             reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    LBRACKET        reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    SEMI            reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    LBRACE          reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    BOOLEAN_AND     reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    BOOLEAN_OR      reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    LOGICAL_AND     reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    LOGICAL_OR      reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    LOGICAL_XOR     reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    AND             reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    OR              reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    XOR             reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    CONCAT          reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    PLUS            reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    MINUS           reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    MUL             reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    DIV             reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    SL              reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    SR              reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    MOD             reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    IS_IDENTICAL    reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    IS_NOT_IDENTICAL reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    IS_EQUAL        reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    IS_NOT_EQUAL    reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    IS_SMALLER      reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    IS_SMALLER_OR_EQUAL reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    IS_GREATER      reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    IS_GREATER_OR_EQUAL reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    INSTANCEOF      reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    QUESTION        reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    RPAREN          reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    COMMA           reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    DOUBLE_ARROW    reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    RBRACKET        reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    RBRACE          reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    COLON           reduce using rule 208 (base_variable_with_function_calls -> function_call .)
    AS              reduce using rule 208 (base_variable_with_function_calls -> function_call .)


state 86

    (365) class_constant -> class_name . DOUBLE_COLON STRING
    (385) class_name_constant -> class_name . DOUBLE_COLON CLASS
    (212) function_call -> class_name . DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> class_name . DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> class_name . DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (229) static_member -> class_name . DOUBLE_COLON variable_without_objects
    (231) static_member -> class_name . DOUBLE_COLON LBRACE expr RBRACE

    DOUBLE_COLON    shift and go to state 260


state 87

    (366) class_constant -> variable_class_name . DOUBLE_COLON STRING
    (214) function_call -> variable_class_name . DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> variable_class_name . DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (217) function_call -> variable_class_name . DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (230) static_member -> variable_class_name . DOUBLE_COLON variable_without_objects
    (232) static_member -> variable_class_name . DOUBLE_COLON LBRACE expr RBRACE

    DOUBLE_COLON    shift and go to state 261


state 88

    (367) common_scalar -> LNUMBER .

    SEMI            reduce using rule 367 (common_scalar -> LNUMBER .)
    OBJECT_OPERATOR reduce using rule 367 (common_scalar -> LNUMBER .)
    LBRACE          reduce using rule 367 (common_scalar -> LNUMBER .)
    BOOLEAN_AND     reduce using rule 367 (common_scalar -> LNUMBER .)
    BOOLEAN_OR      reduce using rule 367 (common_scalar -> LNUMBER .)
    LOGICAL_AND     reduce using rule 367 (common_scalar -> LNUMBER .)
    LOGICAL_OR      reduce using rule 367 (common_scalar -> LNUMBER .)
    LOGICAL_XOR     reduce using rule 367 (common_scalar -> LNUMBER .)
    AND             reduce using rule 367 (common_scalar -> LNUMBER .)
    OR              reduce using rule 367 (common_scalar -> LNUMBER .)
    XOR             reduce using rule 367 (common_scalar -> LNUMBER .)
    CONCAT          reduce using rule 367 (common_scalar -> LNUMBER .)
    PLUS            reduce using rule 367 (common_scalar -> LNUMBER .)
    MINUS           reduce using rule 367 (common_scalar -> LNUMBER .)
    MUL             reduce using rule 367 (common_scalar -> LNUMBER .)
    DIV             reduce using rule 367 (common_scalar -> LNUMBER .)
    SL              reduce using rule 367 (common_scalar -> LNUMBER .)
    SR              reduce using rule 367 (common_scalar -> LNUMBER .)
    MOD             reduce using rule 367 (common_scalar -> LNUMBER .)
    IS_IDENTICAL    reduce using rule 367 (common_scalar -> LNUMBER .)
    IS_NOT_IDENTICAL reduce using rule 367 (common_scalar -> LNUMBER .)
    IS_EQUAL        reduce using rule 367 (common_scalar -> LNUMBER .)
    IS_NOT_EQUAL    reduce using rule 367 (common_scalar -> LNUMBER .)
    IS_SMALLER      reduce using rule 367 (common_scalar -> LNUMBER .)
    IS_SMALLER_OR_EQUAL reduce using rule 367 (common_scalar -> LNUMBER .)
    IS_GREATER      reduce using rule 367 (common_scalar -> LNUMBER .)
    IS_GREATER_OR_EQUAL reduce using rule 367 (common_scalar -> LNUMBER .)
    INSTANCEOF      reduce using rule 367 (common_scalar -> LNUMBER .)
    QUESTION        reduce using rule 367 (common_scalar -> LNUMBER .)
    RPAREN          reduce using rule 367 (common_scalar -> LNUMBER .)
    COMMA           reduce using rule 367 (common_scalar -> LNUMBER .)
    DOUBLE_ARROW    reduce using rule 367 (common_scalar -> LNUMBER .)
    RBRACKET        reduce using rule 367 (common_scalar -> LNUMBER .)
    RBRACE          reduce using rule 367 (common_scalar -> LNUMBER .)
    COLON           reduce using rule 367 (common_scalar -> LNUMBER .)
    AS              reduce using rule 367 (common_scalar -> LNUMBER .)


state 89

    (368) common_scalar -> DNUMBER .

    SEMI            reduce using rule 368 (common_scalar -> DNUMBER .)
    OBJECT_OPERATOR reduce using rule 368 (common_scalar -> DNUMBER .)
    LBRACE          reduce using rule 368 (common_scalar -> DNUMBER .)
    BOOLEAN_AND     reduce using rule 368 (common_scalar -> DNUMBER .)
    BOOLEAN_OR      reduce using rule 368 (common_scalar -> DNUMBER .)
    LOGICAL_AND     reduce using rule 368 (common_scalar -> DNUMBER .)
    LOGICAL_OR      reduce using rule 368 (common_scalar -> DNUMBER .)
    LOGICAL_XOR     reduce using rule 368 (common_scalar -> DNUMBER .)
    AND             reduce using rule 368 (common_scalar -> DNUMBER .)
    OR              reduce using rule 368 (common_scalar -> DNUMBER .)
    XOR             reduce using rule 368 (common_scalar -> DNUMBER .)
    CONCAT          reduce using rule 368 (common_scalar -> DNUMBER .)
    PLUS            reduce using rule 368 (common_scalar -> DNUMBER .)
    MINUS           reduce using rule 368 (common_scalar -> DNUMBER .)
    MUL             reduce using rule 368 (common_scalar -> DNUMBER .)
    DIV             reduce using rule 368 (common_scalar -> DNUMBER .)
    SL              reduce using rule 368 (common_scalar -> DNUMBER .)
    SR              reduce using rule 368 (common_scalar -> DNUMBER .)
    MOD             reduce using rule 368 (common_scalar -> DNUMBER .)
    IS_IDENTICAL    reduce using rule 368 (common_scalar -> DNUMBER .)
    IS_NOT_IDENTICAL reduce using rule 368 (common_scalar -> DNUMBER .)
    IS_EQUAL        reduce using rule 368 (common_scalar -> DNUMBER .)
    IS_NOT_EQUAL    reduce using rule 368 (common_scalar -> DNUMBER .)
    IS_SMALLER      reduce using rule 368 (common_scalar -> DNUMBER .)
    IS_SMALLER_OR_EQUAL reduce using rule 368 (common_scalar -> DNUMBER .)
    IS_GREATER      reduce using rule 368 (common_scalar -> DNUMBER .)
    IS_GREATER_OR_EQUAL reduce using rule 368 (common_scalar -> DNUMBER .)
    INSTANCEOF      reduce using rule 368 (common_scalar -> DNUMBER .)
    QUESTION        reduce using rule 368 (common_scalar -> DNUMBER .)
    RPAREN          reduce using rule 368 (common_scalar -> DNUMBER .)
    COMMA           reduce using rule 368 (common_scalar -> DNUMBER .)
    DOUBLE_ARROW    reduce using rule 368 (common_scalar -> DNUMBER .)
    RBRACKET        reduce using rule 368 (common_scalar -> DNUMBER .)
    RBRACE          reduce using rule 368 (common_scalar -> DNUMBER .)
    COLON           reduce using rule 368 (common_scalar -> DNUMBER .)
    AS              reduce using rule 368 (common_scalar -> DNUMBER .)


state 90

    (369) common_scalar -> CONSTANT_ENCAPSED_STRING .

    SEMI            reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    OBJECT_OPERATOR reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    LBRACE          reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    BOOLEAN_AND     reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    BOOLEAN_OR      reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    LOGICAL_AND     reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    LOGICAL_OR      reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    LOGICAL_XOR     reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    AND             reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    OR              reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    XOR             reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    CONCAT          reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    PLUS            reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    MINUS           reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    MUL             reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    DIV             reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    SL              reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    SR              reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    MOD             reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    IS_IDENTICAL    reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    IS_NOT_IDENTICAL reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    IS_EQUAL        reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    IS_NOT_EQUAL    reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    IS_SMALLER      reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    IS_GREATER      reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    INSTANCEOF      reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    QUESTION        reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    COMMA           reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    DOUBLE_ARROW    reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    RBRACKET        reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    RBRACE          reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    COLON           reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)
    AS              reduce using rule 369 (common_scalar -> CONSTANT_ENCAPSED_STRING .)


state 91

    (371) common_scalar -> LINE .

    SEMI            reduce using rule 371 (common_scalar -> LINE .)
    OBJECT_OPERATOR reduce using rule 371 (common_scalar -> LINE .)
    LBRACE          reduce using rule 371 (common_scalar -> LINE .)
    BOOLEAN_AND     reduce using rule 371 (common_scalar -> LINE .)
    BOOLEAN_OR      reduce using rule 371 (common_scalar -> LINE .)
    LOGICAL_AND     reduce using rule 371 (common_scalar -> LINE .)
    LOGICAL_OR      reduce using rule 371 (common_scalar -> LINE .)
    LOGICAL_XOR     reduce using rule 371 (common_scalar -> LINE .)
    AND             reduce using rule 371 (common_scalar -> LINE .)
    OR              reduce using rule 371 (common_scalar -> LINE .)
    XOR             reduce using rule 371 (common_scalar -> LINE .)
    CONCAT          reduce using rule 371 (common_scalar -> LINE .)
    PLUS            reduce using rule 371 (common_scalar -> LINE .)
    MINUS           reduce using rule 371 (common_scalar -> LINE .)
    MUL             reduce using rule 371 (common_scalar -> LINE .)
    DIV             reduce using rule 371 (common_scalar -> LINE .)
    SL              reduce using rule 371 (common_scalar -> LINE .)
    SR              reduce using rule 371 (common_scalar -> LINE .)
    MOD             reduce using rule 371 (common_scalar -> LINE .)
    IS_IDENTICAL    reduce using rule 371 (common_scalar -> LINE .)
    IS_NOT_IDENTICAL reduce using rule 371 (common_scalar -> LINE .)
    IS_EQUAL        reduce using rule 371 (common_scalar -> LINE .)
    IS_NOT_EQUAL    reduce using rule 371 (common_scalar -> LINE .)
    IS_SMALLER      reduce using rule 371 (common_scalar -> LINE .)
    IS_SMALLER_OR_EQUAL reduce using rule 371 (common_scalar -> LINE .)
    IS_GREATER      reduce using rule 371 (common_scalar -> LINE .)
    IS_GREATER_OR_EQUAL reduce using rule 371 (common_scalar -> LINE .)
    INSTANCEOF      reduce using rule 371 (common_scalar -> LINE .)
    QUESTION        reduce using rule 371 (common_scalar -> LINE .)
    RPAREN          reduce using rule 371 (common_scalar -> LINE .)
    COMMA           reduce using rule 371 (common_scalar -> LINE .)
    DOUBLE_ARROW    reduce using rule 371 (common_scalar -> LINE .)
    RBRACKET        reduce using rule 371 (common_scalar -> LINE .)
    RBRACE          reduce using rule 371 (common_scalar -> LINE .)
    COLON           reduce using rule 371 (common_scalar -> LINE .)
    AS              reduce using rule 371 (common_scalar -> LINE .)


state 92

    (372) common_scalar -> FILE .

    SEMI            reduce using rule 372 (common_scalar -> FILE .)
    OBJECT_OPERATOR reduce using rule 372 (common_scalar -> FILE .)
    LBRACE          reduce using rule 372 (common_scalar -> FILE .)
    BOOLEAN_AND     reduce using rule 372 (common_scalar -> FILE .)
    BOOLEAN_OR      reduce using rule 372 (common_scalar -> FILE .)
    LOGICAL_AND     reduce using rule 372 (common_scalar -> FILE .)
    LOGICAL_OR      reduce using rule 372 (common_scalar -> FILE .)
    LOGICAL_XOR     reduce using rule 372 (common_scalar -> FILE .)
    AND             reduce using rule 372 (common_scalar -> FILE .)
    OR              reduce using rule 372 (common_scalar -> FILE .)
    XOR             reduce using rule 372 (common_scalar -> FILE .)
    CONCAT          reduce using rule 372 (common_scalar -> FILE .)
    PLUS            reduce using rule 372 (common_scalar -> FILE .)
    MINUS           reduce using rule 372 (common_scalar -> FILE .)
    MUL             reduce using rule 372 (common_scalar -> FILE .)
    DIV             reduce using rule 372 (common_scalar -> FILE .)
    SL              reduce using rule 372 (common_scalar -> FILE .)
    SR              reduce using rule 372 (common_scalar -> FILE .)
    MOD             reduce using rule 372 (common_scalar -> FILE .)
    IS_IDENTICAL    reduce using rule 372 (common_scalar -> FILE .)
    IS_NOT_IDENTICAL reduce using rule 372 (common_scalar -> FILE .)
    IS_EQUAL        reduce using rule 372 (common_scalar -> FILE .)
    IS_NOT_EQUAL    reduce using rule 372 (common_scalar -> FILE .)
    IS_SMALLER      reduce using rule 372 (common_scalar -> FILE .)
    IS_SMALLER_OR_EQUAL reduce using rule 372 (common_scalar -> FILE .)
    IS_GREATER      reduce using rule 372 (common_scalar -> FILE .)
    IS_GREATER_OR_EQUAL reduce using rule 372 (common_scalar -> FILE .)
    INSTANCEOF      reduce using rule 372 (common_scalar -> FILE .)
    QUESTION        reduce using rule 372 (common_scalar -> FILE .)
    RPAREN          reduce using rule 372 (common_scalar -> FILE .)
    COMMA           reduce using rule 372 (common_scalar -> FILE .)
    DOUBLE_ARROW    reduce using rule 372 (common_scalar -> FILE .)
    RBRACKET        reduce using rule 372 (common_scalar -> FILE .)
    RBRACE          reduce using rule 372 (common_scalar -> FILE .)
    COLON           reduce using rule 372 (common_scalar -> FILE .)
    AS              reduce using rule 372 (common_scalar -> FILE .)


state 93

    (373) common_scalar -> DIR .

    SEMI            reduce using rule 373 (common_scalar -> DIR .)
    OBJECT_OPERATOR reduce using rule 373 (common_scalar -> DIR .)
    LBRACE          reduce using rule 373 (common_scalar -> DIR .)
    BOOLEAN_AND     reduce using rule 373 (common_scalar -> DIR .)
    BOOLEAN_OR      reduce using rule 373 (common_scalar -> DIR .)
    LOGICAL_AND     reduce using rule 373 (common_scalar -> DIR .)
    LOGICAL_OR      reduce using rule 373 (common_scalar -> DIR .)
    LOGICAL_XOR     reduce using rule 373 (common_scalar -> DIR .)
    AND             reduce using rule 373 (common_scalar -> DIR .)
    OR              reduce using rule 373 (common_scalar -> DIR .)
    XOR             reduce using rule 373 (common_scalar -> DIR .)
    CONCAT          reduce using rule 373 (common_scalar -> DIR .)
    PLUS            reduce using rule 373 (common_scalar -> DIR .)
    MINUS           reduce using rule 373 (common_scalar -> DIR .)
    MUL             reduce using rule 373 (common_scalar -> DIR .)
    DIV             reduce using rule 373 (common_scalar -> DIR .)
    SL              reduce using rule 373 (common_scalar -> DIR .)
    SR              reduce using rule 373 (common_scalar -> DIR .)
    MOD             reduce using rule 373 (common_scalar -> DIR .)
    IS_IDENTICAL    reduce using rule 373 (common_scalar -> DIR .)
    IS_NOT_IDENTICAL reduce using rule 373 (common_scalar -> DIR .)
    IS_EQUAL        reduce using rule 373 (common_scalar -> DIR .)
    IS_NOT_EQUAL    reduce using rule 373 (common_scalar -> DIR .)
    IS_SMALLER      reduce using rule 373 (common_scalar -> DIR .)
    IS_SMALLER_OR_EQUAL reduce using rule 373 (common_scalar -> DIR .)
    IS_GREATER      reduce using rule 373 (common_scalar -> DIR .)
    IS_GREATER_OR_EQUAL reduce using rule 373 (common_scalar -> DIR .)
    INSTANCEOF      reduce using rule 373 (common_scalar -> DIR .)
    QUESTION        reduce using rule 373 (common_scalar -> DIR .)
    RPAREN          reduce using rule 373 (common_scalar -> DIR .)
    COMMA           reduce using rule 373 (common_scalar -> DIR .)
    DOUBLE_ARROW    reduce using rule 373 (common_scalar -> DIR .)
    RBRACKET        reduce using rule 373 (common_scalar -> DIR .)
    RBRACE          reduce using rule 373 (common_scalar -> DIR .)
    COLON           reduce using rule 373 (common_scalar -> DIR .)
    AS              reduce using rule 373 (common_scalar -> DIR .)


state 94

    (374) common_scalar -> CLASS_C .

    SEMI            reduce using rule 374 (common_scalar -> CLASS_C .)
    OBJECT_OPERATOR reduce using rule 374 (common_scalar -> CLASS_C .)
    LBRACE          reduce using rule 374 (common_scalar -> CLASS_C .)
    BOOLEAN_AND     reduce using rule 374 (common_scalar -> CLASS_C .)
    BOOLEAN_OR      reduce using rule 374 (common_scalar -> CLASS_C .)
    LOGICAL_AND     reduce using rule 374 (common_scalar -> CLASS_C .)
    LOGICAL_OR      reduce using rule 374 (common_scalar -> CLASS_C .)
    LOGICAL_XOR     reduce using rule 374 (common_scalar -> CLASS_C .)
    AND             reduce using rule 374 (common_scalar -> CLASS_C .)
    OR              reduce using rule 374 (common_scalar -> CLASS_C .)
    XOR             reduce using rule 374 (common_scalar -> CLASS_C .)
    CONCAT          reduce using rule 374 (common_scalar -> CLASS_C .)
    PLUS            reduce using rule 374 (common_scalar -> CLASS_C .)
    MINUS           reduce using rule 374 (common_scalar -> CLASS_C .)
    MUL             reduce using rule 374 (common_scalar -> CLASS_C .)
    DIV             reduce using rule 374 (common_scalar -> CLASS_C .)
    SL              reduce using rule 374 (common_scalar -> CLASS_C .)
    SR              reduce using rule 374 (common_scalar -> CLASS_C .)
    MOD             reduce using rule 374 (common_scalar -> CLASS_C .)
    IS_IDENTICAL    reduce using rule 374 (common_scalar -> CLASS_C .)
    IS_NOT_IDENTICAL reduce using rule 374 (common_scalar -> CLASS_C .)
    IS_EQUAL        reduce using rule 374 (common_scalar -> CLASS_C .)
    IS_NOT_EQUAL    reduce using rule 374 (common_scalar -> CLASS_C .)
    IS_SMALLER      reduce using rule 374 (common_scalar -> CLASS_C .)
    IS_SMALLER_OR_EQUAL reduce using rule 374 (common_scalar -> CLASS_C .)
    IS_GREATER      reduce using rule 374 (common_scalar -> CLASS_C .)
    IS_GREATER_OR_EQUAL reduce using rule 374 (common_scalar -> CLASS_C .)
    INSTANCEOF      reduce using rule 374 (common_scalar -> CLASS_C .)
    QUESTION        reduce using rule 374 (common_scalar -> CLASS_C .)
    RPAREN          reduce using rule 374 (common_scalar -> CLASS_C .)
    COMMA           reduce using rule 374 (common_scalar -> CLASS_C .)
    DOUBLE_ARROW    reduce using rule 374 (common_scalar -> CLASS_C .)
    RBRACKET        reduce using rule 374 (common_scalar -> CLASS_C .)
    RBRACE          reduce using rule 374 (common_scalar -> CLASS_C .)
    COLON           reduce using rule 374 (common_scalar -> CLASS_C .)
    AS              reduce using rule 374 (common_scalar -> CLASS_C .)


state 95

    (375) common_scalar -> METHOD_C .

    SEMI            reduce using rule 375 (common_scalar -> METHOD_C .)
    OBJECT_OPERATOR reduce using rule 375 (common_scalar -> METHOD_C .)
    LBRACE          reduce using rule 375 (common_scalar -> METHOD_C .)
    BOOLEAN_AND     reduce using rule 375 (common_scalar -> METHOD_C .)
    BOOLEAN_OR      reduce using rule 375 (common_scalar -> METHOD_C .)
    LOGICAL_AND     reduce using rule 375 (common_scalar -> METHOD_C .)
    LOGICAL_OR      reduce using rule 375 (common_scalar -> METHOD_C .)
    LOGICAL_XOR     reduce using rule 375 (common_scalar -> METHOD_C .)
    AND             reduce using rule 375 (common_scalar -> METHOD_C .)
    OR              reduce using rule 375 (common_scalar -> METHOD_C .)
    XOR             reduce using rule 375 (common_scalar -> METHOD_C .)
    CONCAT          reduce using rule 375 (common_scalar -> METHOD_C .)
    PLUS            reduce using rule 375 (common_scalar -> METHOD_C .)
    MINUS           reduce using rule 375 (common_scalar -> METHOD_C .)
    MUL             reduce using rule 375 (common_scalar -> METHOD_C .)
    DIV             reduce using rule 375 (common_scalar -> METHOD_C .)
    SL              reduce using rule 375 (common_scalar -> METHOD_C .)
    SR              reduce using rule 375 (common_scalar -> METHOD_C .)
    MOD             reduce using rule 375 (common_scalar -> METHOD_C .)
    IS_IDENTICAL    reduce using rule 375 (common_scalar -> METHOD_C .)
    IS_NOT_IDENTICAL reduce using rule 375 (common_scalar -> METHOD_C .)
    IS_EQUAL        reduce using rule 375 (common_scalar -> METHOD_C .)
    IS_NOT_EQUAL    reduce using rule 375 (common_scalar -> METHOD_C .)
    IS_SMALLER      reduce using rule 375 (common_scalar -> METHOD_C .)
    IS_SMALLER_OR_EQUAL reduce using rule 375 (common_scalar -> METHOD_C .)
    IS_GREATER      reduce using rule 375 (common_scalar -> METHOD_C .)
    IS_GREATER_OR_EQUAL reduce using rule 375 (common_scalar -> METHOD_C .)
    INSTANCEOF      reduce using rule 375 (common_scalar -> METHOD_C .)
    QUESTION        reduce using rule 375 (common_scalar -> METHOD_C .)
    RPAREN          reduce using rule 375 (common_scalar -> METHOD_C .)
    COMMA           reduce using rule 375 (common_scalar -> METHOD_C .)
    DOUBLE_ARROW    reduce using rule 375 (common_scalar -> METHOD_C .)
    RBRACKET        reduce using rule 375 (common_scalar -> METHOD_C .)
    RBRACE          reduce using rule 375 (common_scalar -> METHOD_C .)
    COLON           reduce using rule 375 (common_scalar -> METHOD_C .)
    AS              reduce using rule 375 (common_scalar -> METHOD_C .)


state 96

    (376) common_scalar -> FUNC_C .

    SEMI            reduce using rule 376 (common_scalar -> FUNC_C .)
    OBJECT_OPERATOR reduce using rule 376 (common_scalar -> FUNC_C .)
    LBRACE          reduce using rule 376 (common_scalar -> FUNC_C .)
    BOOLEAN_AND     reduce using rule 376 (common_scalar -> FUNC_C .)
    BOOLEAN_OR      reduce using rule 376 (common_scalar -> FUNC_C .)
    LOGICAL_AND     reduce using rule 376 (common_scalar -> FUNC_C .)
    LOGICAL_OR      reduce using rule 376 (common_scalar -> FUNC_C .)
    LOGICAL_XOR     reduce using rule 376 (common_scalar -> FUNC_C .)
    AND             reduce using rule 376 (common_scalar -> FUNC_C .)
    OR              reduce using rule 376 (common_scalar -> FUNC_C .)
    XOR             reduce using rule 376 (common_scalar -> FUNC_C .)
    CONCAT          reduce using rule 376 (common_scalar -> FUNC_C .)
    PLUS            reduce using rule 376 (common_scalar -> FUNC_C .)
    MINUS           reduce using rule 376 (common_scalar -> FUNC_C .)
    MUL             reduce using rule 376 (common_scalar -> FUNC_C .)
    DIV             reduce using rule 376 (common_scalar -> FUNC_C .)
    SL              reduce using rule 376 (common_scalar -> FUNC_C .)
    SR              reduce using rule 376 (common_scalar -> FUNC_C .)
    MOD             reduce using rule 376 (common_scalar -> FUNC_C .)
    IS_IDENTICAL    reduce using rule 376 (common_scalar -> FUNC_C .)
    IS_NOT_IDENTICAL reduce using rule 376 (common_scalar -> FUNC_C .)
    IS_EQUAL        reduce using rule 376 (common_scalar -> FUNC_C .)
    IS_NOT_EQUAL    reduce using rule 376 (common_scalar -> FUNC_C .)
    IS_SMALLER      reduce using rule 376 (common_scalar -> FUNC_C .)
    IS_SMALLER_OR_EQUAL reduce using rule 376 (common_scalar -> FUNC_C .)
    IS_GREATER      reduce using rule 376 (common_scalar -> FUNC_C .)
    IS_GREATER_OR_EQUAL reduce using rule 376 (common_scalar -> FUNC_C .)
    INSTANCEOF      reduce using rule 376 (common_scalar -> FUNC_C .)
    QUESTION        reduce using rule 376 (common_scalar -> FUNC_C .)
    RPAREN          reduce using rule 376 (common_scalar -> FUNC_C .)
    COMMA           reduce using rule 376 (common_scalar -> FUNC_C .)
    DOUBLE_ARROW    reduce using rule 376 (common_scalar -> FUNC_C .)
    RBRACKET        reduce using rule 376 (common_scalar -> FUNC_C .)
    RBRACE          reduce using rule 376 (common_scalar -> FUNC_C .)
    COLON           reduce using rule 376 (common_scalar -> FUNC_C .)
    AS              reduce using rule 376 (common_scalar -> FUNC_C .)


state 97

    (377) common_scalar -> NS_C .

    SEMI            reduce using rule 377 (common_scalar -> NS_C .)
    OBJECT_OPERATOR reduce using rule 377 (common_scalar -> NS_C .)
    LBRACE          reduce using rule 377 (common_scalar -> NS_C .)
    BOOLEAN_AND     reduce using rule 377 (common_scalar -> NS_C .)
    BOOLEAN_OR      reduce using rule 377 (common_scalar -> NS_C .)
    LOGICAL_AND     reduce using rule 377 (common_scalar -> NS_C .)
    LOGICAL_OR      reduce using rule 377 (common_scalar -> NS_C .)
    LOGICAL_XOR     reduce using rule 377 (common_scalar -> NS_C .)
    AND             reduce using rule 377 (common_scalar -> NS_C .)
    OR              reduce using rule 377 (common_scalar -> NS_C .)
    XOR             reduce using rule 377 (common_scalar -> NS_C .)
    CONCAT          reduce using rule 377 (common_scalar -> NS_C .)
    PLUS            reduce using rule 377 (common_scalar -> NS_C .)
    MINUS           reduce using rule 377 (common_scalar -> NS_C .)
    MUL             reduce using rule 377 (common_scalar -> NS_C .)
    DIV             reduce using rule 377 (common_scalar -> NS_C .)
    SL              reduce using rule 377 (common_scalar -> NS_C .)
    SR              reduce using rule 377 (common_scalar -> NS_C .)
    MOD             reduce using rule 377 (common_scalar -> NS_C .)
    IS_IDENTICAL    reduce using rule 377 (common_scalar -> NS_C .)
    IS_NOT_IDENTICAL reduce using rule 377 (common_scalar -> NS_C .)
    IS_EQUAL        reduce using rule 377 (common_scalar -> NS_C .)
    IS_NOT_EQUAL    reduce using rule 377 (common_scalar -> NS_C .)
    IS_SMALLER      reduce using rule 377 (common_scalar -> NS_C .)
    IS_SMALLER_OR_EQUAL reduce using rule 377 (common_scalar -> NS_C .)
    IS_GREATER      reduce using rule 377 (common_scalar -> NS_C .)
    IS_GREATER_OR_EQUAL reduce using rule 377 (common_scalar -> NS_C .)
    INSTANCEOF      reduce using rule 377 (common_scalar -> NS_C .)
    QUESTION        reduce using rule 377 (common_scalar -> NS_C .)
    RPAREN          reduce using rule 377 (common_scalar -> NS_C .)
    COMMA           reduce using rule 377 (common_scalar -> NS_C .)
    DOUBLE_ARROW    reduce using rule 377 (common_scalar -> NS_C .)
    RBRACKET        reduce using rule 377 (common_scalar -> NS_C .)
    RBRACE          reduce using rule 377 (common_scalar -> NS_C .)
    COLON           reduce using rule 377 (common_scalar -> NS_C .)
    AS              reduce using rule 377 (common_scalar -> NS_C .)


state 98

    (357) scalar_heredoc -> START_HEREDOC . encaps_list END_HEREDOC
    (431) encaps_list -> . encaps_list encaps_var
    (432) encaps_list -> . empty
    (433) encaps_list -> . encaps_list ENCAPSED_AND_WHITESPACE
    (443) empty -> .

    END_HEREDOC     reduce using rule 443 (empty -> .)
    ENCAPSED_AND_WHITESPACE reduce using rule 443 (empty -> .)
    VARIABLE        reduce using rule 443 (empty -> .)
    DOLLAR_OPEN_CURLY_BRACES reduce using rule 443 (empty -> .)
    CURLY_OPEN      reduce using rule 443 (empty -> .)

    encaps_list                    shift and go to state 262
    empty                          shift and go to state 258

state 99

    (358) nowdoc -> START_NOWDOC . nowdoc_text_content END_NOWDOC
    (359) nowdoc_text_content -> . nowdoc_text_content ENCAPSED_AND_WHITESPACE
    (360) nowdoc_text_content -> . empty
    (443) empty -> .

    END_NOWDOC      reduce using rule 443 (empty -> .)
    ENCAPSED_AND_WHITESPACE reduce using rule 443 (empty -> .)

    nowdoc_text_content            shift and go to state 263
    empty                          shift and go to state 264

state 100

    (225) base_variable -> simple_indirect_reference .
    (250) variable_without_objects -> simple_indirect_reference .

    OBJECT_OPERATOR reduce using rule 225 (base_variable -> simple_indirect_reference .)
    EQUALS          reduce using rule 225 (base_variable -> simple_indirect_reference .)
    PLUS_EQUAL      reduce using rule 225 (base_variable -> simple_indirect_reference .)
    MINUS_EQUAL     reduce using rule 225 (base_variable -> simple_indirect_reference .)
    MUL_EQUAL       reduce using rule 225 (base_variable -> simple_indirect_reference .)
    DIV_EQUAL       reduce using rule 225 (base_variable -> simple_indirect_reference .)
    CONCAT_EQUAL    reduce using rule 225 (base_variable -> simple_indirect_reference .)
    MOD_EQUAL       reduce using rule 225 (base_variable -> simple_indirect_reference .)
    AND_EQUAL       reduce using rule 225 (base_variable -> simple_indirect_reference .)
    OR_EQUAL        reduce using rule 225 (base_variable -> simple_indirect_reference .)
    XOR_EQUAL       reduce using rule 225 (base_variable -> simple_indirect_reference .)
    SL_EQUAL        reduce using rule 225 (base_variable -> simple_indirect_reference .)
    SR_EQUAL        reduce using rule 225 (base_variable -> simple_indirect_reference .)
    INC             reduce using rule 225 (base_variable -> simple_indirect_reference .)
    DEC             reduce using rule 225 (base_variable -> simple_indirect_reference .)
    LBRACKET        reduce using rule 225 (base_variable -> simple_indirect_reference .)
    SEMI            reduce using rule 225 (base_variable -> simple_indirect_reference .)
    LBRACE          reduce using rule 225 (base_variable -> simple_indirect_reference .)
    BOOLEAN_AND     reduce using rule 225 (base_variable -> simple_indirect_reference .)
    BOOLEAN_OR      reduce using rule 225 (base_variable -> simple_indirect_reference .)
    LOGICAL_AND     reduce using rule 225 (base_variable -> simple_indirect_reference .)
    LOGICAL_OR      reduce using rule 225 (base_variable -> simple_indirect_reference .)
    LOGICAL_XOR     reduce using rule 225 (base_variable -> simple_indirect_reference .)
    AND             reduce using rule 225 (base_variable -> simple_indirect_reference .)
    OR              reduce using rule 225 (base_variable -> simple_indirect_reference .)
    XOR             reduce using rule 225 (base_variable -> simple_indirect_reference .)
    CONCAT          reduce using rule 225 (base_variable -> simple_indirect_reference .)
    PLUS            reduce using rule 225 (base_variable -> simple_indirect_reference .)
    MINUS           reduce using rule 225 (base_variable -> simple_indirect_reference .)
    MUL             reduce using rule 225 (base_variable -> simple_indirect_reference .)
    DIV             reduce using rule 225 (base_variable -> simple_indirect_reference .)
    SL              reduce using rule 225 (base_variable -> simple_indirect_reference .)
    SR              reduce using rule 225 (base_variable -> simple_indirect_reference .)
    MOD             reduce using rule 225 (base_variable -> simple_indirect_reference .)
    IS_IDENTICAL    reduce using rule 225 (base_variable -> simple_indirect_reference .)
    IS_NOT_IDENTICAL reduce using rule 225 (base_variable -> simple_indirect_reference .)
    IS_EQUAL        reduce using rule 225 (base_variable -> simple_indirect_reference .)
    IS_NOT_EQUAL    reduce using rule 225 (base_variable -> simple_indirect_reference .)
    IS_SMALLER      reduce using rule 225 (base_variable -> simple_indirect_reference .)
    IS_SMALLER_OR_EQUAL reduce using rule 225 (base_variable -> simple_indirect_reference .)
    IS_GREATER      reduce using rule 225 (base_variable -> simple_indirect_reference .)
    IS_GREATER_OR_EQUAL reduce using rule 225 (base_variable -> simple_indirect_reference .)
    INSTANCEOF      reduce using rule 225 (base_variable -> simple_indirect_reference .)
    QUESTION        reduce using rule 225 (base_variable -> simple_indirect_reference .)
    RPAREN          reduce using rule 225 (base_variable -> simple_indirect_reference .)
    COMMA           reduce using rule 225 (base_variable -> simple_indirect_reference .)
    DOUBLE_ARROW    reduce using rule 225 (base_variable -> simple_indirect_reference .)
    RBRACKET        reduce using rule 225 (base_variable -> simple_indirect_reference .)
    RBRACE          reduce using rule 225 (base_variable -> simple_indirect_reference .)
    COLON           reduce using rule 225 (base_variable -> simple_indirect_reference .)
    AS              reduce using rule 225 (base_variable -> simple_indirect_reference .)
    LPAREN          reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)


state 101

    (226) base_variable -> static_member .

    OBJECT_OPERATOR reduce using rule 226 (base_variable -> static_member .)
    EQUALS          reduce using rule 226 (base_variable -> static_member .)
    PLUS_EQUAL      reduce using rule 226 (base_variable -> static_member .)
    MINUS_EQUAL     reduce using rule 226 (base_variable -> static_member .)
    MUL_EQUAL       reduce using rule 226 (base_variable -> static_member .)
    DIV_EQUAL       reduce using rule 226 (base_variable -> static_member .)
    CONCAT_EQUAL    reduce using rule 226 (base_variable -> static_member .)
    MOD_EQUAL       reduce using rule 226 (base_variable -> static_member .)
    AND_EQUAL       reduce using rule 226 (base_variable -> static_member .)
    OR_EQUAL        reduce using rule 226 (base_variable -> static_member .)
    XOR_EQUAL       reduce using rule 226 (base_variable -> static_member .)
    SL_EQUAL        reduce using rule 226 (base_variable -> static_member .)
    SR_EQUAL        reduce using rule 226 (base_variable -> static_member .)
    INC             reduce using rule 226 (base_variable -> static_member .)
    DEC             reduce using rule 226 (base_variable -> static_member .)
    LBRACKET        reduce using rule 226 (base_variable -> static_member .)
    SEMI            reduce using rule 226 (base_variable -> static_member .)
    LBRACE          reduce using rule 226 (base_variable -> static_member .)
    BOOLEAN_AND     reduce using rule 226 (base_variable -> static_member .)
    BOOLEAN_OR      reduce using rule 226 (base_variable -> static_member .)
    LOGICAL_AND     reduce using rule 226 (base_variable -> static_member .)
    LOGICAL_OR      reduce using rule 226 (base_variable -> static_member .)
    LOGICAL_XOR     reduce using rule 226 (base_variable -> static_member .)
    AND             reduce using rule 226 (base_variable -> static_member .)
    OR              reduce using rule 226 (base_variable -> static_member .)
    XOR             reduce using rule 226 (base_variable -> static_member .)
    CONCAT          reduce using rule 226 (base_variable -> static_member .)
    PLUS            reduce using rule 226 (base_variable -> static_member .)
    MINUS           reduce using rule 226 (base_variable -> static_member .)
    MUL             reduce using rule 226 (base_variable -> static_member .)
    DIV             reduce using rule 226 (base_variable -> static_member .)
    SL              reduce using rule 226 (base_variable -> static_member .)
    SR              reduce using rule 226 (base_variable -> static_member .)
    MOD             reduce using rule 226 (base_variable -> static_member .)
    IS_IDENTICAL    reduce using rule 226 (base_variable -> static_member .)
    IS_NOT_IDENTICAL reduce using rule 226 (base_variable -> static_member .)
    IS_EQUAL        reduce using rule 226 (base_variable -> static_member .)
    IS_NOT_EQUAL    reduce using rule 226 (base_variable -> static_member .)
    IS_SMALLER      reduce using rule 226 (base_variable -> static_member .)
    IS_SMALLER_OR_EQUAL reduce using rule 226 (base_variable -> static_member .)
    IS_GREATER      reduce using rule 226 (base_variable -> static_member .)
    IS_GREATER_OR_EQUAL reduce using rule 226 (base_variable -> static_member .)
    INSTANCEOF      reduce using rule 226 (base_variable -> static_member .)
    QUESTION        reduce using rule 226 (base_variable -> static_member .)
    RPAREN          reduce using rule 226 (base_variable -> static_member .)
    COMMA           reduce using rule 226 (base_variable -> static_member .)
    LPAREN          reduce using rule 226 (base_variable -> static_member .)
    DOUBLE_ARROW    reduce using rule 226 (base_variable -> static_member .)
    RBRACKET        reduce using rule 226 (base_variable -> static_member .)
    RBRACE          reduce using rule 226 (base_variable -> static_member .)
    COLON           reduce using rule 226 (base_variable -> static_member .)
    AS              reduce using rule 226 (base_variable -> static_member .)


state 102

    (218) function_call -> variable_without_objects . LPAREN function_call_parameter_list RPAREN

    LPAREN          shift and go to state 265


state 103

    (219) function_call -> BACKTICK . encaps_list BACKTICK
    (431) encaps_list -> . encaps_list encaps_var
    (432) encaps_list -> . empty
    (433) encaps_list -> . encaps_list ENCAPSED_AND_WHITESPACE
    (443) empty -> .

    BACKTICK        reduce using rule 443 (empty -> .)
    ENCAPSED_AND_WHITESPACE reduce using rule 443 (empty -> .)
    VARIABLE        reduce using rule 443 (empty -> .)
    DOLLAR_OPEN_CURLY_BRACES reduce using rule 443 (empty -> .)
    CURLY_OPEN      reduce using rule 443 (empty -> .)

    encaps_list                    shift and go to state 266
    empty                          shift and go to state 258

state 104

    (233) variable_class_name -> reference_variable .
    (228) simple_indirect_reference -> reference_variable .
    (235) reference_variable -> reference_variable . LBRACKET dim_offset RBRACKET
    (236) reference_variable -> reference_variable . LBRACE expr RBRACE

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
    DOUBLE_COLON    reduce using rule 233 (variable_class_name -> reference_variable .)
    OBJECT_OPERATOR reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    EQUALS          reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    PLUS_EQUAL      reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    MINUS_EQUAL     reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    MUL_EQUAL       reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    DIV_EQUAL       reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    CONCAT_EQUAL    reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    MOD_EQUAL       reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    AND_EQUAL       reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    OR_EQUAL        reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    XOR_EQUAL       reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    SL_EQUAL        reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    SR_EQUAL        reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    INC             reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    DEC             reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    SEMI            reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    BOOLEAN_AND     reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    BOOLEAN_OR      reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    LOGICAL_AND     reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    LOGICAL_OR      reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    LOGICAL_XOR     reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    AND             reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    OR              reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    XOR             reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    CONCAT          reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    PLUS            reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    MINUS           reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    MUL             reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    DIV             reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    SL              reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    SR              reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    MOD             reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_IDENTICAL    reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_NOT_IDENTICAL reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_EQUAL        reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_NOT_EQUAL    reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_SMALLER      reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_GREATER      reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    INSTANCEOF      reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    QUESTION        reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    LPAREN          reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    RPAREN          reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    COMMA           reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    DOUBLE_ARROW    reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    RBRACKET        reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    RBRACE          reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    COLON           reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    AS              reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    LBRACKET        shift and go to state 267
    LBRACE          shift and go to state 268

  ! LBRACKET        [ reduce using rule 228 (simple_indirect_reference -> reference_variable .) ]
  ! LBRACE          [ reduce using rule 228 (simple_indirect_reference -> reference_variable .) ]


state 105

    (227) simple_indirect_reference -> DOLLAR . simple_indirect_reference
    (240) compound_variable -> DOLLAR . LBRACE expr RBRACE
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LBRACE          shift and go to state 270
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    simple_indirect_reference      shift and go to state 269
    reference_variable             shift and go to state 271
    compound_variable              shift and go to state 106

state 106

    (237) reference_variable -> compound_variable .

    LBRACKET        reduce using rule 237 (reference_variable -> compound_variable .)
    LBRACE          reduce using rule 237 (reference_variable -> compound_variable .)
    DOUBLE_COLON    reduce using rule 237 (reference_variable -> compound_variable .)
    OBJECT_OPERATOR reduce using rule 237 (reference_variable -> compound_variable .)
    EQUALS          reduce using rule 237 (reference_variable -> compound_variable .)
    PLUS_EQUAL      reduce using rule 237 (reference_variable -> compound_variable .)
    MINUS_EQUAL     reduce using rule 237 (reference_variable -> compound_variable .)
    MUL_EQUAL       reduce using rule 237 (reference_variable -> compound_variable .)
    DIV_EQUAL       reduce using rule 237 (reference_variable -> compound_variable .)
    CONCAT_EQUAL    reduce using rule 237 (reference_variable -> compound_variable .)
    MOD_EQUAL       reduce using rule 237 (reference_variable -> compound_variable .)
    AND_EQUAL       reduce using rule 237 (reference_variable -> compound_variable .)
    OR_EQUAL        reduce using rule 237 (reference_variable -> compound_variable .)
    XOR_EQUAL       reduce using rule 237 (reference_variable -> compound_variable .)
    SL_EQUAL        reduce using rule 237 (reference_variable -> compound_variable .)
    SR_EQUAL        reduce using rule 237 (reference_variable -> compound_variable .)
    INC             reduce using rule 237 (reference_variable -> compound_variable .)
    DEC             reduce using rule 237 (reference_variable -> compound_variable .)
    SEMI            reduce using rule 237 (reference_variable -> compound_variable .)
    BOOLEAN_AND     reduce using rule 237 (reference_variable -> compound_variable .)
    BOOLEAN_OR      reduce using rule 237 (reference_variable -> compound_variable .)
    LOGICAL_AND     reduce using rule 237 (reference_variable -> compound_variable .)
    LOGICAL_OR      reduce using rule 237 (reference_variable -> compound_variable .)
    LOGICAL_XOR     reduce using rule 237 (reference_variable -> compound_variable .)
    AND             reduce using rule 237 (reference_variable -> compound_variable .)
    OR              reduce using rule 237 (reference_variable -> compound_variable .)
    XOR             reduce using rule 237 (reference_variable -> compound_variable .)
    CONCAT          reduce using rule 237 (reference_variable -> compound_variable .)
    PLUS            reduce using rule 237 (reference_variable -> compound_variable .)
    MINUS           reduce using rule 237 (reference_variable -> compound_variable .)
    MUL             reduce using rule 237 (reference_variable -> compound_variable .)
    DIV             reduce using rule 237 (reference_variable -> compound_variable .)
    SL              reduce using rule 237 (reference_variable -> compound_variable .)
    SR              reduce using rule 237 (reference_variable -> compound_variable .)
    MOD             reduce using rule 237 (reference_variable -> compound_variable .)
    IS_IDENTICAL    reduce using rule 237 (reference_variable -> compound_variable .)
    IS_NOT_IDENTICAL reduce using rule 237 (reference_variable -> compound_variable .)
    IS_EQUAL        reduce using rule 237 (reference_variable -> compound_variable .)
    IS_NOT_EQUAL    reduce using rule 237 (reference_variable -> compound_variable .)
    IS_SMALLER      reduce using rule 237 (reference_variable -> compound_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 237 (reference_variable -> compound_variable .)
    IS_GREATER      reduce using rule 237 (reference_variable -> compound_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 237 (reference_variable -> compound_variable .)
    INSTANCEOF      reduce using rule 237 (reference_variable -> compound_variable .)
    QUESTION        reduce using rule 237 (reference_variable -> compound_variable .)
    LPAREN          reduce using rule 237 (reference_variable -> compound_variable .)
    RPAREN          reduce using rule 237 (reference_variable -> compound_variable .)
    COMMA           reduce using rule 237 (reference_variable -> compound_variable .)
    DOUBLE_ARROW    reduce using rule 237 (reference_variable -> compound_variable .)
    RBRACKET        reduce using rule 237 (reference_variable -> compound_variable .)
    RBRACE          reduce using rule 237 (reference_variable -> compound_variable .)
    COLON           reduce using rule 237 (reference_variable -> compound_variable .)
    AS              reduce using rule 237 (reference_variable -> compound_variable .)


state 107

    (239) compound_variable -> VARIABLE .

    LBRACKET        reduce using rule 239 (compound_variable -> VARIABLE .)
    LBRACE          reduce using rule 239 (compound_variable -> VARIABLE .)
    DOUBLE_COLON    reduce using rule 239 (compound_variable -> VARIABLE .)
    OBJECT_OPERATOR reduce using rule 239 (compound_variable -> VARIABLE .)
    EQUALS          reduce using rule 239 (compound_variable -> VARIABLE .)
    PLUS_EQUAL      reduce using rule 239 (compound_variable -> VARIABLE .)
    MINUS_EQUAL     reduce using rule 239 (compound_variable -> VARIABLE .)
    MUL_EQUAL       reduce using rule 239 (compound_variable -> VARIABLE .)
    DIV_EQUAL       reduce using rule 239 (compound_variable -> VARIABLE .)
    CONCAT_EQUAL    reduce using rule 239 (compound_variable -> VARIABLE .)
    MOD_EQUAL       reduce using rule 239 (compound_variable -> VARIABLE .)
    AND_EQUAL       reduce using rule 239 (compound_variable -> VARIABLE .)
    OR_EQUAL        reduce using rule 239 (compound_variable -> VARIABLE .)
    XOR_EQUAL       reduce using rule 239 (compound_variable -> VARIABLE .)
    SL_EQUAL        reduce using rule 239 (compound_variable -> VARIABLE .)
    SR_EQUAL        reduce using rule 239 (compound_variable -> VARIABLE .)
    INC             reduce using rule 239 (compound_variable -> VARIABLE .)
    DEC             reduce using rule 239 (compound_variable -> VARIABLE .)
    SEMI            reduce using rule 239 (compound_variable -> VARIABLE .)
    BOOLEAN_AND     reduce using rule 239 (compound_variable -> VARIABLE .)
    BOOLEAN_OR      reduce using rule 239 (compound_variable -> VARIABLE .)
    LOGICAL_AND     reduce using rule 239 (compound_variable -> VARIABLE .)
    LOGICAL_OR      reduce using rule 239 (compound_variable -> VARIABLE .)
    LOGICAL_XOR     reduce using rule 239 (compound_variable -> VARIABLE .)
    AND             reduce using rule 239 (compound_variable -> VARIABLE .)
    OR              reduce using rule 239 (compound_variable -> VARIABLE .)
    XOR             reduce using rule 239 (compound_variable -> VARIABLE .)
    CONCAT          reduce using rule 239 (compound_variable -> VARIABLE .)
    PLUS            reduce using rule 239 (compound_variable -> VARIABLE .)
    MINUS           reduce using rule 239 (compound_variable -> VARIABLE .)
    MUL             reduce using rule 239 (compound_variable -> VARIABLE .)
    DIV             reduce using rule 239 (compound_variable -> VARIABLE .)
    SL              reduce using rule 239 (compound_variable -> VARIABLE .)
    SR              reduce using rule 239 (compound_variable -> VARIABLE .)
    MOD             reduce using rule 239 (compound_variable -> VARIABLE .)
    IS_IDENTICAL    reduce using rule 239 (compound_variable -> VARIABLE .)
    IS_NOT_IDENTICAL reduce using rule 239 (compound_variable -> VARIABLE .)
    IS_EQUAL        reduce using rule 239 (compound_variable -> VARIABLE .)
    IS_NOT_EQUAL    reduce using rule 239 (compound_variable -> VARIABLE .)
    IS_SMALLER      reduce using rule 239 (compound_variable -> VARIABLE .)
    IS_SMALLER_OR_EQUAL reduce using rule 239 (compound_variable -> VARIABLE .)
    IS_GREATER      reduce using rule 239 (compound_variable -> VARIABLE .)
    IS_GREATER_OR_EQUAL reduce using rule 239 (compound_variable -> VARIABLE .)
    INSTANCEOF      reduce using rule 239 (compound_variable -> VARIABLE .)
    QUESTION        reduce using rule 239 (compound_variable -> VARIABLE .)
    LPAREN          reduce using rule 239 (compound_variable -> VARIABLE .)
    RPAREN          reduce using rule 239 (compound_variable -> VARIABLE .)
    COMMA           reduce using rule 239 (compound_variable -> VARIABLE .)
    DOUBLE_ARROW    reduce using rule 239 (compound_variable -> VARIABLE .)
    RBRACKET        reduce using rule 239 (compound_variable -> VARIABLE .)
    RBRACE          reduce using rule 239 (compound_variable -> VARIABLE .)
    COLON           reduce using rule 239 (compound_variable -> VARIABLE .)
    AS              reduce using rule 239 (compound_variable -> VARIABLE .)


state 108

    (7) top_statement -> HALT_COMPILER LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 272


state 109

    (349) expr -> LPAREN expr . RPAREN
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    RPAREN          shift and go to state 273
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 110

    (271) expr -> FUNCTION . is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (167) is_reference -> . AND
    (168) is_reference -> . empty
    (443) empty -> .

    AND             shift and go to state 184
    LPAREN          reduce using rule 443 (empty -> .)

    is_reference                   shift and go to state 274
    empty                          shift and go to state 185

state 111

    (190) class_name -> STATIC .

    DOUBLE_COLON    reduce using rule 190 (class_name -> STATIC .)
    LPAREN          reduce using rule 190 (class_name -> STATIC .)
    SEMI            reduce using rule 190 (class_name -> STATIC .)
    OBJECT_OPERATOR reduce using rule 190 (class_name -> STATIC .)
    LBRACE          reduce using rule 190 (class_name -> STATIC .)
    BOOLEAN_AND     reduce using rule 190 (class_name -> STATIC .)
    BOOLEAN_OR      reduce using rule 190 (class_name -> STATIC .)
    LOGICAL_AND     reduce using rule 190 (class_name -> STATIC .)
    LOGICAL_OR      reduce using rule 190 (class_name -> STATIC .)
    LOGICAL_XOR     reduce using rule 190 (class_name -> STATIC .)
    AND             reduce using rule 190 (class_name -> STATIC .)
    OR              reduce using rule 190 (class_name -> STATIC .)
    XOR             reduce using rule 190 (class_name -> STATIC .)
    CONCAT          reduce using rule 190 (class_name -> STATIC .)
    PLUS            reduce using rule 190 (class_name -> STATIC .)
    MINUS           reduce using rule 190 (class_name -> STATIC .)
    MUL             reduce using rule 190 (class_name -> STATIC .)
    DIV             reduce using rule 190 (class_name -> STATIC .)
    SL              reduce using rule 190 (class_name -> STATIC .)
    SR              reduce using rule 190 (class_name -> STATIC .)
    MOD             reduce using rule 190 (class_name -> STATIC .)
    IS_IDENTICAL    reduce using rule 190 (class_name -> STATIC .)
    IS_NOT_IDENTICAL reduce using rule 190 (class_name -> STATIC .)
    IS_EQUAL        reduce using rule 190 (class_name -> STATIC .)
    IS_NOT_EQUAL    reduce using rule 190 (class_name -> STATIC .)
    IS_SMALLER      reduce using rule 190 (class_name -> STATIC .)
    IS_SMALLER_OR_EQUAL reduce using rule 190 (class_name -> STATIC .)
    IS_GREATER      reduce using rule 190 (class_name -> STATIC .)
    IS_GREATER_OR_EQUAL reduce using rule 190 (class_name -> STATIC .)
    INSTANCEOF      reduce using rule 190 (class_name -> STATIC .)
    QUESTION        reduce using rule 190 (class_name -> STATIC .)
    RPAREN          reduce using rule 190 (class_name -> STATIC .)
    COMMA           reduce using rule 190 (class_name -> STATIC .)
    DOUBLE_ARROW    reduce using rule 190 (class_name -> STATIC .)
    RBRACKET        reduce using rule 190 (class_name -> STATIC .)
    RBRACE          reduce using rule 190 (class_name -> STATIC .)
    COLON           reduce using rule 190 (class_name -> STATIC .)
    AS              reduce using rule 190 (class_name -> STATIC .)
    VARIABLE        reduce using rule 190 (class_name -> STATIC .)


state 112

    (364) scalar -> NAMESPACE . NS_SEPARATOR namespace_name
    (211) function_call -> NAMESPACE . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) class_name -> NAMESPACE . NS_SEPARATOR namespace_name

    NS_SEPARATOR    shift and go to state 115


state 113

    (8) top_statement -> NAMESPACE namespace_name . SEMI
    (10) top_statement -> NAMESPACE namespace_name . LBRACE top_statement_list RBRACE
    (428) namespace_name -> namespace_name . NS_SEPARATOR STRING

    SEMI            shift and go to state 275
    LBRACE          shift and go to state 276
    NS_SEPARATOR    shift and go to state 118


state 114

    (9) top_statement -> NAMESPACE LBRACE . top_statement_list RBRACE
    (2) top_statement_list -> . top_statement_list top_statement
    (3) top_statement_list -> . empty
    (443) empty -> .

    RBRACE          reduce using rule 443 (empty -> .)
    HALT_COMPILER   reduce using rule 443 (empty -> .)
    NAMESPACE       reduce using rule 443 (empty -> .)
    CONST           reduce using rule 443 (empty -> .)
    USE             reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    IF              reduce using rule 443 (empty -> .)
    WHILE           reduce using rule 443 (empty -> .)
    DO              reduce using rule 443 (empty -> .)
    FOR             reduce using rule 443 (empty -> .)
    FOREACH         reduce using rule 443 (empty -> .)
    SWITCH          reduce using rule 443 (empty -> .)
    BREAK           reduce using rule 443 (empty -> .)
    CONTINUE        reduce using rule 443 (empty -> .)
    RETURN          reduce using rule 443 (empty -> .)
    GLOBAL          reduce using rule 443 (empty -> .)
    STATIC          reduce using rule 443 (empty -> .)
    ECHO            reduce using rule 443 (empty -> .)
    INLINE_HTML     reduce using rule 443 (empty -> .)
    UNSET           reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    TRY             reduce using rule 443 (empty -> .)
    THROW           reduce using rule 443 (empty -> .)
    DECLARE         reduce using rule 443 (empty -> .)
    FUNCTION        reduce using rule 443 (empty -> .)
    INTERFACE       reduce using rule 443 (empty -> .)
    TRAIT           reduce using rule 443 (empty -> .)
    NEW             reduce using rule 443 (empty -> .)
    CLONE           reduce using rule 443 (empty -> .)
    LIST            reduce using rule 443 (empty -> .)
    ARRAY           reduce using rule 443 (empty -> .)
    LBRACKET        reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    NOT             reduce using rule 443 (empty -> .)
    BOOLEAN_NOT     reduce using rule 443 (empty -> .)
    INC             reduce using rule 443 (empty -> .)
    DEC             reduce using rule 443 (empty -> .)
    INT_CAST        reduce using rule 443 (empty -> .)
    DOUBLE_CAST     reduce using rule 443 (empty -> .)
    STRING_CAST     reduce using rule 443 (empty -> .)
    ARRAY_CAST      reduce using rule 443 (empty -> .)
    OBJECT_CAST     reduce using rule 443 (empty -> .)
    BOOL_CAST       reduce using rule 443 (empty -> .)
    UNSET_CAST      reduce using rule 443 (empty -> .)
    BINARY_CAST     reduce using rule 443 (empty -> .)
    ISSET           reduce using rule 443 (empty -> .)
    EMPTY           reduce using rule 443 (empty -> .)
    EVAL            reduce using rule 443 (empty -> .)
    INCLUDE         reduce using rule 443 (empty -> .)
    INCLUDE_ONCE    reduce using rule 443 (empty -> .)
    REQUIRE         reduce using rule 443 (empty -> .)
    REQUIRE_ONCE    reduce using rule 443 (empty -> .)
    PRINT           reduce using rule 443 (empty -> .)
    AT              reduce using rule 443 (empty -> .)
    LPAREN          reduce using rule 443 (empty -> .)
    CLASS           reduce using rule 443 (empty -> .)
    ABSTRACT        reduce using rule 443 (empty -> .)
    FINAL           reduce using rule 443 (empty -> .)
    QUOTE           reduce using rule 443 (empty -> .)
    STRING          reduce using rule 443 (empty -> .)
    STRING_VARNAME  reduce using rule 443 (empty -> .)
    NS_SEPARATOR    reduce using rule 443 (empty -> .)
    EXIT            reduce using rule 443 (empty -> .)
    DIE             reduce using rule 443 (empty -> .)
    LNUMBER         reduce using rule 443 (empty -> .)
    DNUMBER         reduce using rule 443 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 443 (empty -> .)
    LINE            reduce using rule 443 (empty -> .)
    FILE            reduce using rule 443 (empty -> .)
    DIR             reduce using rule 443 (empty -> .)
    CLASS_C         reduce using rule 443 (empty -> .)
    METHOD_C        reduce using rule 443 (empty -> .)
    FUNC_C          reduce using rule 443 (empty -> .)
    NS_C            reduce using rule 443 (empty -> .)
    START_HEREDOC   reduce using rule 443 (empty -> .)
    START_NOWDOC    reduce using rule 443 (empty -> .)
    BACKTICK        reduce using rule 443 (empty -> .)
    DOLLAR          reduce using rule 443 (empty -> .)
    VARIABLE        reduce using rule 443 (empty -> .)

    top_statement_list             shift and go to state 277
    empty                          shift and go to state 3

state 115

    (364) scalar -> NAMESPACE NS_SEPARATOR . namespace_name
    (211) function_call -> NAMESPACE NS_SEPARATOR . namespace_name LPAREN function_call_parameter_list RPAREN
    (189) class_name -> NAMESPACE NS_SEPARATOR . namespace_name
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    STRING          shift and go to state 116
    ARRAY           shift and go to state 117

    namespace_name                 shift and go to state 278

state 116

    (429) namespace_name -> STRING .

    SEMI            reduce using rule 429 (namespace_name -> STRING .)
    LBRACE          reduce using rule 429 (namespace_name -> STRING .)
    NS_SEPARATOR    reduce using rule 429 (namespace_name -> STRING .)
    AS              reduce using rule 429 (namespace_name -> STRING .)
    COMMA           reduce using rule 429 (namespace_name -> STRING .)
    DOUBLE_COLON    reduce using rule 429 (namespace_name -> STRING .)
    LPAREN          reduce using rule 429 (namespace_name -> STRING .)
    OBJECT_OPERATOR reduce using rule 429 (namespace_name -> STRING .)
    BOOLEAN_AND     reduce using rule 429 (namespace_name -> STRING .)
    BOOLEAN_OR      reduce using rule 429 (namespace_name -> STRING .)
    LOGICAL_AND     reduce using rule 429 (namespace_name -> STRING .)
    LOGICAL_OR      reduce using rule 429 (namespace_name -> STRING .)
    LOGICAL_XOR     reduce using rule 429 (namespace_name -> STRING .)
    AND             reduce using rule 429 (namespace_name -> STRING .)
    OR              reduce using rule 429 (namespace_name -> STRING .)
    XOR             reduce using rule 429 (namespace_name -> STRING .)
    CONCAT          reduce using rule 429 (namespace_name -> STRING .)
    PLUS            reduce using rule 429 (namespace_name -> STRING .)
    MINUS           reduce using rule 429 (namespace_name -> STRING .)
    MUL             reduce using rule 429 (namespace_name -> STRING .)
    DIV             reduce using rule 429 (namespace_name -> STRING .)
    SL              reduce using rule 429 (namespace_name -> STRING .)
    SR              reduce using rule 429 (namespace_name -> STRING .)
    MOD             reduce using rule 429 (namespace_name -> STRING .)
    IS_IDENTICAL    reduce using rule 429 (namespace_name -> STRING .)
    IS_NOT_IDENTICAL reduce using rule 429 (namespace_name -> STRING .)
    IS_EQUAL        reduce using rule 429 (namespace_name -> STRING .)
    IS_NOT_EQUAL    reduce using rule 429 (namespace_name -> STRING .)
    IS_SMALLER      reduce using rule 429 (namespace_name -> STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 429 (namespace_name -> STRING .)
    IS_GREATER      reduce using rule 429 (namespace_name -> STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 429 (namespace_name -> STRING .)
    INSTANCEOF      reduce using rule 429 (namespace_name -> STRING .)
    QUESTION        reduce using rule 429 (namespace_name -> STRING .)
    RPAREN          reduce using rule 429 (namespace_name -> STRING .)
    DOUBLE_ARROW    reduce using rule 429 (namespace_name -> STRING .)
    RBRACKET        reduce using rule 429 (namespace_name -> STRING .)
    RBRACE          reduce using rule 429 (namespace_name -> STRING .)
    COLON           reduce using rule 429 (namespace_name -> STRING .)
    VARIABLE        reduce using rule 429 (namespace_name -> STRING .)
    IMPLEMENTS      reduce using rule 429 (namespace_name -> STRING .)


state 117

    (430) namespace_name -> ARRAY .

    SEMI            reduce using rule 430 (namespace_name -> ARRAY .)
    LBRACE          reduce using rule 430 (namespace_name -> ARRAY .)
    NS_SEPARATOR    reduce using rule 430 (namespace_name -> ARRAY .)
    AS              reduce using rule 430 (namespace_name -> ARRAY .)
    COMMA           reduce using rule 430 (namespace_name -> ARRAY .)
    DOUBLE_COLON    reduce using rule 430 (namespace_name -> ARRAY .)
    LPAREN          reduce using rule 430 (namespace_name -> ARRAY .)
    OBJECT_OPERATOR reduce using rule 430 (namespace_name -> ARRAY .)
    BOOLEAN_AND     reduce using rule 430 (namespace_name -> ARRAY .)
    BOOLEAN_OR      reduce using rule 430 (namespace_name -> ARRAY .)
    LOGICAL_AND     reduce using rule 430 (namespace_name -> ARRAY .)
    LOGICAL_OR      reduce using rule 430 (namespace_name -> ARRAY .)
    LOGICAL_XOR     reduce using rule 430 (namespace_name -> ARRAY .)
    AND             reduce using rule 430 (namespace_name -> ARRAY .)
    OR              reduce using rule 430 (namespace_name -> ARRAY .)
    XOR             reduce using rule 430 (namespace_name -> ARRAY .)
    CONCAT          reduce using rule 430 (namespace_name -> ARRAY .)
    PLUS            reduce using rule 430 (namespace_name -> ARRAY .)
    MINUS           reduce using rule 430 (namespace_name -> ARRAY .)
    MUL             reduce using rule 430 (namespace_name -> ARRAY .)
    DIV             reduce using rule 430 (namespace_name -> ARRAY .)
    SL              reduce using rule 430 (namespace_name -> ARRAY .)
    SR              reduce using rule 430 (namespace_name -> ARRAY .)
    MOD             reduce using rule 430 (namespace_name -> ARRAY .)
    IS_IDENTICAL    reduce using rule 430 (namespace_name -> ARRAY .)
    IS_NOT_IDENTICAL reduce using rule 430 (namespace_name -> ARRAY .)
    IS_EQUAL        reduce using rule 430 (namespace_name -> ARRAY .)
    IS_NOT_EQUAL    reduce using rule 430 (namespace_name -> ARRAY .)
    IS_SMALLER      reduce using rule 430 (namespace_name -> ARRAY .)
    IS_SMALLER_OR_EQUAL reduce using rule 430 (namespace_name -> ARRAY .)
    IS_GREATER      reduce using rule 430 (namespace_name -> ARRAY .)
    IS_GREATER_OR_EQUAL reduce using rule 430 (namespace_name -> ARRAY .)
    INSTANCEOF      reduce using rule 430 (namespace_name -> ARRAY .)
    QUESTION        reduce using rule 430 (namespace_name -> ARRAY .)
    RPAREN          reduce using rule 430 (namespace_name -> ARRAY .)
    DOUBLE_ARROW    reduce using rule 430 (namespace_name -> ARRAY .)
    RBRACKET        reduce using rule 430 (namespace_name -> ARRAY .)
    RBRACE          reduce using rule 430 (namespace_name -> ARRAY .)
    COLON           reduce using rule 430 (namespace_name -> ARRAY .)
    VARIABLE        reduce using rule 430 (namespace_name -> ARRAY .)
    IMPLEMENTS      reduce using rule 430 (namespace_name -> ARRAY .)


state 118

    (428) namespace_name -> namespace_name NS_SEPARATOR . STRING

    STRING          shift and go to state 279


state 119

    (209) function_call -> namespace_name LPAREN . function_call_parameter_list RPAREN
    (266) function_call_parameter_list -> . function_call_parameter_list COMMA function_call_parameter
    (267) function_call_parameter_list -> . function_call_parameter
    (268) function_call_parameter_list -> . empty
    (269) function_call_parameter -> . expr
    (270) function_call_parameter -> . AND variable
    (443) empty -> .
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 284
    RPAREN          reduce using rule 443 (empty -> .)
    COMMA           reduce using rule 443 (empty -> .)
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    namespace_name                 shift and go to state 12
    function_call_parameter_list   shift and go to state 280
    function_call_parameter        shift and go to state 281
    empty                          shift and go to state 282
    expr                           shift and go to state 283
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 120

    (30) statement -> LBRACE inner_statement_list . RBRACE
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) inner_statement -> . YIELD SEMI
    (29) inner_statement -> . YIELD expr SEMI
    (30) statement -> . LBRACE inner_statement_list RBRACE
    (31) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (33) statement -> . WHILE LPAREN expr RPAREN while_statement
    (34) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (35) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (36) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (37) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (38) statement -> . BREAK SEMI
    (39) statement -> . BREAK expr SEMI
    (40) statement -> . CONTINUE SEMI
    (41) statement -> . CONTINUE expr SEMI
    (42) statement -> . RETURN SEMI
    (43) statement -> . RETURN expr SEMI
    (44) statement -> . GLOBAL global_var_list SEMI
    (45) statement -> . STATIC static_var_list SEMI
    (46) statement -> . ECHO echo_expr_list SEMI
    (47) statement -> . INLINE_HTML
    (48) statement -> . expr SEMI
    (49) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (50) statement -> . SEMI
    (51) statement -> . TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
    (56) statement -> . THROW expr SEMI
    (57) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (108) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (109) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (110) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (111) class_declaration_statement -> . TRAIT STRING LBRACE trait_statement_list RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (112) class_entry_type -> . CLASS
    (113) class_entry_type -> . ABSTRACT CLASS
    (114) class_entry_type -> . FINAL CLASS
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RBRACE          shift and go to state 285
    HALT_COMPILER   shift and go to state 290
    YIELD           shift and go to state 291
    LBRACE          shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    FOREACH         shift and go to state 21
    SWITCH          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    GLOBAL          shift and go to state 26
    STATIC          shift and go to state 27
    ECHO            shift and go to state 28
    INLINE_HTML     shift and go to state 29
    UNSET           shift and go to state 30
    SEMI            shift and go to state 10
    TRY             shift and go to state 31
    THROW           shift and go to state 32
    DECLARE         shift and go to state 33
    FUNCTION        shift and go to state 34
    INTERFACE       shift and go to state 37
    TRAIT           shift and go to state 38
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    CLASS           shift and go to state 70
    ABSTRACT        shift and go to state 71
    FINAL           shift and go to state 72
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    inner_statement                shift and go to state 286
    statement                      shift and go to state 287
    function_declaration_statement shift and go to state 288
    class_declaration_statement    shift and go to state 289
    expr                           shift and go to state 17
    class_entry_type               shift and go to state 36
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 121

    (23) inner_statement_list -> empty .

    RBRACE          reduce using rule 23 (inner_statement_list -> empty .)
    HALT_COMPILER   reduce using rule 23 (inner_statement_list -> empty .)
    YIELD           reduce using rule 23 (inner_statement_list -> empty .)
    LBRACE          reduce using rule 23 (inner_statement_list -> empty .)
    IF              reduce using rule 23 (inner_statement_list -> empty .)
    WHILE           reduce using rule 23 (inner_statement_list -> empty .)
    DO              reduce using rule 23 (inner_statement_list -> empty .)
    FOR             reduce using rule 23 (inner_statement_list -> empty .)
    FOREACH         reduce using rule 23 (inner_statement_list -> empty .)
    SWITCH          reduce using rule 23 (inner_statement_list -> empty .)
    BREAK           reduce using rule 23 (inner_statement_list -> empty .)
    CONTINUE        reduce using rule 23 (inner_statement_list -> empty .)
    RETURN          reduce using rule 23 (inner_statement_list -> empty .)
    GLOBAL          reduce using rule 23 (inner_statement_list -> empty .)
    STATIC          reduce using rule 23 (inner_statement_list -> empty .)
    ECHO            reduce using rule 23 (inner_statement_list -> empty .)
    INLINE_HTML     reduce using rule 23 (inner_statement_list -> empty .)
    UNSET           reduce using rule 23 (inner_statement_list -> empty .)
    SEMI            reduce using rule 23 (inner_statement_list -> empty .)
    TRY             reduce using rule 23 (inner_statement_list -> empty .)
    THROW           reduce using rule 23 (inner_statement_list -> empty .)
    DECLARE         reduce using rule 23 (inner_statement_list -> empty .)
    FUNCTION        reduce using rule 23 (inner_statement_list -> empty .)
    INTERFACE       reduce using rule 23 (inner_statement_list -> empty .)
    TRAIT           reduce using rule 23 (inner_statement_list -> empty .)
    NEW             reduce using rule 23 (inner_statement_list -> empty .)
    CLONE           reduce using rule 23 (inner_statement_list -> empty .)
    LIST            reduce using rule 23 (inner_statement_list -> empty .)
    ARRAY           reduce using rule 23 (inner_statement_list -> empty .)
    LBRACKET        reduce using rule 23 (inner_statement_list -> empty .)
    PLUS            reduce using rule 23 (inner_statement_list -> empty .)
    MINUS           reduce using rule 23 (inner_statement_list -> empty .)
    NOT             reduce using rule 23 (inner_statement_list -> empty .)
    BOOLEAN_NOT     reduce using rule 23 (inner_statement_list -> empty .)
    INC             reduce using rule 23 (inner_statement_list -> empty .)
    DEC             reduce using rule 23 (inner_statement_list -> empty .)
    INT_CAST        reduce using rule 23 (inner_statement_list -> empty .)
    DOUBLE_CAST     reduce using rule 23 (inner_statement_list -> empty .)
    STRING_CAST     reduce using rule 23 (inner_statement_list -> empty .)
    ARRAY_CAST      reduce using rule 23 (inner_statement_list -> empty .)
    OBJECT_CAST     reduce using rule 23 (inner_statement_list -> empty .)
    BOOL_CAST       reduce using rule 23 (inner_statement_list -> empty .)
    UNSET_CAST      reduce using rule 23 (inner_statement_list -> empty .)
    BINARY_CAST     reduce using rule 23 (inner_statement_list -> empty .)
    ISSET           reduce using rule 23 (inner_statement_list -> empty .)
    EMPTY           reduce using rule 23 (inner_statement_list -> empty .)
    EVAL            reduce using rule 23 (inner_statement_list -> empty .)
    INCLUDE         reduce using rule 23 (inner_statement_list -> empty .)
    INCLUDE_ONCE    reduce using rule 23 (inner_statement_list -> empty .)
    REQUIRE         reduce using rule 23 (inner_statement_list -> empty .)
    REQUIRE_ONCE    reduce using rule 23 (inner_statement_list -> empty .)
    PRINT           reduce using rule 23 (inner_statement_list -> empty .)
    AT              reduce using rule 23 (inner_statement_list -> empty .)
    LPAREN          reduce using rule 23 (inner_statement_list -> empty .)
    CLASS           reduce using rule 23 (inner_statement_list -> empty .)
    ABSTRACT        reduce using rule 23 (inner_statement_list -> empty .)
    FINAL           reduce using rule 23 (inner_statement_list -> empty .)
    QUOTE           reduce using rule 23 (inner_statement_list -> empty .)
    STRING          reduce using rule 23 (inner_statement_list -> empty .)
    STRING_VARNAME  reduce using rule 23 (inner_statement_list -> empty .)
    NS_SEPARATOR    reduce using rule 23 (inner_statement_list -> empty .)
    NAMESPACE       reduce using rule 23 (inner_statement_list -> empty .)
    EXIT            reduce using rule 23 (inner_statement_list -> empty .)
    DIE             reduce using rule 23 (inner_statement_list -> empty .)
    LNUMBER         reduce using rule 23 (inner_statement_list -> empty .)
    DNUMBER         reduce using rule 23 (inner_statement_list -> empty .)
    CONSTANT_ENCAPSED_STRING reduce using rule 23 (inner_statement_list -> empty .)
    LINE            reduce using rule 23 (inner_statement_list -> empty .)
    FILE            reduce using rule 23 (inner_statement_list -> empty .)
    DIR             reduce using rule 23 (inner_statement_list -> empty .)
    CLASS_C         reduce using rule 23 (inner_statement_list -> empty .)
    METHOD_C        reduce using rule 23 (inner_statement_list -> empty .)
    FUNC_C          reduce using rule 23 (inner_statement_list -> empty .)
    NS_C            reduce using rule 23 (inner_statement_list -> empty .)
    START_HEREDOC   reduce using rule 23 (inner_statement_list -> empty .)
    START_NOWDOC    reduce using rule 23 (inner_statement_list -> empty .)
    BACKTICK        reduce using rule 23 (inner_statement_list -> empty .)
    DOLLAR          reduce using rule 23 (inner_statement_list -> empty .)
    VARIABLE        reduce using rule 23 (inner_statement_list -> empty .)
    ELSEIF          reduce using rule 23 (inner_statement_list -> empty .)
    ELSE            reduce using rule 23 (inner_statement_list -> empty .)
    ENDIF           reduce using rule 23 (inner_statement_list -> empty .)
    ENDWHILE        reduce using rule 23 (inner_statement_list -> empty .)
    ENDDECLARE      reduce using rule 23 (inner_statement_list -> empty .)
    ENDFOREACH      reduce using rule 23 (inner_statement_list -> empty .)
    CASE            reduce using rule 23 (inner_statement_list -> empty .)
    DEFAULT         reduce using rule 23 (inner_statement_list -> empty .)
    ENDSWITCH       reduce using rule 23 (inner_statement_list -> empty .)
    ENDFOR          reduce using rule 23 (inner_statement_list -> empty .)


state 122

    (11) top_statement -> CONST constant_declarations . SEMI
    (19) constant_declarations -> constant_declarations . COMMA constant_declaration

    SEMI            shift and go to state 292
    COMMA           shift and go to state 293


state 123

    (20) constant_declarations -> constant_declaration .

    SEMI            reduce using rule 20 (constant_declarations -> constant_declaration .)
    COMMA           reduce using rule 20 (constant_declarations -> constant_declaration .)


state 124

    (21) constant_declaration -> STRING . EQUALS static_expr

    EQUALS          shift and go to state 294


state 125

    (12) top_statement -> USE use_declarations . SEMI
    (13) use_declarations -> use_declarations . COMMA use_declaration

    SEMI            shift and go to state 295
    COMMA           shift and go to state 296


state 126

    (14) use_declarations -> use_declaration .

    SEMI            reduce using rule 14 (use_declarations -> use_declaration .)
    COMMA           reduce using rule 14 (use_declarations -> use_declaration .)


state 127

    (15) use_declaration -> namespace_name .
    (17) use_declaration -> namespace_name . AS STRING
    (428) namespace_name -> namespace_name . NS_SEPARATOR STRING

    SEMI            reduce using rule 15 (use_declaration -> namespace_name .)
    COMMA           reduce using rule 15 (use_declaration -> namespace_name .)
    AS              shift and go to state 297
    NS_SEPARATOR    shift and go to state 118


state 128

    (16) use_declaration -> NS_SEPARATOR . namespace_name
    (18) use_declaration -> NS_SEPARATOR . namespace_name AS STRING
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    STRING          shift and go to state 116
    ARRAY           shift and go to state 117

    namespace_name                 shift and go to state 298

state 129

    (31) statement -> IF LPAREN . expr RPAREN statement elseif_list else_single
    (32) statement -> IF LPAREN . expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 299
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 130

    (48) statement -> expr SEMI .

    HALT_COMPILER   reduce using rule 48 (statement -> expr SEMI .)
    NAMESPACE       reduce using rule 48 (statement -> expr SEMI .)
    CONST           reduce using rule 48 (statement -> expr SEMI .)
    USE             reduce using rule 48 (statement -> expr SEMI .)
    LBRACE          reduce using rule 48 (statement -> expr SEMI .)
    IF              reduce using rule 48 (statement -> expr SEMI .)
    WHILE           reduce using rule 48 (statement -> expr SEMI .)
    DO              reduce using rule 48 (statement -> expr SEMI .)
    FOR             reduce using rule 48 (statement -> expr SEMI .)
    FOREACH         reduce using rule 48 (statement -> expr SEMI .)
    SWITCH          reduce using rule 48 (statement -> expr SEMI .)
    BREAK           reduce using rule 48 (statement -> expr SEMI .)
    CONTINUE        reduce using rule 48 (statement -> expr SEMI .)
    RETURN          reduce using rule 48 (statement -> expr SEMI .)
    GLOBAL          reduce using rule 48 (statement -> expr SEMI .)
    STATIC          reduce using rule 48 (statement -> expr SEMI .)
    ECHO            reduce using rule 48 (statement -> expr SEMI .)
    INLINE_HTML     reduce using rule 48 (statement -> expr SEMI .)
    UNSET           reduce using rule 48 (statement -> expr SEMI .)
    SEMI            reduce using rule 48 (statement -> expr SEMI .)
    TRY             reduce using rule 48 (statement -> expr SEMI .)
    THROW           reduce using rule 48 (statement -> expr SEMI .)
    DECLARE         reduce using rule 48 (statement -> expr SEMI .)
    FUNCTION        reduce using rule 48 (statement -> expr SEMI .)
    INTERFACE       reduce using rule 48 (statement -> expr SEMI .)
    TRAIT           reduce using rule 48 (statement -> expr SEMI .)
    NEW             reduce using rule 48 (statement -> expr SEMI .)
    CLONE           reduce using rule 48 (statement -> expr SEMI .)
    LIST            reduce using rule 48 (statement -> expr SEMI .)
    ARRAY           reduce using rule 48 (statement -> expr SEMI .)
    LBRACKET        reduce using rule 48 (statement -> expr SEMI .)
    PLUS            reduce using rule 48 (statement -> expr SEMI .)
    MINUS           reduce using rule 48 (statement -> expr SEMI .)
    NOT             reduce using rule 48 (statement -> expr SEMI .)
    BOOLEAN_NOT     reduce using rule 48 (statement -> expr SEMI .)
    INC             reduce using rule 48 (statement -> expr SEMI .)
    DEC             reduce using rule 48 (statement -> expr SEMI .)
    INT_CAST        reduce using rule 48 (statement -> expr SEMI .)
    DOUBLE_CAST     reduce using rule 48 (statement -> expr SEMI .)
    STRING_CAST     reduce using rule 48 (statement -> expr SEMI .)
    ARRAY_CAST      reduce using rule 48 (statement -> expr SEMI .)
    OBJECT_CAST     reduce using rule 48 (statement -> expr SEMI .)
    BOOL_CAST       reduce using rule 48 (statement -> expr SEMI .)
    UNSET_CAST      reduce using rule 48 (statement -> expr SEMI .)
    BINARY_CAST     reduce using rule 48 (statement -> expr SEMI .)
    ISSET           reduce using rule 48 (statement -> expr SEMI .)
    EMPTY           reduce using rule 48 (statement -> expr SEMI .)
    EVAL            reduce using rule 48 (statement -> expr SEMI .)
    INCLUDE         reduce using rule 48 (statement -> expr SEMI .)
    INCLUDE_ONCE    reduce using rule 48 (statement -> expr SEMI .)
    REQUIRE         reduce using rule 48 (statement -> expr SEMI .)
    REQUIRE_ONCE    reduce using rule 48 (statement -> expr SEMI .)
    PRINT           reduce using rule 48 (statement -> expr SEMI .)
    AT              reduce using rule 48 (statement -> expr SEMI .)
    LPAREN          reduce using rule 48 (statement -> expr SEMI .)
    CLASS           reduce using rule 48 (statement -> expr SEMI .)
    ABSTRACT        reduce using rule 48 (statement -> expr SEMI .)
    FINAL           reduce using rule 48 (statement -> expr SEMI .)
    QUOTE           reduce using rule 48 (statement -> expr SEMI .)
    STRING          reduce using rule 48 (statement -> expr SEMI .)
    STRING_VARNAME  reduce using rule 48 (statement -> expr SEMI .)
    NS_SEPARATOR    reduce using rule 48 (statement -> expr SEMI .)
    EXIT            reduce using rule 48 (statement -> expr SEMI .)
    DIE             reduce using rule 48 (statement -> expr SEMI .)
    LNUMBER         reduce using rule 48 (statement -> expr SEMI .)
    DNUMBER         reduce using rule 48 (statement -> expr SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 48 (statement -> expr SEMI .)
    LINE            reduce using rule 48 (statement -> expr SEMI .)
    FILE            reduce using rule 48 (statement -> expr SEMI .)
    DIR             reduce using rule 48 (statement -> expr SEMI .)
    CLASS_C         reduce using rule 48 (statement -> expr SEMI .)
    METHOD_C        reduce using rule 48 (statement -> expr SEMI .)
    FUNC_C          reduce using rule 48 (statement -> expr SEMI .)
    NS_C            reduce using rule 48 (statement -> expr SEMI .)
    START_HEREDOC   reduce using rule 48 (statement -> expr SEMI .)
    START_NOWDOC    reduce using rule 48 (statement -> expr SEMI .)
    BACKTICK        reduce using rule 48 (statement -> expr SEMI .)
    DOLLAR          reduce using rule 48 (statement -> expr SEMI .)
    VARIABLE        reduce using rule 48 (statement -> expr SEMI .)
    $end            reduce using rule 48 (statement -> expr SEMI .)
    RBRACE          reduce using rule 48 (statement -> expr SEMI .)
    YIELD           reduce using rule 48 (statement -> expr SEMI .)
    ELSEIF          reduce using rule 48 (statement -> expr SEMI .)
    ELSE            reduce using rule 48 (statement -> expr SEMI .)
    ENDIF           reduce using rule 48 (statement -> expr SEMI .)
    ENDWHILE        reduce using rule 48 (statement -> expr SEMI .)
    ENDDECLARE      reduce using rule 48 (statement -> expr SEMI .)
    ENDFOREACH      reduce using rule 48 (statement -> expr SEMI .)
    CASE            reduce using rule 48 (statement -> expr SEMI .)
    DEFAULT         reduce using rule 48 (statement -> expr SEMI .)
    ENDSWITCH       reduce using rule 48 (statement -> expr SEMI .)
    ENDFOR          reduce using rule 48 (statement -> expr SEMI .)


state 131

    (184) expr -> expr OBJECT_OPERATOR . object_property method_or_not
    (243) object_property -> . variable_name object_dim_list
    (244) object_property -> . variable_without_objects
    (248) variable_name -> . STRING
    (249) variable_name -> . LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    STRING          shift and go to state 303
    LBRACE          shift and go to state 304
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    object_property                shift and go to state 300
    variable_name                  shift and go to state 301
    variable_without_objects       shift and go to state 302
    simple_indirect_reference      shift and go to state 305
    reference_variable             shift and go to state 271
    compound_variable              shift and go to state 106

state 132

    (238) expr -> expr LBRACE . dim_offset RBRACE
    (241) dim_offset -> . expr
    (242) dim_offset -> . empty
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (443) empty -> .
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    RBRACE          reduce using rule 443 (empty -> .)
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 306
    dim_offset                     shift and go to state 307
    empty                          shift and go to state 308
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 133

    (289) expr -> expr BOOLEAN_AND . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 309
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 134

    (290) expr -> expr BOOLEAN_OR . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 310
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 135

    (291) expr -> expr LOGICAL_AND . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 311
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 136

    (292) expr -> expr LOGICAL_OR . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 312
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 137

    (293) expr -> expr LOGICAL_XOR . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 313
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 138

    (294) expr -> expr AND . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 314
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 139

    (295) expr -> expr OR . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 315
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 140

    (296) expr -> expr XOR . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 316
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 141

    (297) expr -> expr CONCAT . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 317
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 142

    (298) expr -> expr PLUS . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 318
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 143

    (299) expr -> expr MINUS . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 319
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 144

    (300) expr -> expr MUL . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 320
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 145

    (301) expr -> expr DIV . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 321
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 146

    (302) expr -> expr SL . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 322
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 147

    (303) expr -> expr SR . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 323
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 148

    (304) expr -> expr MOD . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 324
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 149

    (305) expr -> expr IS_IDENTICAL . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 325
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 150

    (306) expr -> expr IS_NOT_IDENTICAL . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 326
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 151

    (307) expr -> expr IS_EQUAL . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 327
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 152

    (308) expr -> expr IS_NOT_EQUAL . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 328
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 153

    (309) expr -> expr IS_SMALLER . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 329
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 154

    (310) expr -> expr IS_SMALLER_OR_EQUAL . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 330
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 155

    (311) expr -> expr IS_GREATER . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 331
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 156

    (312) expr -> expr IS_GREATER_OR_EQUAL . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 332
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 157

    (313) expr -> expr INSTANCEOF . expr
    (314) expr -> expr INSTANCEOF . STATIC
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    STATIC          shift and go to state 334
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 333
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 158

    (319) expr -> expr QUESTION . expr COLON expr
    (320) expr -> expr QUESTION . COLON expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    COLON           shift and go to state 336
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 335
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 159

    (33) statement -> WHILE LPAREN . expr RPAREN while_statement
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 337
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 160

    (34) statement -> DO statement . WHILE LPAREN expr RPAREN SEMI

    WHILE           shift and go to state 338


state 161

    (35) statement -> FOR LPAREN . for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (72) for_expr -> . empty
    (73) for_expr -> . non_empty_for_expr
    (443) empty -> .
    (74) non_empty_for_expr -> . non_empty_for_expr COMMA expr
    (75) non_empty_for_expr -> . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    SEMI            reduce using rule 443 (empty -> .)
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    for_expr                       shift and go to state 339
    empty                          shift and go to state 340
    non_empty_for_expr             shift and go to state 341
    expr                           shift and go to state 342
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 162

    (36) statement -> FOREACH LPAREN . expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 343
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 163

    (37) statement -> SWITCH LPAREN . expr RPAREN switch_case_list
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 344
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 164

    (38) statement -> BREAK SEMI .

    HALT_COMPILER   reduce using rule 38 (statement -> BREAK SEMI .)
    NAMESPACE       reduce using rule 38 (statement -> BREAK SEMI .)
    CONST           reduce using rule 38 (statement -> BREAK SEMI .)
    USE             reduce using rule 38 (statement -> BREAK SEMI .)
    LBRACE          reduce using rule 38 (statement -> BREAK SEMI .)
    IF              reduce using rule 38 (statement -> BREAK SEMI .)
    WHILE           reduce using rule 38 (statement -> BREAK SEMI .)
    DO              reduce using rule 38 (statement -> BREAK SEMI .)
    FOR             reduce using rule 38 (statement -> BREAK SEMI .)
    FOREACH         reduce using rule 38 (statement -> BREAK SEMI .)
    SWITCH          reduce using rule 38 (statement -> BREAK SEMI .)
    BREAK           reduce using rule 38 (statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 38 (statement -> BREAK SEMI .)
    RETURN          reduce using rule 38 (statement -> BREAK SEMI .)
    GLOBAL          reduce using rule 38 (statement -> BREAK SEMI .)
    STATIC          reduce using rule 38 (statement -> BREAK SEMI .)
    ECHO            reduce using rule 38 (statement -> BREAK SEMI .)
    INLINE_HTML     reduce using rule 38 (statement -> BREAK SEMI .)
    UNSET           reduce using rule 38 (statement -> BREAK SEMI .)
    SEMI            reduce using rule 38 (statement -> BREAK SEMI .)
    TRY             reduce using rule 38 (statement -> BREAK SEMI .)
    THROW           reduce using rule 38 (statement -> BREAK SEMI .)
    DECLARE         reduce using rule 38 (statement -> BREAK SEMI .)
    FUNCTION        reduce using rule 38 (statement -> BREAK SEMI .)
    INTERFACE       reduce using rule 38 (statement -> BREAK SEMI .)
    TRAIT           reduce using rule 38 (statement -> BREAK SEMI .)
    NEW             reduce using rule 38 (statement -> BREAK SEMI .)
    CLONE           reduce using rule 38 (statement -> BREAK SEMI .)
    LIST            reduce using rule 38 (statement -> BREAK SEMI .)
    ARRAY           reduce using rule 38 (statement -> BREAK SEMI .)
    LBRACKET        reduce using rule 38 (statement -> BREAK SEMI .)
    PLUS            reduce using rule 38 (statement -> BREAK SEMI .)
    MINUS           reduce using rule 38 (statement -> BREAK SEMI .)
    NOT             reduce using rule 38 (statement -> BREAK SEMI .)
    BOOLEAN_NOT     reduce using rule 38 (statement -> BREAK SEMI .)
    INC             reduce using rule 38 (statement -> BREAK SEMI .)
    DEC             reduce using rule 38 (statement -> BREAK SEMI .)
    INT_CAST        reduce using rule 38 (statement -> BREAK SEMI .)
    DOUBLE_CAST     reduce using rule 38 (statement -> BREAK SEMI .)
    STRING_CAST     reduce using rule 38 (statement -> BREAK SEMI .)
    ARRAY_CAST      reduce using rule 38 (statement -> BREAK SEMI .)
    OBJECT_CAST     reduce using rule 38 (statement -> BREAK SEMI .)
    BOOL_CAST       reduce using rule 38 (statement -> BREAK SEMI .)
    UNSET_CAST      reduce using rule 38 (statement -> BREAK SEMI .)
    BINARY_CAST     reduce using rule 38 (statement -> BREAK SEMI .)
    ISSET           reduce using rule 38 (statement -> BREAK SEMI .)
    EMPTY           reduce using rule 38 (statement -> BREAK SEMI .)
    EVAL            reduce using rule 38 (statement -> BREAK SEMI .)
    INCLUDE         reduce using rule 38 (statement -> BREAK SEMI .)
    INCLUDE_ONCE    reduce using rule 38 (statement -> BREAK SEMI .)
    REQUIRE         reduce using rule 38 (statement -> BREAK SEMI .)
    REQUIRE_ONCE    reduce using rule 38 (statement -> BREAK SEMI .)
    PRINT           reduce using rule 38 (statement -> BREAK SEMI .)
    AT              reduce using rule 38 (statement -> BREAK SEMI .)
    LPAREN          reduce using rule 38 (statement -> BREAK SEMI .)
    CLASS           reduce using rule 38 (statement -> BREAK SEMI .)
    ABSTRACT        reduce using rule 38 (statement -> BREAK SEMI .)
    FINAL           reduce using rule 38 (statement -> BREAK SEMI .)
    QUOTE           reduce using rule 38 (statement -> BREAK SEMI .)
    STRING          reduce using rule 38 (statement -> BREAK SEMI .)
    STRING_VARNAME  reduce using rule 38 (statement -> BREAK SEMI .)
    NS_SEPARATOR    reduce using rule 38 (statement -> BREAK SEMI .)
    EXIT            reduce using rule 38 (statement -> BREAK SEMI .)
    DIE             reduce using rule 38 (statement -> BREAK SEMI .)
    LNUMBER         reduce using rule 38 (statement -> BREAK SEMI .)
    DNUMBER         reduce using rule 38 (statement -> BREAK SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 38 (statement -> BREAK SEMI .)
    LINE            reduce using rule 38 (statement -> BREAK SEMI .)
    FILE            reduce using rule 38 (statement -> BREAK SEMI .)
    DIR             reduce using rule 38 (statement -> BREAK SEMI .)
    CLASS_C         reduce using rule 38 (statement -> BREAK SEMI .)
    METHOD_C        reduce using rule 38 (statement -> BREAK SEMI .)
    FUNC_C          reduce using rule 38 (statement -> BREAK SEMI .)
    NS_C            reduce using rule 38 (statement -> BREAK SEMI .)
    START_HEREDOC   reduce using rule 38 (statement -> BREAK SEMI .)
    START_NOWDOC    reduce using rule 38 (statement -> BREAK SEMI .)
    BACKTICK        reduce using rule 38 (statement -> BREAK SEMI .)
    DOLLAR          reduce using rule 38 (statement -> BREAK SEMI .)
    VARIABLE        reduce using rule 38 (statement -> BREAK SEMI .)
    $end            reduce using rule 38 (statement -> BREAK SEMI .)
    RBRACE          reduce using rule 38 (statement -> BREAK SEMI .)
    YIELD           reduce using rule 38 (statement -> BREAK SEMI .)
    ELSEIF          reduce using rule 38 (statement -> BREAK SEMI .)
    ELSE            reduce using rule 38 (statement -> BREAK SEMI .)
    ENDIF           reduce using rule 38 (statement -> BREAK SEMI .)
    ENDWHILE        reduce using rule 38 (statement -> BREAK SEMI .)
    ENDDECLARE      reduce using rule 38 (statement -> BREAK SEMI .)
    ENDFOREACH      reduce using rule 38 (statement -> BREAK SEMI .)
    CASE            reduce using rule 38 (statement -> BREAK SEMI .)
    DEFAULT         reduce using rule 38 (statement -> BREAK SEMI .)
    ENDSWITCH       reduce using rule 38 (statement -> BREAK SEMI .)
    ENDFOR          reduce using rule 38 (statement -> BREAK SEMI .)


state 165

    (39) statement -> BREAK expr . SEMI
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            shift and go to state 345
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 166

    (40) statement -> CONTINUE SEMI .

    HALT_COMPILER   reduce using rule 40 (statement -> CONTINUE SEMI .)
    NAMESPACE       reduce using rule 40 (statement -> CONTINUE SEMI .)
    CONST           reduce using rule 40 (statement -> CONTINUE SEMI .)
    USE             reduce using rule 40 (statement -> CONTINUE SEMI .)
    LBRACE          reduce using rule 40 (statement -> CONTINUE SEMI .)
    IF              reduce using rule 40 (statement -> CONTINUE SEMI .)
    WHILE           reduce using rule 40 (statement -> CONTINUE SEMI .)
    DO              reduce using rule 40 (statement -> CONTINUE SEMI .)
    FOR             reduce using rule 40 (statement -> CONTINUE SEMI .)
    FOREACH         reduce using rule 40 (statement -> CONTINUE SEMI .)
    SWITCH          reduce using rule 40 (statement -> CONTINUE SEMI .)
    BREAK           reduce using rule 40 (statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 40 (statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 40 (statement -> CONTINUE SEMI .)
    GLOBAL          reduce using rule 40 (statement -> CONTINUE SEMI .)
    STATIC          reduce using rule 40 (statement -> CONTINUE SEMI .)
    ECHO            reduce using rule 40 (statement -> CONTINUE SEMI .)
    INLINE_HTML     reduce using rule 40 (statement -> CONTINUE SEMI .)
    UNSET           reduce using rule 40 (statement -> CONTINUE SEMI .)
    SEMI            reduce using rule 40 (statement -> CONTINUE SEMI .)
    TRY             reduce using rule 40 (statement -> CONTINUE SEMI .)
    THROW           reduce using rule 40 (statement -> CONTINUE SEMI .)
    DECLARE         reduce using rule 40 (statement -> CONTINUE SEMI .)
    FUNCTION        reduce using rule 40 (statement -> CONTINUE SEMI .)
    INTERFACE       reduce using rule 40 (statement -> CONTINUE SEMI .)
    TRAIT           reduce using rule 40 (statement -> CONTINUE SEMI .)
    NEW             reduce using rule 40 (statement -> CONTINUE SEMI .)
    CLONE           reduce using rule 40 (statement -> CONTINUE SEMI .)
    LIST            reduce using rule 40 (statement -> CONTINUE SEMI .)
    ARRAY           reduce using rule 40 (statement -> CONTINUE SEMI .)
    LBRACKET        reduce using rule 40 (statement -> CONTINUE SEMI .)
    PLUS            reduce using rule 40 (statement -> CONTINUE SEMI .)
    MINUS           reduce using rule 40 (statement -> CONTINUE SEMI .)
    NOT             reduce using rule 40 (statement -> CONTINUE SEMI .)
    BOOLEAN_NOT     reduce using rule 40 (statement -> CONTINUE SEMI .)
    INC             reduce using rule 40 (statement -> CONTINUE SEMI .)
    DEC             reduce using rule 40 (statement -> CONTINUE SEMI .)
    INT_CAST        reduce using rule 40 (statement -> CONTINUE SEMI .)
    DOUBLE_CAST     reduce using rule 40 (statement -> CONTINUE SEMI .)
    STRING_CAST     reduce using rule 40 (statement -> CONTINUE SEMI .)
    ARRAY_CAST      reduce using rule 40 (statement -> CONTINUE SEMI .)
    OBJECT_CAST     reduce using rule 40 (statement -> CONTINUE SEMI .)
    BOOL_CAST       reduce using rule 40 (statement -> CONTINUE SEMI .)
    UNSET_CAST      reduce using rule 40 (statement -> CONTINUE SEMI .)
    BINARY_CAST     reduce using rule 40 (statement -> CONTINUE SEMI .)
    ISSET           reduce using rule 40 (statement -> CONTINUE SEMI .)
    EMPTY           reduce using rule 40 (statement -> CONTINUE SEMI .)
    EVAL            reduce using rule 40 (statement -> CONTINUE SEMI .)
    INCLUDE         reduce using rule 40 (statement -> CONTINUE SEMI .)
    INCLUDE_ONCE    reduce using rule 40 (statement -> CONTINUE SEMI .)
    REQUIRE         reduce using rule 40 (statement -> CONTINUE SEMI .)
    REQUIRE_ONCE    reduce using rule 40 (statement -> CONTINUE SEMI .)
    PRINT           reduce using rule 40 (statement -> CONTINUE SEMI .)
    AT              reduce using rule 40 (statement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 40 (statement -> CONTINUE SEMI .)
    CLASS           reduce using rule 40 (statement -> CONTINUE SEMI .)
    ABSTRACT        reduce using rule 40 (statement -> CONTINUE SEMI .)
    FINAL           reduce using rule 40 (statement -> CONTINUE SEMI .)
    QUOTE           reduce using rule 40 (statement -> CONTINUE SEMI .)
    STRING          reduce using rule 40 (statement -> CONTINUE SEMI .)
    STRING_VARNAME  reduce using rule 40 (statement -> CONTINUE SEMI .)
    NS_SEPARATOR    reduce using rule 40 (statement -> CONTINUE SEMI .)
    EXIT            reduce using rule 40 (statement -> CONTINUE SEMI .)
    DIE             reduce using rule 40 (statement -> CONTINUE SEMI .)
    LNUMBER         reduce using rule 40 (statement -> CONTINUE SEMI .)
    DNUMBER         reduce using rule 40 (statement -> CONTINUE SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 40 (statement -> CONTINUE SEMI .)
    LINE            reduce using rule 40 (statement -> CONTINUE SEMI .)
    FILE            reduce using rule 40 (statement -> CONTINUE SEMI .)
    DIR             reduce using rule 40 (statement -> CONTINUE SEMI .)
    CLASS_C         reduce using rule 40 (statement -> CONTINUE SEMI .)
    METHOD_C        reduce using rule 40 (statement -> CONTINUE SEMI .)
    FUNC_C          reduce using rule 40 (statement -> CONTINUE SEMI .)
    NS_C            reduce using rule 40 (statement -> CONTINUE SEMI .)
    START_HEREDOC   reduce using rule 40 (statement -> CONTINUE SEMI .)
    START_NOWDOC    reduce using rule 40 (statement -> CONTINUE SEMI .)
    BACKTICK        reduce using rule 40 (statement -> CONTINUE SEMI .)
    DOLLAR          reduce using rule 40 (statement -> CONTINUE SEMI .)
    VARIABLE        reduce using rule 40 (statement -> CONTINUE SEMI .)
    $end            reduce using rule 40 (statement -> CONTINUE SEMI .)
    RBRACE          reduce using rule 40 (statement -> CONTINUE SEMI .)
    YIELD           reduce using rule 40 (statement -> CONTINUE SEMI .)
    ELSEIF          reduce using rule 40 (statement -> CONTINUE SEMI .)
    ELSE            reduce using rule 40 (statement -> CONTINUE SEMI .)
    ENDIF           reduce using rule 40 (statement -> CONTINUE SEMI .)
    ENDWHILE        reduce using rule 40 (statement -> CONTINUE SEMI .)
    ENDDECLARE      reduce using rule 40 (statement -> CONTINUE SEMI .)
    ENDFOREACH      reduce using rule 40 (statement -> CONTINUE SEMI .)
    CASE            reduce using rule 40 (statement -> CONTINUE SEMI .)
    DEFAULT         reduce using rule 40 (statement -> CONTINUE SEMI .)
    ENDSWITCH       reduce using rule 40 (statement -> CONTINUE SEMI .)
    ENDFOR          reduce using rule 40 (statement -> CONTINUE SEMI .)


state 167

    (41) statement -> CONTINUE expr . SEMI
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            shift and go to state 346
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 168

    (42) statement -> RETURN SEMI .

    HALT_COMPILER   reduce using rule 42 (statement -> RETURN SEMI .)
    NAMESPACE       reduce using rule 42 (statement -> RETURN SEMI .)
    CONST           reduce using rule 42 (statement -> RETURN SEMI .)
    USE             reduce using rule 42 (statement -> RETURN SEMI .)
    LBRACE          reduce using rule 42 (statement -> RETURN SEMI .)
    IF              reduce using rule 42 (statement -> RETURN SEMI .)
    WHILE           reduce using rule 42 (statement -> RETURN SEMI .)
    DO              reduce using rule 42 (statement -> RETURN SEMI .)
    FOR             reduce using rule 42 (statement -> RETURN SEMI .)
    FOREACH         reduce using rule 42 (statement -> RETURN SEMI .)
    SWITCH          reduce using rule 42 (statement -> RETURN SEMI .)
    BREAK           reduce using rule 42 (statement -> RETURN SEMI .)
    CONTINUE        reduce using rule 42 (statement -> RETURN SEMI .)
    RETURN          reduce using rule 42 (statement -> RETURN SEMI .)
    GLOBAL          reduce using rule 42 (statement -> RETURN SEMI .)
    STATIC          reduce using rule 42 (statement -> RETURN SEMI .)
    ECHO            reduce using rule 42 (statement -> RETURN SEMI .)
    INLINE_HTML     reduce using rule 42 (statement -> RETURN SEMI .)
    UNSET           reduce using rule 42 (statement -> RETURN SEMI .)
    SEMI            reduce using rule 42 (statement -> RETURN SEMI .)
    TRY             reduce using rule 42 (statement -> RETURN SEMI .)
    THROW           reduce using rule 42 (statement -> RETURN SEMI .)
    DECLARE         reduce using rule 42 (statement -> RETURN SEMI .)
    FUNCTION        reduce using rule 42 (statement -> RETURN SEMI .)
    INTERFACE       reduce using rule 42 (statement -> RETURN SEMI .)
    TRAIT           reduce using rule 42 (statement -> RETURN SEMI .)
    NEW             reduce using rule 42 (statement -> RETURN SEMI .)
    CLONE           reduce using rule 42 (statement -> RETURN SEMI .)
    LIST            reduce using rule 42 (statement -> RETURN SEMI .)
    ARRAY           reduce using rule 42 (statement -> RETURN SEMI .)
    LBRACKET        reduce using rule 42 (statement -> RETURN SEMI .)
    PLUS            reduce using rule 42 (statement -> RETURN SEMI .)
    MINUS           reduce using rule 42 (statement -> RETURN SEMI .)
    NOT             reduce using rule 42 (statement -> RETURN SEMI .)
    BOOLEAN_NOT     reduce using rule 42 (statement -> RETURN SEMI .)
    INC             reduce using rule 42 (statement -> RETURN SEMI .)
    DEC             reduce using rule 42 (statement -> RETURN SEMI .)
    INT_CAST        reduce using rule 42 (statement -> RETURN SEMI .)
    DOUBLE_CAST     reduce using rule 42 (statement -> RETURN SEMI .)
    STRING_CAST     reduce using rule 42 (statement -> RETURN SEMI .)
    ARRAY_CAST      reduce using rule 42 (statement -> RETURN SEMI .)
    OBJECT_CAST     reduce using rule 42 (statement -> RETURN SEMI .)
    BOOL_CAST       reduce using rule 42 (statement -> RETURN SEMI .)
    UNSET_CAST      reduce using rule 42 (statement -> RETURN SEMI .)
    BINARY_CAST     reduce using rule 42 (statement -> RETURN SEMI .)
    ISSET           reduce using rule 42 (statement -> RETURN SEMI .)
    EMPTY           reduce using rule 42 (statement -> RETURN SEMI .)
    EVAL            reduce using rule 42 (statement -> RETURN SEMI .)
    INCLUDE         reduce using rule 42 (statement -> RETURN SEMI .)
    INCLUDE_ONCE    reduce using rule 42 (statement -> RETURN SEMI .)
    REQUIRE         reduce using rule 42 (statement -> RETURN SEMI .)
    REQUIRE_ONCE    reduce using rule 42 (statement -> RETURN SEMI .)
    PRINT           reduce using rule 42 (statement -> RETURN SEMI .)
    AT              reduce using rule 42 (statement -> RETURN SEMI .)
    LPAREN          reduce using rule 42 (statement -> RETURN SEMI .)
    CLASS           reduce using rule 42 (statement -> RETURN SEMI .)
    ABSTRACT        reduce using rule 42 (statement -> RETURN SEMI .)
    FINAL           reduce using rule 42 (statement -> RETURN SEMI .)
    QUOTE           reduce using rule 42 (statement -> RETURN SEMI .)
    STRING          reduce using rule 42 (statement -> RETURN SEMI .)
    STRING_VARNAME  reduce using rule 42 (statement -> RETURN SEMI .)
    NS_SEPARATOR    reduce using rule 42 (statement -> RETURN SEMI .)
    EXIT            reduce using rule 42 (statement -> RETURN SEMI .)
    DIE             reduce using rule 42 (statement -> RETURN SEMI .)
    LNUMBER         reduce using rule 42 (statement -> RETURN SEMI .)
    DNUMBER         reduce using rule 42 (statement -> RETURN SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 42 (statement -> RETURN SEMI .)
    LINE            reduce using rule 42 (statement -> RETURN SEMI .)
    FILE            reduce using rule 42 (statement -> RETURN SEMI .)
    DIR             reduce using rule 42 (statement -> RETURN SEMI .)
    CLASS_C         reduce using rule 42 (statement -> RETURN SEMI .)
    METHOD_C        reduce using rule 42 (statement -> RETURN SEMI .)
    FUNC_C          reduce using rule 42 (statement -> RETURN SEMI .)
    NS_C            reduce using rule 42 (statement -> RETURN SEMI .)
    START_HEREDOC   reduce using rule 42 (statement -> RETURN SEMI .)
    START_NOWDOC    reduce using rule 42 (statement -> RETURN SEMI .)
    BACKTICK        reduce using rule 42 (statement -> RETURN SEMI .)
    DOLLAR          reduce using rule 42 (statement -> RETURN SEMI .)
    VARIABLE        reduce using rule 42 (statement -> RETURN SEMI .)
    $end            reduce using rule 42 (statement -> RETURN SEMI .)
    RBRACE          reduce using rule 42 (statement -> RETURN SEMI .)
    YIELD           reduce using rule 42 (statement -> RETURN SEMI .)
    ELSEIF          reduce using rule 42 (statement -> RETURN SEMI .)
    ELSE            reduce using rule 42 (statement -> RETURN SEMI .)
    ENDIF           reduce using rule 42 (statement -> RETURN SEMI .)
    ENDWHILE        reduce using rule 42 (statement -> RETURN SEMI .)
    ENDDECLARE      reduce using rule 42 (statement -> RETURN SEMI .)
    ENDFOREACH      reduce using rule 42 (statement -> RETURN SEMI .)
    CASE            reduce using rule 42 (statement -> RETURN SEMI .)
    DEFAULT         reduce using rule 42 (statement -> RETURN SEMI .)
    ENDSWITCH       reduce using rule 42 (statement -> RETURN SEMI .)
    ENDFOR          reduce using rule 42 (statement -> RETURN SEMI .)


state 169

    (43) statement -> RETURN expr . SEMI
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            shift and go to state 347
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 170

    (44) statement -> GLOBAL global_var_list . SEMI
    (94) global_var_list -> global_var_list . COMMA global_var

    SEMI            shift and go to state 348
    COMMA           shift and go to state 349


state 171

    (95) global_var_list -> global_var .

    SEMI            reduce using rule 95 (global_var_list -> global_var .)
    COMMA           reduce using rule 95 (global_var_list -> global_var .)


state 172

    (96) global_var -> VARIABLE .

    SEMI            reduce using rule 96 (global_var -> VARIABLE .)
    COMMA           reduce using rule 96 (global_var -> VARIABLE .)


state 173

    (97) global_var -> DOLLAR . variable
    (98) global_var -> DOLLAR . LBRACE expr RBRACE
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LBRACE          shift and go to state 351
    NS_SEPARATOR    shift and go to state 230
    NAMESPACE       shift and go to state 231
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107

    variable                       shift and go to state 350
    base_variable_with_function_calls shift and go to state 73
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    namespace_name                 shift and go to state 229
    class_name                     shift and go to state 232
    variable_without_objects       shift and go to state 102
    variable_class_name            shift and go to state 233
    reference_variable             shift and go to state 234
    compound_variable              shift and go to state 106

state 174

    (45) statement -> STATIC static_var_list . SEMI
    (99) static_var_list -> static_var_list . COMMA static_var

    SEMI            shift and go to state 352
    COMMA           shift and go to state 353


state 175

    (100) static_var_list -> static_var .

    SEMI            reduce using rule 100 (static_var_list -> static_var .)
    COMMA           reduce using rule 100 (static_var_list -> static_var .)


state 176

    (101) static_var -> VARIABLE . EQUALS static_scalar
    (102) static_var -> VARIABLE .

    EQUALS          shift and go to state 354
    SEMI            reduce using rule 102 (static_var -> VARIABLE .)
    COMMA           reduce using rule 102 (static_var -> VARIABLE .)


state 177

    (46) statement -> ECHO echo_expr_list . SEMI
    (103) echo_expr_list -> echo_expr_list . COMMA expr

    SEMI            shift and go to state 355
    COMMA           shift and go to state 356


state 178

    (104) echo_expr_list -> expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 104 (echo_expr_list -> expr .)
    COMMA           reduce using rule 104 (echo_expr_list -> expr .)
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 179

    (49) statement -> UNSET LPAREN . unset_variables RPAREN SEMI
    (105) unset_variables -> . unset_variables COMMA unset_variable
    (106) unset_variables -> . unset_variable
    (107) unset_variable -> . variable
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NS_SEPARATOR    shift and go to state 230
    NAMESPACE       shift and go to state 231
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107

    unset_variables                shift and go to state 357
    unset_variable                 shift and go to state 358
    variable                       shift and go to state 359
    base_variable_with_function_calls shift and go to state 73
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    namespace_name                 shift and go to state 229
    class_name                     shift and go to state 232
    variable_without_objects       shift and go to state 102
    variable_class_name            shift and go to state 233
    reference_variable             shift and go to state 234
    compound_variable              shift and go to state 106

state 180

    (51) statement -> TRY LBRACE . inner_statement_list RBRACE additional_catches maybe_finally
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (443) empty -> .

    RBRACE          reduce using rule 443 (empty -> .)
    HALT_COMPILER   reduce using rule 443 (empty -> .)
    YIELD           reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    IF              reduce using rule 443 (empty -> .)
    WHILE           reduce using rule 443 (empty -> .)
    DO              reduce using rule 443 (empty -> .)
    FOR             reduce using rule 443 (empty -> .)
    FOREACH         reduce using rule 443 (empty -> .)
    SWITCH          reduce using rule 443 (empty -> .)
    BREAK           reduce using rule 443 (empty -> .)
    CONTINUE        reduce using rule 443 (empty -> .)
    RETURN          reduce using rule 443 (empty -> .)
    GLOBAL          reduce using rule 443 (empty -> .)
    STATIC          reduce using rule 443 (empty -> .)
    ECHO            reduce using rule 443 (empty -> .)
    INLINE_HTML     reduce using rule 443 (empty -> .)
    UNSET           reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    TRY             reduce using rule 443 (empty -> .)
    THROW           reduce using rule 443 (empty -> .)
    DECLARE         reduce using rule 443 (empty -> .)
    FUNCTION        reduce using rule 443 (empty -> .)
    INTERFACE       reduce using rule 443 (empty -> .)
    TRAIT           reduce using rule 443 (empty -> .)
    NEW             reduce using rule 443 (empty -> .)
    CLONE           reduce using rule 443 (empty -> .)
    LIST            reduce using rule 443 (empty -> .)
    ARRAY           reduce using rule 443 (empty -> .)
    LBRACKET        reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    NOT             reduce using rule 443 (empty -> .)
    BOOLEAN_NOT     reduce using rule 443 (empty -> .)
    INC             reduce using rule 443 (empty -> .)
    DEC             reduce using rule 443 (empty -> .)
    INT_CAST        reduce using rule 443 (empty -> .)
    DOUBLE_CAST     reduce using rule 443 (empty -> .)
    STRING_CAST     reduce using rule 443 (empty -> .)
    ARRAY_CAST      reduce using rule 443 (empty -> .)
    OBJECT_CAST     reduce using rule 443 (empty -> .)
    BOOL_CAST       reduce using rule 443 (empty -> .)
    UNSET_CAST      reduce using rule 443 (empty -> .)
    BINARY_CAST     reduce using rule 443 (empty -> .)
    ISSET           reduce using rule 443 (empty -> .)
    EMPTY           reduce using rule 443 (empty -> .)
    EVAL            reduce using rule 443 (empty -> .)
    INCLUDE         reduce using rule 443 (empty -> .)
    INCLUDE_ONCE    reduce using rule 443 (empty -> .)
    REQUIRE         reduce using rule 443 (empty -> .)
    REQUIRE_ONCE    reduce using rule 443 (empty -> .)
    PRINT           reduce using rule 443 (empty -> .)
    AT              reduce using rule 443 (empty -> .)
    LPAREN          reduce using rule 443 (empty -> .)
    CLASS           reduce using rule 443 (empty -> .)
    ABSTRACT        reduce using rule 443 (empty -> .)
    FINAL           reduce using rule 443 (empty -> .)
    QUOTE           reduce using rule 443 (empty -> .)
    STRING          reduce using rule 443 (empty -> .)
    STRING_VARNAME  reduce using rule 443 (empty -> .)
    NS_SEPARATOR    reduce using rule 443 (empty -> .)
    NAMESPACE       reduce using rule 443 (empty -> .)
    EXIT            reduce using rule 443 (empty -> .)
    DIE             reduce using rule 443 (empty -> .)
    LNUMBER         reduce using rule 443 (empty -> .)
    DNUMBER         reduce using rule 443 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 443 (empty -> .)
    LINE            reduce using rule 443 (empty -> .)
    FILE            reduce using rule 443 (empty -> .)
    DIR             reduce using rule 443 (empty -> .)
    CLASS_C         reduce using rule 443 (empty -> .)
    METHOD_C        reduce using rule 443 (empty -> .)
    FUNC_C          reduce using rule 443 (empty -> .)
    NS_C            reduce using rule 443 (empty -> .)
    START_HEREDOC   reduce using rule 443 (empty -> .)
    START_NOWDOC    reduce using rule 443 (empty -> .)
    BACKTICK        reduce using rule 443 (empty -> .)
    DOLLAR          reduce using rule 443 (empty -> .)
    VARIABLE        reduce using rule 443 (empty -> .)

    inner_statement_list           shift and go to state 360
    empty                          shift and go to state 121

state 181

    (56) statement -> THROW expr . SEMI
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            shift and go to state 361
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 182

    (57) statement -> DECLARE LPAREN . declare_list RPAREN declare_statement
    (58) declare_list -> . STRING EQUALS static_scalar
    (59) declare_list -> . declare_list COMMA STRING EQUALS static_scalar

    STRING          shift and go to state 363

    declare_list                   shift and go to state 362

state 183

    (108) function_declaration_statement -> FUNCTION is_reference . STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (271) expr -> FUNCTION is_reference . LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE

    STRING          shift and go to state 364
    LPAREN          shift and go to state 365


state 184

    (167) is_reference -> AND .

    STRING          reduce using rule 167 (is_reference -> AND .)
    LPAREN          reduce using rule 167 (is_reference -> AND .)


state 185

    (168) is_reference -> empty .

    STRING          reduce using rule 168 (is_reference -> empty .)
    LPAREN          reduce using rule 168 (is_reference -> empty .)


state 186

    (353) scalar -> STRING QUOTE . encaps_list QUOTE
    (431) encaps_list -> . encaps_list encaps_var
    (432) encaps_list -> . empty
    (433) encaps_list -> . encaps_list ENCAPSED_AND_WHITESPACE
    (443) empty -> .

    QUOTE           reduce using rule 443 (empty -> .)
    ENCAPSED_AND_WHITESPACE reduce using rule 443 (empty -> .)
    VARIABLE        reduce using rule 443 (empty -> .)
    DOLLAR_OPEN_CURLY_BRACES reduce using rule 443 (empty -> .)
    CURLY_OPEN      reduce using rule 443 (empty -> .)

    encaps_list                    shift and go to state 366
    empty                          shift and go to state 258

state 187

    (370) common_scalar -> STRING CONSTANT_ENCAPSED_STRING .

    SEMI            reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    OBJECT_OPERATOR reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    LBRACE          reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    BOOLEAN_AND     reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    BOOLEAN_OR      reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    LOGICAL_AND     reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    LOGICAL_OR      reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    LOGICAL_XOR     reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    AND             reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    OR              reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    XOR             reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    CONCAT          reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    PLUS            reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    MINUS           reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    MUL             reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    DIV             reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    SL              reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    SR              reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    MOD             reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    IS_IDENTICAL    reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    IS_NOT_IDENTICAL reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    IS_EQUAL        reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    IS_NOT_EQUAL    reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    IS_SMALLER      reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    IS_GREATER      reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    INSTANCEOF      reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    QUESTION        reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    RPAREN          reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    COMMA           reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    DOUBLE_ARROW    reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    RBRACKET        reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    RBRACE          reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    COLON           reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)
    AS              reduce using rule 370 (common_scalar -> STRING CONSTANT_ENCAPSED_STRING .)


state 188

    (109) class_declaration_statement -> class_entry_type STRING . extends_from implements_list LBRACE class_statement_list RBRACE
    (115) extends_from -> . empty
    (116) extends_from -> . EXTENDS fully_qualified_class_name
    (443) empty -> .

    EXTENDS         shift and go to state 369
    IMPLEMENTS      reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)

    extends_from                   shift and go to state 367
    empty                          shift and go to state 368

state 189

    (110) class_declaration_statement -> INTERFACE STRING . interface_extends_list LBRACE class_statement_list RBRACE
    (150) interface_extends_list -> . EXTENDS interface_list
    (151) interface_extends_list -> . empty
    (443) empty -> .

    EXTENDS         shift and go to state 371
    LBRACE          reduce using rule 443 (empty -> .)

    interface_extends_list         shift and go to state 370
    empty                          shift and go to state 372

state 190

    (111) class_declaration_statement -> TRAIT STRING . LBRACE trait_statement_list RBRACE

    LBRACE          shift and go to state 373


state 191

    (181) expr -> variable EQUALS . expr
    (182) expr -> variable EQUALS . AND expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 375
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    variable                       shift and go to state 39
    expr                           shift and go to state 374
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 192

    (278) expr -> variable PLUS_EQUAL . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    variable                       shift and go to state 39
    expr                           shift and go to state 376
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 193

    (279) expr -> variable MINUS_EQUAL . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    variable                       shift and go to state 39
    expr                           shift and go to state 377
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 194

    (280) expr -> variable MUL_EQUAL . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    variable                       shift and go to state 39
    expr                           shift and go to state 378
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 195

    (281) expr -> variable DIV_EQUAL . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    variable                       shift and go to state 39
    expr                           shift and go to state 379
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 196

    (282) expr -> variable CONCAT_EQUAL . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    variable                       shift and go to state 39
    expr                           shift and go to state 380
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 197

    (283) expr -> variable MOD_EQUAL . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    variable                       shift and go to state 39
    expr                           shift and go to state 381
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 198

    (284) expr -> variable AND_EQUAL . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    variable                       shift and go to state 39
    expr                           shift and go to state 382
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 199

    (285) expr -> variable OR_EQUAL . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    variable                       shift and go to state 39
    expr                           shift and go to state 383
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 200

    (286) expr -> variable XOR_EQUAL . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    variable                       shift and go to state 39
    expr                           shift and go to state 384
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 201

    (287) expr -> variable SL_EQUAL . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    variable                       shift and go to state 39
    expr                           shift and go to state 385
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 202

    (288) expr -> variable SR_EQUAL . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    variable                       shift and go to state 39
    expr                           shift and go to state 386
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 203

    (323) expr -> variable INC .

    SEMI            reduce using rule 323 (expr -> variable INC .)
    OBJECT_OPERATOR reduce using rule 323 (expr -> variable INC .)
    LBRACE          reduce using rule 323 (expr -> variable INC .)
    BOOLEAN_AND     reduce using rule 323 (expr -> variable INC .)
    BOOLEAN_OR      reduce using rule 323 (expr -> variable INC .)
    LOGICAL_AND     reduce using rule 323 (expr -> variable INC .)
    LOGICAL_OR      reduce using rule 323 (expr -> variable INC .)
    LOGICAL_XOR     reduce using rule 323 (expr -> variable INC .)
    AND             reduce using rule 323 (expr -> variable INC .)
    OR              reduce using rule 323 (expr -> variable INC .)
    XOR             reduce using rule 323 (expr -> variable INC .)
    CONCAT          reduce using rule 323 (expr -> variable INC .)
    PLUS            reduce using rule 323 (expr -> variable INC .)
    MINUS           reduce using rule 323 (expr -> variable INC .)
    MUL             reduce using rule 323 (expr -> variable INC .)
    DIV             reduce using rule 323 (expr -> variable INC .)
    SL              reduce using rule 323 (expr -> variable INC .)
    SR              reduce using rule 323 (expr -> variable INC .)
    MOD             reduce using rule 323 (expr -> variable INC .)
    IS_IDENTICAL    reduce using rule 323 (expr -> variable INC .)
    IS_NOT_IDENTICAL reduce using rule 323 (expr -> variable INC .)
    IS_EQUAL        reduce using rule 323 (expr -> variable INC .)
    IS_NOT_EQUAL    reduce using rule 323 (expr -> variable INC .)
    IS_SMALLER      reduce using rule 323 (expr -> variable INC .)
    IS_SMALLER_OR_EQUAL reduce using rule 323 (expr -> variable INC .)
    IS_GREATER      reduce using rule 323 (expr -> variable INC .)
    IS_GREATER_OR_EQUAL reduce using rule 323 (expr -> variable INC .)
    INSTANCEOF      reduce using rule 323 (expr -> variable INC .)
    QUESTION        reduce using rule 323 (expr -> variable INC .)
    RPAREN          reduce using rule 323 (expr -> variable INC .)
    COMMA           reduce using rule 323 (expr -> variable INC .)
    DOUBLE_ARROW    reduce using rule 323 (expr -> variable INC .)
    RBRACKET        reduce using rule 323 (expr -> variable INC .)
    RBRACE          reduce using rule 323 (expr -> variable INC .)
    COLON           reduce using rule 323 (expr -> variable INC .)
    AS              reduce using rule 323 (expr -> variable INC .)


state 204

    (324) expr -> variable DEC .

    SEMI            reduce using rule 324 (expr -> variable DEC .)
    OBJECT_OPERATOR reduce using rule 324 (expr -> variable DEC .)
    LBRACE          reduce using rule 324 (expr -> variable DEC .)
    BOOLEAN_AND     reduce using rule 324 (expr -> variable DEC .)
    BOOLEAN_OR      reduce using rule 324 (expr -> variable DEC .)
    LOGICAL_AND     reduce using rule 324 (expr -> variable DEC .)
    LOGICAL_OR      reduce using rule 324 (expr -> variable DEC .)
    LOGICAL_XOR     reduce using rule 324 (expr -> variable DEC .)
    AND             reduce using rule 324 (expr -> variable DEC .)
    OR              reduce using rule 324 (expr -> variable DEC .)
    XOR             reduce using rule 324 (expr -> variable DEC .)
    CONCAT          reduce using rule 324 (expr -> variable DEC .)
    PLUS            reduce using rule 324 (expr -> variable DEC .)
    MINUS           reduce using rule 324 (expr -> variable DEC .)
    MUL             reduce using rule 324 (expr -> variable DEC .)
    DIV             reduce using rule 324 (expr -> variable DEC .)
    SL              reduce using rule 324 (expr -> variable DEC .)
    SR              reduce using rule 324 (expr -> variable DEC .)
    MOD             reduce using rule 324 (expr -> variable DEC .)
    IS_IDENTICAL    reduce using rule 324 (expr -> variable DEC .)
    IS_NOT_IDENTICAL reduce using rule 324 (expr -> variable DEC .)
    IS_EQUAL        reduce using rule 324 (expr -> variable DEC .)
    IS_NOT_EQUAL    reduce using rule 324 (expr -> variable DEC .)
    IS_SMALLER      reduce using rule 324 (expr -> variable DEC .)
    IS_SMALLER_OR_EQUAL reduce using rule 324 (expr -> variable DEC .)
    IS_GREATER      reduce using rule 324 (expr -> variable DEC .)
    IS_GREATER_OR_EQUAL reduce using rule 324 (expr -> variable DEC .)
    INSTANCEOF      reduce using rule 324 (expr -> variable DEC .)
    QUESTION        reduce using rule 324 (expr -> variable DEC .)
    RPAREN          reduce using rule 324 (expr -> variable DEC .)
    COMMA           reduce using rule 324 (expr -> variable DEC .)
    DOUBLE_ARROW    reduce using rule 324 (expr -> variable DEC .)
    RBRACKET        reduce using rule 324 (expr -> variable DEC .)
    RBRACE          reduce using rule 324 (expr -> variable DEC .)
    COLON           reduce using rule 324 (expr -> variable DEC .)
    AS              reduce using rule 324 (expr -> variable DEC .)


state 205

    (234) variable -> variable LBRACKET . dim_offset RBRACKET
    (241) dim_offset -> . expr
    (242) dim_offset -> . empty
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (443) empty -> .
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    RBRACKET        reduce using rule 443 (empty -> .)
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    variable                       shift and go to state 39
    dim_offset                     shift and go to state 387
    expr                           shift and go to state 306
    empty                          shift and go to state 308
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 206

    (183) expr -> NEW class_name_reference . ctor_arguments
    (196) ctor_arguments -> . LPAREN function_call_parameter_list RPAREN
    (197) ctor_arguments -> . empty
    (443) empty -> .

    LPAREN          shift and go to state 389
    SEMI            reduce using rule 443 (empty -> .)
    OBJECT_OPERATOR reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    BOOLEAN_AND     reduce using rule 443 (empty -> .)
    BOOLEAN_OR      reduce using rule 443 (empty -> .)
    LOGICAL_AND     reduce using rule 443 (empty -> .)
    LOGICAL_OR      reduce using rule 443 (empty -> .)
    LOGICAL_XOR     reduce using rule 443 (empty -> .)
    AND             reduce using rule 443 (empty -> .)
    OR              reduce using rule 443 (empty -> .)
    XOR             reduce using rule 443 (empty -> .)
    CONCAT          reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    MUL             reduce using rule 443 (empty -> .)
    DIV             reduce using rule 443 (empty -> .)
    SL              reduce using rule 443 (empty -> .)
    SR              reduce using rule 443 (empty -> .)
    MOD             reduce using rule 443 (empty -> .)
    IS_IDENTICAL    reduce using rule 443 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 443 (empty -> .)
    IS_EQUAL        reduce using rule 443 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 443 (empty -> .)
    IS_SMALLER      reduce using rule 443 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 443 (empty -> .)
    IS_GREATER      reduce using rule 443 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 443 (empty -> .)
    INSTANCEOF      reduce using rule 443 (empty -> .)
    QUESTION        reduce using rule 443 (empty -> .)
    RPAREN          reduce using rule 443 (empty -> .)
    COMMA           reduce using rule 443 (empty -> .)
    DOUBLE_ARROW    reduce using rule 443 (empty -> .)
    RBRACKET        reduce using rule 443 (empty -> .)
    RBRACE          reduce using rule 443 (empty -> .)
    COLON           reduce using rule 443 (empty -> .)
    AS              reduce using rule 443 (empty -> .)

    ctor_arguments                 shift and go to state 388
    empty                          shift and go to state 390

state 207

    (185) class_name_reference -> class_name .
    (229) static_member -> class_name . DOUBLE_COLON variable_without_objects
    (231) static_member -> class_name . DOUBLE_COLON LBRACE expr RBRACE

    LPAREN          reduce using rule 185 (class_name_reference -> class_name .)
    SEMI            reduce using rule 185 (class_name_reference -> class_name .)
    OBJECT_OPERATOR reduce using rule 185 (class_name_reference -> class_name .)
    LBRACE          reduce using rule 185 (class_name_reference -> class_name .)
    BOOLEAN_AND     reduce using rule 185 (class_name_reference -> class_name .)
    BOOLEAN_OR      reduce using rule 185 (class_name_reference -> class_name .)
    LOGICAL_AND     reduce using rule 185 (class_name_reference -> class_name .)
    LOGICAL_OR      reduce using rule 185 (class_name_reference -> class_name .)
    LOGICAL_XOR     reduce using rule 185 (class_name_reference -> class_name .)
    AND             reduce using rule 185 (class_name_reference -> class_name .)
    OR              reduce using rule 185 (class_name_reference -> class_name .)
    XOR             reduce using rule 185 (class_name_reference -> class_name .)
    CONCAT          reduce using rule 185 (class_name_reference -> class_name .)
    PLUS            reduce using rule 185 (class_name_reference -> class_name .)
    MINUS           reduce using rule 185 (class_name_reference -> class_name .)
    MUL             reduce using rule 185 (class_name_reference -> class_name .)
    DIV             reduce using rule 185 (class_name_reference -> class_name .)
    SL              reduce using rule 185 (class_name_reference -> class_name .)
    SR              reduce using rule 185 (class_name_reference -> class_name .)
    MOD             reduce using rule 185 (class_name_reference -> class_name .)
    IS_IDENTICAL    reduce using rule 185 (class_name_reference -> class_name .)
    IS_NOT_IDENTICAL reduce using rule 185 (class_name_reference -> class_name .)
    IS_EQUAL        reduce using rule 185 (class_name_reference -> class_name .)
    IS_NOT_EQUAL    reduce using rule 185 (class_name_reference -> class_name .)
    IS_SMALLER      reduce using rule 185 (class_name_reference -> class_name .)
    IS_SMALLER_OR_EQUAL reduce using rule 185 (class_name_reference -> class_name .)
    IS_GREATER      reduce using rule 185 (class_name_reference -> class_name .)
    IS_GREATER_OR_EQUAL reduce using rule 185 (class_name_reference -> class_name .)
    INSTANCEOF      reduce using rule 185 (class_name_reference -> class_name .)
    QUESTION        reduce using rule 185 (class_name_reference -> class_name .)
    RPAREN          reduce using rule 185 (class_name_reference -> class_name .)
    COMMA           reduce using rule 185 (class_name_reference -> class_name .)
    DOUBLE_ARROW    reduce using rule 185 (class_name_reference -> class_name .)
    RBRACKET        reduce using rule 185 (class_name_reference -> class_name .)
    RBRACE          reduce using rule 185 (class_name_reference -> class_name .)
    COLON           reduce using rule 185 (class_name_reference -> class_name .)
    AS              reduce using rule 185 (class_name_reference -> class_name .)
    DOUBLE_COLON    shift and go to state 391


state 208

    (186) class_name_reference -> dynamic_class_name_reference .

    LPAREN          reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    SEMI            reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    OBJECT_OPERATOR reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    LBRACE          reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    BOOLEAN_AND     reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    BOOLEAN_OR      reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    LOGICAL_AND     reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    LOGICAL_OR      reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    LOGICAL_XOR     reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    AND             reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    OR              reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    XOR             reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    CONCAT          reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    PLUS            reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    MINUS           reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    MUL             reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    DIV             reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    SL              reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    SR              reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    MOD             reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    IS_IDENTICAL    reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    IS_NOT_IDENTICAL reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    IS_EQUAL        reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    IS_NOT_EQUAL    reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    IS_SMALLER      reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    IS_SMALLER_OR_EQUAL reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    IS_GREATER      reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    IS_GREATER_OR_EQUAL reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    INSTANCEOF      reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    QUESTION        reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    RPAREN          reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    COMMA           reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    DOUBLE_ARROW    reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    RBRACKET        reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    RBRACE          reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    COLON           reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)
    AS              reduce using rule 186 (class_name_reference -> dynamic_class_name_reference .)


state 209

    (187) class_name -> namespace_name .
    (428) namespace_name -> namespace_name . NS_SEPARATOR STRING

    DOUBLE_COLON    reduce using rule 187 (class_name -> namespace_name .)
    LPAREN          reduce using rule 187 (class_name -> namespace_name .)
    SEMI            reduce using rule 187 (class_name -> namespace_name .)
    OBJECT_OPERATOR reduce using rule 187 (class_name -> namespace_name .)
    LBRACE          reduce using rule 187 (class_name -> namespace_name .)
    BOOLEAN_AND     reduce using rule 187 (class_name -> namespace_name .)
    BOOLEAN_OR      reduce using rule 187 (class_name -> namespace_name .)
    LOGICAL_AND     reduce using rule 187 (class_name -> namespace_name .)
    LOGICAL_OR      reduce using rule 187 (class_name -> namespace_name .)
    LOGICAL_XOR     reduce using rule 187 (class_name -> namespace_name .)
    AND             reduce using rule 187 (class_name -> namespace_name .)
    OR              reduce using rule 187 (class_name -> namespace_name .)
    XOR             reduce using rule 187 (class_name -> namespace_name .)
    CONCAT          reduce using rule 187 (class_name -> namespace_name .)
    PLUS            reduce using rule 187 (class_name -> namespace_name .)
    MINUS           reduce using rule 187 (class_name -> namespace_name .)
    MUL             reduce using rule 187 (class_name -> namespace_name .)
    DIV             reduce using rule 187 (class_name -> namespace_name .)
    SL              reduce using rule 187 (class_name -> namespace_name .)
    SR              reduce using rule 187 (class_name -> namespace_name .)
    MOD             reduce using rule 187 (class_name -> namespace_name .)
    IS_IDENTICAL    reduce using rule 187 (class_name -> namespace_name .)
    IS_NOT_IDENTICAL reduce using rule 187 (class_name -> namespace_name .)
    IS_EQUAL        reduce using rule 187 (class_name -> namespace_name .)
    IS_NOT_EQUAL    reduce using rule 187 (class_name -> namespace_name .)
    IS_SMALLER      reduce using rule 187 (class_name -> namespace_name .)
    IS_SMALLER_OR_EQUAL reduce using rule 187 (class_name -> namespace_name .)
    IS_GREATER      reduce using rule 187 (class_name -> namespace_name .)
    IS_GREATER_OR_EQUAL reduce using rule 187 (class_name -> namespace_name .)
    INSTANCEOF      reduce using rule 187 (class_name -> namespace_name .)
    QUESTION        reduce using rule 187 (class_name -> namespace_name .)
    RPAREN          reduce using rule 187 (class_name -> namespace_name .)
    COMMA           reduce using rule 187 (class_name -> namespace_name .)
    DOUBLE_ARROW    reduce using rule 187 (class_name -> namespace_name .)
    RBRACKET        reduce using rule 187 (class_name -> namespace_name .)
    RBRACE          reduce using rule 187 (class_name -> namespace_name .)
    COLON           reduce using rule 187 (class_name -> namespace_name .)
    AS              reduce using rule 187 (class_name -> namespace_name .)
    VARIABLE        reduce using rule 187 (class_name -> namespace_name .)
    NS_SEPARATOR    shift and go to state 118


state 210

    (188) class_name -> NS_SEPARATOR . namespace_name
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    STRING          shift and go to state 116
    ARRAY           shift and go to state 117

    namespace_name                 shift and go to state 392

state 211

    (189) class_name -> NAMESPACE . NS_SEPARATOR namespace_name

    NS_SEPARATOR    shift and go to state 393


state 212

    (191) dynamic_class_name_reference -> base_variable . OBJECT_OPERATOR object_property dynamic_class_name_variable_properties
    (192) dynamic_class_name_reference -> base_variable .

  ! shift/reduce conflict for OBJECT_OPERATOR resolved as shift
    OBJECT_OPERATOR shift and go to state 394
    LPAREN          reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    SEMI            reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    LBRACE          reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    BOOLEAN_AND     reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    BOOLEAN_OR      reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    LOGICAL_AND     reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    LOGICAL_OR      reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    LOGICAL_XOR     reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    AND             reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    OR              reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    XOR             reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    CONCAT          reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    PLUS            reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    MINUS           reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    MUL             reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    DIV             reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    SL              reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    SR              reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    MOD             reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    IS_IDENTICAL    reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    IS_NOT_IDENTICAL reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    IS_EQUAL        reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    IS_NOT_EQUAL    reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    IS_SMALLER      reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    IS_GREATER      reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    INSTANCEOF      reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    QUESTION        reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    RPAREN          reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    COMMA           reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    DOUBLE_ARROW    reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    RBRACKET        reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    RBRACE          reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    COLON           reduce using rule 192 (dynamic_class_name_reference -> base_variable .)
    AS              reduce using rule 192 (dynamic_class_name_reference -> base_variable .)

  ! OBJECT_OPERATOR [ reduce using rule 192 (dynamic_class_name_reference -> base_variable .) ]


state 213

    (225) base_variable -> simple_indirect_reference .

    OBJECT_OPERATOR reduce using rule 225 (base_variable -> simple_indirect_reference .)
    LPAREN          reduce using rule 225 (base_variable -> simple_indirect_reference .)
    SEMI            reduce using rule 225 (base_variable -> simple_indirect_reference .)
    LBRACE          reduce using rule 225 (base_variable -> simple_indirect_reference .)
    BOOLEAN_AND     reduce using rule 225 (base_variable -> simple_indirect_reference .)
    BOOLEAN_OR      reduce using rule 225 (base_variable -> simple_indirect_reference .)
    LOGICAL_AND     reduce using rule 225 (base_variable -> simple_indirect_reference .)
    LOGICAL_OR      reduce using rule 225 (base_variable -> simple_indirect_reference .)
    LOGICAL_XOR     reduce using rule 225 (base_variable -> simple_indirect_reference .)
    AND             reduce using rule 225 (base_variable -> simple_indirect_reference .)
    OR              reduce using rule 225 (base_variable -> simple_indirect_reference .)
    XOR             reduce using rule 225 (base_variable -> simple_indirect_reference .)
    CONCAT          reduce using rule 225 (base_variable -> simple_indirect_reference .)
    PLUS            reduce using rule 225 (base_variable -> simple_indirect_reference .)
    MINUS           reduce using rule 225 (base_variable -> simple_indirect_reference .)
    MUL             reduce using rule 225 (base_variable -> simple_indirect_reference .)
    DIV             reduce using rule 225 (base_variable -> simple_indirect_reference .)
    SL              reduce using rule 225 (base_variable -> simple_indirect_reference .)
    SR              reduce using rule 225 (base_variable -> simple_indirect_reference .)
    MOD             reduce using rule 225 (base_variable -> simple_indirect_reference .)
    IS_IDENTICAL    reduce using rule 225 (base_variable -> simple_indirect_reference .)
    IS_NOT_IDENTICAL reduce using rule 225 (base_variable -> simple_indirect_reference .)
    IS_EQUAL        reduce using rule 225 (base_variable -> simple_indirect_reference .)
    IS_NOT_EQUAL    reduce using rule 225 (base_variable -> simple_indirect_reference .)
    IS_SMALLER      reduce using rule 225 (base_variable -> simple_indirect_reference .)
    IS_SMALLER_OR_EQUAL reduce using rule 225 (base_variable -> simple_indirect_reference .)
    IS_GREATER      reduce using rule 225 (base_variable -> simple_indirect_reference .)
    IS_GREATER_OR_EQUAL reduce using rule 225 (base_variable -> simple_indirect_reference .)
    INSTANCEOF      reduce using rule 225 (base_variable -> simple_indirect_reference .)
    QUESTION        reduce using rule 225 (base_variable -> simple_indirect_reference .)
    RPAREN          reduce using rule 225 (base_variable -> simple_indirect_reference .)
    COMMA           reduce using rule 225 (base_variable -> simple_indirect_reference .)
    DOUBLE_ARROW    reduce using rule 225 (base_variable -> simple_indirect_reference .)
    RBRACKET        reduce using rule 225 (base_variable -> simple_indirect_reference .)
    RBRACE          reduce using rule 225 (base_variable -> simple_indirect_reference .)
    COLON           reduce using rule 225 (base_variable -> simple_indirect_reference .)
    AS              reduce using rule 225 (base_variable -> simple_indirect_reference .)


state 214

    (228) simple_indirect_reference -> reference_variable .
    (235) reference_variable -> reference_variable . LBRACKET dim_offset RBRACKET
    (236) reference_variable -> reference_variable . LBRACE expr RBRACE
    (233) variable_class_name -> reference_variable .

  ! shift/reduce conflict for LBRACE resolved as shift
    OBJECT_OPERATOR reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    LPAREN          reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    SEMI            reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    BOOLEAN_AND     reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    BOOLEAN_OR      reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    LOGICAL_AND     reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    LOGICAL_OR      reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    LOGICAL_XOR     reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    AND             reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    OR              reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    XOR             reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    CONCAT          reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    PLUS            reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    MINUS           reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    MUL             reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    DIV             reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    SL              reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    SR              reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    MOD             reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_IDENTICAL    reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_NOT_IDENTICAL reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_EQUAL        reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_NOT_EQUAL    reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_SMALLER      reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_GREATER      reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    INSTANCEOF      reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    QUESTION        reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    RPAREN          reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    COMMA           reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    DOUBLE_ARROW    reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    RBRACKET        reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    RBRACE          reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    COLON           reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    AS              reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    LBRACKET        shift and go to state 267
    LBRACE          shift and go to state 268
    DOUBLE_COLON    reduce using rule 233 (variable_class_name -> reference_variable .)

  ! LBRACE          [ reduce using rule 228 (simple_indirect_reference -> reference_variable .) ]


state 215

    (230) static_member -> variable_class_name . DOUBLE_COLON variable_without_objects
    (232) static_member -> variable_class_name . DOUBLE_COLON LBRACE expr RBRACE

    DOUBLE_COLON    shift and go to state 395


state 216

    (198) expr -> CLONE expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 198 (expr -> CLONE expr .)
    OBJECT_OPERATOR reduce using rule 198 (expr -> CLONE expr .)
    LBRACE          reduce using rule 198 (expr -> CLONE expr .)
    BOOLEAN_AND     reduce using rule 198 (expr -> CLONE expr .)
    BOOLEAN_OR      reduce using rule 198 (expr -> CLONE expr .)
    LOGICAL_AND     reduce using rule 198 (expr -> CLONE expr .)
    LOGICAL_OR      reduce using rule 198 (expr -> CLONE expr .)
    LOGICAL_XOR     reduce using rule 198 (expr -> CLONE expr .)
    AND             reduce using rule 198 (expr -> CLONE expr .)
    OR              reduce using rule 198 (expr -> CLONE expr .)
    XOR             reduce using rule 198 (expr -> CLONE expr .)
    CONCAT          reduce using rule 198 (expr -> CLONE expr .)
    PLUS            reduce using rule 198 (expr -> CLONE expr .)
    MINUS           reduce using rule 198 (expr -> CLONE expr .)
    MUL             reduce using rule 198 (expr -> CLONE expr .)
    DIV             reduce using rule 198 (expr -> CLONE expr .)
    SL              reduce using rule 198 (expr -> CLONE expr .)
    SR              reduce using rule 198 (expr -> CLONE expr .)
    MOD             reduce using rule 198 (expr -> CLONE expr .)
    IS_IDENTICAL    reduce using rule 198 (expr -> CLONE expr .)
    IS_NOT_IDENTICAL reduce using rule 198 (expr -> CLONE expr .)
    IS_EQUAL        reduce using rule 198 (expr -> CLONE expr .)
    IS_NOT_EQUAL    reduce using rule 198 (expr -> CLONE expr .)
    IS_SMALLER      reduce using rule 198 (expr -> CLONE expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 198 (expr -> CLONE expr .)
    IS_GREATER      reduce using rule 198 (expr -> CLONE expr .)
    IS_GREATER_OR_EQUAL reduce using rule 198 (expr -> CLONE expr .)
    INSTANCEOF      reduce using rule 198 (expr -> CLONE expr .)
    QUESTION        reduce using rule 198 (expr -> CLONE expr .)
    RPAREN          reduce using rule 198 (expr -> CLONE expr .)
    COMMA           reduce using rule 198 (expr -> CLONE expr .)
    DOUBLE_ARROW    reduce using rule 198 (expr -> CLONE expr .)
    RBRACKET        reduce using rule 198 (expr -> CLONE expr .)
    RBRACE          reduce using rule 198 (expr -> CLONE expr .)
    COLON           reduce using rule 198 (expr -> CLONE expr .)
    AS              reduce using rule 198 (expr -> CLONE expr .)

  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! CONCAT          [ shift and go to state 141 ]
  ! PLUS            [ shift and go to state 142 ]
  ! MINUS           [ shift and go to state 143 ]
  ! MUL             [ shift and go to state 144 ]
  ! DIV             [ shift and go to state 145 ]
  ! SL              [ shift and go to state 146 ]
  ! SR              [ shift and go to state 147 ]
  ! MOD             [ shift and go to state 148 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! IS_SMALLER      [ shift and go to state 153 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 154 ]
  ! IS_GREATER      [ shift and go to state 155 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 156 ]
  ! INSTANCEOF      [ shift and go to state 157 ]
  ! QUESTION        [ shift and go to state 158 ]


state 217

    (199) expr -> LIST LPAREN . assignment_list RPAREN EQUALS expr
    (200) assignment_list -> . assignment_list COMMA assignment_list_element
    (201) assignment_list -> . assignment_list_element
    (202) assignment_list_element -> . variable
    (203) assignment_list_element -> . empty
    (204) assignment_list_element -> . LIST LPAREN assignment_list RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (443) empty -> .
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LIST            shift and go to state 396
    RPAREN          reduce using rule 443 (empty -> .)
    COMMA           reduce using rule 443 (empty -> .)
    NS_SEPARATOR    shift and go to state 230
    NAMESPACE       shift and go to state 231
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107

    assignment_list                shift and go to state 397
    assignment_list_element        shift and go to state 398
    variable                       shift and go to state 399
    empty                          shift and go to state 400
    base_variable_with_function_calls shift and go to state 73
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    namespace_name                 shift and go to state 229
    class_name                     shift and go to state 232
    variable_without_objects       shift and go to state 102
    variable_class_name            shift and go to state 233
    reference_variable             shift and go to state 234
    compound_variable              shift and go to state 106

state 218

    (252) expr -> ARRAY LPAREN . array_pair_list RPAREN
    (254) array_pair_list -> . empty
    (255) array_pair_list -> . non_empty_array_pair_list possible_comma
    (443) empty -> .
    (256) non_empty_array_pair_list -> . non_empty_array_pair_list COMMA AND variable
    (257) non_empty_array_pair_list -> . non_empty_array_pair_list COMMA expr
    (258) non_empty_array_pair_list -> . AND variable
    (259) non_empty_array_pair_list -> . expr
    (260) non_empty_array_pair_list -> . non_empty_array_pair_list COMMA expr DOUBLE_ARROW AND variable
    (261) non_empty_array_pair_list -> . non_empty_array_pair_list COMMA expr DOUBLE_ARROW expr
    (262) non_empty_array_pair_list -> . expr DOUBLE_ARROW AND variable
    (263) non_empty_array_pair_list -> . expr DOUBLE_ARROW expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RPAREN          reduce using rule 443 (empty -> .)
    AND             shift and go to state 222
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    array_pair_list                shift and go to state 401
    empty                          shift and go to state 220
    non_empty_array_pair_list      shift and go to state 221
    variable                       shift and go to state 39
    expr                           shift and go to state 223
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 219

    (253) expr -> LBRACKET array_pair_list . RBRACKET

    RBRACKET        shift and go to state 402


state 220

    (254) array_pair_list -> empty .

    RBRACKET        reduce using rule 254 (array_pair_list -> empty .)
    RPAREN          reduce using rule 254 (array_pair_list -> empty .)


state 221

    (255) array_pair_list -> non_empty_array_pair_list . possible_comma
    (256) non_empty_array_pair_list -> non_empty_array_pair_list . COMMA AND variable
    (257) non_empty_array_pair_list -> non_empty_array_pair_list . COMMA expr
    (260) non_empty_array_pair_list -> non_empty_array_pair_list . COMMA expr DOUBLE_ARROW AND variable
    (261) non_empty_array_pair_list -> non_empty_array_pair_list . COMMA expr DOUBLE_ARROW expr
    (264) possible_comma -> . empty
    (265) possible_comma -> . COMMA
    (443) empty -> .

    COMMA           shift and go to state 404
    RBRACKET        reduce using rule 443 (empty -> .)
    RPAREN          reduce using rule 443 (empty -> .)

    possible_comma                 shift and go to state 403
    empty                          shift and go to state 405

state 222

    (258) non_empty_array_pair_list -> AND . variable
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NS_SEPARATOR    shift and go to state 230
    NAMESPACE       shift and go to state 231
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107

    variable                       shift and go to state 406
    base_variable_with_function_calls shift and go to state 73
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    namespace_name                 shift and go to state 229
    class_name                     shift and go to state 232
    variable_without_objects       shift and go to state 102
    variable_class_name            shift and go to state 233
    reference_variable             shift and go to state 234
    compound_variable              shift and go to state 106

state 223

    (259) non_empty_array_pair_list -> expr .
    (262) non_empty_array_pair_list -> expr . DOUBLE_ARROW AND variable
    (263) non_empty_array_pair_list -> expr . DOUBLE_ARROW expr
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    COMMA           reduce using rule 259 (non_empty_array_pair_list -> expr .)
    RBRACKET        reduce using rule 259 (non_empty_array_pair_list -> expr .)
    RPAREN          reduce using rule 259 (non_empty_array_pair_list -> expr .)
    DOUBLE_ARROW    shift and go to state 407
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 224

    (315) expr -> PLUS expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 315 (expr -> PLUS expr .)
    OBJECT_OPERATOR reduce using rule 315 (expr -> PLUS expr .)
    LBRACE          reduce using rule 315 (expr -> PLUS expr .)
    BOOLEAN_AND     reduce using rule 315 (expr -> PLUS expr .)
    BOOLEAN_OR      reduce using rule 315 (expr -> PLUS expr .)
    LOGICAL_AND     reduce using rule 315 (expr -> PLUS expr .)
    LOGICAL_OR      reduce using rule 315 (expr -> PLUS expr .)
    LOGICAL_XOR     reduce using rule 315 (expr -> PLUS expr .)
    AND             reduce using rule 315 (expr -> PLUS expr .)
    OR              reduce using rule 315 (expr -> PLUS expr .)
    XOR             reduce using rule 315 (expr -> PLUS expr .)
    CONCAT          reduce using rule 315 (expr -> PLUS expr .)
    PLUS            reduce using rule 315 (expr -> PLUS expr .)
    MINUS           reduce using rule 315 (expr -> PLUS expr .)
    SL              reduce using rule 315 (expr -> PLUS expr .)
    SR              reduce using rule 315 (expr -> PLUS expr .)
    IS_IDENTICAL    reduce using rule 315 (expr -> PLUS expr .)
    IS_NOT_IDENTICAL reduce using rule 315 (expr -> PLUS expr .)
    IS_EQUAL        reduce using rule 315 (expr -> PLUS expr .)
    IS_NOT_EQUAL    reduce using rule 315 (expr -> PLUS expr .)
    IS_SMALLER      reduce using rule 315 (expr -> PLUS expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 315 (expr -> PLUS expr .)
    IS_GREATER      reduce using rule 315 (expr -> PLUS expr .)
    IS_GREATER_OR_EQUAL reduce using rule 315 (expr -> PLUS expr .)
    QUESTION        reduce using rule 315 (expr -> PLUS expr .)
    RPAREN          reduce using rule 315 (expr -> PLUS expr .)
    COMMA           reduce using rule 315 (expr -> PLUS expr .)
    DOUBLE_ARROW    reduce using rule 315 (expr -> PLUS expr .)
    RBRACKET        reduce using rule 315 (expr -> PLUS expr .)
    RBRACE          reduce using rule 315 (expr -> PLUS expr .)
    COLON           reduce using rule 315 (expr -> PLUS expr .)
    AS              reduce using rule 315 (expr -> PLUS expr .)
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    MOD             shift and go to state 148
    INSTANCEOF      shift and go to state 157

  ! MUL             [ reduce using rule 315 (expr -> PLUS expr .) ]
  ! DIV             [ reduce using rule 315 (expr -> PLUS expr .) ]
  ! MOD             [ reduce using rule 315 (expr -> PLUS expr .) ]
  ! INSTANCEOF      [ reduce using rule 315 (expr -> PLUS expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! CONCAT          [ shift and go to state 141 ]
  ! PLUS            [ shift and go to state 142 ]
  ! MINUS           [ shift and go to state 143 ]
  ! SL              [ shift and go to state 146 ]
  ! SR              [ shift and go to state 147 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! IS_SMALLER      [ shift and go to state 153 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 154 ]
  ! IS_GREATER      [ shift and go to state 155 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 156 ]
  ! QUESTION        [ shift and go to state 158 ]


state 225

    (316) expr -> MINUS expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 316 (expr -> MINUS expr .)
    OBJECT_OPERATOR reduce using rule 316 (expr -> MINUS expr .)
    LBRACE          reduce using rule 316 (expr -> MINUS expr .)
    BOOLEAN_AND     reduce using rule 316 (expr -> MINUS expr .)
    BOOLEAN_OR      reduce using rule 316 (expr -> MINUS expr .)
    LOGICAL_AND     reduce using rule 316 (expr -> MINUS expr .)
    LOGICAL_OR      reduce using rule 316 (expr -> MINUS expr .)
    LOGICAL_XOR     reduce using rule 316 (expr -> MINUS expr .)
    AND             reduce using rule 316 (expr -> MINUS expr .)
    OR              reduce using rule 316 (expr -> MINUS expr .)
    XOR             reduce using rule 316 (expr -> MINUS expr .)
    CONCAT          reduce using rule 316 (expr -> MINUS expr .)
    PLUS            reduce using rule 316 (expr -> MINUS expr .)
    MINUS           reduce using rule 316 (expr -> MINUS expr .)
    SL              reduce using rule 316 (expr -> MINUS expr .)
    SR              reduce using rule 316 (expr -> MINUS expr .)
    IS_IDENTICAL    reduce using rule 316 (expr -> MINUS expr .)
    IS_NOT_IDENTICAL reduce using rule 316 (expr -> MINUS expr .)
    IS_EQUAL        reduce using rule 316 (expr -> MINUS expr .)
    IS_NOT_EQUAL    reduce using rule 316 (expr -> MINUS expr .)
    IS_SMALLER      reduce using rule 316 (expr -> MINUS expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 316 (expr -> MINUS expr .)
    IS_GREATER      reduce using rule 316 (expr -> MINUS expr .)
    IS_GREATER_OR_EQUAL reduce using rule 316 (expr -> MINUS expr .)
    QUESTION        reduce using rule 316 (expr -> MINUS expr .)
    RPAREN          reduce using rule 316 (expr -> MINUS expr .)
    COMMA           reduce using rule 316 (expr -> MINUS expr .)
    DOUBLE_ARROW    reduce using rule 316 (expr -> MINUS expr .)
    RBRACKET        reduce using rule 316 (expr -> MINUS expr .)
    RBRACE          reduce using rule 316 (expr -> MINUS expr .)
    COLON           reduce using rule 316 (expr -> MINUS expr .)
    AS              reduce using rule 316 (expr -> MINUS expr .)
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    MOD             shift and go to state 148
    INSTANCEOF      shift and go to state 157

  ! MUL             [ reduce using rule 316 (expr -> MINUS expr .) ]
  ! DIV             [ reduce using rule 316 (expr -> MINUS expr .) ]
  ! MOD             [ reduce using rule 316 (expr -> MINUS expr .) ]
  ! INSTANCEOF      [ reduce using rule 316 (expr -> MINUS expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! CONCAT          [ shift and go to state 141 ]
  ! PLUS            [ shift and go to state 142 ]
  ! MINUS           [ shift and go to state 143 ]
  ! SL              [ shift and go to state 146 ]
  ! SR              [ shift and go to state 147 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! IS_SMALLER      [ shift and go to state 153 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 154 ]
  ! IS_GREATER      [ shift and go to state 155 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 156 ]
  ! QUESTION        [ shift and go to state 158 ]


state 226

    (317) expr -> NOT expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 317 (expr -> NOT expr .)
    OBJECT_OPERATOR reduce using rule 317 (expr -> NOT expr .)
    LBRACE          reduce using rule 317 (expr -> NOT expr .)
    BOOLEAN_AND     reduce using rule 317 (expr -> NOT expr .)
    BOOLEAN_OR      reduce using rule 317 (expr -> NOT expr .)
    LOGICAL_AND     reduce using rule 317 (expr -> NOT expr .)
    LOGICAL_OR      reduce using rule 317 (expr -> NOT expr .)
    LOGICAL_XOR     reduce using rule 317 (expr -> NOT expr .)
    AND             reduce using rule 317 (expr -> NOT expr .)
    OR              reduce using rule 317 (expr -> NOT expr .)
    XOR             reduce using rule 317 (expr -> NOT expr .)
    CONCAT          reduce using rule 317 (expr -> NOT expr .)
    PLUS            reduce using rule 317 (expr -> NOT expr .)
    MINUS           reduce using rule 317 (expr -> NOT expr .)
    MUL             reduce using rule 317 (expr -> NOT expr .)
    DIV             reduce using rule 317 (expr -> NOT expr .)
    SL              reduce using rule 317 (expr -> NOT expr .)
    SR              reduce using rule 317 (expr -> NOT expr .)
    MOD             reduce using rule 317 (expr -> NOT expr .)
    IS_IDENTICAL    reduce using rule 317 (expr -> NOT expr .)
    IS_NOT_IDENTICAL reduce using rule 317 (expr -> NOT expr .)
    IS_EQUAL        reduce using rule 317 (expr -> NOT expr .)
    IS_NOT_EQUAL    reduce using rule 317 (expr -> NOT expr .)
    IS_SMALLER      reduce using rule 317 (expr -> NOT expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 317 (expr -> NOT expr .)
    IS_GREATER      reduce using rule 317 (expr -> NOT expr .)
    IS_GREATER_OR_EQUAL reduce using rule 317 (expr -> NOT expr .)
    INSTANCEOF      reduce using rule 317 (expr -> NOT expr .)
    QUESTION        reduce using rule 317 (expr -> NOT expr .)
    RPAREN          reduce using rule 317 (expr -> NOT expr .)
    COMMA           reduce using rule 317 (expr -> NOT expr .)
    DOUBLE_ARROW    reduce using rule 317 (expr -> NOT expr .)
    RBRACKET        reduce using rule 317 (expr -> NOT expr .)
    RBRACE          reduce using rule 317 (expr -> NOT expr .)
    COLON           reduce using rule 317 (expr -> NOT expr .)
    AS              reduce using rule 317 (expr -> NOT expr .)

  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! CONCAT          [ shift and go to state 141 ]
  ! PLUS            [ shift and go to state 142 ]
  ! MINUS           [ shift and go to state 143 ]
  ! MUL             [ shift and go to state 144 ]
  ! DIV             [ shift and go to state 145 ]
  ! SL              [ shift and go to state 146 ]
  ! SR              [ shift and go to state 147 ]
  ! MOD             [ shift and go to state 148 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! IS_SMALLER      [ shift and go to state 153 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 154 ]
  ! IS_GREATER      [ shift and go to state 155 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 156 ]
  ! INSTANCEOF      [ shift and go to state 157 ]
  ! QUESTION        [ shift and go to state 158 ]


state 227

    (318) expr -> BOOLEAN_NOT expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    OBJECT_OPERATOR reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    LBRACE          reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    BOOLEAN_AND     reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    BOOLEAN_OR      reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    LOGICAL_AND     reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    LOGICAL_OR      reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    LOGICAL_XOR     reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    AND             reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    OR              reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    XOR             reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    CONCAT          reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    PLUS            reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    MINUS           reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    MUL             reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    DIV             reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    SL              reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    SR              reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    MOD             reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    IS_IDENTICAL    reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    IS_NOT_IDENTICAL reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    IS_EQUAL        reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    IS_NOT_EQUAL    reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    IS_SMALLER      reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    IS_GREATER      reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    IS_GREATER_OR_EQUAL reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    QUESTION        reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    RPAREN          reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    COMMA           reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    DOUBLE_ARROW    reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    RBRACKET        reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    RBRACE          reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    COLON           reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    AS              reduce using rule 318 (expr -> BOOLEAN_NOT expr .)
    INSTANCEOF      shift and go to state 157

  ! INSTANCEOF      [ reduce using rule 318 (expr -> BOOLEAN_NOT expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! CONCAT          [ shift and go to state 141 ]
  ! PLUS            [ shift and go to state 142 ]
  ! MINUS           [ shift and go to state 143 ]
  ! MUL             [ shift and go to state 144 ]
  ! DIV             [ shift and go to state 145 ]
  ! SL              [ shift and go to state 146 ]
  ! SR              [ shift and go to state 147 ]
  ! MOD             [ shift and go to state 148 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! IS_SMALLER      [ shift and go to state 153 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 154 ]
  ! IS_GREATER      [ shift and go to state 155 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 156 ]
  ! QUESTION        [ shift and go to state 158 ]


state 228

    (321) expr -> INC variable .
    (234) variable -> variable . LBRACKET dim_offset RBRACKET

    SEMI            reduce using rule 321 (expr -> INC variable .)
    OBJECT_OPERATOR reduce using rule 321 (expr -> INC variable .)
    LBRACE          reduce using rule 321 (expr -> INC variable .)
    BOOLEAN_AND     reduce using rule 321 (expr -> INC variable .)
    BOOLEAN_OR      reduce using rule 321 (expr -> INC variable .)
    LOGICAL_AND     reduce using rule 321 (expr -> INC variable .)
    LOGICAL_OR      reduce using rule 321 (expr -> INC variable .)
    LOGICAL_XOR     reduce using rule 321 (expr -> INC variable .)
    AND             reduce using rule 321 (expr -> INC variable .)
    OR              reduce using rule 321 (expr -> INC variable .)
    XOR             reduce using rule 321 (expr -> INC variable .)
    CONCAT          reduce using rule 321 (expr -> INC variable .)
    PLUS            reduce using rule 321 (expr -> INC variable .)
    MINUS           reduce using rule 321 (expr -> INC variable .)
    MUL             reduce using rule 321 (expr -> INC variable .)
    DIV             reduce using rule 321 (expr -> INC variable .)
    SL              reduce using rule 321 (expr -> INC variable .)
    SR              reduce using rule 321 (expr -> INC variable .)
    MOD             reduce using rule 321 (expr -> INC variable .)
    IS_IDENTICAL    reduce using rule 321 (expr -> INC variable .)
    IS_NOT_IDENTICAL reduce using rule 321 (expr -> INC variable .)
    IS_EQUAL        reduce using rule 321 (expr -> INC variable .)
    IS_NOT_EQUAL    reduce using rule 321 (expr -> INC variable .)
    IS_SMALLER      reduce using rule 321 (expr -> INC variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 321 (expr -> INC variable .)
    IS_GREATER      reduce using rule 321 (expr -> INC variable .)
    IS_GREATER_OR_EQUAL reduce using rule 321 (expr -> INC variable .)
    INSTANCEOF      reduce using rule 321 (expr -> INC variable .)
    QUESTION        reduce using rule 321 (expr -> INC variable .)
    RPAREN          reduce using rule 321 (expr -> INC variable .)
    COMMA           reduce using rule 321 (expr -> INC variable .)
    DOUBLE_ARROW    reduce using rule 321 (expr -> INC variable .)
    RBRACKET        reduce using rule 321 (expr -> INC variable .)
    RBRACE          reduce using rule 321 (expr -> INC variable .)
    COLON           reduce using rule 321 (expr -> INC variable .)
    AS              reduce using rule 321 (expr -> INC variable .)
    LBRACKET        shift and go to state 205


state 229

    (209) function_call -> namespace_name . LPAREN function_call_parameter_list RPAREN
    (428) namespace_name -> namespace_name . NS_SEPARATOR STRING
    (187) class_name -> namespace_name .

    LPAREN          shift and go to state 119
    NS_SEPARATOR    shift and go to state 118
    DOUBLE_COLON    reduce using rule 187 (class_name -> namespace_name .)


state 230

    (210) function_call -> NS_SEPARATOR . namespace_name LPAREN function_call_parameter_list RPAREN
    (188) class_name -> NS_SEPARATOR . namespace_name
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    STRING          shift and go to state 116
    ARRAY           shift and go to state 117

    namespace_name                 shift and go to state 408

state 231

    (211) function_call -> NAMESPACE . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (189) class_name -> NAMESPACE . NS_SEPARATOR namespace_name

    NS_SEPARATOR    shift and go to state 409


state 232

    (212) function_call -> class_name . DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> class_name . DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> class_name . DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (229) static_member -> class_name . DOUBLE_COLON variable_without_objects
    (231) static_member -> class_name . DOUBLE_COLON LBRACE expr RBRACE

    DOUBLE_COLON    shift and go to state 410


state 233

    (214) function_call -> variable_class_name . DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> variable_class_name . DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (217) function_call -> variable_class_name . DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (230) static_member -> variable_class_name . DOUBLE_COLON variable_without_objects
    (232) static_member -> variable_class_name . DOUBLE_COLON LBRACE expr RBRACE

    DOUBLE_COLON    shift and go to state 411


state 234

    (228) simple_indirect_reference -> reference_variable .
    (233) variable_class_name -> reference_variable .
    (235) reference_variable -> reference_variable . LBRACKET dim_offset RBRACKET
    (236) reference_variable -> reference_variable . LBRACE expr RBRACE

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
    OBJECT_OPERATOR reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    SEMI            reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    BOOLEAN_AND     reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    BOOLEAN_OR      reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    LOGICAL_AND     reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    LOGICAL_OR      reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    LOGICAL_XOR     reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    AND             reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    OR              reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    XOR             reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    CONCAT          reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    PLUS            reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    MINUS           reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    MUL             reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    DIV             reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    SL              reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    SR              reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    MOD             reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_IDENTICAL    reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_NOT_IDENTICAL reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_EQUAL        reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_NOT_EQUAL    reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_SMALLER      reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_GREATER      reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    INSTANCEOF      reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    QUESTION        reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    RPAREN          reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    COMMA           reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    DOUBLE_ARROW    reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    RBRACKET        reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    RBRACE          reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    COLON           reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    AS              reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    LPAREN          reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    DOUBLE_COLON    reduce using rule 233 (variable_class_name -> reference_variable .)
    LBRACKET        shift and go to state 267
    LBRACE          shift and go to state 268

  ! LBRACKET        [ reduce using rule 228 (simple_indirect_reference -> reference_variable .) ]
  ! LBRACE          [ reduce using rule 228 (simple_indirect_reference -> reference_variable .) ]


state 235

    (322) expr -> DEC variable .
    (234) variable -> variable . LBRACKET dim_offset RBRACKET

    SEMI            reduce using rule 322 (expr -> DEC variable .)
    OBJECT_OPERATOR reduce using rule 322 (expr -> DEC variable .)
    LBRACE          reduce using rule 322 (expr -> DEC variable .)
    BOOLEAN_AND     reduce using rule 322 (expr -> DEC variable .)
    BOOLEAN_OR      reduce using rule 322 (expr -> DEC variable .)
    LOGICAL_AND     reduce using rule 322 (expr -> DEC variable .)
    LOGICAL_OR      reduce using rule 322 (expr -> DEC variable .)
    LOGICAL_XOR     reduce using rule 322 (expr -> DEC variable .)
    AND             reduce using rule 322 (expr -> DEC variable .)
    OR              reduce using rule 322 (expr -> DEC variable .)
    XOR             reduce using rule 322 (expr -> DEC variable .)
    CONCAT          reduce using rule 322 (expr -> DEC variable .)
    PLUS            reduce using rule 322 (expr -> DEC variable .)
    MINUS           reduce using rule 322 (expr -> DEC variable .)
    MUL             reduce using rule 322 (expr -> DEC variable .)
    DIV             reduce using rule 322 (expr -> DEC variable .)
    SL              reduce using rule 322 (expr -> DEC variable .)
    SR              reduce using rule 322 (expr -> DEC variable .)
    MOD             reduce using rule 322 (expr -> DEC variable .)
    IS_IDENTICAL    reduce using rule 322 (expr -> DEC variable .)
    IS_NOT_IDENTICAL reduce using rule 322 (expr -> DEC variable .)
    IS_EQUAL        reduce using rule 322 (expr -> DEC variable .)
    IS_NOT_EQUAL    reduce using rule 322 (expr -> DEC variable .)
    IS_SMALLER      reduce using rule 322 (expr -> DEC variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 322 (expr -> DEC variable .)
    IS_GREATER      reduce using rule 322 (expr -> DEC variable .)
    IS_GREATER_OR_EQUAL reduce using rule 322 (expr -> DEC variable .)
    INSTANCEOF      reduce using rule 322 (expr -> DEC variable .)
    QUESTION        reduce using rule 322 (expr -> DEC variable .)
    RPAREN          reduce using rule 322 (expr -> DEC variable .)
    COMMA           reduce using rule 322 (expr -> DEC variable .)
    DOUBLE_ARROW    reduce using rule 322 (expr -> DEC variable .)
    RBRACKET        reduce using rule 322 (expr -> DEC variable .)
    RBRACE          reduce using rule 322 (expr -> DEC variable .)
    COLON           reduce using rule 322 (expr -> DEC variable .)
    AS              reduce using rule 322 (expr -> DEC variable .)
    LBRACKET        shift and go to state 205


state 236

    (325) expr -> INT_CAST expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 325 (expr -> INT_CAST expr .)
    OBJECT_OPERATOR reduce using rule 325 (expr -> INT_CAST expr .)
    LBRACE          reduce using rule 325 (expr -> INT_CAST expr .)
    BOOLEAN_AND     reduce using rule 325 (expr -> INT_CAST expr .)
    BOOLEAN_OR      reduce using rule 325 (expr -> INT_CAST expr .)
    LOGICAL_AND     reduce using rule 325 (expr -> INT_CAST expr .)
    LOGICAL_OR      reduce using rule 325 (expr -> INT_CAST expr .)
    LOGICAL_XOR     reduce using rule 325 (expr -> INT_CAST expr .)
    AND             reduce using rule 325 (expr -> INT_CAST expr .)
    OR              reduce using rule 325 (expr -> INT_CAST expr .)
    XOR             reduce using rule 325 (expr -> INT_CAST expr .)
    CONCAT          reduce using rule 325 (expr -> INT_CAST expr .)
    PLUS            reduce using rule 325 (expr -> INT_CAST expr .)
    MINUS           reduce using rule 325 (expr -> INT_CAST expr .)
    MUL             reduce using rule 325 (expr -> INT_CAST expr .)
    DIV             reduce using rule 325 (expr -> INT_CAST expr .)
    SL              reduce using rule 325 (expr -> INT_CAST expr .)
    SR              reduce using rule 325 (expr -> INT_CAST expr .)
    MOD             reduce using rule 325 (expr -> INT_CAST expr .)
    IS_IDENTICAL    reduce using rule 325 (expr -> INT_CAST expr .)
    IS_NOT_IDENTICAL reduce using rule 325 (expr -> INT_CAST expr .)
    IS_EQUAL        reduce using rule 325 (expr -> INT_CAST expr .)
    IS_NOT_EQUAL    reduce using rule 325 (expr -> INT_CAST expr .)
    IS_SMALLER      reduce using rule 325 (expr -> INT_CAST expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 325 (expr -> INT_CAST expr .)
    IS_GREATER      reduce using rule 325 (expr -> INT_CAST expr .)
    IS_GREATER_OR_EQUAL reduce using rule 325 (expr -> INT_CAST expr .)
    INSTANCEOF      reduce using rule 325 (expr -> INT_CAST expr .)
    QUESTION        reduce using rule 325 (expr -> INT_CAST expr .)
    RPAREN          reduce using rule 325 (expr -> INT_CAST expr .)
    COMMA           reduce using rule 325 (expr -> INT_CAST expr .)
    DOUBLE_ARROW    reduce using rule 325 (expr -> INT_CAST expr .)
    RBRACKET        reduce using rule 325 (expr -> INT_CAST expr .)
    RBRACE          reduce using rule 325 (expr -> INT_CAST expr .)
    COLON           reduce using rule 325 (expr -> INT_CAST expr .)
    AS              reduce using rule 325 (expr -> INT_CAST expr .)

  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! CONCAT          [ shift and go to state 141 ]
  ! PLUS            [ shift and go to state 142 ]
  ! MINUS           [ shift and go to state 143 ]
  ! MUL             [ shift and go to state 144 ]
  ! DIV             [ shift and go to state 145 ]
  ! SL              [ shift and go to state 146 ]
  ! SR              [ shift and go to state 147 ]
  ! MOD             [ shift and go to state 148 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! IS_SMALLER      [ shift and go to state 153 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 154 ]
  ! IS_GREATER      [ shift and go to state 155 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 156 ]
  ! INSTANCEOF      [ shift and go to state 157 ]
  ! QUESTION        [ shift and go to state 158 ]


state 237

    (326) expr -> DOUBLE_CAST expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    OBJECT_OPERATOR reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    LBRACE          reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    BOOLEAN_AND     reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    BOOLEAN_OR      reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    LOGICAL_AND     reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    LOGICAL_OR      reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    LOGICAL_XOR     reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    AND             reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    OR              reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    XOR             reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    CONCAT          reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    PLUS            reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    MINUS           reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    MUL             reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    DIV             reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    SL              reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    SR              reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    MOD             reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    IS_IDENTICAL    reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    IS_NOT_IDENTICAL reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    IS_EQUAL        reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    IS_NOT_EQUAL    reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    IS_SMALLER      reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    IS_GREATER      reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    IS_GREATER_OR_EQUAL reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    INSTANCEOF      reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    QUESTION        reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    RPAREN          reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    COMMA           reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    DOUBLE_ARROW    reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    RBRACKET        reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    RBRACE          reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    COLON           reduce using rule 326 (expr -> DOUBLE_CAST expr .)
    AS              reduce using rule 326 (expr -> DOUBLE_CAST expr .)

  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! CONCAT          [ shift and go to state 141 ]
  ! PLUS            [ shift and go to state 142 ]
  ! MINUS           [ shift and go to state 143 ]
  ! MUL             [ shift and go to state 144 ]
  ! DIV             [ shift and go to state 145 ]
  ! SL              [ shift and go to state 146 ]
  ! SR              [ shift and go to state 147 ]
  ! MOD             [ shift and go to state 148 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! IS_SMALLER      [ shift and go to state 153 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 154 ]
  ! IS_GREATER      [ shift and go to state 155 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 156 ]
  ! INSTANCEOF      [ shift and go to state 157 ]
  ! QUESTION        [ shift and go to state 158 ]


state 238

    (327) expr -> STRING_CAST expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 327 (expr -> STRING_CAST expr .)
    OBJECT_OPERATOR reduce using rule 327 (expr -> STRING_CAST expr .)
    LBRACE          reduce using rule 327 (expr -> STRING_CAST expr .)
    BOOLEAN_AND     reduce using rule 327 (expr -> STRING_CAST expr .)
    BOOLEAN_OR      reduce using rule 327 (expr -> STRING_CAST expr .)
    LOGICAL_AND     reduce using rule 327 (expr -> STRING_CAST expr .)
    LOGICAL_OR      reduce using rule 327 (expr -> STRING_CAST expr .)
    LOGICAL_XOR     reduce using rule 327 (expr -> STRING_CAST expr .)
    AND             reduce using rule 327 (expr -> STRING_CAST expr .)
    OR              reduce using rule 327 (expr -> STRING_CAST expr .)
    XOR             reduce using rule 327 (expr -> STRING_CAST expr .)
    CONCAT          reduce using rule 327 (expr -> STRING_CAST expr .)
    PLUS            reduce using rule 327 (expr -> STRING_CAST expr .)
    MINUS           reduce using rule 327 (expr -> STRING_CAST expr .)
    MUL             reduce using rule 327 (expr -> STRING_CAST expr .)
    DIV             reduce using rule 327 (expr -> STRING_CAST expr .)
    SL              reduce using rule 327 (expr -> STRING_CAST expr .)
    SR              reduce using rule 327 (expr -> STRING_CAST expr .)
    MOD             reduce using rule 327 (expr -> STRING_CAST expr .)
    IS_IDENTICAL    reduce using rule 327 (expr -> STRING_CAST expr .)
    IS_NOT_IDENTICAL reduce using rule 327 (expr -> STRING_CAST expr .)
    IS_EQUAL        reduce using rule 327 (expr -> STRING_CAST expr .)
    IS_NOT_EQUAL    reduce using rule 327 (expr -> STRING_CAST expr .)
    IS_SMALLER      reduce using rule 327 (expr -> STRING_CAST expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 327 (expr -> STRING_CAST expr .)
    IS_GREATER      reduce using rule 327 (expr -> STRING_CAST expr .)
    IS_GREATER_OR_EQUAL reduce using rule 327 (expr -> STRING_CAST expr .)
    INSTANCEOF      reduce using rule 327 (expr -> STRING_CAST expr .)
    QUESTION        reduce using rule 327 (expr -> STRING_CAST expr .)
    RPAREN          reduce using rule 327 (expr -> STRING_CAST expr .)
    COMMA           reduce using rule 327 (expr -> STRING_CAST expr .)
    DOUBLE_ARROW    reduce using rule 327 (expr -> STRING_CAST expr .)
    RBRACKET        reduce using rule 327 (expr -> STRING_CAST expr .)
    RBRACE          reduce using rule 327 (expr -> STRING_CAST expr .)
    COLON           reduce using rule 327 (expr -> STRING_CAST expr .)
    AS              reduce using rule 327 (expr -> STRING_CAST expr .)

  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! CONCAT          [ shift and go to state 141 ]
  ! PLUS            [ shift and go to state 142 ]
  ! MINUS           [ shift and go to state 143 ]
  ! MUL             [ shift and go to state 144 ]
  ! DIV             [ shift and go to state 145 ]
  ! SL              [ shift and go to state 146 ]
  ! SR              [ shift and go to state 147 ]
  ! MOD             [ shift and go to state 148 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! IS_SMALLER      [ shift and go to state 153 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 154 ]
  ! IS_GREATER      [ shift and go to state 155 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 156 ]
  ! INSTANCEOF      [ shift and go to state 157 ]
  ! QUESTION        [ shift and go to state 158 ]


state 239

    (328) expr -> ARRAY_CAST expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 328 (expr -> ARRAY_CAST expr .)
    OBJECT_OPERATOR reduce using rule 328 (expr -> ARRAY_CAST expr .)
    LBRACE          reduce using rule 328 (expr -> ARRAY_CAST expr .)
    BOOLEAN_AND     reduce using rule 328 (expr -> ARRAY_CAST expr .)
    BOOLEAN_OR      reduce using rule 328 (expr -> ARRAY_CAST expr .)
    LOGICAL_AND     reduce using rule 328 (expr -> ARRAY_CAST expr .)
    LOGICAL_OR      reduce using rule 328 (expr -> ARRAY_CAST expr .)
    LOGICAL_XOR     reduce using rule 328 (expr -> ARRAY_CAST expr .)
    AND             reduce using rule 328 (expr -> ARRAY_CAST expr .)
    OR              reduce using rule 328 (expr -> ARRAY_CAST expr .)
    XOR             reduce using rule 328 (expr -> ARRAY_CAST expr .)
    CONCAT          reduce using rule 328 (expr -> ARRAY_CAST expr .)
    PLUS            reduce using rule 328 (expr -> ARRAY_CAST expr .)
    MINUS           reduce using rule 328 (expr -> ARRAY_CAST expr .)
    MUL             reduce using rule 328 (expr -> ARRAY_CAST expr .)
    DIV             reduce using rule 328 (expr -> ARRAY_CAST expr .)
    SL              reduce using rule 328 (expr -> ARRAY_CAST expr .)
    SR              reduce using rule 328 (expr -> ARRAY_CAST expr .)
    MOD             reduce using rule 328 (expr -> ARRAY_CAST expr .)
    IS_IDENTICAL    reduce using rule 328 (expr -> ARRAY_CAST expr .)
    IS_NOT_IDENTICAL reduce using rule 328 (expr -> ARRAY_CAST expr .)
    IS_EQUAL        reduce using rule 328 (expr -> ARRAY_CAST expr .)
    IS_NOT_EQUAL    reduce using rule 328 (expr -> ARRAY_CAST expr .)
    IS_SMALLER      reduce using rule 328 (expr -> ARRAY_CAST expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 328 (expr -> ARRAY_CAST expr .)
    IS_GREATER      reduce using rule 328 (expr -> ARRAY_CAST expr .)
    IS_GREATER_OR_EQUAL reduce using rule 328 (expr -> ARRAY_CAST expr .)
    INSTANCEOF      reduce using rule 328 (expr -> ARRAY_CAST expr .)
    QUESTION        reduce using rule 328 (expr -> ARRAY_CAST expr .)
    RPAREN          reduce using rule 328 (expr -> ARRAY_CAST expr .)
    COMMA           reduce using rule 328 (expr -> ARRAY_CAST expr .)
    DOUBLE_ARROW    reduce using rule 328 (expr -> ARRAY_CAST expr .)
    RBRACKET        reduce using rule 328 (expr -> ARRAY_CAST expr .)
    RBRACE          reduce using rule 328 (expr -> ARRAY_CAST expr .)
    COLON           reduce using rule 328 (expr -> ARRAY_CAST expr .)
    AS              reduce using rule 328 (expr -> ARRAY_CAST expr .)

  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! CONCAT          [ shift and go to state 141 ]
  ! PLUS            [ shift and go to state 142 ]
  ! MINUS           [ shift and go to state 143 ]
  ! MUL             [ shift and go to state 144 ]
  ! DIV             [ shift and go to state 145 ]
  ! SL              [ shift and go to state 146 ]
  ! SR              [ shift and go to state 147 ]
  ! MOD             [ shift and go to state 148 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! IS_SMALLER      [ shift and go to state 153 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 154 ]
  ! IS_GREATER      [ shift and go to state 155 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 156 ]
  ! INSTANCEOF      [ shift and go to state 157 ]
  ! QUESTION        [ shift and go to state 158 ]


state 240

    (329) expr -> OBJECT_CAST expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 329 (expr -> OBJECT_CAST expr .)
    OBJECT_OPERATOR reduce using rule 329 (expr -> OBJECT_CAST expr .)
    LBRACE          reduce using rule 329 (expr -> OBJECT_CAST expr .)
    BOOLEAN_AND     reduce using rule 329 (expr -> OBJECT_CAST expr .)
    BOOLEAN_OR      reduce using rule 329 (expr -> OBJECT_CAST expr .)
    LOGICAL_AND     reduce using rule 329 (expr -> OBJECT_CAST expr .)
    LOGICAL_OR      reduce using rule 329 (expr -> OBJECT_CAST expr .)
    LOGICAL_XOR     reduce using rule 329 (expr -> OBJECT_CAST expr .)
    AND             reduce using rule 329 (expr -> OBJECT_CAST expr .)
    OR              reduce using rule 329 (expr -> OBJECT_CAST expr .)
    XOR             reduce using rule 329 (expr -> OBJECT_CAST expr .)
    CONCAT          reduce using rule 329 (expr -> OBJECT_CAST expr .)
    PLUS            reduce using rule 329 (expr -> OBJECT_CAST expr .)
    MINUS           reduce using rule 329 (expr -> OBJECT_CAST expr .)
    MUL             reduce using rule 329 (expr -> OBJECT_CAST expr .)
    DIV             reduce using rule 329 (expr -> OBJECT_CAST expr .)
    SL              reduce using rule 329 (expr -> OBJECT_CAST expr .)
    SR              reduce using rule 329 (expr -> OBJECT_CAST expr .)
    MOD             reduce using rule 329 (expr -> OBJECT_CAST expr .)
    IS_IDENTICAL    reduce using rule 329 (expr -> OBJECT_CAST expr .)
    IS_NOT_IDENTICAL reduce using rule 329 (expr -> OBJECT_CAST expr .)
    IS_EQUAL        reduce using rule 329 (expr -> OBJECT_CAST expr .)
    IS_NOT_EQUAL    reduce using rule 329 (expr -> OBJECT_CAST expr .)
    IS_SMALLER      reduce using rule 329 (expr -> OBJECT_CAST expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 329 (expr -> OBJECT_CAST expr .)
    IS_GREATER      reduce using rule 329 (expr -> OBJECT_CAST expr .)
    IS_GREATER_OR_EQUAL reduce using rule 329 (expr -> OBJECT_CAST expr .)
    INSTANCEOF      reduce using rule 329 (expr -> OBJECT_CAST expr .)
    QUESTION        reduce using rule 329 (expr -> OBJECT_CAST expr .)
    RPAREN          reduce using rule 329 (expr -> OBJECT_CAST expr .)
    COMMA           reduce using rule 329 (expr -> OBJECT_CAST expr .)
    DOUBLE_ARROW    reduce using rule 329 (expr -> OBJECT_CAST expr .)
    RBRACKET        reduce using rule 329 (expr -> OBJECT_CAST expr .)
    RBRACE          reduce using rule 329 (expr -> OBJECT_CAST expr .)
    COLON           reduce using rule 329 (expr -> OBJECT_CAST expr .)
    AS              reduce using rule 329 (expr -> OBJECT_CAST expr .)

  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! CONCAT          [ shift and go to state 141 ]
  ! PLUS            [ shift and go to state 142 ]
  ! MINUS           [ shift and go to state 143 ]
  ! MUL             [ shift and go to state 144 ]
  ! DIV             [ shift and go to state 145 ]
  ! SL              [ shift and go to state 146 ]
  ! SR              [ shift and go to state 147 ]
  ! MOD             [ shift and go to state 148 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! IS_SMALLER      [ shift and go to state 153 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 154 ]
  ! IS_GREATER      [ shift and go to state 155 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 156 ]
  ! INSTANCEOF      [ shift and go to state 157 ]
  ! QUESTION        [ shift and go to state 158 ]


state 241

    (330) expr -> BOOL_CAST expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 330 (expr -> BOOL_CAST expr .)
    OBJECT_OPERATOR reduce using rule 330 (expr -> BOOL_CAST expr .)
    LBRACE          reduce using rule 330 (expr -> BOOL_CAST expr .)
    BOOLEAN_AND     reduce using rule 330 (expr -> BOOL_CAST expr .)
    BOOLEAN_OR      reduce using rule 330 (expr -> BOOL_CAST expr .)
    LOGICAL_AND     reduce using rule 330 (expr -> BOOL_CAST expr .)
    LOGICAL_OR      reduce using rule 330 (expr -> BOOL_CAST expr .)
    LOGICAL_XOR     reduce using rule 330 (expr -> BOOL_CAST expr .)
    AND             reduce using rule 330 (expr -> BOOL_CAST expr .)
    OR              reduce using rule 330 (expr -> BOOL_CAST expr .)
    XOR             reduce using rule 330 (expr -> BOOL_CAST expr .)
    CONCAT          reduce using rule 330 (expr -> BOOL_CAST expr .)
    PLUS            reduce using rule 330 (expr -> BOOL_CAST expr .)
    MINUS           reduce using rule 330 (expr -> BOOL_CAST expr .)
    MUL             reduce using rule 330 (expr -> BOOL_CAST expr .)
    DIV             reduce using rule 330 (expr -> BOOL_CAST expr .)
    SL              reduce using rule 330 (expr -> BOOL_CAST expr .)
    SR              reduce using rule 330 (expr -> BOOL_CAST expr .)
    MOD             reduce using rule 330 (expr -> BOOL_CAST expr .)
    IS_IDENTICAL    reduce using rule 330 (expr -> BOOL_CAST expr .)
    IS_NOT_IDENTICAL reduce using rule 330 (expr -> BOOL_CAST expr .)
    IS_EQUAL        reduce using rule 330 (expr -> BOOL_CAST expr .)
    IS_NOT_EQUAL    reduce using rule 330 (expr -> BOOL_CAST expr .)
    IS_SMALLER      reduce using rule 330 (expr -> BOOL_CAST expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 330 (expr -> BOOL_CAST expr .)
    IS_GREATER      reduce using rule 330 (expr -> BOOL_CAST expr .)
    IS_GREATER_OR_EQUAL reduce using rule 330 (expr -> BOOL_CAST expr .)
    INSTANCEOF      reduce using rule 330 (expr -> BOOL_CAST expr .)
    QUESTION        reduce using rule 330 (expr -> BOOL_CAST expr .)
    RPAREN          reduce using rule 330 (expr -> BOOL_CAST expr .)
    COMMA           reduce using rule 330 (expr -> BOOL_CAST expr .)
    DOUBLE_ARROW    reduce using rule 330 (expr -> BOOL_CAST expr .)
    RBRACKET        reduce using rule 330 (expr -> BOOL_CAST expr .)
    RBRACE          reduce using rule 330 (expr -> BOOL_CAST expr .)
    COLON           reduce using rule 330 (expr -> BOOL_CAST expr .)
    AS              reduce using rule 330 (expr -> BOOL_CAST expr .)

  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! CONCAT          [ shift and go to state 141 ]
  ! PLUS            [ shift and go to state 142 ]
  ! MINUS           [ shift and go to state 143 ]
  ! MUL             [ shift and go to state 144 ]
  ! DIV             [ shift and go to state 145 ]
  ! SL              [ shift and go to state 146 ]
  ! SR              [ shift and go to state 147 ]
  ! MOD             [ shift and go to state 148 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! IS_SMALLER      [ shift and go to state 153 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 154 ]
  ! IS_GREATER      [ shift and go to state 155 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 156 ]
  ! INSTANCEOF      [ shift and go to state 157 ]
  ! QUESTION        [ shift and go to state 158 ]


state 242

    (331) expr -> UNSET_CAST expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 331 (expr -> UNSET_CAST expr .)
    OBJECT_OPERATOR reduce using rule 331 (expr -> UNSET_CAST expr .)
    LBRACE          reduce using rule 331 (expr -> UNSET_CAST expr .)
    BOOLEAN_AND     reduce using rule 331 (expr -> UNSET_CAST expr .)
    BOOLEAN_OR      reduce using rule 331 (expr -> UNSET_CAST expr .)
    LOGICAL_AND     reduce using rule 331 (expr -> UNSET_CAST expr .)
    LOGICAL_OR      reduce using rule 331 (expr -> UNSET_CAST expr .)
    LOGICAL_XOR     reduce using rule 331 (expr -> UNSET_CAST expr .)
    AND             reduce using rule 331 (expr -> UNSET_CAST expr .)
    OR              reduce using rule 331 (expr -> UNSET_CAST expr .)
    XOR             reduce using rule 331 (expr -> UNSET_CAST expr .)
    CONCAT          reduce using rule 331 (expr -> UNSET_CAST expr .)
    PLUS            reduce using rule 331 (expr -> UNSET_CAST expr .)
    MINUS           reduce using rule 331 (expr -> UNSET_CAST expr .)
    MUL             reduce using rule 331 (expr -> UNSET_CAST expr .)
    DIV             reduce using rule 331 (expr -> UNSET_CAST expr .)
    SL              reduce using rule 331 (expr -> UNSET_CAST expr .)
    SR              reduce using rule 331 (expr -> UNSET_CAST expr .)
    MOD             reduce using rule 331 (expr -> UNSET_CAST expr .)
    IS_IDENTICAL    reduce using rule 331 (expr -> UNSET_CAST expr .)
    IS_NOT_IDENTICAL reduce using rule 331 (expr -> UNSET_CAST expr .)
    IS_EQUAL        reduce using rule 331 (expr -> UNSET_CAST expr .)
    IS_NOT_EQUAL    reduce using rule 331 (expr -> UNSET_CAST expr .)
    IS_SMALLER      reduce using rule 331 (expr -> UNSET_CAST expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 331 (expr -> UNSET_CAST expr .)
    IS_GREATER      reduce using rule 331 (expr -> UNSET_CAST expr .)
    IS_GREATER_OR_EQUAL reduce using rule 331 (expr -> UNSET_CAST expr .)
    INSTANCEOF      reduce using rule 331 (expr -> UNSET_CAST expr .)
    QUESTION        reduce using rule 331 (expr -> UNSET_CAST expr .)
    RPAREN          reduce using rule 331 (expr -> UNSET_CAST expr .)
    COMMA           reduce using rule 331 (expr -> UNSET_CAST expr .)
    DOUBLE_ARROW    reduce using rule 331 (expr -> UNSET_CAST expr .)
    RBRACKET        reduce using rule 331 (expr -> UNSET_CAST expr .)
    RBRACE          reduce using rule 331 (expr -> UNSET_CAST expr .)
    COLON           reduce using rule 331 (expr -> UNSET_CAST expr .)
    AS              reduce using rule 331 (expr -> UNSET_CAST expr .)

  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! CONCAT          [ shift and go to state 141 ]
  ! PLUS            [ shift and go to state 142 ]
  ! MINUS           [ shift and go to state 143 ]
  ! MUL             [ shift and go to state 144 ]
  ! DIV             [ shift and go to state 145 ]
  ! SL              [ shift and go to state 146 ]
  ! SR              [ shift and go to state 147 ]
  ! MOD             [ shift and go to state 148 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! IS_SMALLER      [ shift and go to state 153 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 154 ]
  ! IS_GREATER      [ shift and go to state 155 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 156 ]
  ! INSTANCEOF      [ shift and go to state 157 ]
  ! QUESTION        [ shift and go to state 158 ]


state 243

    (332) expr -> BINARY_CAST expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

  ! shift/reduce conflict for OBJECT_OPERATOR resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for BOOLEAN_AND resolved as shift
  ! shift/reduce conflict for BOOLEAN_OR resolved as shift
  ! shift/reduce conflict for LOGICAL_AND resolved as shift
  ! shift/reduce conflict for LOGICAL_OR resolved as shift
  ! shift/reduce conflict for LOGICAL_XOR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for CONCAT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for SL resolved as shift
  ! shift/reduce conflict for SR resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for IS_IDENTICAL resolved as shift
  ! shift/reduce conflict for IS_NOT_IDENTICAL resolved as shift
  ! shift/reduce conflict for IS_EQUAL resolved as shift
  ! shift/reduce conflict for IS_NOT_EQUAL resolved as shift
  ! shift/reduce conflict for IS_SMALLER resolved as shift
  ! shift/reduce conflict for IS_SMALLER_OR_EQUAL resolved as shift
  ! shift/reduce conflict for IS_GREATER resolved as shift
  ! shift/reduce conflict for IS_GREATER_OR_EQUAL resolved as shift
  ! shift/reduce conflict for INSTANCEOF resolved as shift
  ! shift/reduce conflict for QUESTION resolved as shift
    SEMI            reduce using rule 332 (expr -> BINARY_CAST expr .)
    RPAREN          reduce using rule 332 (expr -> BINARY_CAST expr .)
    COMMA           reduce using rule 332 (expr -> BINARY_CAST expr .)
    DOUBLE_ARROW    reduce using rule 332 (expr -> BINARY_CAST expr .)
    RBRACKET        reduce using rule 332 (expr -> BINARY_CAST expr .)
    RBRACE          reduce using rule 332 (expr -> BINARY_CAST expr .)
    COLON           reduce using rule 332 (expr -> BINARY_CAST expr .)
    AS              reduce using rule 332 (expr -> BINARY_CAST expr .)
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158

  ! OBJECT_OPERATOR [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]
  ! LBRACE          [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]
  ! BOOLEAN_AND     [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]
  ! LOGICAL_AND     [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]
  ! LOGICAL_OR      [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]
  ! LOGICAL_XOR     [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]
  ! AND             [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]
  ! OR              [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]
  ! XOR             [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]
  ! CONCAT          [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]
  ! PLUS            [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]
  ! MINUS           [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]
  ! MUL             [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]
  ! DIV             [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]
  ! SL              [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]
  ! SR              [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]
  ! MOD             [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]
  ! IS_EQUAL        [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]
  ! IS_SMALLER      [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]
  ! IS_GREATER      [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]
  ! INSTANCEOF      [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]
  ! QUESTION        [ reduce using rule 332 (expr -> BINARY_CAST expr .) ]


state 244

    (333) expr -> ISSET LPAREN . isset_variables RPAREN
    (334) isset_variables -> . isset_variables COMMA variable
    (335) isset_variables -> . variable
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NS_SEPARATOR    shift and go to state 230
    NAMESPACE       shift and go to state 231
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107

    isset_variables                shift and go to state 412
    variable                       shift and go to state 413
    base_variable_with_function_calls shift and go to state 73
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    namespace_name                 shift and go to state 229
    class_name                     shift and go to state 232
    variable_without_objects       shift and go to state 102
    variable_class_name            shift and go to state 233
    reference_variable             shift and go to state 234
    compound_variable              shift and go to state 106

state 245

    (336) expr -> EMPTY LPAREN . expr RPAREN
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 414
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 246

    (337) expr -> EVAL LPAREN . expr RPAREN
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 415
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 247

    (338) expr -> INCLUDE expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 338 (expr -> INCLUDE expr .)
    OBJECT_OPERATOR reduce using rule 338 (expr -> INCLUDE expr .)
    LBRACE          reduce using rule 338 (expr -> INCLUDE expr .)
    RPAREN          reduce using rule 338 (expr -> INCLUDE expr .)
    COMMA           reduce using rule 338 (expr -> INCLUDE expr .)
    DOUBLE_ARROW    reduce using rule 338 (expr -> INCLUDE expr .)
    RBRACKET        reduce using rule 338 (expr -> INCLUDE expr .)
    RBRACE          reduce using rule 338 (expr -> INCLUDE expr .)
    COLON           reduce using rule 338 (expr -> INCLUDE expr .)
    AS              reduce using rule 338 (expr -> INCLUDE expr .)
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158

  ! BOOLEAN_AND     [ reduce using rule 338 (expr -> INCLUDE expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 338 (expr -> INCLUDE expr .) ]
  ! LOGICAL_AND     [ reduce using rule 338 (expr -> INCLUDE expr .) ]
  ! LOGICAL_OR      [ reduce using rule 338 (expr -> INCLUDE expr .) ]
  ! LOGICAL_XOR     [ reduce using rule 338 (expr -> INCLUDE expr .) ]
  ! AND             [ reduce using rule 338 (expr -> INCLUDE expr .) ]
  ! OR              [ reduce using rule 338 (expr -> INCLUDE expr .) ]
  ! XOR             [ reduce using rule 338 (expr -> INCLUDE expr .) ]
  ! CONCAT          [ reduce using rule 338 (expr -> INCLUDE expr .) ]
  ! PLUS            [ reduce using rule 338 (expr -> INCLUDE expr .) ]
  ! MINUS           [ reduce using rule 338 (expr -> INCLUDE expr .) ]
  ! MUL             [ reduce using rule 338 (expr -> INCLUDE expr .) ]
  ! DIV             [ reduce using rule 338 (expr -> INCLUDE expr .) ]
  ! SL              [ reduce using rule 338 (expr -> INCLUDE expr .) ]
  ! SR              [ reduce using rule 338 (expr -> INCLUDE expr .) ]
  ! MOD             [ reduce using rule 338 (expr -> INCLUDE expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 338 (expr -> INCLUDE expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 338 (expr -> INCLUDE expr .) ]
  ! IS_EQUAL        [ reduce using rule 338 (expr -> INCLUDE expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 338 (expr -> INCLUDE expr .) ]
  ! IS_SMALLER      [ reduce using rule 338 (expr -> INCLUDE expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 338 (expr -> INCLUDE expr .) ]
  ! IS_GREATER      [ reduce using rule 338 (expr -> INCLUDE expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 338 (expr -> INCLUDE expr .) ]
  ! INSTANCEOF      [ reduce using rule 338 (expr -> INCLUDE expr .) ]
  ! QUESTION        [ reduce using rule 338 (expr -> INCLUDE expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]


state 248

    (339) expr -> INCLUDE_ONCE expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 339 (expr -> INCLUDE_ONCE expr .)
    OBJECT_OPERATOR reduce using rule 339 (expr -> INCLUDE_ONCE expr .)
    LBRACE          reduce using rule 339 (expr -> INCLUDE_ONCE expr .)
    RPAREN          reduce using rule 339 (expr -> INCLUDE_ONCE expr .)
    COMMA           reduce using rule 339 (expr -> INCLUDE_ONCE expr .)
    DOUBLE_ARROW    reduce using rule 339 (expr -> INCLUDE_ONCE expr .)
    RBRACKET        reduce using rule 339 (expr -> INCLUDE_ONCE expr .)
    RBRACE          reduce using rule 339 (expr -> INCLUDE_ONCE expr .)
    COLON           reduce using rule 339 (expr -> INCLUDE_ONCE expr .)
    AS              reduce using rule 339 (expr -> INCLUDE_ONCE expr .)
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158

  ! BOOLEAN_AND     [ reduce using rule 339 (expr -> INCLUDE_ONCE expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 339 (expr -> INCLUDE_ONCE expr .) ]
  ! LOGICAL_AND     [ reduce using rule 339 (expr -> INCLUDE_ONCE expr .) ]
  ! LOGICAL_OR      [ reduce using rule 339 (expr -> INCLUDE_ONCE expr .) ]
  ! LOGICAL_XOR     [ reduce using rule 339 (expr -> INCLUDE_ONCE expr .) ]
  ! AND             [ reduce using rule 339 (expr -> INCLUDE_ONCE expr .) ]
  ! OR              [ reduce using rule 339 (expr -> INCLUDE_ONCE expr .) ]
  ! XOR             [ reduce using rule 339 (expr -> INCLUDE_ONCE expr .) ]
  ! CONCAT          [ reduce using rule 339 (expr -> INCLUDE_ONCE expr .) ]
  ! PLUS            [ reduce using rule 339 (expr -> INCLUDE_ONCE expr .) ]
  ! MINUS           [ reduce using rule 339 (expr -> INCLUDE_ONCE expr .) ]
  ! MUL             [ reduce using rule 339 (expr -> INCLUDE_ONCE expr .) ]
  ! DIV             [ reduce using rule 339 (expr -> INCLUDE_ONCE expr .) ]
  ! SL              [ reduce using rule 339 (expr -> INCLUDE_ONCE expr .) ]
  ! SR              [ reduce using rule 339 (expr -> INCLUDE_ONCE expr .) ]
  ! MOD             [ reduce using rule 339 (expr -> INCLUDE_ONCE expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 339 (expr -> INCLUDE_ONCE expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 339 (expr -> INCLUDE_ONCE expr .) ]
  ! IS_EQUAL        [ reduce using rule 339 (expr -> INCLUDE_ONCE expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 339 (expr -> INCLUDE_ONCE expr .) ]
  ! IS_SMALLER      [ reduce using rule 339 (expr -> INCLUDE_ONCE expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 339 (expr -> INCLUDE_ONCE expr .) ]
  ! IS_GREATER      [ reduce using rule 339 (expr -> INCLUDE_ONCE expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 339 (expr -> INCLUDE_ONCE expr .) ]
  ! INSTANCEOF      [ reduce using rule 339 (expr -> INCLUDE_ONCE expr .) ]
  ! QUESTION        [ reduce using rule 339 (expr -> INCLUDE_ONCE expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]


state 249

    (340) expr -> REQUIRE expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 340 (expr -> REQUIRE expr .)
    OBJECT_OPERATOR reduce using rule 340 (expr -> REQUIRE expr .)
    LBRACE          reduce using rule 340 (expr -> REQUIRE expr .)
    RPAREN          reduce using rule 340 (expr -> REQUIRE expr .)
    COMMA           reduce using rule 340 (expr -> REQUIRE expr .)
    DOUBLE_ARROW    reduce using rule 340 (expr -> REQUIRE expr .)
    RBRACKET        reduce using rule 340 (expr -> REQUIRE expr .)
    RBRACE          reduce using rule 340 (expr -> REQUIRE expr .)
    COLON           reduce using rule 340 (expr -> REQUIRE expr .)
    AS              reduce using rule 340 (expr -> REQUIRE expr .)
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158

  ! BOOLEAN_AND     [ reduce using rule 340 (expr -> REQUIRE expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 340 (expr -> REQUIRE expr .) ]
  ! LOGICAL_AND     [ reduce using rule 340 (expr -> REQUIRE expr .) ]
  ! LOGICAL_OR      [ reduce using rule 340 (expr -> REQUIRE expr .) ]
  ! LOGICAL_XOR     [ reduce using rule 340 (expr -> REQUIRE expr .) ]
  ! AND             [ reduce using rule 340 (expr -> REQUIRE expr .) ]
  ! OR              [ reduce using rule 340 (expr -> REQUIRE expr .) ]
  ! XOR             [ reduce using rule 340 (expr -> REQUIRE expr .) ]
  ! CONCAT          [ reduce using rule 340 (expr -> REQUIRE expr .) ]
  ! PLUS            [ reduce using rule 340 (expr -> REQUIRE expr .) ]
  ! MINUS           [ reduce using rule 340 (expr -> REQUIRE expr .) ]
  ! MUL             [ reduce using rule 340 (expr -> REQUIRE expr .) ]
  ! DIV             [ reduce using rule 340 (expr -> REQUIRE expr .) ]
  ! SL              [ reduce using rule 340 (expr -> REQUIRE expr .) ]
  ! SR              [ reduce using rule 340 (expr -> REQUIRE expr .) ]
  ! MOD             [ reduce using rule 340 (expr -> REQUIRE expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 340 (expr -> REQUIRE expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 340 (expr -> REQUIRE expr .) ]
  ! IS_EQUAL        [ reduce using rule 340 (expr -> REQUIRE expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 340 (expr -> REQUIRE expr .) ]
  ! IS_SMALLER      [ reduce using rule 340 (expr -> REQUIRE expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 340 (expr -> REQUIRE expr .) ]
  ! IS_GREATER      [ reduce using rule 340 (expr -> REQUIRE expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 340 (expr -> REQUIRE expr .) ]
  ! INSTANCEOF      [ reduce using rule 340 (expr -> REQUIRE expr .) ]
  ! QUESTION        [ reduce using rule 340 (expr -> REQUIRE expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]


state 250

    (341) expr -> REQUIRE_ONCE expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 341 (expr -> REQUIRE_ONCE expr .)
    OBJECT_OPERATOR reduce using rule 341 (expr -> REQUIRE_ONCE expr .)
    LBRACE          reduce using rule 341 (expr -> REQUIRE_ONCE expr .)
    RPAREN          reduce using rule 341 (expr -> REQUIRE_ONCE expr .)
    COMMA           reduce using rule 341 (expr -> REQUIRE_ONCE expr .)
    DOUBLE_ARROW    reduce using rule 341 (expr -> REQUIRE_ONCE expr .)
    RBRACKET        reduce using rule 341 (expr -> REQUIRE_ONCE expr .)
    RBRACE          reduce using rule 341 (expr -> REQUIRE_ONCE expr .)
    COLON           reduce using rule 341 (expr -> REQUIRE_ONCE expr .)
    AS              reduce using rule 341 (expr -> REQUIRE_ONCE expr .)
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158

  ! BOOLEAN_AND     [ reduce using rule 341 (expr -> REQUIRE_ONCE expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 341 (expr -> REQUIRE_ONCE expr .) ]
  ! LOGICAL_AND     [ reduce using rule 341 (expr -> REQUIRE_ONCE expr .) ]
  ! LOGICAL_OR      [ reduce using rule 341 (expr -> REQUIRE_ONCE expr .) ]
  ! LOGICAL_XOR     [ reduce using rule 341 (expr -> REQUIRE_ONCE expr .) ]
  ! AND             [ reduce using rule 341 (expr -> REQUIRE_ONCE expr .) ]
  ! OR              [ reduce using rule 341 (expr -> REQUIRE_ONCE expr .) ]
  ! XOR             [ reduce using rule 341 (expr -> REQUIRE_ONCE expr .) ]
  ! CONCAT          [ reduce using rule 341 (expr -> REQUIRE_ONCE expr .) ]
  ! PLUS            [ reduce using rule 341 (expr -> REQUIRE_ONCE expr .) ]
  ! MINUS           [ reduce using rule 341 (expr -> REQUIRE_ONCE expr .) ]
  ! MUL             [ reduce using rule 341 (expr -> REQUIRE_ONCE expr .) ]
  ! DIV             [ reduce using rule 341 (expr -> REQUIRE_ONCE expr .) ]
  ! SL              [ reduce using rule 341 (expr -> REQUIRE_ONCE expr .) ]
  ! SR              [ reduce using rule 341 (expr -> REQUIRE_ONCE expr .) ]
  ! MOD             [ reduce using rule 341 (expr -> REQUIRE_ONCE expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 341 (expr -> REQUIRE_ONCE expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 341 (expr -> REQUIRE_ONCE expr .) ]
  ! IS_EQUAL        [ reduce using rule 341 (expr -> REQUIRE_ONCE expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 341 (expr -> REQUIRE_ONCE expr .) ]
  ! IS_SMALLER      [ reduce using rule 341 (expr -> REQUIRE_ONCE expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 341 (expr -> REQUIRE_ONCE expr .) ]
  ! IS_GREATER      [ reduce using rule 341 (expr -> REQUIRE_ONCE expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 341 (expr -> REQUIRE_ONCE expr .) ]
  ! INSTANCEOF      [ reduce using rule 341 (expr -> REQUIRE_ONCE expr .) ]
  ! QUESTION        [ reduce using rule 341 (expr -> REQUIRE_ONCE expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]


state 251

    (345) expr -> exit_or_die LPAREN . RPAREN
    (346) expr -> exit_or_die LPAREN . expr RPAREN
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RPAREN          shift and go to state 416
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    exit_or_die                    shift and go to state 67
    expr                           shift and go to state 417
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 252

    (347) expr -> PRINT expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 347 (expr -> PRINT expr .)
    OBJECT_OPERATOR reduce using rule 347 (expr -> PRINT expr .)
    LBRACE          reduce using rule 347 (expr -> PRINT expr .)
    LOGICAL_AND     reduce using rule 347 (expr -> PRINT expr .)
    LOGICAL_OR      reduce using rule 347 (expr -> PRINT expr .)
    LOGICAL_XOR     reduce using rule 347 (expr -> PRINT expr .)
    RPAREN          reduce using rule 347 (expr -> PRINT expr .)
    COMMA           reduce using rule 347 (expr -> PRINT expr .)
    DOUBLE_ARROW    reduce using rule 347 (expr -> PRINT expr .)
    RBRACKET        reduce using rule 347 (expr -> PRINT expr .)
    RBRACE          reduce using rule 347 (expr -> PRINT expr .)
    COLON           reduce using rule 347 (expr -> PRINT expr .)
    AS              reduce using rule 347 (expr -> PRINT expr .)
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158

  ! BOOLEAN_AND     [ reduce using rule 347 (expr -> PRINT expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 347 (expr -> PRINT expr .) ]
  ! AND             [ reduce using rule 347 (expr -> PRINT expr .) ]
  ! OR              [ reduce using rule 347 (expr -> PRINT expr .) ]
  ! XOR             [ reduce using rule 347 (expr -> PRINT expr .) ]
  ! CONCAT          [ reduce using rule 347 (expr -> PRINT expr .) ]
  ! PLUS            [ reduce using rule 347 (expr -> PRINT expr .) ]
  ! MINUS           [ reduce using rule 347 (expr -> PRINT expr .) ]
  ! MUL             [ reduce using rule 347 (expr -> PRINT expr .) ]
  ! DIV             [ reduce using rule 347 (expr -> PRINT expr .) ]
  ! SL              [ reduce using rule 347 (expr -> PRINT expr .) ]
  ! SR              [ reduce using rule 347 (expr -> PRINT expr .) ]
  ! MOD             [ reduce using rule 347 (expr -> PRINT expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 347 (expr -> PRINT expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 347 (expr -> PRINT expr .) ]
  ! IS_EQUAL        [ reduce using rule 347 (expr -> PRINT expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 347 (expr -> PRINT expr .) ]
  ! IS_SMALLER      [ reduce using rule 347 (expr -> PRINT expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 347 (expr -> PRINT expr .) ]
  ! IS_GREATER      [ reduce using rule 347 (expr -> PRINT expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 347 (expr -> PRINT expr .) ]
  ! INSTANCEOF      [ reduce using rule 347 (expr -> PRINT expr .) ]
  ! QUESTION        [ reduce using rule 347 (expr -> PRINT expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]


state 253

    (348) expr -> AT expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 348 (expr -> AT expr .)
    OBJECT_OPERATOR reduce using rule 348 (expr -> AT expr .)
    LBRACE          reduce using rule 348 (expr -> AT expr .)
    BOOLEAN_AND     reduce using rule 348 (expr -> AT expr .)
    BOOLEAN_OR      reduce using rule 348 (expr -> AT expr .)
    LOGICAL_AND     reduce using rule 348 (expr -> AT expr .)
    LOGICAL_OR      reduce using rule 348 (expr -> AT expr .)
    LOGICAL_XOR     reduce using rule 348 (expr -> AT expr .)
    AND             reduce using rule 348 (expr -> AT expr .)
    OR              reduce using rule 348 (expr -> AT expr .)
    XOR             reduce using rule 348 (expr -> AT expr .)
    CONCAT          reduce using rule 348 (expr -> AT expr .)
    PLUS            reduce using rule 348 (expr -> AT expr .)
    MINUS           reduce using rule 348 (expr -> AT expr .)
    MUL             reduce using rule 348 (expr -> AT expr .)
    DIV             reduce using rule 348 (expr -> AT expr .)
    SL              reduce using rule 348 (expr -> AT expr .)
    SR              reduce using rule 348 (expr -> AT expr .)
    MOD             reduce using rule 348 (expr -> AT expr .)
    IS_IDENTICAL    reduce using rule 348 (expr -> AT expr .)
    IS_NOT_IDENTICAL reduce using rule 348 (expr -> AT expr .)
    IS_EQUAL        reduce using rule 348 (expr -> AT expr .)
    IS_NOT_EQUAL    reduce using rule 348 (expr -> AT expr .)
    IS_SMALLER      reduce using rule 348 (expr -> AT expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 348 (expr -> AT expr .)
    IS_GREATER      reduce using rule 348 (expr -> AT expr .)
    IS_GREATER_OR_EQUAL reduce using rule 348 (expr -> AT expr .)
    INSTANCEOF      reduce using rule 348 (expr -> AT expr .)
    QUESTION        reduce using rule 348 (expr -> AT expr .)
    RPAREN          reduce using rule 348 (expr -> AT expr .)
    COMMA           reduce using rule 348 (expr -> AT expr .)
    DOUBLE_ARROW    reduce using rule 348 (expr -> AT expr .)
    RBRACKET        reduce using rule 348 (expr -> AT expr .)
    RBRACE          reduce using rule 348 (expr -> AT expr .)
    COLON           reduce using rule 348 (expr -> AT expr .)
    AS              reduce using rule 348 (expr -> AT expr .)

  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! CONCAT          [ shift and go to state 141 ]
  ! PLUS            [ shift and go to state 142 ]
  ! MINUS           [ shift and go to state 143 ]
  ! MUL             [ shift and go to state 144 ]
  ! DIV             [ shift and go to state 145 ]
  ! SL              [ shift and go to state 146 ]
  ! SR              [ shift and go to state 147 ]
  ! MOD             [ shift and go to state 148 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! IS_SMALLER      [ shift and go to state 153 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 154 ]
  ! IS_GREATER      [ shift and go to state 155 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 156 ]
  ! INSTANCEOF      [ shift and go to state 157 ]
  ! QUESTION        [ shift and go to state 158 ]


state 254

    (113) class_entry_type -> ABSTRACT CLASS .

    STRING          reduce using rule 113 (class_entry_type -> ABSTRACT CLASS .)


state 255

    (114) class_entry_type -> FINAL CLASS .

    STRING          reduce using rule 114 (class_entry_type -> FINAL CLASS .)


state 256

    (205) variable -> base_variable_with_function_calls OBJECT_OPERATOR . object_property method_or_not variable_properties
    (243) object_property -> . variable_name object_dim_list
    (244) object_property -> . variable_without_objects
    (248) variable_name -> . STRING
    (249) variable_name -> . LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    STRING          shift and go to state 303
    LBRACE          shift and go to state 304
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    object_property                shift and go to state 418
    variable_name                  shift and go to state 301
    variable_without_objects       shift and go to state 302
    simple_indirect_reference      shift and go to state 305
    reference_variable             shift and go to state 271
    compound_variable              shift and go to state 106

state 257

    (352) scalar -> QUOTE encaps_list . QUOTE
    (431) encaps_list -> encaps_list . encaps_var
    (433) encaps_list -> encaps_list . ENCAPSED_AND_WHITESPACE
    (434) encaps_var -> . VARIABLE
    (435) encaps_var -> . VARIABLE LBRACKET encaps_var_offset RBRACKET
    (436) encaps_var -> . VARIABLE OBJECT_OPERATOR STRING
    (437) encaps_var -> . DOLLAR_OPEN_CURLY_BRACES expr RBRACE
    (438) encaps_var -> . DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET expr RBRACKET RBRACE
    (439) encaps_var -> . CURLY_OPEN variable RBRACE

    QUOTE           shift and go to state 419
    ENCAPSED_AND_WHITESPACE shift and go to state 421
    VARIABLE        shift and go to state 422
    DOLLAR_OPEN_CURLY_BRACES shift and go to state 423
    CURLY_OPEN      shift and go to state 424

    encaps_var                     shift and go to state 420

state 258

    (432) encaps_list -> empty .

    QUOTE           reduce using rule 432 (encaps_list -> empty .)
    ENCAPSED_AND_WHITESPACE reduce using rule 432 (encaps_list -> empty .)
    VARIABLE        reduce using rule 432 (encaps_list -> empty .)
    DOLLAR_OPEN_CURLY_BRACES reduce using rule 432 (encaps_list -> empty .)
    CURLY_OPEN      reduce using rule 432 (encaps_list -> empty .)
    END_HEREDOC     reduce using rule 432 (encaps_list -> empty .)
    BACKTICK        reduce using rule 432 (encaps_list -> empty .)


state 259

    (363) scalar -> NS_SEPARATOR namespace_name .
    (210) function_call -> NS_SEPARATOR namespace_name . LPAREN function_call_parameter_list RPAREN
    (188) class_name -> NS_SEPARATOR namespace_name .
    (428) namespace_name -> namespace_name . NS_SEPARATOR STRING

    SEMI            reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    OBJECT_OPERATOR reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    LBRACE          reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    BOOLEAN_AND     reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    BOOLEAN_OR      reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    LOGICAL_AND     reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    LOGICAL_OR      reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    LOGICAL_XOR     reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    AND             reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    OR              reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    XOR             reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    CONCAT          reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    PLUS            reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    MINUS           reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    MUL             reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    DIV             reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    SL              reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    SR              reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    MOD             reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    IS_IDENTICAL    reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    IS_NOT_IDENTICAL reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    IS_EQUAL        reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    IS_NOT_EQUAL    reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    IS_SMALLER      reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    IS_SMALLER_OR_EQUAL reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    IS_GREATER      reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    IS_GREATER_OR_EQUAL reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    INSTANCEOF      reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    QUESTION        reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    RPAREN          reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    COMMA           reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    DOUBLE_ARROW    reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    RBRACKET        reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    RBRACE          reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    COLON           reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    AS              reduce using rule 363 (scalar -> NS_SEPARATOR namespace_name .)
    LPAREN          shift and go to state 425
    DOUBLE_COLON    reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    NS_SEPARATOR    shift and go to state 118


state 260

    (365) class_constant -> class_name DOUBLE_COLON . STRING
    (385) class_name_constant -> class_name DOUBLE_COLON . CLASS
    (212) function_call -> class_name DOUBLE_COLON . STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> class_name DOUBLE_COLON . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> class_name DOUBLE_COLON . LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (229) static_member -> class_name DOUBLE_COLON . variable_without_objects
    (231) static_member -> class_name DOUBLE_COLON . LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    STRING          shift and go to state 426
    CLASS           shift and go to state 427
    LBRACE          shift and go to state 429
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    variable_without_objects       shift and go to state 428
    simple_indirect_reference      shift and go to state 305
    reference_variable             shift and go to state 271
    compound_variable              shift and go to state 106

state 261

    (366) class_constant -> variable_class_name DOUBLE_COLON . STRING
    (214) function_call -> variable_class_name DOUBLE_COLON . STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> variable_class_name DOUBLE_COLON . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (217) function_call -> variable_class_name DOUBLE_COLON . LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (230) static_member -> variable_class_name DOUBLE_COLON . variable_without_objects
    (232) static_member -> variable_class_name DOUBLE_COLON . LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    STRING          shift and go to state 430
    LBRACE          shift and go to state 432
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    variable_without_objects       shift and go to state 431
    simple_indirect_reference      shift and go to state 305
    reference_variable             shift and go to state 271
    compound_variable              shift and go to state 106

state 262

    (357) scalar_heredoc -> START_HEREDOC encaps_list . END_HEREDOC
    (431) encaps_list -> encaps_list . encaps_var
    (433) encaps_list -> encaps_list . ENCAPSED_AND_WHITESPACE
    (434) encaps_var -> . VARIABLE
    (435) encaps_var -> . VARIABLE LBRACKET encaps_var_offset RBRACKET
    (436) encaps_var -> . VARIABLE OBJECT_OPERATOR STRING
    (437) encaps_var -> . DOLLAR_OPEN_CURLY_BRACES expr RBRACE
    (438) encaps_var -> . DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET expr RBRACKET RBRACE
    (439) encaps_var -> . CURLY_OPEN variable RBRACE

    END_HEREDOC     shift and go to state 433
    ENCAPSED_AND_WHITESPACE shift and go to state 421
    VARIABLE        shift and go to state 422
    DOLLAR_OPEN_CURLY_BRACES shift and go to state 423
    CURLY_OPEN      shift and go to state 424

    encaps_var                     shift and go to state 420

state 263

    (358) nowdoc -> START_NOWDOC nowdoc_text_content . END_NOWDOC
    (359) nowdoc_text_content -> nowdoc_text_content . ENCAPSED_AND_WHITESPACE

    END_NOWDOC      shift and go to state 434
    ENCAPSED_AND_WHITESPACE shift and go to state 435


state 264

    (360) nowdoc_text_content -> empty .

    END_NOWDOC      reduce using rule 360 (nowdoc_text_content -> empty .)
    ENCAPSED_AND_WHITESPACE reduce using rule 360 (nowdoc_text_content -> empty .)


state 265

    (218) function_call -> variable_without_objects LPAREN . function_call_parameter_list RPAREN
    (266) function_call_parameter_list -> . function_call_parameter_list COMMA function_call_parameter
    (267) function_call_parameter_list -> . function_call_parameter
    (268) function_call_parameter_list -> . empty
    (269) function_call_parameter -> . expr
    (270) function_call_parameter -> . AND variable
    (443) empty -> .
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 284
    RPAREN          reduce using rule 443 (empty -> .)
    COMMA           reduce using rule 443 (empty -> .)
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    variable_without_objects       shift and go to state 102
    function_call_parameter_list   shift and go to state 436
    function_call_parameter        shift and go to state 281
    empty                          shift and go to state 282
    expr                           shift and go to state 283
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 266

    (219) function_call -> BACKTICK encaps_list . BACKTICK
    (431) encaps_list -> encaps_list . encaps_var
    (433) encaps_list -> encaps_list . ENCAPSED_AND_WHITESPACE
    (434) encaps_var -> . VARIABLE
    (435) encaps_var -> . VARIABLE LBRACKET encaps_var_offset RBRACKET
    (436) encaps_var -> . VARIABLE OBJECT_OPERATOR STRING
    (437) encaps_var -> . DOLLAR_OPEN_CURLY_BRACES expr RBRACE
    (438) encaps_var -> . DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET expr RBRACKET RBRACE
    (439) encaps_var -> . CURLY_OPEN variable RBRACE

    BACKTICK        shift and go to state 437
    ENCAPSED_AND_WHITESPACE shift and go to state 421
    VARIABLE        shift and go to state 422
    DOLLAR_OPEN_CURLY_BRACES shift and go to state 423
    CURLY_OPEN      shift and go to state 424

    encaps_var                     shift and go to state 420

state 267

    (235) reference_variable -> reference_variable LBRACKET . dim_offset RBRACKET
    (241) dim_offset -> . expr
    (242) dim_offset -> . empty
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (443) empty -> .
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    RBRACKET        reduce using rule 443 (empty -> .)
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    reference_variable             shift and go to state 104
    dim_offset                     shift and go to state 438
    expr                           shift and go to state 306
    empty                          shift and go to state 308
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    compound_variable              shift and go to state 106

state 268

    (236) reference_variable -> reference_variable LBRACE . expr RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    reference_variable             shift and go to state 104
    expr                           shift and go to state 439
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    compound_variable              shift and go to state 106

state 269

    (227) simple_indirect_reference -> DOLLAR simple_indirect_reference .

    OBJECT_OPERATOR reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    EQUALS          reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    PLUS_EQUAL      reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    MINUS_EQUAL     reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    MUL_EQUAL       reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    DIV_EQUAL       reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    CONCAT_EQUAL    reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    MOD_EQUAL       reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    AND_EQUAL       reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    OR_EQUAL        reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    XOR_EQUAL       reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    SL_EQUAL        reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    SR_EQUAL        reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    INC             reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    DEC             reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    LBRACKET        reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    SEMI            reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    LBRACE          reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    BOOLEAN_AND     reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    BOOLEAN_OR      reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    LOGICAL_AND     reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    LOGICAL_OR      reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    LOGICAL_XOR     reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    AND             reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    OR              reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    XOR             reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    CONCAT          reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    PLUS            reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    MINUS           reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    MUL             reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    DIV             reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    SL              reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    SR              reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    MOD             reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    IS_IDENTICAL    reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    IS_NOT_IDENTICAL reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    IS_EQUAL        reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    IS_NOT_EQUAL    reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    IS_SMALLER      reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    IS_SMALLER_OR_EQUAL reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    IS_GREATER      reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    IS_GREATER_OR_EQUAL reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    INSTANCEOF      reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    QUESTION        reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    LPAREN          reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    RPAREN          reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    COMMA           reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    DOUBLE_ARROW    reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    RBRACKET        reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    RBRACE          reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    COLON           reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)
    AS              reduce using rule 227 (simple_indirect_reference -> DOLLAR simple_indirect_reference .)


state 270

    (240) compound_variable -> DOLLAR LBRACE . expr RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 440
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 271

    (228) simple_indirect_reference -> reference_variable .
    (235) reference_variable -> reference_variable . LBRACKET dim_offset RBRACKET
    (236) reference_variable -> reference_variable . LBRACE expr RBRACE

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
    OBJECT_OPERATOR reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    EQUALS          reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    PLUS_EQUAL      reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    MINUS_EQUAL     reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    MUL_EQUAL       reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    DIV_EQUAL       reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    CONCAT_EQUAL    reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    MOD_EQUAL       reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    AND_EQUAL       reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    OR_EQUAL        reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    XOR_EQUAL       reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    SL_EQUAL        reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    SR_EQUAL        reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    INC             reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    DEC             reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    SEMI            reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    BOOLEAN_AND     reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    BOOLEAN_OR      reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    LOGICAL_AND     reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    LOGICAL_OR      reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    LOGICAL_XOR     reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    AND             reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    OR              reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    XOR             reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    CONCAT          reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    PLUS            reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    MINUS           reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    MUL             reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    DIV             reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    SL              reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    SR              reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    MOD             reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_IDENTICAL    reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_NOT_IDENTICAL reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_EQUAL        reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_NOT_EQUAL    reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_SMALLER      reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_GREATER      reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    INSTANCEOF      reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    QUESTION        reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    LPAREN          reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    RPAREN          reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    COMMA           reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    DOUBLE_ARROW    reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    RBRACKET        reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    RBRACE          reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    COLON           reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    AS              reduce using rule 228 (simple_indirect_reference -> reference_variable .)
    LBRACKET        shift and go to state 267
    LBRACE          shift and go to state 268

  ! LBRACKET        [ reduce using rule 228 (simple_indirect_reference -> reference_variable .) ]
  ! LBRACE          [ reduce using rule 228 (simple_indirect_reference -> reference_variable .) ]


state 272

    (7) top_statement -> HALT_COMPILER LPAREN RPAREN . SEMI

    SEMI            shift and go to state 441


state 273

    (349) expr -> LPAREN expr RPAREN .

    SEMI            reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    OBJECT_OPERATOR reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    LBRACE          reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    BOOLEAN_AND     reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    BOOLEAN_OR      reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    LOGICAL_AND     reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    LOGICAL_OR      reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    LOGICAL_XOR     reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    XOR             reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    CONCAT          reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    MUL             reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    DIV             reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    SL              reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    SR              reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    MOD             reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    IS_IDENTICAL    reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    IS_EQUAL        reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    IS_NOT_EQUAL    reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    IS_SMALLER      reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    IS_GREATER      reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    INSTANCEOF      reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    QUESTION        reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    DOUBLE_ARROW    reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    RBRACE          reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 349 (expr -> LPAREN expr RPAREN .)
    AS              reduce using rule 349 (expr -> LPAREN expr RPAREN .)


state 274

    (271) expr -> FUNCTION is_reference . LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE

    LPAREN          shift and go to state 365


state 275

    (8) top_statement -> NAMESPACE namespace_name SEMI .

    HALT_COMPILER   reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    NAMESPACE       reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    CONST           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    USE             reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    LBRACE          reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    IF              reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    WHILE           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    DO              reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    FOR             reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    FOREACH         reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    SWITCH          reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    BREAK           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    CONTINUE        reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    RETURN          reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    GLOBAL          reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    STATIC          reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    ECHO            reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    INLINE_HTML     reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    UNSET           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    SEMI            reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    TRY             reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    THROW           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    DECLARE         reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    FUNCTION        reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    INTERFACE       reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    TRAIT           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    NEW             reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    CLONE           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    LIST            reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    ARRAY           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    LBRACKET        reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    PLUS            reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    MINUS           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    NOT             reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    BOOLEAN_NOT     reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    INC             reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    DEC             reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    INT_CAST        reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    DOUBLE_CAST     reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    STRING_CAST     reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    ARRAY_CAST      reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    OBJECT_CAST     reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    BOOL_CAST       reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    UNSET_CAST      reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    BINARY_CAST     reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    ISSET           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    EMPTY           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    EVAL            reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    INCLUDE         reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    INCLUDE_ONCE    reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    REQUIRE         reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    REQUIRE_ONCE    reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    PRINT           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    AT              reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    LPAREN          reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    CLASS           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    ABSTRACT        reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    FINAL           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    QUOTE           reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    STRING          reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    STRING_VARNAME  reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    NS_SEPARATOR    reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    EXIT            reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    DIE             reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    LNUMBER         reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    DNUMBER         reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    LINE            reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    FILE            reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    DIR             reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    CLASS_C         reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    METHOD_C        reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    FUNC_C          reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    NS_C            reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    START_HEREDOC   reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    START_NOWDOC    reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    BACKTICK        reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    DOLLAR          reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    VARIABLE        reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    $end            reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)
    RBRACE          reduce using rule 8 (top_statement -> NAMESPACE namespace_name SEMI .)


state 276

    (10) top_statement -> NAMESPACE namespace_name LBRACE . top_statement_list RBRACE
    (2) top_statement_list -> . top_statement_list top_statement
    (3) top_statement_list -> . empty
    (443) empty -> .

    RBRACE          reduce using rule 443 (empty -> .)
    HALT_COMPILER   reduce using rule 443 (empty -> .)
    NAMESPACE       reduce using rule 443 (empty -> .)
    CONST           reduce using rule 443 (empty -> .)
    USE             reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    IF              reduce using rule 443 (empty -> .)
    WHILE           reduce using rule 443 (empty -> .)
    DO              reduce using rule 443 (empty -> .)
    FOR             reduce using rule 443 (empty -> .)
    FOREACH         reduce using rule 443 (empty -> .)
    SWITCH          reduce using rule 443 (empty -> .)
    BREAK           reduce using rule 443 (empty -> .)
    CONTINUE        reduce using rule 443 (empty -> .)
    RETURN          reduce using rule 443 (empty -> .)
    GLOBAL          reduce using rule 443 (empty -> .)
    STATIC          reduce using rule 443 (empty -> .)
    ECHO            reduce using rule 443 (empty -> .)
    INLINE_HTML     reduce using rule 443 (empty -> .)
    UNSET           reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    TRY             reduce using rule 443 (empty -> .)
    THROW           reduce using rule 443 (empty -> .)
    DECLARE         reduce using rule 443 (empty -> .)
    FUNCTION        reduce using rule 443 (empty -> .)
    INTERFACE       reduce using rule 443 (empty -> .)
    TRAIT           reduce using rule 443 (empty -> .)
    NEW             reduce using rule 443 (empty -> .)
    CLONE           reduce using rule 443 (empty -> .)
    LIST            reduce using rule 443 (empty -> .)
    ARRAY           reduce using rule 443 (empty -> .)
    LBRACKET        reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    NOT             reduce using rule 443 (empty -> .)
    BOOLEAN_NOT     reduce using rule 443 (empty -> .)
    INC             reduce using rule 443 (empty -> .)
    DEC             reduce using rule 443 (empty -> .)
    INT_CAST        reduce using rule 443 (empty -> .)
    DOUBLE_CAST     reduce using rule 443 (empty -> .)
    STRING_CAST     reduce using rule 443 (empty -> .)
    ARRAY_CAST      reduce using rule 443 (empty -> .)
    OBJECT_CAST     reduce using rule 443 (empty -> .)
    BOOL_CAST       reduce using rule 443 (empty -> .)
    UNSET_CAST      reduce using rule 443 (empty -> .)
    BINARY_CAST     reduce using rule 443 (empty -> .)
    ISSET           reduce using rule 443 (empty -> .)
    EMPTY           reduce using rule 443 (empty -> .)
    EVAL            reduce using rule 443 (empty -> .)
    INCLUDE         reduce using rule 443 (empty -> .)
    INCLUDE_ONCE    reduce using rule 443 (empty -> .)
    REQUIRE         reduce using rule 443 (empty -> .)
    REQUIRE_ONCE    reduce using rule 443 (empty -> .)
    PRINT           reduce using rule 443 (empty -> .)
    AT              reduce using rule 443 (empty -> .)
    LPAREN          reduce using rule 443 (empty -> .)
    CLASS           reduce using rule 443 (empty -> .)
    ABSTRACT        reduce using rule 443 (empty -> .)
    FINAL           reduce using rule 443 (empty -> .)
    QUOTE           reduce using rule 443 (empty -> .)
    STRING          reduce using rule 443 (empty -> .)
    STRING_VARNAME  reduce using rule 443 (empty -> .)
    NS_SEPARATOR    reduce using rule 443 (empty -> .)
    EXIT            reduce using rule 443 (empty -> .)
    DIE             reduce using rule 443 (empty -> .)
    LNUMBER         reduce using rule 443 (empty -> .)
    DNUMBER         reduce using rule 443 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 443 (empty -> .)
    LINE            reduce using rule 443 (empty -> .)
    FILE            reduce using rule 443 (empty -> .)
    DIR             reduce using rule 443 (empty -> .)
    CLASS_C         reduce using rule 443 (empty -> .)
    METHOD_C        reduce using rule 443 (empty -> .)
    FUNC_C          reduce using rule 443 (empty -> .)
    NS_C            reduce using rule 443 (empty -> .)
    START_HEREDOC   reduce using rule 443 (empty -> .)
    START_NOWDOC    reduce using rule 443 (empty -> .)
    BACKTICK        reduce using rule 443 (empty -> .)
    DOLLAR          reduce using rule 443 (empty -> .)
    VARIABLE        reduce using rule 443 (empty -> .)

    top_statement_list             shift and go to state 442
    empty                          shift and go to state 3

state 277

    (9) top_statement -> NAMESPACE LBRACE top_statement_list . RBRACE
    (2) top_statement_list -> top_statement_list . top_statement
    (4) top_statement -> . statement
    (5) top_statement -> . function_declaration_statement
    (6) top_statement -> . class_declaration_statement
    (7) top_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (8) top_statement -> . NAMESPACE namespace_name SEMI
    (9) top_statement -> . NAMESPACE LBRACE top_statement_list RBRACE
    (10) top_statement -> . NAMESPACE namespace_name LBRACE top_statement_list RBRACE
    (11) top_statement -> . CONST constant_declarations SEMI
    (12) top_statement -> . USE use_declarations SEMI
    (30) statement -> . LBRACE inner_statement_list RBRACE
    (31) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (33) statement -> . WHILE LPAREN expr RPAREN while_statement
    (34) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (35) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (36) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (37) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (38) statement -> . BREAK SEMI
    (39) statement -> . BREAK expr SEMI
    (40) statement -> . CONTINUE SEMI
    (41) statement -> . CONTINUE expr SEMI
    (42) statement -> . RETURN SEMI
    (43) statement -> . RETURN expr SEMI
    (44) statement -> . GLOBAL global_var_list SEMI
    (45) statement -> . STATIC static_var_list SEMI
    (46) statement -> . ECHO echo_expr_list SEMI
    (47) statement -> . INLINE_HTML
    (48) statement -> . expr SEMI
    (49) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (50) statement -> . SEMI
    (51) statement -> . TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
    (56) statement -> . THROW expr SEMI
    (57) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (108) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (109) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (110) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (111) class_declaration_statement -> . TRAIT STRING LBRACE trait_statement_list RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (112) class_entry_type -> . CLASS
    (113) class_entry_type -> . ABSTRACT CLASS
    (114) class_entry_type -> . FINAL CLASS
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RBRACE          shift and go to state 443
    HALT_COMPILER   shift and go to state 8
    NAMESPACE       shift and go to state 11
    CONST           shift and go to state 14
    USE             shift and go to state 15
    LBRACE          shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    FOREACH         shift and go to state 21
    SWITCH          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    GLOBAL          shift and go to state 26
    STATIC          shift and go to state 27
    ECHO            shift and go to state 28
    INLINE_HTML     shift and go to state 29
    UNSET           shift and go to state 30
    SEMI            shift and go to state 10
    TRY             shift and go to state 31
    THROW           shift and go to state 32
    DECLARE         shift and go to state 33
    FUNCTION        shift and go to state 34
    INTERFACE       shift and go to state 37
    TRAIT           shift and go to state 38
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    CLASS           shift and go to state 70
    ABSTRACT        shift and go to state 71
    FINAL           shift and go to state 72
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    top_statement                  shift and go to state 4
    statement                      shift and go to state 5
    function_declaration_statement shift and go to state 6
    class_declaration_statement    shift and go to state 7
    namespace_name                 shift and go to state 12
    expr                           shift and go to state 17
    class_entry_type               shift and go to state 36
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 278

    (364) scalar -> NAMESPACE NS_SEPARATOR namespace_name .
    (211) function_call -> NAMESPACE NS_SEPARATOR namespace_name . LPAREN function_call_parameter_list RPAREN
    (189) class_name -> NAMESPACE NS_SEPARATOR namespace_name .
    (428) namespace_name -> namespace_name . NS_SEPARATOR STRING

    SEMI            reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    OBJECT_OPERATOR reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    LBRACE          reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    BOOLEAN_AND     reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    BOOLEAN_OR      reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    LOGICAL_AND     reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    LOGICAL_OR      reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    LOGICAL_XOR     reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    AND             reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    OR              reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    XOR             reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    CONCAT          reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    PLUS            reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    MINUS           reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    MUL             reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    DIV             reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    SL              reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    SR              reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    MOD             reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_IDENTICAL    reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_NOT_IDENTICAL reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_EQUAL        reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_NOT_EQUAL    reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_SMALLER      reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_SMALLER_OR_EQUAL reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_GREATER      reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_GREATER_OR_EQUAL reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    INSTANCEOF      reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    QUESTION        reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    RPAREN          reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    COMMA           reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    DOUBLE_ARROW    reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    RBRACKET        reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    RBRACE          reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    COLON           reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    AS              reduce using rule 364 (scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    LPAREN          shift and go to state 444
    DOUBLE_COLON    reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    NS_SEPARATOR    shift and go to state 118


state 279

    (428) namespace_name -> namespace_name NS_SEPARATOR STRING .

    NS_SEPARATOR    reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    LPAREN          reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    SEMI            reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    OBJECT_OPERATOR reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    LBRACE          reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    BOOLEAN_AND     reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    BOOLEAN_OR      reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    LOGICAL_AND     reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    LOGICAL_OR      reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    LOGICAL_XOR     reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    AND             reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    OR              reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    XOR             reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    CONCAT          reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    PLUS            reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    MINUS           reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    MUL             reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    DIV             reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    SL              reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    SR              reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    MOD             reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    IS_IDENTICAL    reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    IS_NOT_IDENTICAL reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    IS_EQUAL        reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    IS_NOT_EQUAL    reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    IS_SMALLER      reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    IS_GREATER      reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    INSTANCEOF      reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    QUESTION        reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    DOUBLE_COLON    reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    RPAREN          reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    AS              reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    COMMA           reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    DOUBLE_ARROW    reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    RBRACKET        reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    RBRACE          reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    COLON           reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    VARIABLE        reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)
    IMPLEMENTS      reduce using rule 428 (namespace_name -> namespace_name NS_SEPARATOR STRING .)


state 280

    (209) function_call -> namespace_name LPAREN function_call_parameter_list . RPAREN
    (266) function_call_parameter_list -> function_call_parameter_list . COMMA function_call_parameter

    RPAREN          shift and go to state 445
    COMMA           shift and go to state 446


state 281

    (267) function_call_parameter_list -> function_call_parameter .

    RPAREN          reduce using rule 267 (function_call_parameter_list -> function_call_parameter .)
    COMMA           reduce using rule 267 (function_call_parameter_list -> function_call_parameter .)


state 282

    (268) function_call_parameter_list -> empty .

    RPAREN          reduce using rule 268 (function_call_parameter_list -> empty .)
    COMMA           reduce using rule 268 (function_call_parameter_list -> empty .)


state 283

    (269) function_call_parameter -> expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    RPAREN          reduce using rule 269 (function_call_parameter -> expr .)
    COMMA           reduce using rule 269 (function_call_parameter -> expr .)
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 284

    (270) function_call_parameter -> AND . variable
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NS_SEPARATOR    shift and go to state 230
    NAMESPACE       shift and go to state 231
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107

    variable                       shift and go to state 447
    base_variable_with_function_calls shift and go to state 73
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    namespace_name                 shift and go to state 229
    class_name                     shift and go to state 232
    variable_without_objects       shift and go to state 102
    variable_class_name            shift and go to state 233
    reference_variable             shift and go to state 234
    compound_variable              shift and go to state 106

state 285

    (30) statement -> LBRACE inner_statement_list RBRACE .

    HALT_COMPILER   reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    NAMESPACE       reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    CONST           reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    USE             reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    LBRACE          reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    IF              reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    WHILE           reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    DO              reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    FOR             reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    FOREACH         reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    SWITCH          reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    BREAK           reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    CONTINUE        reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    RETURN          reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    GLOBAL          reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    STATIC          reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    ECHO            reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    INLINE_HTML     reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    UNSET           reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    SEMI            reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    TRY             reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    THROW           reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    DECLARE         reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    FUNCTION        reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    INTERFACE       reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    TRAIT           reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    NEW             reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    CLONE           reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    LIST            reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    ARRAY           reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    LBRACKET        reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    PLUS            reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    MINUS           reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    NOT             reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    BOOLEAN_NOT     reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    INC             reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    DEC             reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    INT_CAST        reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    DOUBLE_CAST     reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    STRING_CAST     reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    ARRAY_CAST      reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    OBJECT_CAST     reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    BOOL_CAST       reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    UNSET_CAST      reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    BINARY_CAST     reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    ISSET           reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    EMPTY           reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    EVAL            reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    INCLUDE         reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    INCLUDE_ONCE    reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    REQUIRE         reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    REQUIRE_ONCE    reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    PRINT           reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    AT              reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    LPAREN          reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    CLASS           reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    ABSTRACT        reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    FINAL           reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    QUOTE           reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    STRING          reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    STRING_VARNAME  reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    NS_SEPARATOR    reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    EXIT            reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    DIE             reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    LNUMBER         reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    DNUMBER         reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    LINE            reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    FILE            reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    DIR             reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    CLASS_C         reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    METHOD_C        reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    FUNC_C          reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    NS_C            reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    START_HEREDOC   reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    START_NOWDOC    reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    BACKTICK        reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    DOLLAR          reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    VARIABLE        reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    $end            reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    RBRACE          reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    YIELD           reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    ELSEIF          reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    ELSE            reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    ENDIF           reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    ENDWHILE        reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    ENDDECLARE      reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    ENDFOREACH      reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    CASE            reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    DEFAULT         reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    ENDSWITCH       reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)
    ENDFOR          reduce using rule 30 (statement -> LBRACE inner_statement_list RBRACE .)


state 286

    (22) inner_statement_list -> inner_statement_list inner_statement .

    RBRACE          reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    HALT_COMPILER   reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    YIELD           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    LBRACE          reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    IF              reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    WHILE           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    DO              reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    FOR             reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    FOREACH         reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    SWITCH          reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    BREAK           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    CONTINUE        reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    RETURN          reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    GLOBAL          reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    STATIC          reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    ECHO            reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    INLINE_HTML     reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    UNSET           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    SEMI            reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    TRY             reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    THROW           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    DECLARE         reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    FUNCTION        reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    INTERFACE       reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    TRAIT           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    NEW             reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    CLONE           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    LIST            reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    ARRAY           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    LBRACKET        reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    PLUS            reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    MINUS           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    NOT             reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    BOOLEAN_NOT     reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    INC             reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    DEC             reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    INT_CAST        reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    DOUBLE_CAST     reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    STRING_CAST     reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    ARRAY_CAST      reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    OBJECT_CAST     reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    BOOL_CAST       reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    UNSET_CAST      reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    BINARY_CAST     reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    ISSET           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    EMPTY           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    EVAL            reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    INCLUDE         reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    INCLUDE_ONCE    reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    REQUIRE         reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    REQUIRE_ONCE    reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    PRINT           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    AT              reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    LPAREN          reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    CLASS           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    ABSTRACT        reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    FINAL           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    QUOTE           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    STRING          reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    STRING_VARNAME  reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    NS_SEPARATOR    reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    NAMESPACE       reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    EXIT            reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    DIE             reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    LNUMBER         reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    DNUMBER         reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    LINE            reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    FILE            reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    DIR             reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    CLASS_C         reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    METHOD_C        reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    FUNC_C          reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    NS_C            reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    START_HEREDOC   reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    START_NOWDOC    reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    BACKTICK        reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    DOLLAR          reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    VARIABLE        reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    ELSEIF          reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    ELSE            reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    ENDIF           reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    ENDWHILE        reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    ENDDECLARE      reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    ENDFOREACH      reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    CASE            reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    DEFAULT         reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    ENDSWITCH       reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)
    ENDFOR          reduce using rule 22 (inner_statement_list -> inner_statement_list inner_statement .)


state 287

    (24) inner_statement -> statement .

    RBRACE          reduce using rule 24 (inner_statement -> statement .)
    HALT_COMPILER   reduce using rule 24 (inner_statement -> statement .)
    YIELD           reduce using rule 24 (inner_statement -> statement .)
    LBRACE          reduce using rule 24 (inner_statement -> statement .)
    IF              reduce using rule 24 (inner_statement -> statement .)
    WHILE           reduce using rule 24 (inner_statement -> statement .)
    DO              reduce using rule 24 (inner_statement -> statement .)
    FOR             reduce using rule 24 (inner_statement -> statement .)
    FOREACH         reduce using rule 24 (inner_statement -> statement .)
    SWITCH          reduce using rule 24 (inner_statement -> statement .)
    BREAK           reduce using rule 24 (inner_statement -> statement .)
    CONTINUE        reduce using rule 24 (inner_statement -> statement .)
    RETURN          reduce using rule 24 (inner_statement -> statement .)
    GLOBAL          reduce using rule 24 (inner_statement -> statement .)
    STATIC          reduce using rule 24 (inner_statement -> statement .)
    ECHO            reduce using rule 24 (inner_statement -> statement .)
    INLINE_HTML     reduce using rule 24 (inner_statement -> statement .)
    UNSET           reduce using rule 24 (inner_statement -> statement .)
    SEMI            reduce using rule 24 (inner_statement -> statement .)
    TRY             reduce using rule 24 (inner_statement -> statement .)
    THROW           reduce using rule 24 (inner_statement -> statement .)
    DECLARE         reduce using rule 24 (inner_statement -> statement .)
    FUNCTION        reduce using rule 24 (inner_statement -> statement .)
    INTERFACE       reduce using rule 24 (inner_statement -> statement .)
    TRAIT           reduce using rule 24 (inner_statement -> statement .)
    NEW             reduce using rule 24 (inner_statement -> statement .)
    CLONE           reduce using rule 24 (inner_statement -> statement .)
    LIST            reduce using rule 24 (inner_statement -> statement .)
    ARRAY           reduce using rule 24 (inner_statement -> statement .)
    LBRACKET        reduce using rule 24 (inner_statement -> statement .)
    PLUS            reduce using rule 24 (inner_statement -> statement .)
    MINUS           reduce using rule 24 (inner_statement -> statement .)
    NOT             reduce using rule 24 (inner_statement -> statement .)
    BOOLEAN_NOT     reduce using rule 24 (inner_statement -> statement .)
    INC             reduce using rule 24 (inner_statement -> statement .)
    DEC             reduce using rule 24 (inner_statement -> statement .)
    INT_CAST        reduce using rule 24 (inner_statement -> statement .)
    DOUBLE_CAST     reduce using rule 24 (inner_statement -> statement .)
    STRING_CAST     reduce using rule 24 (inner_statement -> statement .)
    ARRAY_CAST      reduce using rule 24 (inner_statement -> statement .)
    OBJECT_CAST     reduce using rule 24 (inner_statement -> statement .)
    BOOL_CAST       reduce using rule 24 (inner_statement -> statement .)
    UNSET_CAST      reduce using rule 24 (inner_statement -> statement .)
    BINARY_CAST     reduce using rule 24 (inner_statement -> statement .)
    ISSET           reduce using rule 24 (inner_statement -> statement .)
    EMPTY           reduce using rule 24 (inner_statement -> statement .)
    EVAL            reduce using rule 24 (inner_statement -> statement .)
    INCLUDE         reduce using rule 24 (inner_statement -> statement .)
    INCLUDE_ONCE    reduce using rule 24 (inner_statement -> statement .)
    REQUIRE         reduce using rule 24 (inner_statement -> statement .)
    REQUIRE_ONCE    reduce using rule 24 (inner_statement -> statement .)
    PRINT           reduce using rule 24 (inner_statement -> statement .)
    AT              reduce using rule 24 (inner_statement -> statement .)
    LPAREN          reduce using rule 24 (inner_statement -> statement .)
    CLASS           reduce using rule 24 (inner_statement -> statement .)
    ABSTRACT        reduce using rule 24 (inner_statement -> statement .)
    FINAL           reduce using rule 24 (inner_statement -> statement .)
    QUOTE           reduce using rule 24 (inner_statement -> statement .)
    STRING          reduce using rule 24 (inner_statement -> statement .)
    STRING_VARNAME  reduce using rule 24 (inner_statement -> statement .)
    NS_SEPARATOR    reduce using rule 24 (inner_statement -> statement .)
    NAMESPACE       reduce using rule 24 (inner_statement -> statement .)
    EXIT            reduce using rule 24 (inner_statement -> statement .)
    DIE             reduce using rule 24 (inner_statement -> statement .)
    LNUMBER         reduce using rule 24 (inner_statement -> statement .)
    DNUMBER         reduce using rule 24 (inner_statement -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 24 (inner_statement -> statement .)
    LINE            reduce using rule 24 (inner_statement -> statement .)
    FILE            reduce using rule 24 (inner_statement -> statement .)
    DIR             reduce using rule 24 (inner_statement -> statement .)
    CLASS_C         reduce using rule 24 (inner_statement -> statement .)
    METHOD_C        reduce using rule 24 (inner_statement -> statement .)
    FUNC_C          reduce using rule 24 (inner_statement -> statement .)
    NS_C            reduce using rule 24 (inner_statement -> statement .)
    START_HEREDOC   reduce using rule 24 (inner_statement -> statement .)
    START_NOWDOC    reduce using rule 24 (inner_statement -> statement .)
    BACKTICK        reduce using rule 24 (inner_statement -> statement .)
    DOLLAR          reduce using rule 24 (inner_statement -> statement .)
    VARIABLE        reduce using rule 24 (inner_statement -> statement .)
    ELSEIF          reduce using rule 24 (inner_statement -> statement .)
    ELSE            reduce using rule 24 (inner_statement -> statement .)
    ENDIF           reduce using rule 24 (inner_statement -> statement .)
    ENDWHILE        reduce using rule 24 (inner_statement -> statement .)
    ENDDECLARE      reduce using rule 24 (inner_statement -> statement .)
    ENDFOREACH      reduce using rule 24 (inner_statement -> statement .)
    CASE            reduce using rule 24 (inner_statement -> statement .)
    DEFAULT         reduce using rule 24 (inner_statement -> statement .)
    ENDSWITCH       reduce using rule 24 (inner_statement -> statement .)
    ENDFOR          reduce using rule 24 (inner_statement -> statement .)


state 288

    (25) inner_statement -> function_declaration_statement .

    RBRACE          reduce using rule 25 (inner_statement -> function_declaration_statement .)
    HALT_COMPILER   reduce using rule 25 (inner_statement -> function_declaration_statement .)
    YIELD           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    LBRACE          reduce using rule 25 (inner_statement -> function_declaration_statement .)
    IF              reduce using rule 25 (inner_statement -> function_declaration_statement .)
    WHILE           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    DO              reduce using rule 25 (inner_statement -> function_declaration_statement .)
    FOR             reduce using rule 25 (inner_statement -> function_declaration_statement .)
    FOREACH         reduce using rule 25 (inner_statement -> function_declaration_statement .)
    SWITCH          reduce using rule 25 (inner_statement -> function_declaration_statement .)
    BREAK           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    CONTINUE        reduce using rule 25 (inner_statement -> function_declaration_statement .)
    RETURN          reduce using rule 25 (inner_statement -> function_declaration_statement .)
    GLOBAL          reduce using rule 25 (inner_statement -> function_declaration_statement .)
    STATIC          reduce using rule 25 (inner_statement -> function_declaration_statement .)
    ECHO            reduce using rule 25 (inner_statement -> function_declaration_statement .)
    INLINE_HTML     reduce using rule 25 (inner_statement -> function_declaration_statement .)
    UNSET           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    SEMI            reduce using rule 25 (inner_statement -> function_declaration_statement .)
    TRY             reduce using rule 25 (inner_statement -> function_declaration_statement .)
    THROW           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    DECLARE         reduce using rule 25 (inner_statement -> function_declaration_statement .)
    FUNCTION        reduce using rule 25 (inner_statement -> function_declaration_statement .)
    INTERFACE       reduce using rule 25 (inner_statement -> function_declaration_statement .)
    TRAIT           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    NEW             reduce using rule 25 (inner_statement -> function_declaration_statement .)
    CLONE           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    LIST            reduce using rule 25 (inner_statement -> function_declaration_statement .)
    ARRAY           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    LBRACKET        reduce using rule 25 (inner_statement -> function_declaration_statement .)
    PLUS            reduce using rule 25 (inner_statement -> function_declaration_statement .)
    MINUS           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    NOT             reduce using rule 25 (inner_statement -> function_declaration_statement .)
    BOOLEAN_NOT     reduce using rule 25 (inner_statement -> function_declaration_statement .)
    INC             reduce using rule 25 (inner_statement -> function_declaration_statement .)
    DEC             reduce using rule 25 (inner_statement -> function_declaration_statement .)
    INT_CAST        reduce using rule 25 (inner_statement -> function_declaration_statement .)
    DOUBLE_CAST     reduce using rule 25 (inner_statement -> function_declaration_statement .)
    STRING_CAST     reduce using rule 25 (inner_statement -> function_declaration_statement .)
    ARRAY_CAST      reduce using rule 25 (inner_statement -> function_declaration_statement .)
    OBJECT_CAST     reduce using rule 25 (inner_statement -> function_declaration_statement .)
    BOOL_CAST       reduce using rule 25 (inner_statement -> function_declaration_statement .)
    UNSET_CAST      reduce using rule 25 (inner_statement -> function_declaration_statement .)
    BINARY_CAST     reduce using rule 25 (inner_statement -> function_declaration_statement .)
    ISSET           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    EMPTY           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    EVAL            reduce using rule 25 (inner_statement -> function_declaration_statement .)
    INCLUDE         reduce using rule 25 (inner_statement -> function_declaration_statement .)
    INCLUDE_ONCE    reduce using rule 25 (inner_statement -> function_declaration_statement .)
    REQUIRE         reduce using rule 25 (inner_statement -> function_declaration_statement .)
    REQUIRE_ONCE    reduce using rule 25 (inner_statement -> function_declaration_statement .)
    PRINT           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    AT              reduce using rule 25 (inner_statement -> function_declaration_statement .)
    LPAREN          reduce using rule 25 (inner_statement -> function_declaration_statement .)
    CLASS           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    ABSTRACT        reduce using rule 25 (inner_statement -> function_declaration_statement .)
    FINAL           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    QUOTE           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    STRING          reduce using rule 25 (inner_statement -> function_declaration_statement .)
    STRING_VARNAME  reduce using rule 25 (inner_statement -> function_declaration_statement .)
    NS_SEPARATOR    reduce using rule 25 (inner_statement -> function_declaration_statement .)
    NAMESPACE       reduce using rule 25 (inner_statement -> function_declaration_statement .)
    EXIT            reduce using rule 25 (inner_statement -> function_declaration_statement .)
    DIE             reduce using rule 25 (inner_statement -> function_declaration_statement .)
    LNUMBER         reduce using rule 25 (inner_statement -> function_declaration_statement .)
    DNUMBER         reduce using rule 25 (inner_statement -> function_declaration_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 25 (inner_statement -> function_declaration_statement .)
    LINE            reduce using rule 25 (inner_statement -> function_declaration_statement .)
    FILE            reduce using rule 25 (inner_statement -> function_declaration_statement .)
    DIR             reduce using rule 25 (inner_statement -> function_declaration_statement .)
    CLASS_C         reduce using rule 25 (inner_statement -> function_declaration_statement .)
    METHOD_C        reduce using rule 25 (inner_statement -> function_declaration_statement .)
    FUNC_C          reduce using rule 25 (inner_statement -> function_declaration_statement .)
    NS_C            reduce using rule 25 (inner_statement -> function_declaration_statement .)
    START_HEREDOC   reduce using rule 25 (inner_statement -> function_declaration_statement .)
    START_NOWDOC    reduce using rule 25 (inner_statement -> function_declaration_statement .)
    BACKTICK        reduce using rule 25 (inner_statement -> function_declaration_statement .)
    DOLLAR          reduce using rule 25 (inner_statement -> function_declaration_statement .)
    VARIABLE        reduce using rule 25 (inner_statement -> function_declaration_statement .)
    ELSEIF          reduce using rule 25 (inner_statement -> function_declaration_statement .)
    ELSE            reduce using rule 25 (inner_statement -> function_declaration_statement .)
    ENDIF           reduce using rule 25 (inner_statement -> function_declaration_statement .)
    ENDWHILE        reduce using rule 25 (inner_statement -> function_declaration_statement .)
    ENDDECLARE      reduce using rule 25 (inner_statement -> function_declaration_statement .)
    ENDFOREACH      reduce using rule 25 (inner_statement -> function_declaration_statement .)
    CASE            reduce using rule 25 (inner_statement -> function_declaration_statement .)
    DEFAULT         reduce using rule 25 (inner_statement -> function_declaration_statement .)
    ENDSWITCH       reduce using rule 25 (inner_statement -> function_declaration_statement .)
    ENDFOR          reduce using rule 25 (inner_statement -> function_declaration_statement .)


state 289

    (26) inner_statement -> class_declaration_statement .

    RBRACE          reduce using rule 26 (inner_statement -> class_declaration_statement .)
    HALT_COMPILER   reduce using rule 26 (inner_statement -> class_declaration_statement .)
    YIELD           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    LBRACE          reduce using rule 26 (inner_statement -> class_declaration_statement .)
    IF              reduce using rule 26 (inner_statement -> class_declaration_statement .)
    WHILE           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    DO              reduce using rule 26 (inner_statement -> class_declaration_statement .)
    FOR             reduce using rule 26 (inner_statement -> class_declaration_statement .)
    FOREACH         reduce using rule 26 (inner_statement -> class_declaration_statement .)
    SWITCH          reduce using rule 26 (inner_statement -> class_declaration_statement .)
    BREAK           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    CONTINUE        reduce using rule 26 (inner_statement -> class_declaration_statement .)
    RETURN          reduce using rule 26 (inner_statement -> class_declaration_statement .)
    GLOBAL          reduce using rule 26 (inner_statement -> class_declaration_statement .)
    STATIC          reduce using rule 26 (inner_statement -> class_declaration_statement .)
    ECHO            reduce using rule 26 (inner_statement -> class_declaration_statement .)
    INLINE_HTML     reduce using rule 26 (inner_statement -> class_declaration_statement .)
    UNSET           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    SEMI            reduce using rule 26 (inner_statement -> class_declaration_statement .)
    TRY             reduce using rule 26 (inner_statement -> class_declaration_statement .)
    THROW           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    DECLARE         reduce using rule 26 (inner_statement -> class_declaration_statement .)
    FUNCTION        reduce using rule 26 (inner_statement -> class_declaration_statement .)
    INTERFACE       reduce using rule 26 (inner_statement -> class_declaration_statement .)
    TRAIT           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    NEW             reduce using rule 26 (inner_statement -> class_declaration_statement .)
    CLONE           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    LIST            reduce using rule 26 (inner_statement -> class_declaration_statement .)
    ARRAY           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    LBRACKET        reduce using rule 26 (inner_statement -> class_declaration_statement .)
    PLUS            reduce using rule 26 (inner_statement -> class_declaration_statement .)
    MINUS           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    NOT             reduce using rule 26 (inner_statement -> class_declaration_statement .)
    BOOLEAN_NOT     reduce using rule 26 (inner_statement -> class_declaration_statement .)
    INC             reduce using rule 26 (inner_statement -> class_declaration_statement .)
    DEC             reduce using rule 26 (inner_statement -> class_declaration_statement .)
    INT_CAST        reduce using rule 26 (inner_statement -> class_declaration_statement .)
    DOUBLE_CAST     reduce using rule 26 (inner_statement -> class_declaration_statement .)
    STRING_CAST     reduce using rule 26 (inner_statement -> class_declaration_statement .)
    ARRAY_CAST      reduce using rule 26 (inner_statement -> class_declaration_statement .)
    OBJECT_CAST     reduce using rule 26 (inner_statement -> class_declaration_statement .)
    BOOL_CAST       reduce using rule 26 (inner_statement -> class_declaration_statement .)
    UNSET_CAST      reduce using rule 26 (inner_statement -> class_declaration_statement .)
    BINARY_CAST     reduce using rule 26 (inner_statement -> class_declaration_statement .)
    ISSET           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    EMPTY           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    EVAL            reduce using rule 26 (inner_statement -> class_declaration_statement .)
    INCLUDE         reduce using rule 26 (inner_statement -> class_declaration_statement .)
    INCLUDE_ONCE    reduce using rule 26 (inner_statement -> class_declaration_statement .)
    REQUIRE         reduce using rule 26 (inner_statement -> class_declaration_statement .)
    REQUIRE_ONCE    reduce using rule 26 (inner_statement -> class_declaration_statement .)
    PRINT           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    AT              reduce using rule 26 (inner_statement -> class_declaration_statement .)
    LPAREN          reduce using rule 26 (inner_statement -> class_declaration_statement .)
    CLASS           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    ABSTRACT        reduce using rule 26 (inner_statement -> class_declaration_statement .)
    FINAL           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    QUOTE           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    STRING          reduce using rule 26 (inner_statement -> class_declaration_statement .)
    STRING_VARNAME  reduce using rule 26 (inner_statement -> class_declaration_statement .)
    NS_SEPARATOR    reduce using rule 26 (inner_statement -> class_declaration_statement .)
    NAMESPACE       reduce using rule 26 (inner_statement -> class_declaration_statement .)
    EXIT            reduce using rule 26 (inner_statement -> class_declaration_statement .)
    DIE             reduce using rule 26 (inner_statement -> class_declaration_statement .)
    LNUMBER         reduce using rule 26 (inner_statement -> class_declaration_statement .)
    DNUMBER         reduce using rule 26 (inner_statement -> class_declaration_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 26 (inner_statement -> class_declaration_statement .)
    LINE            reduce using rule 26 (inner_statement -> class_declaration_statement .)
    FILE            reduce using rule 26 (inner_statement -> class_declaration_statement .)
    DIR             reduce using rule 26 (inner_statement -> class_declaration_statement .)
    CLASS_C         reduce using rule 26 (inner_statement -> class_declaration_statement .)
    METHOD_C        reduce using rule 26 (inner_statement -> class_declaration_statement .)
    FUNC_C          reduce using rule 26 (inner_statement -> class_declaration_statement .)
    NS_C            reduce using rule 26 (inner_statement -> class_declaration_statement .)
    START_HEREDOC   reduce using rule 26 (inner_statement -> class_declaration_statement .)
    START_NOWDOC    reduce using rule 26 (inner_statement -> class_declaration_statement .)
    BACKTICK        reduce using rule 26 (inner_statement -> class_declaration_statement .)
    DOLLAR          reduce using rule 26 (inner_statement -> class_declaration_statement .)
    VARIABLE        reduce using rule 26 (inner_statement -> class_declaration_statement .)
    ELSEIF          reduce using rule 26 (inner_statement -> class_declaration_statement .)
    ELSE            reduce using rule 26 (inner_statement -> class_declaration_statement .)
    ENDIF           reduce using rule 26 (inner_statement -> class_declaration_statement .)
    ENDWHILE        reduce using rule 26 (inner_statement -> class_declaration_statement .)
    ENDDECLARE      reduce using rule 26 (inner_statement -> class_declaration_statement .)
    ENDFOREACH      reduce using rule 26 (inner_statement -> class_declaration_statement .)
    CASE            reduce using rule 26 (inner_statement -> class_declaration_statement .)
    DEFAULT         reduce using rule 26 (inner_statement -> class_declaration_statement .)
    ENDSWITCH       reduce using rule 26 (inner_statement -> class_declaration_statement .)
    ENDFOR          reduce using rule 26 (inner_statement -> class_declaration_statement .)


state 290

    (27) inner_statement -> HALT_COMPILER . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 448


state 291

    (28) inner_statement -> YIELD . SEMI
    (29) inner_statement -> YIELD . expr SEMI
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    SEMI            shift and go to state 449
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 450
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 292

    (11) top_statement -> CONST constant_declarations SEMI .

    HALT_COMPILER   reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    NAMESPACE       reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    CONST           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    USE             reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    LBRACE          reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    IF              reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    WHILE           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    DO              reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    FOR             reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    FOREACH         reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    SWITCH          reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    BREAK           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    CONTINUE        reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    RETURN          reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    GLOBAL          reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    STATIC          reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    ECHO            reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    INLINE_HTML     reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    UNSET           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    SEMI            reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    TRY             reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    THROW           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    DECLARE         reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    FUNCTION        reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    INTERFACE       reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    TRAIT           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    NEW             reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    CLONE           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    LIST            reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    ARRAY           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    LBRACKET        reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    PLUS            reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    MINUS           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    NOT             reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    BOOLEAN_NOT     reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    INC             reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    DEC             reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    INT_CAST        reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    DOUBLE_CAST     reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    STRING_CAST     reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    ARRAY_CAST      reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    OBJECT_CAST     reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    BOOL_CAST       reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    UNSET_CAST      reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    BINARY_CAST     reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    ISSET           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    EMPTY           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    EVAL            reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    INCLUDE         reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    INCLUDE_ONCE    reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    REQUIRE         reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    REQUIRE_ONCE    reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    PRINT           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    AT              reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    LPAREN          reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    CLASS           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    ABSTRACT        reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    FINAL           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    QUOTE           reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    STRING          reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    STRING_VARNAME  reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    NS_SEPARATOR    reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    EXIT            reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    DIE             reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    LNUMBER         reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    DNUMBER         reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    LINE            reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    FILE            reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    DIR             reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    CLASS_C         reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    METHOD_C        reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    FUNC_C          reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    NS_C            reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    START_HEREDOC   reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    START_NOWDOC    reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    BACKTICK        reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    DOLLAR          reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    VARIABLE        reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    $end            reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)
    RBRACE          reduce using rule 11 (top_statement -> CONST constant_declarations SEMI .)


state 293

    (19) constant_declarations -> constant_declarations COMMA . constant_declaration
    (21) constant_declaration -> . STRING EQUALS static_expr

    STRING          shift and go to state 124

    constant_declaration           shift and go to state 451

state 294

    (21) constant_declaration -> STRING EQUALS . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 453
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 295

    (12) top_statement -> USE use_declarations SEMI .

    HALT_COMPILER   reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    NAMESPACE       reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    CONST           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    USE             reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    LBRACE          reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    IF              reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    WHILE           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    DO              reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    FOR             reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    FOREACH         reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    SWITCH          reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    BREAK           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    CONTINUE        reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    RETURN          reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    GLOBAL          reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    STATIC          reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    ECHO            reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    INLINE_HTML     reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    UNSET           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    SEMI            reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    TRY             reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    THROW           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    DECLARE         reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    FUNCTION        reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    INTERFACE       reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    TRAIT           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    NEW             reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    CLONE           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    LIST            reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    ARRAY           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    LBRACKET        reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    PLUS            reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    MINUS           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    NOT             reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    BOOLEAN_NOT     reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    INC             reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    DEC             reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    INT_CAST        reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    DOUBLE_CAST     reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    STRING_CAST     reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    ARRAY_CAST      reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    OBJECT_CAST     reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    BOOL_CAST       reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    UNSET_CAST      reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    BINARY_CAST     reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    ISSET           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    EMPTY           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    EVAL            reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    INCLUDE         reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    INCLUDE_ONCE    reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    REQUIRE         reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    REQUIRE_ONCE    reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    PRINT           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    AT              reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    LPAREN          reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    CLASS           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    ABSTRACT        reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    FINAL           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    QUOTE           reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    STRING          reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    STRING_VARNAME  reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    NS_SEPARATOR    reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    EXIT            reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    DIE             reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    LNUMBER         reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    DNUMBER         reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    LINE            reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    FILE            reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    DIR             reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    CLASS_C         reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    METHOD_C        reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    FUNC_C          reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    NS_C            reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    START_HEREDOC   reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    START_NOWDOC    reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    BACKTICK        reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    DOLLAR          reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    VARIABLE        reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    $end            reduce using rule 12 (top_statement -> USE use_declarations SEMI .)
    RBRACE          reduce using rule 12 (top_statement -> USE use_declarations SEMI .)


state 296

    (13) use_declarations -> use_declarations COMMA . use_declaration
    (15) use_declaration -> . namespace_name
    (16) use_declaration -> . NS_SEPARATOR namespace_name
    (17) use_declaration -> . namespace_name AS STRING
    (18) use_declaration -> . NS_SEPARATOR namespace_name AS STRING
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    NS_SEPARATOR    shift and go to state 128
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117

    use_declaration                shift and go to state 474
    namespace_name                 shift and go to state 127

state 297

    (17) use_declaration -> namespace_name AS . STRING

    STRING          shift and go to state 475


state 298

    (16) use_declaration -> NS_SEPARATOR namespace_name .
    (18) use_declaration -> NS_SEPARATOR namespace_name . AS STRING
    (428) namespace_name -> namespace_name . NS_SEPARATOR STRING

    SEMI            reduce using rule 16 (use_declaration -> NS_SEPARATOR namespace_name .)
    COMMA           reduce using rule 16 (use_declaration -> NS_SEPARATOR namespace_name .)
    AS              shift and go to state 476
    NS_SEPARATOR    shift and go to state 118


state 299

    (31) statement -> IF LPAREN expr . RPAREN statement elseif_list else_single
    (32) statement -> IF LPAREN expr . RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    RPAREN          shift and go to state 477
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 300

    (184) expr -> expr OBJECT_OPERATOR object_property . method_or_not
    (220) method_or_not -> . LPAREN function_call_parameter_list RPAREN
    (221) method_or_not -> . empty
    (443) empty -> .

    LPAREN          shift and go to state 479
    SEMI            reduce using rule 443 (empty -> .)
    OBJECT_OPERATOR reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    BOOLEAN_AND     reduce using rule 443 (empty -> .)
    BOOLEAN_OR      reduce using rule 443 (empty -> .)
    LOGICAL_AND     reduce using rule 443 (empty -> .)
    LOGICAL_OR      reduce using rule 443 (empty -> .)
    LOGICAL_XOR     reduce using rule 443 (empty -> .)
    AND             reduce using rule 443 (empty -> .)
    OR              reduce using rule 443 (empty -> .)
    XOR             reduce using rule 443 (empty -> .)
    CONCAT          reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    MUL             reduce using rule 443 (empty -> .)
    DIV             reduce using rule 443 (empty -> .)
    SL              reduce using rule 443 (empty -> .)
    SR              reduce using rule 443 (empty -> .)
    MOD             reduce using rule 443 (empty -> .)
    IS_IDENTICAL    reduce using rule 443 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 443 (empty -> .)
    IS_EQUAL        reduce using rule 443 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 443 (empty -> .)
    IS_SMALLER      reduce using rule 443 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 443 (empty -> .)
    IS_GREATER      reduce using rule 443 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 443 (empty -> .)
    INSTANCEOF      reduce using rule 443 (empty -> .)
    QUESTION        reduce using rule 443 (empty -> .)
    RPAREN          reduce using rule 443 (empty -> .)
    COMMA           reduce using rule 443 (empty -> .)
    DOUBLE_ARROW    reduce using rule 443 (empty -> .)
    RBRACKET        reduce using rule 443 (empty -> .)
    RBRACE          reduce using rule 443 (empty -> .)
    COLON           reduce using rule 443 (empty -> .)
    AS              reduce using rule 443 (empty -> .)

    method_or_not                  shift and go to state 478
    empty                          shift and go to state 480

state 301

    (243) object_property -> variable_name . object_dim_list
    (245) object_dim_list -> . empty
    (246) object_dim_list -> . object_dim_list LBRACKET dim_offset RBRACKET
    (247) object_dim_list -> . object_dim_list LBRACE expr RBRACE
    (443) empty -> .

    LBRACKET        reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    LPAREN          reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    OBJECT_OPERATOR reduce using rule 443 (empty -> .)
    BOOLEAN_AND     reduce using rule 443 (empty -> .)
    BOOLEAN_OR      reduce using rule 443 (empty -> .)
    LOGICAL_AND     reduce using rule 443 (empty -> .)
    LOGICAL_OR      reduce using rule 443 (empty -> .)
    LOGICAL_XOR     reduce using rule 443 (empty -> .)
    AND             reduce using rule 443 (empty -> .)
    OR              reduce using rule 443 (empty -> .)
    XOR             reduce using rule 443 (empty -> .)
    CONCAT          reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    MUL             reduce using rule 443 (empty -> .)
    DIV             reduce using rule 443 (empty -> .)
    SL              reduce using rule 443 (empty -> .)
    SR              reduce using rule 443 (empty -> .)
    MOD             reduce using rule 443 (empty -> .)
    IS_IDENTICAL    reduce using rule 443 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 443 (empty -> .)
    IS_EQUAL        reduce using rule 443 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 443 (empty -> .)
    IS_SMALLER      reduce using rule 443 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 443 (empty -> .)
    IS_GREATER      reduce using rule 443 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 443 (empty -> .)
    INSTANCEOF      reduce using rule 443 (empty -> .)
    QUESTION        reduce using rule 443 (empty -> .)
    RPAREN          reduce using rule 443 (empty -> .)
    COMMA           reduce using rule 443 (empty -> .)
    DOUBLE_ARROW    reduce using rule 443 (empty -> .)
    RBRACKET        reduce using rule 443 (empty -> .)
    RBRACE          reduce using rule 443 (empty -> .)
    COLON           reduce using rule 443 (empty -> .)
    AS              reduce using rule 443 (empty -> .)
    EQUALS          reduce using rule 443 (empty -> .)
    PLUS_EQUAL      reduce using rule 443 (empty -> .)
    MINUS_EQUAL     reduce using rule 443 (empty -> .)
    MUL_EQUAL       reduce using rule 443 (empty -> .)
    DIV_EQUAL       reduce using rule 443 (empty -> .)
    CONCAT_EQUAL    reduce using rule 443 (empty -> .)
    MOD_EQUAL       reduce using rule 443 (empty -> .)
    AND_EQUAL       reduce using rule 443 (empty -> .)
    OR_EQUAL        reduce using rule 443 (empty -> .)
    XOR_EQUAL       reduce using rule 443 (empty -> .)
    SL_EQUAL        reduce using rule 443 (empty -> .)
    SR_EQUAL        reduce using rule 443 (empty -> .)
    INC             reduce using rule 443 (empty -> .)
    DEC             reduce using rule 443 (empty -> .)

    object_dim_list                shift and go to state 481
    empty                          shift and go to state 482

state 302

    (244) object_property -> variable_without_objects .

    LPAREN          reduce using rule 244 (object_property -> variable_without_objects .)
    SEMI            reduce using rule 244 (object_property -> variable_without_objects .)
    OBJECT_OPERATOR reduce using rule 244 (object_property -> variable_without_objects .)
    LBRACE          reduce using rule 244 (object_property -> variable_without_objects .)
    BOOLEAN_AND     reduce using rule 244 (object_property -> variable_without_objects .)
    BOOLEAN_OR      reduce using rule 244 (object_property -> variable_without_objects .)
    LOGICAL_AND     reduce using rule 244 (object_property -> variable_without_objects .)
    LOGICAL_OR      reduce using rule 244 (object_property -> variable_without_objects .)
    LOGICAL_XOR     reduce using rule 244 (object_property -> variable_without_objects .)
    AND             reduce using rule 244 (object_property -> variable_without_objects .)
    OR              reduce using rule 244 (object_property -> variable_without_objects .)
    XOR             reduce using rule 244 (object_property -> variable_without_objects .)
    CONCAT          reduce using rule 244 (object_property -> variable_without_objects .)
    PLUS            reduce using rule 244 (object_property -> variable_without_objects .)
    MINUS           reduce using rule 244 (object_property -> variable_without_objects .)
    MUL             reduce using rule 244 (object_property -> variable_without_objects .)
    DIV             reduce using rule 244 (object_property -> variable_without_objects .)
    SL              reduce using rule 244 (object_property -> variable_without_objects .)
    SR              reduce using rule 244 (object_property -> variable_without_objects .)
    MOD             reduce using rule 244 (object_property -> variable_without_objects .)
    IS_IDENTICAL    reduce using rule 244 (object_property -> variable_without_objects .)
    IS_NOT_IDENTICAL reduce using rule 244 (object_property -> variable_without_objects .)
    IS_EQUAL        reduce using rule 244 (object_property -> variable_without_objects .)
    IS_NOT_EQUAL    reduce using rule 244 (object_property -> variable_without_objects .)
    IS_SMALLER      reduce using rule 244 (object_property -> variable_without_objects .)
    IS_SMALLER_OR_EQUAL reduce using rule 244 (object_property -> variable_without_objects .)
    IS_GREATER      reduce using rule 244 (object_property -> variable_without_objects .)
    IS_GREATER_OR_EQUAL reduce using rule 244 (object_property -> variable_without_objects .)
    INSTANCEOF      reduce using rule 244 (object_property -> variable_without_objects .)
    QUESTION        reduce using rule 244 (object_property -> variable_without_objects .)
    RPAREN          reduce using rule 244 (object_property -> variable_without_objects .)
    COMMA           reduce using rule 244 (object_property -> variable_without_objects .)
    DOUBLE_ARROW    reduce using rule 244 (object_property -> variable_without_objects .)
    RBRACKET        reduce using rule 244 (object_property -> variable_without_objects .)
    RBRACE          reduce using rule 244 (object_property -> variable_without_objects .)
    COLON           reduce using rule 244 (object_property -> variable_without_objects .)
    AS              reduce using rule 244 (object_property -> variable_without_objects .)
    EQUALS          reduce using rule 244 (object_property -> variable_without_objects .)
    PLUS_EQUAL      reduce using rule 244 (object_property -> variable_without_objects .)
    MINUS_EQUAL     reduce using rule 244 (object_property -> variable_without_objects .)
    MUL_EQUAL       reduce using rule 244 (object_property -> variable_without_objects .)
    DIV_EQUAL       reduce using rule 244 (object_property -> variable_without_objects .)
    CONCAT_EQUAL    reduce using rule 244 (object_property -> variable_without_objects .)
    MOD_EQUAL       reduce using rule 244 (object_property -> variable_without_objects .)
    AND_EQUAL       reduce using rule 244 (object_property -> variable_without_objects .)
    OR_EQUAL        reduce using rule 244 (object_property -> variable_without_objects .)
    XOR_EQUAL       reduce using rule 244 (object_property -> variable_without_objects .)
    SL_EQUAL        reduce using rule 244 (object_property -> variable_without_objects .)
    SR_EQUAL        reduce using rule 244 (object_property -> variable_without_objects .)
    INC             reduce using rule 244 (object_property -> variable_without_objects .)
    DEC             reduce using rule 244 (object_property -> variable_without_objects .)
    LBRACKET        reduce using rule 244 (object_property -> variable_without_objects .)


state 303

    (248) variable_name -> STRING .

    LBRACKET        reduce using rule 248 (variable_name -> STRING .)
    LBRACE          reduce using rule 248 (variable_name -> STRING .)
    LPAREN          reduce using rule 248 (variable_name -> STRING .)
    SEMI            reduce using rule 248 (variable_name -> STRING .)
    OBJECT_OPERATOR reduce using rule 248 (variable_name -> STRING .)
    BOOLEAN_AND     reduce using rule 248 (variable_name -> STRING .)
    BOOLEAN_OR      reduce using rule 248 (variable_name -> STRING .)
    LOGICAL_AND     reduce using rule 248 (variable_name -> STRING .)
    LOGICAL_OR      reduce using rule 248 (variable_name -> STRING .)
    LOGICAL_XOR     reduce using rule 248 (variable_name -> STRING .)
    AND             reduce using rule 248 (variable_name -> STRING .)
    OR              reduce using rule 248 (variable_name -> STRING .)
    XOR             reduce using rule 248 (variable_name -> STRING .)
    CONCAT          reduce using rule 248 (variable_name -> STRING .)
    PLUS            reduce using rule 248 (variable_name -> STRING .)
    MINUS           reduce using rule 248 (variable_name -> STRING .)
    MUL             reduce using rule 248 (variable_name -> STRING .)
    DIV             reduce using rule 248 (variable_name -> STRING .)
    SL              reduce using rule 248 (variable_name -> STRING .)
    SR              reduce using rule 248 (variable_name -> STRING .)
    MOD             reduce using rule 248 (variable_name -> STRING .)
    IS_IDENTICAL    reduce using rule 248 (variable_name -> STRING .)
    IS_NOT_IDENTICAL reduce using rule 248 (variable_name -> STRING .)
    IS_EQUAL        reduce using rule 248 (variable_name -> STRING .)
    IS_NOT_EQUAL    reduce using rule 248 (variable_name -> STRING .)
    IS_SMALLER      reduce using rule 248 (variable_name -> STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 248 (variable_name -> STRING .)
    IS_GREATER      reduce using rule 248 (variable_name -> STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 248 (variable_name -> STRING .)
    INSTANCEOF      reduce using rule 248 (variable_name -> STRING .)
    QUESTION        reduce using rule 248 (variable_name -> STRING .)
    RPAREN          reduce using rule 248 (variable_name -> STRING .)
    COMMA           reduce using rule 248 (variable_name -> STRING .)
    DOUBLE_ARROW    reduce using rule 248 (variable_name -> STRING .)
    RBRACKET        reduce using rule 248 (variable_name -> STRING .)
    RBRACE          reduce using rule 248 (variable_name -> STRING .)
    COLON           reduce using rule 248 (variable_name -> STRING .)
    AS              reduce using rule 248 (variable_name -> STRING .)
    EQUALS          reduce using rule 248 (variable_name -> STRING .)
    PLUS_EQUAL      reduce using rule 248 (variable_name -> STRING .)
    MINUS_EQUAL     reduce using rule 248 (variable_name -> STRING .)
    MUL_EQUAL       reduce using rule 248 (variable_name -> STRING .)
    DIV_EQUAL       reduce using rule 248 (variable_name -> STRING .)
    CONCAT_EQUAL    reduce using rule 248 (variable_name -> STRING .)
    MOD_EQUAL       reduce using rule 248 (variable_name -> STRING .)
    AND_EQUAL       reduce using rule 248 (variable_name -> STRING .)
    OR_EQUAL        reduce using rule 248 (variable_name -> STRING .)
    XOR_EQUAL       reduce using rule 248 (variable_name -> STRING .)
    SL_EQUAL        reduce using rule 248 (variable_name -> STRING .)
    SR_EQUAL        reduce using rule 248 (variable_name -> STRING .)
    INC             reduce using rule 248 (variable_name -> STRING .)
    DEC             reduce using rule 248 (variable_name -> STRING .)


state 304

    (249) variable_name -> LBRACE . expr RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 483
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 305

    (250) variable_without_objects -> simple_indirect_reference .

    LPAREN          reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    SEMI            reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    OBJECT_OPERATOR reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    LBRACE          reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    BOOLEAN_AND     reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    BOOLEAN_OR      reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    LOGICAL_AND     reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    LOGICAL_OR      reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    LOGICAL_XOR     reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    AND             reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    OR              reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    XOR             reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    CONCAT          reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    PLUS            reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    MINUS           reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    MUL             reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    DIV             reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    SL              reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    SR              reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    MOD             reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    IS_IDENTICAL    reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    IS_NOT_IDENTICAL reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    IS_EQUAL        reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    IS_NOT_EQUAL    reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    IS_SMALLER      reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    IS_SMALLER_OR_EQUAL reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    IS_GREATER      reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    IS_GREATER_OR_EQUAL reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    INSTANCEOF      reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    QUESTION        reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    RPAREN          reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    COMMA           reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    DOUBLE_ARROW    reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    RBRACKET        reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    RBRACE          reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    COLON           reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    AS              reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    EQUALS          reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    PLUS_EQUAL      reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    MINUS_EQUAL     reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    MUL_EQUAL       reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    DIV_EQUAL       reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    CONCAT_EQUAL    reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    MOD_EQUAL       reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    AND_EQUAL       reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    OR_EQUAL        reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    XOR_EQUAL       reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    SL_EQUAL        reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    SR_EQUAL        reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    INC             reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    DEC             reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)
    LBRACKET        reduce using rule 250 (variable_without_objects -> simple_indirect_reference .)


state 306

    (241) dim_offset -> expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    RBRACE          reduce using rule 241 (dim_offset -> expr .)
    RBRACKET        reduce using rule 241 (dim_offset -> expr .)
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 307

    (238) expr -> expr LBRACE dim_offset . RBRACE

    RBRACE          shift and go to state 484


state 308

    (242) dim_offset -> empty .

    RBRACE          reduce using rule 242 (dim_offset -> empty .)
    RBRACKET        reduce using rule 242 (dim_offset -> empty .)


state 309

    (289) expr -> expr BOOLEAN_AND expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 289 (expr -> expr BOOLEAN_AND expr .)
    OBJECT_OPERATOR reduce using rule 289 (expr -> expr BOOLEAN_AND expr .)
    LBRACE          reduce using rule 289 (expr -> expr BOOLEAN_AND expr .)
    BOOLEAN_AND     reduce using rule 289 (expr -> expr BOOLEAN_AND expr .)
    BOOLEAN_OR      reduce using rule 289 (expr -> expr BOOLEAN_AND expr .)
    LOGICAL_AND     reduce using rule 289 (expr -> expr BOOLEAN_AND expr .)
    LOGICAL_OR      reduce using rule 289 (expr -> expr BOOLEAN_AND expr .)
    LOGICAL_XOR     reduce using rule 289 (expr -> expr BOOLEAN_AND expr .)
    QUESTION        reduce using rule 289 (expr -> expr BOOLEAN_AND expr .)
    RPAREN          reduce using rule 289 (expr -> expr BOOLEAN_AND expr .)
    COMMA           reduce using rule 289 (expr -> expr BOOLEAN_AND expr .)
    DOUBLE_ARROW    reduce using rule 289 (expr -> expr BOOLEAN_AND expr .)
    RBRACKET        reduce using rule 289 (expr -> expr BOOLEAN_AND expr .)
    RBRACE          reduce using rule 289 (expr -> expr BOOLEAN_AND expr .)
    COLON           reduce using rule 289 (expr -> expr BOOLEAN_AND expr .)
    AS              reduce using rule 289 (expr -> expr BOOLEAN_AND expr .)
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157

  ! AND             [ reduce using rule 289 (expr -> expr BOOLEAN_AND expr .) ]
  ! OR              [ reduce using rule 289 (expr -> expr BOOLEAN_AND expr .) ]
  ! XOR             [ reduce using rule 289 (expr -> expr BOOLEAN_AND expr .) ]
  ! CONCAT          [ reduce using rule 289 (expr -> expr BOOLEAN_AND expr .) ]
  ! PLUS            [ reduce using rule 289 (expr -> expr BOOLEAN_AND expr .) ]
  ! MINUS           [ reduce using rule 289 (expr -> expr BOOLEAN_AND expr .) ]
  ! MUL             [ reduce using rule 289 (expr -> expr BOOLEAN_AND expr .) ]
  ! DIV             [ reduce using rule 289 (expr -> expr BOOLEAN_AND expr .) ]
  ! SL              [ reduce using rule 289 (expr -> expr BOOLEAN_AND expr .) ]
  ! SR              [ reduce using rule 289 (expr -> expr BOOLEAN_AND expr .) ]
  ! MOD             [ reduce using rule 289 (expr -> expr BOOLEAN_AND expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 289 (expr -> expr BOOLEAN_AND expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 289 (expr -> expr BOOLEAN_AND expr .) ]
  ! IS_EQUAL        [ reduce using rule 289 (expr -> expr BOOLEAN_AND expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 289 (expr -> expr BOOLEAN_AND expr .) ]
  ! IS_SMALLER      [ reduce using rule 289 (expr -> expr BOOLEAN_AND expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 289 (expr -> expr BOOLEAN_AND expr .) ]
  ! IS_GREATER      [ reduce using rule 289 (expr -> expr BOOLEAN_AND expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 289 (expr -> expr BOOLEAN_AND expr .) ]
  ! INSTANCEOF      [ reduce using rule 289 (expr -> expr BOOLEAN_AND expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! QUESTION        [ shift and go to state 158 ]


state 310

    (290) expr -> expr BOOLEAN_OR expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 290 (expr -> expr BOOLEAN_OR expr .)
    OBJECT_OPERATOR reduce using rule 290 (expr -> expr BOOLEAN_OR expr .)
    LBRACE          reduce using rule 290 (expr -> expr BOOLEAN_OR expr .)
    BOOLEAN_OR      reduce using rule 290 (expr -> expr BOOLEAN_OR expr .)
    LOGICAL_AND     reduce using rule 290 (expr -> expr BOOLEAN_OR expr .)
    LOGICAL_OR      reduce using rule 290 (expr -> expr BOOLEAN_OR expr .)
    LOGICAL_XOR     reduce using rule 290 (expr -> expr BOOLEAN_OR expr .)
    QUESTION        reduce using rule 290 (expr -> expr BOOLEAN_OR expr .)
    RPAREN          reduce using rule 290 (expr -> expr BOOLEAN_OR expr .)
    COMMA           reduce using rule 290 (expr -> expr BOOLEAN_OR expr .)
    DOUBLE_ARROW    reduce using rule 290 (expr -> expr BOOLEAN_OR expr .)
    RBRACKET        reduce using rule 290 (expr -> expr BOOLEAN_OR expr .)
    RBRACE          reduce using rule 290 (expr -> expr BOOLEAN_OR expr .)
    COLON           reduce using rule 290 (expr -> expr BOOLEAN_OR expr .)
    AS              reduce using rule 290 (expr -> expr BOOLEAN_OR expr .)
    BOOLEAN_AND     shift and go to state 133
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157

  ! BOOLEAN_AND     [ reduce using rule 290 (expr -> expr BOOLEAN_OR expr .) ]
  ! AND             [ reduce using rule 290 (expr -> expr BOOLEAN_OR expr .) ]
  ! OR              [ reduce using rule 290 (expr -> expr BOOLEAN_OR expr .) ]
  ! XOR             [ reduce using rule 290 (expr -> expr BOOLEAN_OR expr .) ]
  ! CONCAT          [ reduce using rule 290 (expr -> expr BOOLEAN_OR expr .) ]
  ! PLUS            [ reduce using rule 290 (expr -> expr BOOLEAN_OR expr .) ]
  ! MINUS           [ reduce using rule 290 (expr -> expr BOOLEAN_OR expr .) ]
  ! MUL             [ reduce using rule 290 (expr -> expr BOOLEAN_OR expr .) ]
  ! DIV             [ reduce using rule 290 (expr -> expr BOOLEAN_OR expr .) ]
  ! SL              [ reduce using rule 290 (expr -> expr BOOLEAN_OR expr .) ]
  ! SR              [ reduce using rule 290 (expr -> expr BOOLEAN_OR expr .) ]
  ! MOD             [ reduce using rule 290 (expr -> expr BOOLEAN_OR expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 290 (expr -> expr BOOLEAN_OR expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 290 (expr -> expr BOOLEAN_OR expr .) ]
  ! IS_EQUAL        [ reduce using rule 290 (expr -> expr BOOLEAN_OR expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 290 (expr -> expr BOOLEAN_OR expr .) ]
  ! IS_SMALLER      [ reduce using rule 290 (expr -> expr BOOLEAN_OR expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 290 (expr -> expr BOOLEAN_OR expr .) ]
  ! IS_GREATER      [ reduce using rule 290 (expr -> expr BOOLEAN_OR expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 290 (expr -> expr BOOLEAN_OR expr .) ]
  ! INSTANCEOF      [ reduce using rule 290 (expr -> expr BOOLEAN_OR expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! QUESTION        [ shift and go to state 158 ]


state 311

    (291) expr -> expr LOGICAL_AND expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 291 (expr -> expr LOGICAL_AND expr .)
    OBJECT_OPERATOR reduce using rule 291 (expr -> expr LOGICAL_AND expr .)
    LBRACE          reduce using rule 291 (expr -> expr LOGICAL_AND expr .)
    LOGICAL_AND     reduce using rule 291 (expr -> expr LOGICAL_AND expr .)
    LOGICAL_OR      reduce using rule 291 (expr -> expr LOGICAL_AND expr .)
    LOGICAL_XOR     reduce using rule 291 (expr -> expr LOGICAL_AND expr .)
    RPAREN          reduce using rule 291 (expr -> expr LOGICAL_AND expr .)
    COMMA           reduce using rule 291 (expr -> expr LOGICAL_AND expr .)
    DOUBLE_ARROW    reduce using rule 291 (expr -> expr LOGICAL_AND expr .)
    RBRACKET        reduce using rule 291 (expr -> expr LOGICAL_AND expr .)
    RBRACE          reduce using rule 291 (expr -> expr LOGICAL_AND expr .)
    COLON           reduce using rule 291 (expr -> expr LOGICAL_AND expr .)
    AS              reduce using rule 291 (expr -> expr LOGICAL_AND expr .)
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158

  ! BOOLEAN_AND     [ reduce using rule 291 (expr -> expr LOGICAL_AND expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 291 (expr -> expr LOGICAL_AND expr .) ]
  ! AND             [ reduce using rule 291 (expr -> expr LOGICAL_AND expr .) ]
  ! OR              [ reduce using rule 291 (expr -> expr LOGICAL_AND expr .) ]
  ! XOR             [ reduce using rule 291 (expr -> expr LOGICAL_AND expr .) ]
  ! CONCAT          [ reduce using rule 291 (expr -> expr LOGICAL_AND expr .) ]
  ! PLUS            [ reduce using rule 291 (expr -> expr LOGICAL_AND expr .) ]
  ! MINUS           [ reduce using rule 291 (expr -> expr LOGICAL_AND expr .) ]
  ! MUL             [ reduce using rule 291 (expr -> expr LOGICAL_AND expr .) ]
  ! DIV             [ reduce using rule 291 (expr -> expr LOGICAL_AND expr .) ]
  ! SL              [ reduce using rule 291 (expr -> expr LOGICAL_AND expr .) ]
  ! SR              [ reduce using rule 291 (expr -> expr LOGICAL_AND expr .) ]
  ! MOD             [ reduce using rule 291 (expr -> expr LOGICAL_AND expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 291 (expr -> expr LOGICAL_AND expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 291 (expr -> expr LOGICAL_AND expr .) ]
  ! IS_EQUAL        [ reduce using rule 291 (expr -> expr LOGICAL_AND expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 291 (expr -> expr LOGICAL_AND expr .) ]
  ! IS_SMALLER      [ reduce using rule 291 (expr -> expr LOGICAL_AND expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 291 (expr -> expr LOGICAL_AND expr .) ]
  ! IS_GREATER      [ reduce using rule 291 (expr -> expr LOGICAL_AND expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 291 (expr -> expr LOGICAL_AND expr .) ]
  ! INSTANCEOF      [ reduce using rule 291 (expr -> expr LOGICAL_AND expr .) ]
  ! QUESTION        [ reduce using rule 291 (expr -> expr LOGICAL_AND expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]


state 312

    (292) expr -> expr LOGICAL_OR expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 292 (expr -> expr LOGICAL_OR expr .)
    OBJECT_OPERATOR reduce using rule 292 (expr -> expr LOGICAL_OR expr .)
    LBRACE          reduce using rule 292 (expr -> expr LOGICAL_OR expr .)
    LOGICAL_OR      reduce using rule 292 (expr -> expr LOGICAL_OR expr .)
    RPAREN          reduce using rule 292 (expr -> expr LOGICAL_OR expr .)
    COMMA           reduce using rule 292 (expr -> expr LOGICAL_OR expr .)
    DOUBLE_ARROW    reduce using rule 292 (expr -> expr LOGICAL_OR expr .)
    RBRACKET        reduce using rule 292 (expr -> expr LOGICAL_OR expr .)
    RBRACE          reduce using rule 292 (expr -> expr LOGICAL_OR expr .)
    COLON           reduce using rule 292 (expr -> expr LOGICAL_OR expr .)
    AS              reduce using rule 292 (expr -> expr LOGICAL_OR expr .)
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158

  ! BOOLEAN_AND     [ reduce using rule 292 (expr -> expr LOGICAL_OR expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 292 (expr -> expr LOGICAL_OR expr .) ]
  ! LOGICAL_AND     [ reduce using rule 292 (expr -> expr LOGICAL_OR expr .) ]
  ! LOGICAL_XOR     [ reduce using rule 292 (expr -> expr LOGICAL_OR expr .) ]
  ! AND             [ reduce using rule 292 (expr -> expr LOGICAL_OR expr .) ]
  ! OR              [ reduce using rule 292 (expr -> expr LOGICAL_OR expr .) ]
  ! XOR             [ reduce using rule 292 (expr -> expr LOGICAL_OR expr .) ]
  ! CONCAT          [ reduce using rule 292 (expr -> expr LOGICAL_OR expr .) ]
  ! PLUS            [ reduce using rule 292 (expr -> expr LOGICAL_OR expr .) ]
  ! MINUS           [ reduce using rule 292 (expr -> expr LOGICAL_OR expr .) ]
  ! MUL             [ reduce using rule 292 (expr -> expr LOGICAL_OR expr .) ]
  ! DIV             [ reduce using rule 292 (expr -> expr LOGICAL_OR expr .) ]
  ! SL              [ reduce using rule 292 (expr -> expr LOGICAL_OR expr .) ]
  ! SR              [ reduce using rule 292 (expr -> expr LOGICAL_OR expr .) ]
  ! MOD             [ reduce using rule 292 (expr -> expr LOGICAL_OR expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 292 (expr -> expr LOGICAL_OR expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 292 (expr -> expr LOGICAL_OR expr .) ]
  ! IS_EQUAL        [ reduce using rule 292 (expr -> expr LOGICAL_OR expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 292 (expr -> expr LOGICAL_OR expr .) ]
  ! IS_SMALLER      [ reduce using rule 292 (expr -> expr LOGICAL_OR expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 292 (expr -> expr LOGICAL_OR expr .) ]
  ! IS_GREATER      [ reduce using rule 292 (expr -> expr LOGICAL_OR expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 292 (expr -> expr LOGICAL_OR expr .) ]
  ! INSTANCEOF      [ reduce using rule 292 (expr -> expr LOGICAL_OR expr .) ]
  ! QUESTION        [ reduce using rule 292 (expr -> expr LOGICAL_OR expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]


state 313

    (293) expr -> expr LOGICAL_XOR expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 293 (expr -> expr LOGICAL_XOR expr .)
    OBJECT_OPERATOR reduce using rule 293 (expr -> expr LOGICAL_XOR expr .)
    LBRACE          reduce using rule 293 (expr -> expr LOGICAL_XOR expr .)
    LOGICAL_OR      reduce using rule 293 (expr -> expr LOGICAL_XOR expr .)
    LOGICAL_XOR     reduce using rule 293 (expr -> expr LOGICAL_XOR expr .)
    RPAREN          reduce using rule 293 (expr -> expr LOGICAL_XOR expr .)
    COMMA           reduce using rule 293 (expr -> expr LOGICAL_XOR expr .)
    DOUBLE_ARROW    reduce using rule 293 (expr -> expr LOGICAL_XOR expr .)
    RBRACKET        reduce using rule 293 (expr -> expr LOGICAL_XOR expr .)
    RBRACE          reduce using rule 293 (expr -> expr LOGICAL_XOR expr .)
    COLON           reduce using rule 293 (expr -> expr LOGICAL_XOR expr .)
    AS              reduce using rule 293 (expr -> expr LOGICAL_XOR expr .)
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158

  ! BOOLEAN_AND     [ reduce using rule 293 (expr -> expr LOGICAL_XOR expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 293 (expr -> expr LOGICAL_XOR expr .) ]
  ! LOGICAL_AND     [ reduce using rule 293 (expr -> expr LOGICAL_XOR expr .) ]
  ! AND             [ reduce using rule 293 (expr -> expr LOGICAL_XOR expr .) ]
  ! OR              [ reduce using rule 293 (expr -> expr LOGICAL_XOR expr .) ]
  ! XOR             [ reduce using rule 293 (expr -> expr LOGICAL_XOR expr .) ]
  ! CONCAT          [ reduce using rule 293 (expr -> expr LOGICAL_XOR expr .) ]
  ! PLUS            [ reduce using rule 293 (expr -> expr LOGICAL_XOR expr .) ]
  ! MINUS           [ reduce using rule 293 (expr -> expr LOGICAL_XOR expr .) ]
  ! MUL             [ reduce using rule 293 (expr -> expr LOGICAL_XOR expr .) ]
  ! DIV             [ reduce using rule 293 (expr -> expr LOGICAL_XOR expr .) ]
  ! SL              [ reduce using rule 293 (expr -> expr LOGICAL_XOR expr .) ]
  ! SR              [ reduce using rule 293 (expr -> expr LOGICAL_XOR expr .) ]
  ! MOD             [ reduce using rule 293 (expr -> expr LOGICAL_XOR expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 293 (expr -> expr LOGICAL_XOR expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 293 (expr -> expr LOGICAL_XOR expr .) ]
  ! IS_EQUAL        [ reduce using rule 293 (expr -> expr LOGICAL_XOR expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 293 (expr -> expr LOGICAL_XOR expr .) ]
  ! IS_SMALLER      [ reduce using rule 293 (expr -> expr LOGICAL_XOR expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 293 (expr -> expr LOGICAL_XOR expr .) ]
  ! IS_GREATER      [ reduce using rule 293 (expr -> expr LOGICAL_XOR expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 293 (expr -> expr LOGICAL_XOR expr .) ]
  ! INSTANCEOF      [ reduce using rule 293 (expr -> expr LOGICAL_XOR expr .) ]
  ! QUESTION        [ reduce using rule 293 (expr -> expr LOGICAL_XOR expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]


state 314

    (294) expr -> expr AND expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 294 (expr -> expr AND expr .)
    OBJECT_OPERATOR reduce using rule 294 (expr -> expr AND expr .)
    LBRACE          reduce using rule 294 (expr -> expr AND expr .)
    BOOLEAN_AND     reduce using rule 294 (expr -> expr AND expr .)
    BOOLEAN_OR      reduce using rule 294 (expr -> expr AND expr .)
    LOGICAL_AND     reduce using rule 294 (expr -> expr AND expr .)
    LOGICAL_OR      reduce using rule 294 (expr -> expr AND expr .)
    LOGICAL_XOR     reduce using rule 294 (expr -> expr AND expr .)
    AND             reduce using rule 294 (expr -> expr AND expr .)
    OR              reduce using rule 294 (expr -> expr AND expr .)
    XOR             reduce using rule 294 (expr -> expr AND expr .)
    QUESTION        reduce using rule 294 (expr -> expr AND expr .)
    RPAREN          reduce using rule 294 (expr -> expr AND expr .)
    COMMA           reduce using rule 294 (expr -> expr AND expr .)
    DOUBLE_ARROW    reduce using rule 294 (expr -> expr AND expr .)
    RBRACKET        reduce using rule 294 (expr -> expr AND expr .)
    RBRACE          reduce using rule 294 (expr -> expr AND expr .)
    COLON           reduce using rule 294 (expr -> expr AND expr .)
    AS              reduce using rule 294 (expr -> expr AND expr .)
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157

  ! CONCAT          [ reduce using rule 294 (expr -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 294 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 294 (expr -> expr AND expr .) ]
  ! MUL             [ reduce using rule 294 (expr -> expr AND expr .) ]
  ! DIV             [ reduce using rule 294 (expr -> expr AND expr .) ]
  ! SL              [ reduce using rule 294 (expr -> expr AND expr .) ]
  ! SR              [ reduce using rule 294 (expr -> expr AND expr .) ]
  ! MOD             [ reduce using rule 294 (expr -> expr AND expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 294 (expr -> expr AND expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 294 (expr -> expr AND expr .) ]
  ! IS_EQUAL        [ reduce using rule 294 (expr -> expr AND expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 294 (expr -> expr AND expr .) ]
  ! IS_SMALLER      [ reduce using rule 294 (expr -> expr AND expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 294 (expr -> expr AND expr .) ]
  ! IS_GREATER      [ reduce using rule 294 (expr -> expr AND expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 294 (expr -> expr AND expr .) ]
  ! INSTANCEOF      [ reduce using rule 294 (expr -> expr AND expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! QUESTION        [ shift and go to state 158 ]


state 315

    (295) expr -> expr OR expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 295 (expr -> expr OR expr .)
    OBJECT_OPERATOR reduce using rule 295 (expr -> expr OR expr .)
    LBRACE          reduce using rule 295 (expr -> expr OR expr .)
    BOOLEAN_AND     reduce using rule 295 (expr -> expr OR expr .)
    BOOLEAN_OR      reduce using rule 295 (expr -> expr OR expr .)
    LOGICAL_AND     reduce using rule 295 (expr -> expr OR expr .)
    LOGICAL_OR      reduce using rule 295 (expr -> expr OR expr .)
    LOGICAL_XOR     reduce using rule 295 (expr -> expr OR expr .)
    OR              reduce using rule 295 (expr -> expr OR expr .)
    QUESTION        reduce using rule 295 (expr -> expr OR expr .)
    RPAREN          reduce using rule 295 (expr -> expr OR expr .)
    COMMA           reduce using rule 295 (expr -> expr OR expr .)
    DOUBLE_ARROW    reduce using rule 295 (expr -> expr OR expr .)
    RBRACKET        reduce using rule 295 (expr -> expr OR expr .)
    RBRACE          reduce using rule 295 (expr -> expr OR expr .)
    COLON           reduce using rule 295 (expr -> expr OR expr .)
    AS              reduce using rule 295 (expr -> expr OR expr .)
    AND             shift and go to state 138
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157

  ! AND             [ reduce using rule 295 (expr -> expr OR expr .) ]
  ! XOR             [ reduce using rule 295 (expr -> expr OR expr .) ]
  ! CONCAT          [ reduce using rule 295 (expr -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 295 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 295 (expr -> expr OR expr .) ]
  ! MUL             [ reduce using rule 295 (expr -> expr OR expr .) ]
  ! DIV             [ reduce using rule 295 (expr -> expr OR expr .) ]
  ! SL              [ reduce using rule 295 (expr -> expr OR expr .) ]
  ! SR              [ reduce using rule 295 (expr -> expr OR expr .) ]
  ! MOD             [ reduce using rule 295 (expr -> expr OR expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 295 (expr -> expr OR expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 295 (expr -> expr OR expr .) ]
  ! IS_EQUAL        [ reduce using rule 295 (expr -> expr OR expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 295 (expr -> expr OR expr .) ]
  ! IS_SMALLER      [ reduce using rule 295 (expr -> expr OR expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 295 (expr -> expr OR expr .) ]
  ! IS_GREATER      [ reduce using rule 295 (expr -> expr OR expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 295 (expr -> expr OR expr .) ]
  ! INSTANCEOF      [ reduce using rule 295 (expr -> expr OR expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! OR              [ shift and go to state 139 ]
  ! QUESTION        [ shift and go to state 158 ]


state 316

    (296) expr -> expr XOR expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 296 (expr -> expr XOR expr .)
    OBJECT_OPERATOR reduce using rule 296 (expr -> expr XOR expr .)
    LBRACE          reduce using rule 296 (expr -> expr XOR expr .)
    BOOLEAN_AND     reduce using rule 296 (expr -> expr XOR expr .)
    BOOLEAN_OR      reduce using rule 296 (expr -> expr XOR expr .)
    LOGICAL_AND     reduce using rule 296 (expr -> expr XOR expr .)
    LOGICAL_OR      reduce using rule 296 (expr -> expr XOR expr .)
    LOGICAL_XOR     reduce using rule 296 (expr -> expr XOR expr .)
    OR              reduce using rule 296 (expr -> expr XOR expr .)
    XOR             reduce using rule 296 (expr -> expr XOR expr .)
    QUESTION        reduce using rule 296 (expr -> expr XOR expr .)
    RPAREN          reduce using rule 296 (expr -> expr XOR expr .)
    COMMA           reduce using rule 296 (expr -> expr XOR expr .)
    DOUBLE_ARROW    reduce using rule 296 (expr -> expr XOR expr .)
    RBRACKET        reduce using rule 296 (expr -> expr XOR expr .)
    RBRACE          reduce using rule 296 (expr -> expr XOR expr .)
    COLON           reduce using rule 296 (expr -> expr XOR expr .)
    AS              reduce using rule 296 (expr -> expr XOR expr .)
    AND             shift and go to state 138
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157

  ! AND             [ reduce using rule 296 (expr -> expr XOR expr .) ]
  ! CONCAT          [ reduce using rule 296 (expr -> expr XOR expr .) ]
  ! PLUS            [ reduce using rule 296 (expr -> expr XOR expr .) ]
  ! MINUS           [ reduce using rule 296 (expr -> expr XOR expr .) ]
  ! MUL             [ reduce using rule 296 (expr -> expr XOR expr .) ]
  ! DIV             [ reduce using rule 296 (expr -> expr XOR expr .) ]
  ! SL              [ reduce using rule 296 (expr -> expr XOR expr .) ]
  ! SR              [ reduce using rule 296 (expr -> expr XOR expr .) ]
  ! MOD             [ reduce using rule 296 (expr -> expr XOR expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 296 (expr -> expr XOR expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 296 (expr -> expr XOR expr .) ]
  ! IS_EQUAL        [ reduce using rule 296 (expr -> expr XOR expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 296 (expr -> expr XOR expr .) ]
  ! IS_SMALLER      [ reduce using rule 296 (expr -> expr XOR expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 296 (expr -> expr XOR expr .) ]
  ! IS_GREATER      [ reduce using rule 296 (expr -> expr XOR expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 296 (expr -> expr XOR expr .) ]
  ! INSTANCEOF      [ reduce using rule 296 (expr -> expr XOR expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! QUESTION        [ shift and go to state 158 ]


state 317

    (297) expr -> expr CONCAT expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 297 (expr -> expr CONCAT expr .)
    OBJECT_OPERATOR reduce using rule 297 (expr -> expr CONCAT expr .)
    LBRACE          reduce using rule 297 (expr -> expr CONCAT expr .)
    BOOLEAN_AND     reduce using rule 297 (expr -> expr CONCAT expr .)
    BOOLEAN_OR      reduce using rule 297 (expr -> expr CONCAT expr .)
    LOGICAL_AND     reduce using rule 297 (expr -> expr CONCAT expr .)
    LOGICAL_OR      reduce using rule 297 (expr -> expr CONCAT expr .)
    LOGICAL_XOR     reduce using rule 297 (expr -> expr CONCAT expr .)
    AND             reduce using rule 297 (expr -> expr CONCAT expr .)
    OR              reduce using rule 297 (expr -> expr CONCAT expr .)
    XOR             reduce using rule 297 (expr -> expr CONCAT expr .)
    CONCAT          reduce using rule 297 (expr -> expr CONCAT expr .)
    PLUS            reduce using rule 297 (expr -> expr CONCAT expr .)
    MINUS           reduce using rule 297 (expr -> expr CONCAT expr .)
    SL              reduce using rule 297 (expr -> expr CONCAT expr .)
    SR              reduce using rule 297 (expr -> expr CONCAT expr .)
    IS_IDENTICAL    reduce using rule 297 (expr -> expr CONCAT expr .)
    IS_NOT_IDENTICAL reduce using rule 297 (expr -> expr CONCAT expr .)
    IS_EQUAL        reduce using rule 297 (expr -> expr CONCAT expr .)
    IS_NOT_EQUAL    reduce using rule 297 (expr -> expr CONCAT expr .)
    IS_SMALLER      reduce using rule 297 (expr -> expr CONCAT expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 297 (expr -> expr CONCAT expr .)
    IS_GREATER      reduce using rule 297 (expr -> expr CONCAT expr .)
    IS_GREATER_OR_EQUAL reduce using rule 297 (expr -> expr CONCAT expr .)
    QUESTION        reduce using rule 297 (expr -> expr CONCAT expr .)
    RPAREN          reduce using rule 297 (expr -> expr CONCAT expr .)
    COMMA           reduce using rule 297 (expr -> expr CONCAT expr .)
    DOUBLE_ARROW    reduce using rule 297 (expr -> expr CONCAT expr .)
    RBRACKET        reduce using rule 297 (expr -> expr CONCAT expr .)
    RBRACE          reduce using rule 297 (expr -> expr CONCAT expr .)
    COLON           reduce using rule 297 (expr -> expr CONCAT expr .)
    AS              reduce using rule 297 (expr -> expr CONCAT expr .)
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    MOD             shift and go to state 148
    INSTANCEOF      shift and go to state 157

  ! MUL             [ reduce using rule 297 (expr -> expr CONCAT expr .) ]
  ! DIV             [ reduce using rule 297 (expr -> expr CONCAT expr .) ]
  ! MOD             [ reduce using rule 297 (expr -> expr CONCAT expr .) ]
  ! INSTANCEOF      [ reduce using rule 297 (expr -> expr CONCAT expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! CONCAT          [ shift and go to state 141 ]
  ! PLUS            [ shift and go to state 142 ]
  ! MINUS           [ shift and go to state 143 ]
  ! SL              [ shift and go to state 146 ]
  ! SR              [ shift and go to state 147 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! IS_SMALLER      [ shift and go to state 153 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 154 ]
  ! IS_GREATER      [ shift and go to state 155 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 156 ]
  ! QUESTION        [ shift and go to state 158 ]


state 318

    (298) expr -> expr PLUS expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 298 (expr -> expr PLUS expr .)
    OBJECT_OPERATOR reduce using rule 298 (expr -> expr PLUS expr .)
    LBRACE          reduce using rule 298 (expr -> expr PLUS expr .)
    BOOLEAN_AND     reduce using rule 298 (expr -> expr PLUS expr .)
    BOOLEAN_OR      reduce using rule 298 (expr -> expr PLUS expr .)
    LOGICAL_AND     reduce using rule 298 (expr -> expr PLUS expr .)
    LOGICAL_OR      reduce using rule 298 (expr -> expr PLUS expr .)
    LOGICAL_XOR     reduce using rule 298 (expr -> expr PLUS expr .)
    AND             reduce using rule 298 (expr -> expr PLUS expr .)
    OR              reduce using rule 298 (expr -> expr PLUS expr .)
    XOR             reduce using rule 298 (expr -> expr PLUS expr .)
    CONCAT          reduce using rule 298 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 298 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 298 (expr -> expr PLUS expr .)
    SL              reduce using rule 298 (expr -> expr PLUS expr .)
    SR              reduce using rule 298 (expr -> expr PLUS expr .)
    IS_IDENTICAL    reduce using rule 298 (expr -> expr PLUS expr .)
    IS_NOT_IDENTICAL reduce using rule 298 (expr -> expr PLUS expr .)
    IS_EQUAL        reduce using rule 298 (expr -> expr PLUS expr .)
    IS_NOT_EQUAL    reduce using rule 298 (expr -> expr PLUS expr .)
    IS_SMALLER      reduce using rule 298 (expr -> expr PLUS expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 298 (expr -> expr PLUS expr .)
    IS_GREATER      reduce using rule 298 (expr -> expr PLUS expr .)
    IS_GREATER_OR_EQUAL reduce using rule 298 (expr -> expr PLUS expr .)
    QUESTION        reduce using rule 298 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 298 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 298 (expr -> expr PLUS expr .)
    DOUBLE_ARROW    reduce using rule 298 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 298 (expr -> expr PLUS expr .)
    RBRACE          reduce using rule 298 (expr -> expr PLUS expr .)
    COLON           reduce using rule 298 (expr -> expr PLUS expr .)
    AS              reduce using rule 298 (expr -> expr PLUS expr .)
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    MOD             shift and go to state 148
    INSTANCEOF      shift and go to state 157

  ! MUL             [ reduce using rule 298 (expr -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 298 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 298 (expr -> expr PLUS expr .) ]
  ! INSTANCEOF      [ reduce using rule 298 (expr -> expr PLUS expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! CONCAT          [ shift and go to state 141 ]
  ! PLUS            [ shift and go to state 142 ]
  ! MINUS           [ shift and go to state 143 ]
  ! SL              [ shift and go to state 146 ]
  ! SR              [ shift and go to state 147 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! IS_SMALLER      [ shift and go to state 153 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 154 ]
  ! IS_GREATER      [ shift and go to state 155 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 156 ]
  ! QUESTION        [ shift and go to state 158 ]


state 319

    (299) expr -> expr MINUS expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 299 (expr -> expr MINUS expr .)
    OBJECT_OPERATOR reduce using rule 299 (expr -> expr MINUS expr .)
    LBRACE          reduce using rule 299 (expr -> expr MINUS expr .)
    BOOLEAN_AND     reduce using rule 299 (expr -> expr MINUS expr .)
    BOOLEAN_OR      reduce using rule 299 (expr -> expr MINUS expr .)
    LOGICAL_AND     reduce using rule 299 (expr -> expr MINUS expr .)
    LOGICAL_OR      reduce using rule 299 (expr -> expr MINUS expr .)
    LOGICAL_XOR     reduce using rule 299 (expr -> expr MINUS expr .)
    AND             reduce using rule 299 (expr -> expr MINUS expr .)
    OR              reduce using rule 299 (expr -> expr MINUS expr .)
    XOR             reduce using rule 299 (expr -> expr MINUS expr .)
    CONCAT          reduce using rule 299 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 299 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 299 (expr -> expr MINUS expr .)
    SL              reduce using rule 299 (expr -> expr MINUS expr .)
    SR              reduce using rule 299 (expr -> expr MINUS expr .)
    IS_IDENTICAL    reduce using rule 299 (expr -> expr MINUS expr .)
    IS_NOT_IDENTICAL reduce using rule 299 (expr -> expr MINUS expr .)
    IS_EQUAL        reduce using rule 299 (expr -> expr MINUS expr .)
    IS_NOT_EQUAL    reduce using rule 299 (expr -> expr MINUS expr .)
    IS_SMALLER      reduce using rule 299 (expr -> expr MINUS expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 299 (expr -> expr MINUS expr .)
    IS_GREATER      reduce using rule 299 (expr -> expr MINUS expr .)
    IS_GREATER_OR_EQUAL reduce using rule 299 (expr -> expr MINUS expr .)
    QUESTION        reduce using rule 299 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 299 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 299 (expr -> expr MINUS expr .)
    DOUBLE_ARROW    reduce using rule 299 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 299 (expr -> expr MINUS expr .)
    RBRACE          reduce using rule 299 (expr -> expr MINUS expr .)
    COLON           reduce using rule 299 (expr -> expr MINUS expr .)
    AS              reduce using rule 299 (expr -> expr MINUS expr .)
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    MOD             shift and go to state 148
    INSTANCEOF      shift and go to state 157

  ! MUL             [ reduce using rule 299 (expr -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 299 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 299 (expr -> expr MINUS expr .) ]
  ! INSTANCEOF      [ reduce using rule 299 (expr -> expr MINUS expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! CONCAT          [ shift and go to state 141 ]
  ! PLUS            [ shift and go to state 142 ]
  ! MINUS           [ shift and go to state 143 ]
  ! SL              [ shift and go to state 146 ]
  ! SR              [ shift and go to state 147 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! IS_SMALLER      [ shift and go to state 153 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 154 ]
  ! IS_GREATER      [ shift and go to state 155 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 156 ]
  ! QUESTION        [ shift and go to state 158 ]


state 320

    (300) expr -> expr MUL expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 300 (expr -> expr MUL expr .)
    OBJECT_OPERATOR reduce using rule 300 (expr -> expr MUL expr .)
    LBRACE          reduce using rule 300 (expr -> expr MUL expr .)
    BOOLEAN_AND     reduce using rule 300 (expr -> expr MUL expr .)
    BOOLEAN_OR      reduce using rule 300 (expr -> expr MUL expr .)
    LOGICAL_AND     reduce using rule 300 (expr -> expr MUL expr .)
    LOGICAL_OR      reduce using rule 300 (expr -> expr MUL expr .)
    LOGICAL_XOR     reduce using rule 300 (expr -> expr MUL expr .)
    AND             reduce using rule 300 (expr -> expr MUL expr .)
    OR              reduce using rule 300 (expr -> expr MUL expr .)
    XOR             reduce using rule 300 (expr -> expr MUL expr .)
    CONCAT          reduce using rule 300 (expr -> expr MUL expr .)
    PLUS            reduce using rule 300 (expr -> expr MUL expr .)
    MINUS           reduce using rule 300 (expr -> expr MUL expr .)
    MUL             reduce using rule 300 (expr -> expr MUL expr .)
    DIV             reduce using rule 300 (expr -> expr MUL expr .)
    SL              reduce using rule 300 (expr -> expr MUL expr .)
    SR              reduce using rule 300 (expr -> expr MUL expr .)
    MOD             reduce using rule 300 (expr -> expr MUL expr .)
    IS_IDENTICAL    reduce using rule 300 (expr -> expr MUL expr .)
    IS_NOT_IDENTICAL reduce using rule 300 (expr -> expr MUL expr .)
    IS_EQUAL        reduce using rule 300 (expr -> expr MUL expr .)
    IS_NOT_EQUAL    reduce using rule 300 (expr -> expr MUL expr .)
    IS_SMALLER      reduce using rule 300 (expr -> expr MUL expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 300 (expr -> expr MUL expr .)
    IS_GREATER      reduce using rule 300 (expr -> expr MUL expr .)
    IS_GREATER_OR_EQUAL reduce using rule 300 (expr -> expr MUL expr .)
    QUESTION        reduce using rule 300 (expr -> expr MUL expr .)
    RPAREN          reduce using rule 300 (expr -> expr MUL expr .)
    COMMA           reduce using rule 300 (expr -> expr MUL expr .)
    DOUBLE_ARROW    reduce using rule 300 (expr -> expr MUL expr .)
    RBRACKET        reduce using rule 300 (expr -> expr MUL expr .)
    RBRACE          reduce using rule 300 (expr -> expr MUL expr .)
    COLON           reduce using rule 300 (expr -> expr MUL expr .)
    AS              reduce using rule 300 (expr -> expr MUL expr .)
    INSTANCEOF      shift and go to state 157

  ! INSTANCEOF      [ reduce using rule 300 (expr -> expr MUL expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! CONCAT          [ shift and go to state 141 ]
  ! PLUS            [ shift and go to state 142 ]
  ! MINUS           [ shift and go to state 143 ]
  ! MUL             [ shift and go to state 144 ]
  ! DIV             [ shift and go to state 145 ]
  ! SL              [ shift and go to state 146 ]
  ! SR              [ shift and go to state 147 ]
  ! MOD             [ shift and go to state 148 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! IS_SMALLER      [ shift and go to state 153 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 154 ]
  ! IS_GREATER      [ shift and go to state 155 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 156 ]
  ! QUESTION        [ shift and go to state 158 ]


state 321

    (301) expr -> expr DIV expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 301 (expr -> expr DIV expr .)
    OBJECT_OPERATOR reduce using rule 301 (expr -> expr DIV expr .)
    LBRACE          reduce using rule 301 (expr -> expr DIV expr .)
    BOOLEAN_AND     reduce using rule 301 (expr -> expr DIV expr .)
    BOOLEAN_OR      reduce using rule 301 (expr -> expr DIV expr .)
    LOGICAL_AND     reduce using rule 301 (expr -> expr DIV expr .)
    LOGICAL_OR      reduce using rule 301 (expr -> expr DIV expr .)
    LOGICAL_XOR     reduce using rule 301 (expr -> expr DIV expr .)
    AND             reduce using rule 301 (expr -> expr DIV expr .)
    OR              reduce using rule 301 (expr -> expr DIV expr .)
    XOR             reduce using rule 301 (expr -> expr DIV expr .)
    CONCAT          reduce using rule 301 (expr -> expr DIV expr .)
    PLUS            reduce using rule 301 (expr -> expr DIV expr .)
    MINUS           reduce using rule 301 (expr -> expr DIV expr .)
    MUL             reduce using rule 301 (expr -> expr DIV expr .)
    DIV             reduce using rule 301 (expr -> expr DIV expr .)
    SL              reduce using rule 301 (expr -> expr DIV expr .)
    SR              reduce using rule 301 (expr -> expr DIV expr .)
    MOD             reduce using rule 301 (expr -> expr DIV expr .)
    IS_IDENTICAL    reduce using rule 301 (expr -> expr DIV expr .)
    IS_NOT_IDENTICAL reduce using rule 301 (expr -> expr DIV expr .)
    IS_EQUAL        reduce using rule 301 (expr -> expr DIV expr .)
    IS_NOT_EQUAL    reduce using rule 301 (expr -> expr DIV expr .)
    IS_SMALLER      reduce using rule 301 (expr -> expr DIV expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 301 (expr -> expr DIV expr .)
    IS_GREATER      reduce using rule 301 (expr -> expr DIV expr .)
    IS_GREATER_OR_EQUAL reduce using rule 301 (expr -> expr DIV expr .)
    QUESTION        reduce using rule 301 (expr -> expr DIV expr .)
    RPAREN          reduce using rule 301 (expr -> expr DIV expr .)
    COMMA           reduce using rule 301 (expr -> expr DIV expr .)
    DOUBLE_ARROW    reduce using rule 301 (expr -> expr DIV expr .)
    RBRACKET        reduce using rule 301 (expr -> expr DIV expr .)
    RBRACE          reduce using rule 301 (expr -> expr DIV expr .)
    COLON           reduce using rule 301 (expr -> expr DIV expr .)
    AS              reduce using rule 301 (expr -> expr DIV expr .)
    INSTANCEOF      shift and go to state 157

  ! INSTANCEOF      [ reduce using rule 301 (expr -> expr DIV expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! CONCAT          [ shift and go to state 141 ]
  ! PLUS            [ shift and go to state 142 ]
  ! MINUS           [ shift and go to state 143 ]
  ! MUL             [ shift and go to state 144 ]
  ! DIV             [ shift and go to state 145 ]
  ! SL              [ shift and go to state 146 ]
  ! SR              [ shift and go to state 147 ]
  ! MOD             [ shift and go to state 148 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! IS_SMALLER      [ shift and go to state 153 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 154 ]
  ! IS_GREATER      [ shift and go to state 155 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 156 ]
  ! QUESTION        [ shift and go to state 158 ]


state 322

    (302) expr -> expr SL expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 302 (expr -> expr SL expr .)
    OBJECT_OPERATOR reduce using rule 302 (expr -> expr SL expr .)
    LBRACE          reduce using rule 302 (expr -> expr SL expr .)
    BOOLEAN_AND     reduce using rule 302 (expr -> expr SL expr .)
    BOOLEAN_OR      reduce using rule 302 (expr -> expr SL expr .)
    LOGICAL_AND     reduce using rule 302 (expr -> expr SL expr .)
    LOGICAL_OR      reduce using rule 302 (expr -> expr SL expr .)
    LOGICAL_XOR     reduce using rule 302 (expr -> expr SL expr .)
    AND             reduce using rule 302 (expr -> expr SL expr .)
    OR              reduce using rule 302 (expr -> expr SL expr .)
    XOR             reduce using rule 302 (expr -> expr SL expr .)
    SL              reduce using rule 302 (expr -> expr SL expr .)
    SR              reduce using rule 302 (expr -> expr SL expr .)
    IS_IDENTICAL    reduce using rule 302 (expr -> expr SL expr .)
    IS_NOT_IDENTICAL reduce using rule 302 (expr -> expr SL expr .)
    IS_EQUAL        reduce using rule 302 (expr -> expr SL expr .)
    IS_NOT_EQUAL    reduce using rule 302 (expr -> expr SL expr .)
    IS_SMALLER      reduce using rule 302 (expr -> expr SL expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 302 (expr -> expr SL expr .)
    IS_GREATER      reduce using rule 302 (expr -> expr SL expr .)
    IS_GREATER_OR_EQUAL reduce using rule 302 (expr -> expr SL expr .)
    QUESTION        reduce using rule 302 (expr -> expr SL expr .)
    RPAREN          reduce using rule 302 (expr -> expr SL expr .)
    COMMA           reduce using rule 302 (expr -> expr SL expr .)
    DOUBLE_ARROW    reduce using rule 302 (expr -> expr SL expr .)
    RBRACKET        reduce using rule 302 (expr -> expr SL expr .)
    RBRACE          reduce using rule 302 (expr -> expr SL expr .)
    COLON           reduce using rule 302 (expr -> expr SL expr .)
    AS              reduce using rule 302 (expr -> expr SL expr .)
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    MOD             shift and go to state 148
    INSTANCEOF      shift and go to state 157

  ! CONCAT          [ reduce using rule 302 (expr -> expr SL expr .) ]
  ! PLUS            [ reduce using rule 302 (expr -> expr SL expr .) ]
  ! MINUS           [ reduce using rule 302 (expr -> expr SL expr .) ]
  ! MUL             [ reduce using rule 302 (expr -> expr SL expr .) ]
  ! DIV             [ reduce using rule 302 (expr -> expr SL expr .) ]
  ! MOD             [ reduce using rule 302 (expr -> expr SL expr .) ]
  ! INSTANCEOF      [ reduce using rule 302 (expr -> expr SL expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! SL              [ shift and go to state 146 ]
  ! SR              [ shift and go to state 147 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! IS_SMALLER      [ shift and go to state 153 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 154 ]
  ! IS_GREATER      [ shift and go to state 155 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 156 ]
  ! QUESTION        [ shift and go to state 158 ]


state 323

    (303) expr -> expr SR expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 303 (expr -> expr SR expr .)
    OBJECT_OPERATOR reduce using rule 303 (expr -> expr SR expr .)
    LBRACE          reduce using rule 303 (expr -> expr SR expr .)
    BOOLEAN_AND     reduce using rule 303 (expr -> expr SR expr .)
    BOOLEAN_OR      reduce using rule 303 (expr -> expr SR expr .)
    LOGICAL_AND     reduce using rule 303 (expr -> expr SR expr .)
    LOGICAL_OR      reduce using rule 303 (expr -> expr SR expr .)
    LOGICAL_XOR     reduce using rule 303 (expr -> expr SR expr .)
    AND             reduce using rule 303 (expr -> expr SR expr .)
    OR              reduce using rule 303 (expr -> expr SR expr .)
    XOR             reduce using rule 303 (expr -> expr SR expr .)
    SL              reduce using rule 303 (expr -> expr SR expr .)
    SR              reduce using rule 303 (expr -> expr SR expr .)
    IS_IDENTICAL    reduce using rule 303 (expr -> expr SR expr .)
    IS_NOT_IDENTICAL reduce using rule 303 (expr -> expr SR expr .)
    IS_EQUAL        reduce using rule 303 (expr -> expr SR expr .)
    IS_NOT_EQUAL    reduce using rule 303 (expr -> expr SR expr .)
    IS_SMALLER      reduce using rule 303 (expr -> expr SR expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 303 (expr -> expr SR expr .)
    IS_GREATER      reduce using rule 303 (expr -> expr SR expr .)
    IS_GREATER_OR_EQUAL reduce using rule 303 (expr -> expr SR expr .)
    QUESTION        reduce using rule 303 (expr -> expr SR expr .)
    RPAREN          reduce using rule 303 (expr -> expr SR expr .)
    COMMA           reduce using rule 303 (expr -> expr SR expr .)
    DOUBLE_ARROW    reduce using rule 303 (expr -> expr SR expr .)
    RBRACKET        reduce using rule 303 (expr -> expr SR expr .)
    RBRACE          reduce using rule 303 (expr -> expr SR expr .)
    COLON           reduce using rule 303 (expr -> expr SR expr .)
    AS              reduce using rule 303 (expr -> expr SR expr .)
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    MOD             shift and go to state 148
    INSTANCEOF      shift and go to state 157

  ! CONCAT          [ reduce using rule 303 (expr -> expr SR expr .) ]
  ! PLUS            [ reduce using rule 303 (expr -> expr SR expr .) ]
  ! MINUS           [ reduce using rule 303 (expr -> expr SR expr .) ]
  ! MUL             [ reduce using rule 303 (expr -> expr SR expr .) ]
  ! DIV             [ reduce using rule 303 (expr -> expr SR expr .) ]
  ! MOD             [ reduce using rule 303 (expr -> expr SR expr .) ]
  ! INSTANCEOF      [ reduce using rule 303 (expr -> expr SR expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! SL              [ shift and go to state 146 ]
  ! SR              [ shift and go to state 147 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! IS_SMALLER      [ shift and go to state 153 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 154 ]
  ! IS_GREATER      [ shift and go to state 155 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 156 ]
  ! QUESTION        [ shift and go to state 158 ]


state 324

    (304) expr -> expr MOD expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 304 (expr -> expr MOD expr .)
    OBJECT_OPERATOR reduce using rule 304 (expr -> expr MOD expr .)
    LBRACE          reduce using rule 304 (expr -> expr MOD expr .)
    BOOLEAN_AND     reduce using rule 304 (expr -> expr MOD expr .)
    BOOLEAN_OR      reduce using rule 304 (expr -> expr MOD expr .)
    LOGICAL_AND     reduce using rule 304 (expr -> expr MOD expr .)
    LOGICAL_OR      reduce using rule 304 (expr -> expr MOD expr .)
    LOGICAL_XOR     reduce using rule 304 (expr -> expr MOD expr .)
    AND             reduce using rule 304 (expr -> expr MOD expr .)
    OR              reduce using rule 304 (expr -> expr MOD expr .)
    XOR             reduce using rule 304 (expr -> expr MOD expr .)
    CONCAT          reduce using rule 304 (expr -> expr MOD expr .)
    PLUS            reduce using rule 304 (expr -> expr MOD expr .)
    MINUS           reduce using rule 304 (expr -> expr MOD expr .)
    MUL             reduce using rule 304 (expr -> expr MOD expr .)
    DIV             reduce using rule 304 (expr -> expr MOD expr .)
    SL              reduce using rule 304 (expr -> expr MOD expr .)
    SR              reduce using rule 304 (expr -> expr MOD expr .)
    MOD             reduce using rule 304 (expr -> expr MOD expr .)
    IS_IDENTICAL    reduce using rule 304 (expr -> expr MOD expr .)
    IS_NOT_IDENTICAL reduce using rule 304 (expr -> expr MOD expr .)
    IS_EQUAL        reduce using rule 304 (expr -> expr MOD expr .)
    IS_NOT_EQUAL    reduce using rule 304 (expr -> expr MOD expr .)
    IS_SMALLER      reduce using rule 304 (expr -> expr MOD expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 304 (expr -> expr MOD expr .)
    IS_GREATER      reduce using rule 304 (expr -> expr MOD expr .)
    IS_GREATER_OR_EQUAL reduce using rule 304 (expr -> expr MOD expr .)
    QUESTION        reduce using rule 304 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 304 (expr -> expr MOD expr .)
    COMMA           reduce using rule 304 (expr -> expr MOD expr .)
    DOUBLE_ARROW    reduce using rule 304 (expr -> expr MOD expr .)
    RBRACKET        reduce using rule 304 (expr -> expr MOD expr .)
    RBRACE          reduce using rule 304 (expr -> expr MOD expr .)
    COLON           reduce using rule 304 (expr -> expr MOD expr .)
    AS              reduce using rule 304 (expr -> expr MOD expr .)
    INSTANCEOF      shift and go to state 157

  ! INSTANCEOF      [ reduce using rule 304 (expr -> expr MOD expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! CONCAT          [ shift and go to state 141 ]
  ! PLUS            [ shift and go to state 142 ]
  ! MINUS           [ shift and go to state 143 ]
  ! MUL             [ shift and go to state 144 ]
  ! DIV             [ shift and go to state 145 ]
  ! SL              [ shift and go to state 146 ]
  ! SR              [ shift and go to state 147 ]
  ! MOD             [ shift and go to state 148 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! IS_SMALLER      [ shift and go to state 153 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 154 ]
  ! IS_GREATER      [ shift and go to state 155 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 156 ]
  ! QUESTION        [ shift and go to state 158 ]


state 325

    (305) expr -> expr IS_IDENTICAL expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 305 (expr -> expr IS_IDENTICAL expr .)
    OBJECT_OPERATOR reduce using rule 305 (expr -> expr IS_IDENTICAL expr .)
    LBRACE          reduce using rule 305 (expr -> expr IS_IDENTICAL expr .)
    BOOLEAN_AND     reduce using rule 305 (expr -> expr IS_IDENTICAL expr .)
    BOOLEAN_OR      reduce using rule 305 (expr -> expr IS_IDENTICAL expr .)
    LOGICAL_AND     reduce using rule 305 (expr -> expr IS_IDENTICAL expr .)
    LOGICAL_OR      reduce using rule 305 (expr -> expr IS_IDENTICAL expr .)
    LOGICAL_XOR     reduce using rule 305 (expr -> expr IS_IDENTICAL expr .)
    AND             reduce using rule 305 (expr -> expr IS_IDENTICAL expr .)
    OR              reduce using rule 305 (expr -> expr IS_IDENTICAL expr .)
    XOR             reduce using rule 305 (expr -> expr IS_IDENTICAL expr .)
    IS_IDENTICAL    reduce using rule 305 (expr -> expr IS_IDENTICAL expr .)
    IS_NOT_IDENTICAL reduce using rule 305 (expr -> expr IS_IDENTICAL expr .)
    IS_EQUAL        reduce using rule 305 (expr -> expr IS_IDENTICAL expr .)
    IS_NOT_EQUAL    reduce using rule 305 (expr -> expr IS_IDENTICAL expr .)
    QUESTION        reduce using rule 305 (expr -> expr IS_IDENTICAL expr .)
    RPAREN          reduce using rule 305 (expr -> expr IS_IDENTICAL expr .)
    COMMA           reduce using rule 305 (expr -> expr IS_IDENTICAL expr .)
    DOUBLE_ARROW    reduce using rule 305 (expr -> expr IS_IDENTICAL expr .)
    RBRACKET        reduce using rule 305 (expr -> expr IS_IDENTICAL expr .)
    RBRACE          reduce using rule 305 (expr -> expr IS_IDENTICAL expr .)
    COLON           reduce using rule 305 (expr -> expr IS_IDENTICAL expr .)
    AS              reduce using rule 305 (expr -> expr IS_IDENTICAL expr .)
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157

  ! CONCAT          [ reduce using rule 305 (expr -> expr IS_IDENTICAL expr .) ]
  ! PLUS            [ reduce using rule 305 (expr -> expr IS_IDENTICAL expr .) ]
  ! MINUS           [ reduce using rule 305 (expr -> expr IS_IDENTICAL expr .) ]
  ! MUL             [ reduce using rule 305 (expr -> expr IS_IDENTICAL expr .) ]
  ! DIV             [ reduce using rule 305 (expr -> expr IS_IDENTICAL expr .) ]
  ! SL              [ reduce using rule 305 (expr -> expr IS_IDENTICAL expr .) ]
  ! SR              [ reduce using rule 305 (expr -> expr IS_IDENTICAL expr .) ]
  ! MOD             [ reduce using rule 305 (expr -> expr IS_IDENTICAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 305 (expr -> expr IS_IDENTICAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 305 (expr -> expr IS_IDENTICAL expr .) ]
  ! IS_GREATER      [ reduce using rule 305 (expr -> expr IS_IDENTICAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 305 (expr -> expr IS_IDENTICAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 305 (expr -> expr IS_IDENTICAL expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! QUESTION        [ shift and go to state 158 ]


state 326

    (306) expr -> expr IS_NOT_IDENTICAL expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .)
    OBJECT_OPERATOR reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .)
    LBRACE          reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .)
    BOOLEAN_AND     reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .)
    BOOLEAN_OR      reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .)
    LOGICAL_AND     reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .)
    LOGICAL_OR      reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .)
    LOGICAL_XOR     reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .)
    AND             reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .)
    OR              reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .)
    XOR             reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .)
    IS_IDENTICAL    reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .)
    IS_NOT_IDENTICAL reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .)
    IS_EQUAL        reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .)
    IS_NOT_EQUAL    reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .)
    QUESTION        reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .)
    RPAREN          reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .)
    COMMA           reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .)
    DOUBLE_ARROW    reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .)
    RBRACKET        reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .)
    RBRACE          reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .)
    COLON           reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .)
    AS              reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .)
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157

  ! CONCAT          [ reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .) ]
  ! PLUS            [ reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .) ]
  ! MINUS           [ reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .) ]
  ! MUL             [ reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .) ]
  ! DIV             [ reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .) ]
  ! SL              [ reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .) ]
  ! SR              [ reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .) ]
  ! MOD             [ reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .) ]
  ! IS_GREATER      [ reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 306 (expr -> expr IS_NOT_IDENTICAL expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! QUESTION        [ shift and go to state 158 ]


state 327

    (307) expr -> expr IS_EQUAL expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 307 (expr -> expr IS_EQUAL expr .)
    OBJECT_OPERATOR reduce using rule 307 (expr -> expr IS_EQUAL expr .)
    LBRACE          reduce using rule 307 (expr -> expr IS_EQUAL expr .)
    BOOLEAN_AND     reduce using rule 307 (expr -> expr IS_EQUAL expr .)
    BOOLEAN_OR      reduce using rule 307 (expr -> expr IS_EQUAL expr .)
    LOGICAL_AND     reduce using rule 307 (expr -> expr IS_EQUAL expr .)
    LOGICAL_OR      reduce using rule 307 (expr -> expr IS_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 307 (expr -> expr IS_EQUAL expr .)
    AND             reduce using rule 307 (expr -> expr IS_EQUAL expr .)
    OR              reduce using rule 307 (expr -> expr IS_EQUAL expr .)
    XOR             reduce using rule 307 (expr -> expr IS_EQUAL expr .)
    IS_IDENTICAL    reduce using rule 307 (expr -> expr IS_EQUAL expr .)
    IS_NOT_IDENTICAL reduce using rule 307 (expr -> expr IS_EQUAL expr .)
    IS_EQUAL        reduce using rule 307 (expr -> expr IS_EQUAL expr .)
    IS_NOT_EQUAL    reduce using rule 307 (expr -> expr IS_EQUAL expr .)
    QUESTION        reduce using rule 307 (expr -> expr IS_EQUAL expr .)
    RPAREN          reduce using rule 307 (expr -> expr IS_EQUAL expr .)
    COMMA           reduce using rule 307 (expr -> expr IS_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 307 (expr -> expr IS_EQUAL expr .)
    RBRACKET        reduce using rule 307 (expr -> expr IS_EQUAL expr .)
    RBRACE          reduce using rule 307 (expr -> expr IS_EQUAL expr .)
    COLON           reduce using rule 307 (expr -> expr IS_EQUAL expr .)
    AS              reduce using rule 307 (expr -> expr IS_EQUAL expr .)
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157

  ! CONCAT          [ reduce using rule 307 (expr -> expr IS_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 307 (expr -> expr IS_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 307 (expr -> expr IS_EQUAL expr .) ]
  ! MUL             [ reduce using rule 307 (expr -> expr IS_EQUAL expr .) ]
  ! DIV             [ reduce using rule 307 (expr -> expr IS_EQUAL expr .) ]
  ! SL              [ reduce using rule 307 (expr -> expr IS_EQUAL expr .) ]
  ! SR              [ reduce using rule 307 (expr -> expr IS_EQUAL expr .) ]
  ! MOD             [ reduce using rule 307 (expr -> expr IS_EQUAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 307 (expr -> expr IS_EQUAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 307 (expr -> expr IS_EQUAL expr .) ]
  ! IS_GREATER      [ reduce using rule 307 (expr -> expr IS_EQUAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 307 (expr -> expr IS_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 307 (expr -> expr IS_EQUAL expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! QUESTION        [ shift and go to state 158 ]


state 328

    (308) expr -> expr IS_NOT_EQUAL expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .)
    OBJECT_OPERATOR reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .)
    LBRACE          reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .)
    BOOLEAN_AND     reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .)
    BOOLEAN_OR      reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .)
    LOGICAL_AND     reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .)
    LOGICAL_OR      reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .)
    AND             reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .)
    OR              reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .)
    XOR             reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .)
    IS_IDENTICAL    reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .)
    IS_NOT_IDENTICAL reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .)
    IS_EQUAL        reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .)
    IS_NOT_EQUAL    reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .)
    QUESTION        reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .)
    RPAREN          reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .)
    COMMA           reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .)
    RBRACKET        reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .)
    RBRACE          reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .)
    COLON           reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .)
    AS              reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .)
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157

  ! CONCAT          [ reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .) ]
  ! MUL             [ reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .) ]
  ! DIV             [ reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .) ]
  ! SL              [ reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .) ]
  ! SR              [ reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .) ]
  ! MOD             [ reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .) ]
  ! IS_GREATER      [ reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 308 (expr -> expr IS_NOT_EQUAL expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! QUESTION        [ shift and go to state 158 ]


state 329

    (309) expr -> expr IS_SMALLER expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 309 (expr -> expr IS_SMALLER expr .)
    OBJECT_OPERATOR reduce using rule 309 (expr -> expr IS_SMALLER expr .)
    LBRACE          reduce using rule 309 (expr -> expr IS_SMALLER expr .)
    BOOLEAN_AND     reduce using rule 309 (expr -> expr IS_SMALLER expr .)
    BOOLEAN_OR      reduce using rule 309 (expr -> expr IS_SMALLER expr .)
    LOGICAL_AND     reduce using rule 309 (expr -> expr IS_SMALLER expr .)
    LOGICAL_OR      reduce using rule 309 (expr -> expr IS_SMALLER expr .)
    LOGICAL_XOR     reduce using rule 309 (expr -> expr IS_SMALLER expr .)
    AND             reduce using rule 309 (expr -> expr IS_SMALLER expr .)
    OR              reduce using rule 309 (expr -> expr IS_SMALLER expr .)
    XOR             reduce using rule 309 (expr -> expr IS_SMALLER expr .)
    IS_IDENTICAL    reduce using rule 309 (expr -> expr IS_SMALLER expr .)
    IS_NOT_IDENTICAL reduce using rule 309 (expr -> expr IS_SMALLER expr .)
    IS_EQUAL        reduce using rule 309 (expr -> expr IS_SMALLER expr .)
    IS_NOT_EQUAL    reduce using rule 309 (expr -> expr IS_SMALLER expr .)
    IS_SMALLER      reduce using rule 309 (expr -> expr IS_SMALLER expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 309 (expr -> expr IS_SMALLER expr .)
    IS_GREATER      reduce using rule 309 (expr -> expr IS_SMALLER expr .)
    IS_GREATER_OR_EQUAL reduce using rule 309 (expr -> expr IS_SMALLER expr .)
    QUESTION        reduce using rule 309 (expr -> expr IS_SMALLER expr .)
    RPAREN          reduce using rule 309 (expr -> expr IS_SMALLER expr .)
    COMMA           reduce using rule 309 (expr -> expr IS_SMALLER expr .)
    DOUBLE_ARROW    reduce using rule 309 (expr -> expr IS_SMALLER expr .)
    RBRACKET        reduce using rule 309 (expr -> expr IS_SMALLER expr .)
    RBRACE          reduce using rule 309 (expr -> expr IS_SMALLER expr .)
    COLON           reduce using rule 309 (expr -> expr IS_SMALLER expr .)
    AS              reduce using rule 309 (expr -> expr IS_SMALLER expr .)
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    INSTANCEOF      shift and go to state 157

  ! CONCAT          [ reduce using rule 309 (expr -> expr IS_SMALLER expr .) ]
  ! PLUS            [ reduce using rule 309 (expr -> expr IS_SMALLER expr .) ]
  ! MINUS           [ reduce using rule 309 (expr -> expr IS_SMALLER expr .) ]
  ! MUL             [ reduce using rule 309 (expr -> expr IS_SMALLER expr .) ]
  ! DIV             [ reduce using rule 309 (expr -> expr IS_SMALLER expr .) ]
  ! SL              [ reduce using rule 309 (expr -> expr IS_SMALLER expr .) ]
  ! SR              [ reduce using rule 309 (expr -> expr IS_SMALLER expr .) ]
  ! MOD             [ reduce using rule 309 (expr -> expr IS_SMALLER expr .) ]
  ! INSTANCEOF      [ reduce using rule 309 (expr -> expr IS_SMALLER expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! IS_SMALLER      [ shift and go to state 153 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 154 ]
  ! IS_GREATER      [ shift and go to state 155 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 156 ]
  ! QUESTION        [ shift and go to state 158 ]


state 330

    (310) expr -> expr IS_SMALLER_OR_EQUAL expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    OBJECT_OPERATOR reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    LBRACE          reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    BOOLEAN_AND     reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    BOOLEAN_OR      reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    LOGICAL_AND     reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    LOGICAL_OR      reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    AND             reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    OR              reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    XOR             reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    IS_IDENTICAL    reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    IS_NOT_IDENTICAL reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    IS_EQUAL        reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    IS_NOT_EQUAL    reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    IS_SMALLER      reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    IS_GREATER      reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    IS_GREATER_OR_EQUAL reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    QUESTION        reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    RPAREN          reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    COMMA           reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    RBRACKET        reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    RBRACE          reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    COLON           reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    AS              reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .)
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    INSTANCEOF      shift and go to state 157

  ! CONCAT          [ reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .) ]
  ! MUL             [ reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .) ]
  ! DIV             [ reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .) ]
  ! SL              [ reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .) ]
  ! SR              [ reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .) ]
  ! MOD             [ reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 310 (expr -> expr IS_SMALLER_OR_EQUAL expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! IS_SMALLER      [ shift and go to state 153 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 154 ]
  ! IS_GREATER      [ shift and go to state 155 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 156 ]
  ! QUESTION        [ shift and go to state 158 ]


state 331

    (311) expr -> expr IS_GREATER expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 311 (expr -> expr IS_GREATER expr .)
    OBJECT_OPERATOR reduce using rule 311 (expr -> expr IS_GREATER expr .)
    LBRACE          reduce using rule 311 (expr -> expr IS_GREATER expr .)
    BOOLEAN_AND     reduce using rule 311 (expr -> expr IS_GREATER expr .)
    BOOLEAN_OR      reduce using rule 311 (expr -> expr IS_GREATER expr .)
    LOGICAL_AND     reduce using rule 311 (expr -> expr IS_GREATER expr .)
    LOGICAL_OR      reduce using rule 311 (expr -> expr IS_GREATER expr .)
    LOGICAL_XOR     reduce using rule 311 (expr -> expr IS_GREATER expr .)
    AND             reduce using rule 311 (expr -> expr IS_GREATER expr .)
    OR              reduce using rule 311 (expr -> expr IS_GREATER expr .)
    XOR             reduce using rule 311 (expr -> expr IS_GREATER expr .)
    IS_IDENTICAL    reduce using rule 311 (expr -> expr IS_GREATER expr .)
    IS_NOT_IDENTICAL reduce using rule 311 (expr -> expr IS_GREATER expr .)
    IS_EQUAL        reduce using rule 311 (expr -> expr IS_GREATER expr .)
    IS_NOT_EQUAL    reduce using rule 311 (expr -> expr IS_GREATER expr .)
    IS_SMALLER      reduce using rule 311 (expr -> expr IS_GREATER expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 311 (expr -> expr IS_GREATER expr .)
    IS_GREATER      reduce using rule 311 (expr -> expr IS_GREATER expr .)
    IS_GREATER_OR_EQUAL reduce using rule 311 (expr -> expr IS_GREATER expr .)
    QUESTION        reduce using rule 311 (expr -> expr IS_GREATER expr .)
    RPAREN          reduce using rule 311 (expr -> expr IS_GREATER expr .)
    COMMA           reduce using rule 311 (expr -> expr IS_GREATER expr .)
    DOUBLE_ARROW    reduce using rule 311 (expr -> expr IS_GREATER expr .)
    RBRACKET        reduce using rule 311 (expr -> expr IS_GREATER expr .)
    RBRACE          reduce using rule 311 (expr -> expr IS_GREATER expr .)
    COLON           reduce using rule 311 (expr -> expr IS_GREATER expr .)
    AS              reduce using rule 311 (expr -> expr IS_GREATER expr .)
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    INSTANCEOF      shift and go to state 157

  ! CONCAT          [ reduce using rule 311 (expr -> expr IS_GREATER expr .) ]
  ! PLUS            [ reduce using rule 311 (expr -> expr IS_GREATER expr .) ]
  ! MINUS           [ reduce using rule 311 (expr -> expr IS_GREATER expr .) ]
  ! MUL             [ reduce using rule 311 (expr -> expr IS_GREATER expr .) ]
  ! DIV             [ reduce using rule 311 (expr -> expr IS_GREATER expr .) ]
  ! SL              [ reduce using rule 311 (expr -> expr IS_GREATER expr .) ]
  ! SR              [ reduce using rule 311 (expr -> expr IS_GREATER expr .) ]
  ! MOD             [ reduce using rule 311 (expr -> expr IS_GREATER expr .) ]
  ! INSTANCEOF      [ reduce using rule 311 (expr -> expr IS_GREATER expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! IS_SMALLER      [ shift and go to state 153 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 154 ]
  ! IS_GREATER      [ shift and go to state 155 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 156 ]
  ! QUESTION        [ shift and go to state 158 ]


state 332

    (312) expr -> expr IS_GREATER_OR_EQUAL expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    OBJECT_OPERATOR reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    LBRACE          reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    BOOLEAN_AND     reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    BOOLEAN_OR      reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    LOGICAL_AND     reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    LOGICAL_OR      reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    AND             reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    OR              reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    XOR             reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    IS_IDENTICAL    reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    IS_NOT_IDENTICAL reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    IS_EQUAL        reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    IS_NOT_EQUAL    reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    IS_SMALLER      reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    IS_GREATER      reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    IS_GREATER_OR_EQUAL reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    QUESTION        reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    RPAREN          reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    COMMA           reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    RBRACKET        reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    RBRACE          reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    COLON           reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    AS              reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .)
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    INSTANCEOF      shift and go to state 157

  ! CONCAT          [ reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .) ]
  ! MUL             [ reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .) ]
  ! DIV             [ reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .) ]
  ! SL              [ reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .) ]
  ! SR              [ reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .) ]
  ! MOD             [ reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 312 (expr -> expr IS_GREATER_OR_EQUAL expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! IS_SMALLER      [ shift and go to state 153 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 154 ]
  ! IS_GREATER      [ shift and go to state 155 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 156 ]
  ! QUESTION        [ shift and go to state 158 ]


state 333

    (313) expr -> expr INSTANCEOF expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    OBJECT_OPERATOR reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    LBRACE          reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    BOOLEAN_AND     reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    BOOLEAN_OR      reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    LOGICAL_AND     reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    LOGICAL_OR      reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    LOGICAL_XOR     reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    AND             reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    OR              reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    XOR             reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    CONCAT          reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    PLUS            reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    MINUS           reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    MUL             reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    DIV             reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    SL              reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    SR              reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    MOD             reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    IS_IDENTICAL    reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    IS_NOT_IDENTICAL reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    IS_EQUAL        reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    IS_NOT_EQUAL    reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    IS_SMALLER      reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    IS_GREATER      reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    IS_GREATER_OR_EQUAL reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    QUESTION        reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    RPAREN          reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    COMMA           reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    DOUBLE_ARROW    reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    RBRACKET        reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    RBRACE          reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    COLON           reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    AS              reduce using rule 313 (expr -> expr INSTANCEOF expr .)
    INSTANCEOF      shift and go to state 157

  ! INSTANCEOF      [ reduce using rule 313 (expr -> expr INSTANCEOF expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! CONCAT          [ shift and go to state 141 ]
  ! PLUS            [ shift and go to state 142 ]
  ! MINUS           [ shift and go to state 143 ]
  ! MUL             [ shift and go to state 144 ]
  ! DIV             [ shift and go to state 145 ]
  ! SL              [ shift and go to state 146 ]
  ! SR              [ shift and go to state 147 ]
  ! MOD             [ shift and go to state 148 ]
  ! IS_IDENTICAL    [ shift and go to state 149 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 150 ]
  ! IS_EQUAL        [ shift and go to state 151 ]
  ! IS_NOT_EQUAL    [ shift and go to state 152 ]
  ! IS_SMALLER      [ shift and go to state 153 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 154 ]
  ! IS_GREATER      [ shift and go to state 155 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 156 ]
  ! QUESTION        [ shift and go to state 158 ]


state 334

    (314) expr -> expr INSTANCEOF STATIC .
    (190) class_name -> STATIC .

    SEMI            reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    OBJECT_OPERATOR reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    LBRACE          reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    BOOLEAN_AND     reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    BOOLEAN_OR      reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    LOGICAL_AND     reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    LOGICAL_OR      reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    LOGICAL_XOR     reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    AND             reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    OR              reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    XOR             reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    CONCAT          reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    PLUS            reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    MINUS           reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    MUL             reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    DIV             reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    SL              reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    SR              reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    MOD             reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    IS_IDENTICAL    reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    IS_NOT_IDENTICAL reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    IS_EQUAL        reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    IS_NOT_EQUAL    reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    IS_SMALLER      reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    IS_SMALLER_OR_EQUAL reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    IS_GREATER      reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    IS_GREATER_OR_EQUAL reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    INSTANCEOF      reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    QUESTION        reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    RPAREN          reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    COMMA           reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    DOUBLE_ARROW    reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    RBRACKET        reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    RBRACE          reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    COLON           reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    AS              reduce using rule 314 (expr -> expr INSTANCEOF STATIC .)
    DOUBLE_COLON    reduce using rule 190 (class_name -> STATIC .)


state 335

    (319) expr -> expr QUESTION expr . COLON expr
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    COLON           shift and go to state 485
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 336

    (320) expr -> expr QUESTION COLON . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 486
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 337

    (33) statement -> WHILE LPAREN expr . RPAREN while_statement
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    RPAREN          shift and go to state 487
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 338

    (34) statement -> DO statement WHILE . LPAREN expr RPAREN SEMI

    LPAREN          shift and go to state 488


state 339

    (35) statement -> FOR LPAREN for_expr . SEMI for_expr SEMI for_expr RPAREN for_statement

    SEMI            shift and go to state 489


state 340

    (72) for_expr -> empty .

    SEMI            reduce using rule 72 (for_expr -> empty .)
    RPAREN          reduce using rule 72 (for_expr -> empty .)


state 341

    (73) for_expr -> non_empty_for_expr .
    (74) non_empty_for_expr -> non_empty_for_expr . COMMA expr

    SEMI            reduce using rule 73 (for_expr -> non_empty_for_expr .)
    RPAREN          reduce using rule 73 (for_expr -> non_empty_for_expr .)
    COMMA           shift and go to state 490


state 342

    (75) non_empty_for_expr -> expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    COMMA           reduce using rule 75 (non_empty_for_expr -> expr .)
    SEMI            reduce using rule 75 (non_empty_for_expr -> expr .)
    RPAREN          reduce using rule 75 (non_empty_for_expr -> expr .)
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 343

    (36) statement -> FOREACH LPAREN expr . AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    AS              shift and go to state 491
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 344

    (37) statement -> SWITCH LPAREN expr . RPAREN switch_case_list
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    RPAREN          shift and go to state 492
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 345

    (39) statement -> BREAK expr SEMI .

    HALT_COMPILER   reduce using rule 39 (statement -> BREAK expr SEMI .)
    NAMESPACE       reduce using rule 39 (statement -> BREAK expr SEMI .)
    CONST           reduce using rule 39 (statement -> BREAK expr SEMI .)
    USE             reduce using rule 39 (statement -> BREAK expr SEMI .)
    LBRACE          reduce using rule 39 (statement -> BREAK expr SEMI .)
    IF              reduce using rule 39 (statement -> BREAK expr SEMI .)
    WHILE           reduce using rule 39 (statement -> BREAK expr SEMI .)
    DO              reduce using rule 39 (statement -> BREAK expr SEMI .)
    FOR             reduce using rule 39 (statement -> BREAK expr SEMI .)
    FOREACH         reduce using rule 39 (statement -> BREAK expr SEMI .)
    SWITCH          reduce using rule 39 (statement -> BREAK expr SEMI .)
    BREAK           reduce using rule 39 (statement -> BREAK expr SEMI .)
    CONTINUE        reduce using rule 39 (statement -> BREAK expr SEMI .)
    RETURN          reduce using rule 39 (statement -> BREAK expr SEMI .)
    GLOBAL          reduce using rule 39 (statement -> BREAK expr SEMI .)
    STATIC          reduce using rule 39 (statement -> BREAK expr SEMI .)
    ECHO            reduce using rule 39 (statement -> BREAK expr SEMI .)
    INLINE_HTML     reduce using rule 39 (statement -> BREAK expr SEMI .)
    UNSET           reduce using rule 39 (statement -> BREAK expr SEMI .)
    SEMI            reduce using rule 39 (statement -> BREAK expr SEMI .)
    TRY             reduce using rule 39 (statement -> BREAK expr SEMI .)
    THROW           reduce using rule 39 (statement -> BREAK expr SEMI .)
    DECLARE         reduce using rule 39 (statement -> BREAK expr SEMI .)
    FUNCTION        reduce using rule 39 (statement -> BREAK expr SEMI .)
    INTERFACE       reduce using rule 39 (statement -> BREAK expr SEMI .)
    TRAIT           reduce using rule 39 (statement -> BREAK expr SEMI .)
    NEW             reduce using rule 39 (statement -> BREAK expr SEMI .)
    CLONE           reduce using rule 39 (statement -> BREAK expr SEMI .)
    LIST            reduce using rule 39 (statement -> BREAK expr SEMI .)
    ARRAY           reduce using rule 39 (statement -> BREAK expr SEMI .)
    LBRACKET        reduce using rule 39 (statement -> BREAK expr SEMI .)
    PLUS            reduce using rule 39 (statement -> BREAK expr SEMI .)
    MINUS           reduce using rule 39 (statement -> BREAK expr SEMI .)
    NOT             reduce using rule 39 (statement -> BREAK expr SEMI .)
    BOOLEAN_NOT     reduce using rule 39 (statement -> BREAK expr SEMI .)
    INC             reduce using rule 39 (statement -> BREAK expr SEMI .)
    DEC             reduce using rule 39 (statement -> BREAK expr SEMI .)
    INT_CAST        reduce using rule 39 (statement -> BREAK expr SEMI .)
    DOUBLE_CAST     reduce using rule 39 (statement -> BREAK expr SEMI .)
    STRING_CAST     reduce using rule 39 (statement -> BREAK expr SEMI .)
    ARRAY_CAST      reduce using rule 39 (statement -> BREAK expr SEMI .)
    OBJECT_CAST     reduce using rule 39 (statement -> BREAK expr SEMI .)
    BOOL_CAST       reduce using rule 39 (statement -> BREAK expr SEMI .)
    UNSET_CAST      reduce using rule 39 (statement -> BREAK expr SEMI .)
    BINARY_CAST     reduce using rule 39 (statement -> BREAK expr SEMI .)
    ISSET           reduce using rule 39 (statement -> BREAK expr SEMI .)
    EMPTY           reduce using rule 39 (statement -> BREAK expr SEMI .)
    EVAL            reduce using rule 39 (statement -> BREAK expr SEMI .)
    INCLUDE         reduce using rule 39 (statement -> BREAK expr SEMI .)
    INCLUDE_ONCE    reduce using rule 39 (statement -> BREAK expr SEMI .)
    REQUIRE         reduce using rule 39 (statement -> BREAK expr SEMI .)
    REQUIRE_ONCE    reduce using rule 39 (statement -> BREAK expr SEMI .)
    PRINT           reduce using rule 39 (statement -> BREAK expr SEMI .)
    AT              reduce using rule 39 (statement -> BREAK expr SEMI .)
    LPAREN          reduce using rule 39 (statement -> BREAK expr SEMI .)
    CLASS           reduce using rule 39 (statement -> BREAK expr SEMI .)
    ABSTRACT        reduce using rule 39 (statement -> BREAK expr SEMI .)
    FINAL           reduce using rule 39 (statement -> BREAK expr SEMI .)
    QUOTE           reduce using rule 39 (statement -> BREAK expr SEMI .)
    STRING          reduce using rule 39 (statement -> BREAK expr SEMI .)
    STRING_VARNAME  reduce using rule 39 (statement -> BREAK expr SEMI .)
    NS_SEPARATOR    reduce using rule 39 (statement -> BREAK expr SEMI .)
    EXIT            reduce using rule 39 (statement -> BREAK expr SEMI .)
    DIE             reduce using rule 39 (statement -> BREAK expr SEMI .)
    LNUMBER         reduce using rule 39 (statement -> BREAK expr SEMI .)
    DNUMBER         reduce using rule 39 (statement -> BREAK expr SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 39 (statement -> BREAK expr SEMI .)
    LINE            reduce using rule 39 (statement -> BREAK expr SEMI .)
    FILE            reduce using rule 39 (statement -> BREAK expr SEMI .)
    DIR             reduce using rule 39 (statement -> BREAK expr SEMI .)
    CLASS_C         reduce using rule 39 (statement -> BREAK expr SEMI .)
    METHOD_C        reduce using rule 39 (statement -> BREAK expr SEMI .)
    FUNC_C          reduce using rule 39 (statement -> BREAK expr SEMI .)
    NS_C            reduce using rule 39 (statement -> BREAK expr SEMI .)
    START_HEREDOC   reduce using rule 39 (statement -> BREAK expr SEMI .)
    START_NOWDOC    reduce using rule 39 (statement -> BREAK expr SEMI .)
    BACKTICK        reduce using rule 39 (statement -> BREAK expr SEMI .)
    DOLLAR          reduce using rule 39 (statement -> BREAK expr SEMI .)
    VARIABLE        reduce using rule 39 (statement -> BREAK expr SEMI .)
    $end            reduce using rule 39 (statement -> BREAK expr SEMI .)
    RBRACE          reduce using rule 39 (statement -> BREAK expr SEMI .)
    YIELD           reduce using rule 39 (statement -> BREAK expr SEMI .)
    ELSEIF          reduce using rule 39 (statement -> BREAK expr SEMI .)
    ELSE            reduce using rule 39 (statement -> BREAK expr SEMI .)
    ENDIF           reduce using rule 39 (statement -> BREAK expr SEMI .)
    ENDWHILE        reduce using rule 39 (statement -> BREAK expr SEMI .)
    ENDDECLARE      reduce using rule 39 (statement -> BREAK expr SEMI .)
    ENDFOREACH      reduce using rule 39 (statement -> BREAK expr SEMI .)
    CASE            reduce using rule 39 (statement -> BREAK expr SEMI .)
    DEFAULT         reduce using rule 39 (statement -> BREAK expr SEMI .)
    ENDSWITCH       reduce using rule 39 (statement -> BREAK expr SEMI .)
    ENDFOR          reduce using rule 39 (statement -> BREAK expr SEMI .)


state 346

    (41) statement -> CONTINUE expr SEMI .

    HALT_COMPILER   reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    NAMESPACE       reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    CONST           reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    USE             reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    LBRACE          reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    IF              reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    WHILE           reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    DO              reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    FOR             reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    FOREACH         reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    SWITCH          reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    BREAK           reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    CONTINUE        reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    RETURN          reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    GLOBAL          reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    STATIC          reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    ECHO            reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    INLINE_HTML     reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    UNSET           reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    SEMI            reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    TRY             reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    THROW           reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    DECLARE         reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    FUNCTION        reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    INTERFACE       reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    TRAIT           reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    NEW             reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    CLONE           reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    LIST            reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    ARRAY           reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    LBRACKET        reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    PLUS            reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    MINUS           reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    NOT             reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    BOOLEAN_NOT     reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    INC             reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    DEC             reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    INT_CAST        reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    DOUBLE_CAST     reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    STRING_CAST     reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    ARRAY_CAST      reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    OBJECT_CAST     reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    BOOL_CAST       reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    UNSET_CAST      reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    BINARY_CAST     reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    ISSET           reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    EMPTY           reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    EVAL            reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    INCLUDE         reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    INCLUDE_ONCE    reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    REQUIRE         reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    REQUIRE_ONCE    reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    PRINT           reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    AT              reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    LPAREN          reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    CLASS           reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    ABSTRACT        reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    FINAL           reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    QUOTE           reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    STRING          reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    STRING_VARNAME  reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    NS_SEPARATOR    reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    EXIT            reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    DIE             reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    LNUMBER         reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    DNUMBER         reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    LINE            reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    FILE            reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    DIR             reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    CLASS_C         reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    METHOD_C        reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    FUNC_C          reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    NS_C            reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    START_HEREDOC   reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    START_NOWDOC    reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    BACKTICK        reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    DOLLAR          reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    VARIABLE        reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    $end            reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    RBRACE          reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    YIELD           reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    ELSEIF          reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    ELSE            reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    ENDIF           reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    ENDWHILE        reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    ENDDECLARE      reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    ENDFOREACH      reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    CASE            reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    DEFAULT         reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    ENDSWITCH       reduce using rule 41 (statement -> CONTINUE expr SEMI .)
    ENDFOR          reduce using rule 41 (statement -> CONTINUE expr SEMI .)


state 347

    (43) statement -> RETURN expr SEMI .

    HALT_COMPILER   reduce using rule 43 (statement -> RETURN expr SEMI .)
    NAMESPACE       reduce using rule 43 (statement -> RETURN expr SEMI .)
    CONST           reduce using rule 43 (statement -> RETURN expr SEMI .)
    USE             reduce using rule 43 (statement -> RETURN expr SEMI .)
    LBRACE          reduce using rule 43 (statement -> RETURN expr SEMI .)
    IF              reduce using rule 43 (statement -> RETURN expr SEMI .)
    WHILE           reduce using rule 43 (statement -> RETURN expr SEMI .)
    DO              reduce using rule 43 (statement -> RETURN expr SEMI .)
    FOR             reduce using rule 43 (statement -> RETURN expr SEMI .)
    FOREACH         reduce using rule 43 (statement -> RETURN expr SEMI .)
    SWITCH          reduce using rule 43 (statement -> RETURN expr SEMI .)
    BREAK           reduce using rule 43 (statement -> RETURN expr SEMI .)
    CONTINUE        reduce using rule 43 (statement -> RETURN expr SEMI .)
    RETURN          reduce using rule 43 (statement -> RETURN expr SEMI .)
    GLOBAL          reduce using rule 43 (statement -> RETURN expr SEMI .)
    STATIC          reduce using rule 43 (statement -> RETURN expr SEMI .)
    ECHO            reduce using rule 43 (statement -> RETURN expr SEMI .)
    INLINE_HTML     reduce using rule 43 (statement -> RETURN expr SEMI .)
    UNSET           reduce using rule 43 (statement -> RETURN expr SEMI .)
    SEMI            reduce using rule 43 (statement -> RETURN expr SEMI .)
    TRY             reduce using rule 43 (statement -> RETURN expr SEMI .)
    THROW           reduce using rule 43 (statement -> RETURN expr SEMI .)
    DECLARE         reduce using rule 43 (statement -> RETURN expr SEMI .)
    FUNCTION        reduce using rule 43 (statement -> RETURN expr SEMI .)
    INTERFACE       reduce using rule 43 (statement -> RETURN expr SEMI .)
    TRAIT           reduce using rule 43 (statement -> RETURN expr SEMI .)
    NEW             reduce using rule 43 (statement -> RETURN expr SEMI .)
    CLONE           reduce using rule 43 (statement -> RETURN expr SEMI .)
    LIST            reduce using rule 43 (statement -> RETURN expr SEMI .)
    ARRAY           reduce using rule 43 (statement -> RETURN expr SEMI .)
    LBRACKET        reduce using rule 43 (statement -> RETURN expr SEMI .)
    PLUS            reduce using rule 43 (statement -> RETURN expr SEMI .)
    MINUS           reduce using rule 43 (statement -> RETURN expr SEMI .)
    NOT             reduce using rule 43 (statement -> RETURN expr SEMI .)
    BOOLEAN_NOT     reduce using rule 43 (statement -> RETURN expr SEMI .)
    INC             reduce using rule 43 (statement -> RETURN expr SEMI .)
    DEC             reduce using rule 43 (statement -> RETURN expr SEMI .)
    INT_CAST        reduce using rule 43 (statement -> RETURN expr SEMI .)
    DOUBLE_CAST     reduce using rule 43 (statement -> RETURN expr SEMI .)
    STRING_CAST     reduce using rule 43 (statement -> RETURN expr SEMI .)
    ARRAY_CAST      reduce using rule 43 (statement -> RETURN expr SEMI .)
    OBJECT_CAST     reduce using rule 43 (statement -> RETURN expr SEMI .)
    BOOL_CAST       reduce using rule 43 (statement -> RETURN expr SEMI .)
    UNSET_CAST      reduce using rule 43 (statement -> RETURN expr SEMI .)
    BINARY_CAST     reduce using rule 43 (statement -> RETURN expr SEMI .)
    ISSET           reduce using rule 43 (statement -> RETURN expr SEMI .)
    EMPTY           reduce using rule 43 (statement -> RETURN expr SEMI .)
    EVAL            reduce using rule 43 (statement -> RETURN expr SEMI .)
    INCLUDE         reduce using rule 43 (statement -> RETURN expr SEMI .)
    INCLUDE_ONCE    reduce using rule 43 (statement -> RETURN expr SEMI .)
    REQUIRE         reduce using rule 43 (statement -> RETURN expr SEMI .)
    REQUIRE_ONCE    reduce using rule 43 (statement -> RETURN expr SEMI .)
    PRINT           reduce using rule 43 (statement -> RETURN expr SEMI .)
    AT              reduce using rule 43 (statement -> RETURN expr SEMI .)
    LPAREN          reduce using rule 43 (statement -> RETURN expr SEMI .)
    CLASS           reduce using rule 43 (statement -> RETURN expr SEMI .)
    ABSTRACT        reduce using rule 43 (statement -> RETURN expr SEMI .)
    FINAL           reduce using rule 43 (statement -> RETURN expr SEMI .)
    QUOTE           reduce using rule 43 (statement -> RETURN expr SEMI .)
    STRING          reduce using rule 43 (statement -> RETURN expr SEMI .)
    STRING_VARNAME  reduce using rule 43 (statement -> RETURN expr SEMI .)
    NS_SEPARATOR    reduce using rule 43 (statement -> RETURN expr SEMI .)
    EXIT            reduce using rule 43 (statement -> RETURN expr SEMI .)
    DIE             reduce using rule 43 (statement -> RETURN expr SEMI .)
    LNUMBER         reduce using rule 43 (statement -> RETURN expr SEMI .)
    DNUMBER         reduce using rule 43 (statement -> RETURN expr SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 43 (statement -> RETURN expr SEMI .)
    LINE            reduce using rule 43 (statement -> RETURN expr SEMI .)
    FILE            reduce using rule 43 (statement -> RETURN expr SEMI .)
    DIR             reduce using rule 43 (statement -> RETURN expr SEMI .)
    CLASS_C         reduce using rule 43 (statement -> RETURN expr SEMI .)
    METHOD_C        reduce using rule 43 (statement -> RETURN expr SEMI .)
    FUNC_C          reduce using rule 43 (statement -> RETURN expr SEMI .)
    NS_C            reduce using rule 43 (statement -> RETURN expr SEMI .)
    START_HEREDOC   reduce using rule 43 (statement -> RETURN expr SEMI .)
    START_NOWDOC    reduce using rule 43 (statement -> RETURN expr SEMI .)
    BACKTICK        reduce using rule 43 (statement -> RETURN expr SEMI .)
    DOLLAR          reduce using rule 43 (statement -> RETURN expr SEMI .)
    VARIABLE        reduce using rule 43 (statement -> RETURN expr SEMI .)
    $end            reduce using rule 43 (statement -> RETURN expr SEMI .)
    RBRACE          reduce using rule 43 (statement -> RETURN expr SEMI .)
    YIELD           reduce using rule 43 (statement -> RETURN expr SEMI .)
    ELSEIF          reduce using rule 43 (statement -> RETURN expr SEMI .)
    ELSE            reduce using rule 43 (statement -> RETURN expr SEMI .)
    ENDIF           reduce using rule 43 (statement -> RETURN expr SEMI .)
    ENDWHILE        reduce using rule 43 (statement -> RETURN expr SEMI .)
    ENDDECLARE      reduce using rule 43 (statement -> RETURN expr SEMI .)
    ENDFOREACH      reduce using rule 43 (statement -> RETURN expr SEMI .)
    CASE            reduce using rule 43 (statement -> RETURN expr SEMI .)
    DEFAULT         reduce using rule 43 (statement -> RETURN expr SEMI .)
    ENDSWITCH       reduce using rule 43 (statement -> RETURN expr SEMI .)
    ENDFOR          reduce using rule 43 (statement -> RETURN expr SEMI .)


state 348

    (44) statement -> GLOBAL global_var_list SEMI .

    HALT_COMPILER   reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    NAMESPACE       reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    CONST           reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    USE             reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    LBRACE          reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    IF              reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    WHILE           reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    DO              reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    FOR             reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    FOREACH         reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    SWITCH          reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    BREAK           reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    CONTINUE        reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    RETURN          reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    GLOBAL          reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    STATIC          reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    ECHO            reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    INLINE_HTML     reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    UNSET           reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    SEMI            reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    TRY             reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    THROW           reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    DECLARE         reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    FUNCTION        reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    INTERFACE       reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    TRAIT           reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    NEW             reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    CLONE           reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    LIST            reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    ARRAY           reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    LBRACKET        reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    PLUS            reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    MINUS           reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    NOT             reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    BOOLEAN_NOT     reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    INC             reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    DEC             reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    INT_CAST        reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    DOUBLE_CAST     reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    STRING_CAST     reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    ARRAY_CAST      reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    OBJECT_CAST     reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    BOOL_CAST       reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    UNSET_CAST      reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    BINARY_CAST     reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    ISSET           reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    EMPTY           reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    EVAL            reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    INCLUDE         reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    INCLUDE_ONCE    reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    REQUIRE         reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    REQUIRE_ONCE    reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    PRINT           reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    AT              reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    LPAREN          reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    CLASS           reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    ABSTRACT        reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    FINAL           reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    QUOTE           reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    STRING          reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    STRING_VARNAME  reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    NS_SEPARATOR    reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    EXIT            reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    DIE             reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    LNUMBER         reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    DNUMBER         reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    LINE            reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    FILE            reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    DIR             reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    CLASS_C         reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    METHOD_C        reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    FUNC_C          reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    NS_C            reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    START_HEREDOC   reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    START_NOWDOC    reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    BACKTICK        reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    DOLLAR          reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    VARIABLE        reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    $end            reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    RBRACE          reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    YIELD           reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    ELSEIF          reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    ELSE            reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    ENDIF           reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    ENDWHILE        reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    ENDDECLARE      reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    ENDFOREACH      reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    CASE            reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    DEFAULT         reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    ENDSWITCH       reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)
    ENDFOR          reduce using rule 44 (statement -> GLOBAL global_var_list SEMI .)


state 349

    (94) global_var_list -> global_var_list COMMA . global_var
    (96) global_var -> . VARIABLE
    (97) global_var -> . DOLLAR variable
    (98) global_var -> . DOLLAR LBRACE expr RBRACE

    VARIABLE        shift and go to state 172
    DOLLAR          shift and go to state 173

    global_var                     shift and go to state 493

state 350

    (97) global_var -> DOLLAR variable .
    (234) variable -> variable . LBRACKET dim_offset RBRACKET

    SEMI            reduce using rule 97 (global_var -> DOLLAR variable .)
    COMMA           reduce using rule 97 (global_var -> DOLLAR variable .)
    LBRACKET        shift and go to state 205


state 351

    (98) global_var -> DOLLAR LBRACE . expr RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 494
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 352

    (45) statement -> STATIC static_var_list SEMI .

    HALT_COMPILER   reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    NAMESPACE       reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    CONST           reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    USE             reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    LBRACE          reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    IF              reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    WHILE           reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    DO              reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    FOR             reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    FOREACH         reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    SWITCH          reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    BREAK           reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    CONTINUE        reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    RETURN          reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    GLOBAL          reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    STATIC          reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    ECHO            reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    INLINE_HTML     reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    UNSET           reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    SEMI            reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    TRY             reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    THROW           reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    DECLARE         reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    FUNCTION        reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    INTERFACE       reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    TRAIT           reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    NEW             reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    CLONE           reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    LIST            reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    ARRAY           reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    LBRACKET        reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    PLUS            reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    MINUS           reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    NOT             reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    BOOLEAN_NOT     reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    INC             reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    DEC             reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    INT_CAST        reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    DOUBLE_CAST     reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    STRING_CAST     reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    ARRAY_CAST      reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    OBJECT_CAST     reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    BOOL_CAST       reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    UNSET_CAST      reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    BINARY_CAST     reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    ISSET           reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    EMPTY           reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    EVAL            reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    INCLUDE         reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    INCLUDE_ONCE    reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    REQUIRE         reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    REQUIRE_ONCE    reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    PRINT           reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    AT              reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    LPAREN          reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    CLASS           reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    ABSTRACT        reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    FINAL           reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    QUOTE           reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    STRING          reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    STRING_VARNAME  reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    NS_SEPARATOR    reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    EXIT            reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    DIE             reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    LNUMBER         reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    DNUMBER         reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    LINE            reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    FILE            reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    DIR             reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    CLASS_C         reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    METHOD_C        reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    FUNC_C          reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    NS_C            reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    START_HEREDOC   reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    START_NOWDOC    reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    BACKTICK        reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    DOLLAR          reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    VARIABLE        reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    $end            reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    RBRACE          reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    YIELD           reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    ELSEIF          reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    ELSE            reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    ENDIF           reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    ENDWHILE        reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    ENDDECLARE      reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    ENDFOREACH      reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    CASE            reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    DEFAULT         reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    ENDSWITCH       reduce using rule 45 (statement -> STATIC static_var_list SEMI .)
    ENDFOR          reduce using rule 45 (statement -> STATIC static_var_list SEMI .)


state 353

    (99) static_var_list -> static_var_list COMMA . static_var
    (101) static_var -> . VARIABLE EQUALS static_scalar
    (102) static_var -> . VARIABLE

    VARIABLE        shift and go to state 176

    static_var                     shift and go to state 495

state 354

    (101) static_var -> VARIABLE EQUALS . static_scalar
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_scalar                  shift and go to state 496
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 355

    (46) statement -> ECHO echo_expr_list SEMI .

    HALT_COMPILER   reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    NAMESPACE       reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    CONST           reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    USE             reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    LBRACE          reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    IF              reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    WHILE           reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    DO              reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    FOR             reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    FOREACH         reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    SWITCH          reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    BREAK           reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    CONTINUE        reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    RETURN          reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    GLOBAL          reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    STATIC          reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    ECHO            reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    INLINE_HTML     reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    UNSET           reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    SEMI            reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    TRY             reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    THROW           reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    DECLARE         reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    FUNCTION        reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    INTERFACE       reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    TRAIT           reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    NEW             reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    CLONE           reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    LIST            reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    ARRAY           reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    LBRACKET        reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    PLUS            reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    MINUS           reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    NOT             reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    BOOLEAN_NOT     reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    INC             reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    DEC             reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    INT_CAST        reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    DOUBLE_CAST     reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    STRING_CAST     reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    ARRAY_CAST      reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    OBJECT_CAST     reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    BOOL_CAST       reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    UNSET_CAST      reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    BINARY_CAST     reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    ISSET           reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    EMPTY           reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    EVAL            reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    INCLUDE         reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    INCLUDE_ONCE    reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    REQUIRE         reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    REQUIRE_ONCE    reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    PRINT           reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    AT              reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    LPAREN          reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    CLASS           reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    ABSTRACT        reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    FINAL           reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    QUOTE           reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    STRING          reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    STRING_VARNAME  reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    NS_SEPARATOR    reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    EXIT            reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    DIE             reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    LNUMBER         reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    DNUMBER         reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    LINE            reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    FILE            reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    DIR             reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    CLASS_C         reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    METHOD_C        reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    FUNC_C          reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    NS_C            reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    START_HEREDOC   reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    START_NOWDOC    reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    BACKTICK        reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    DOLLAR          reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    VARIABLE        reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    $end            reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    RBRACE          reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    YIELD           reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    ELSEIF          reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    ELSE            reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    ENDIF           reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    ENDWHILE        reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    ENDDECLARE      reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    ENDFOREACH      reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    CASE            reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    DEFAULT         reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    ENDSWITCH       reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)
    ENDFOR          reduce using rule 46 (statement -> ECHO echo_expr_list SEMI .)


state 356

    (103) echo_expr_list -> echo_expr_list COMMA . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 497
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 357

    (49) statement -> UNSET LPAREN unset_variables . RPAREN SEMI
    (105) unset_variables -> unset_variables . COMMA unset_variable

    RPAREN          shift and go to state 498
    COMMA           shift and go to state 499


state 358

    (106) unset_variables -> unset_variable .

    RPAREN          reduce using rule 106 (unset_variables -> unset_variable .)
    COMMA           reduce using rule 106 (unset_variables -> unset_variable .)


state 359

    (107) unset_variable -> variable .
    (234) variable -> variable . LBRACKET dim_offset RBRACKET

    RPAREN          reduce using rule 107 (unset_variable -> variable .)
    COMMA           reduce using rule 107 (unset_variable -> variable .)
    LBRACKET        shift and go to state 205


state 360

    (51) statement -> TRY LBRACE inner_statement_list . RBRACE additional_catches maybe_finally
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) inner_statement -> . YIELD SEMI
    (29) inner_statement -> . YIELD expr SEMI
    (30) statement -> . LBRACE inner_statement_list RBRACE
    (31) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (33) statement -> . WHILE LPAREN expr RPAREN while_statement
    (34) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (35) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (36) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (37) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (38) statement -> . BREAK SEMI
    (39) statement -> . BREAK expr SEMI
    (40) statement -> . CONTINUE SEMI
    (41) statement -> . CONTINUE expr SEMI
    (42) statement -> . RETURN SEMI
    (43) statement -> . RETURN expr SEMI
    (44) statement -> . GLOBAL global_var_list SEMI
    (45) statement -> . STATIC static_var_list SEMI
    (46) statement -> . ECHO echo_expr_list SEMI
    (47) statement -> . INLINE_HTML
    (48) statement -> . expr SEMI
    (49) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (50) statement -> . SEMI
    (51) statement -> . TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
    (56) statement -> . THROW expr SEMI
    (57) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (108) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (109) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (110) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (111) class_declaration_statement -> . TRAIT STRING LBRACE trait_statement_list RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (112) class_entry_type -> . CLASS
    (113) class_entry_type -> . ABSTRACT CLASS
    (114) class_entry_type -> . FINAL CLASS
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RBRACE          shift and go to state 500
    HALT_COMPILER   shift and go to state 290
    YIELD           shift and go to state 291
    LBRACE          shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    FOREACH         shift and go to state 21
    SWITCH          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    GLOBAL          shift and go to state 26
    STATIC          shift and go to state 27
    ECHO            shift and go to state 28
    INLINE_HTML     shift and go to state 29
    UNSET           shift and go to state 30
    SEMI            shift and go to state 10
    TRY             shift and go to state 31
    THROW           shift and go to state 32
    DECLARE         shift and go to state 33
    FUNCTION        shift and go to state 34
    INTERFACE       shift and go to state 37
    TRAIT           shift and go to state 38
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    CLASS           shift and go to state 70
    ABSTRACT        shift and go to state 71
    FINAL           shift and go to state 72
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    inner_statement                shift and go to state 286
    statement                      shift and go to state 287
    function_declaration_statement shift and go to state 288
    class_declaration_statement    shift and go to state 289
    expr                           shift and go to state 17
    class_entry_type               shift and go to state 36
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 361

    (56) statement -> THROW expr SEMI .

    HALT_COMPILER   reduce using rule 56 (statement -> THROW expr SEMI .)
    NAMESPACE       reduce using rule 56 (statement -> THROW expr SEMI .)
    CONST           reduce using rule 56 (statement -> THROW expr SEMI .)
    USE             reduce using rule 56 (statement -> THROW expr SEMI .)
    LBRACE          reduce using rule 56 (statement -> THROW expr SEMI .)
    IF              reduce using rule 56 (statement -> THROW expr SEMI .)
    WHILE           reduce using rule 56 (statement -> THROW expr SEMI .)
    DO              reduce using rule 56 (statement -> THROW expr SEMI .)
    FOR             reduce using rule 56 (statement -> THROW expr SEMI .)
    FOREACH         reduce using rule 56 (statement -> THROW expr SEMI .)
    SWITCH          reduce using rule 56 (statement -> THROW expr SEMI .)
    BREAK           reduce using rule 56 (statement -> THROW expr SEMI .)
    CONTINUE        reduce using rule 56 (statement -> THROW expr SEMI .)
    RETURN          reduce using rule 56 (statement -> THROW expr SEMI .)
    GLOBAL          reduce using rule 56 (statement -> THROW expr SEMI .)
    STATIC          reduce using rule 56 (statement -> THROW expr SEMI .)
    ECHO            reduce using rule 56 (statement -> THROW expr SEMI .)
    INLINE_HTML     reduce using rule 56 (statement -> THROW expr SEMI .)
    UNSET           reduce using rule 56 (statement -> THROW expr SEMI .)
    SEMI            reduce using rule 56 (statement -> THROW expr SEMI .)
    TRY             reduce using rule 56 (statement -> THROW expr SEMI .)
    THROW           reduce using rule 56 (statement -> THROW expr SEMI .)
    DECLARE         reduce using rule 56 (statement -> THROW expr SEMI .)
    FUNCTION        reduce using rule 56 (statement -> THROW expr SEMI .)
    INTERFACE       reduce using rule 56 (statement -> THROW expr SEMI .)
    TRAIT           reduce using rule 56 (statement -> THROW expr SEMI .)
    NEW             reduce using rule 56 (statement -> THROW expr SEMI .)
    CLONE           reduce using rule 56 (statement -> THROW expr SEMI .)
    LIST            reduce using rule 56 (statement -> THROW expr SEMI .)
    ARRAY           reduce using rule 56 (statement -> THROW expr SEMI .)
    LBRACKET        reduce using rule 56 (statement -> THROW expr SEMI .)
    PLUS            reduce using rule 56 (statement -> THROW expr SEMI .)
    MINUS           reduce using rule 56 (statement -> THROW expr SEMI .)
    NOT             reduce using rule 56 (statement -> THROW expr SEMI .)
    BOOLEAN_NOT     reduce using rule 56 (statement -> THROW expr SEMI .)
    INC             reduce using rule 56 (statement -> THROW expr SEMI .)
    DEC             reduce using rule 56 (statement -> THROW expr SEMI .)
    INT_CAST        reduce using rule 56 (statement -> THROW expr SEMI .)
    DOUBLE_CAST     reduce using rule 56 (statement -> THROW expr SEMI .)
    STRING_CAST     reduce using rule 56 (statement -> THROW expr SEMI .)
    ARRAY_CAST      reduce using rule 56 (statement -> THROW expr SEMI .)
    OBJECT_CAST     reduce using rule 56 (statement -> THROW expr SEMI .)
    BOOL_CAST       reduce using rule 56 (statement -> THROW expr SEMI .)
    UNSET_CAST      reduce using rule 56 (statement -> THROW expr SEMI .)
    BINARY_CAST     reduce using rule 56 (statement -> THROW expr SEMI .)
    ISSET           reduce using rule 56 (statement -> THROW expr SEMI .)
    EMPTY           reduce using rule 56 (statement -> THROW expr SEMI .)
    EVAL            reduce using rule 56 (statement -> THROW expr SEMI .)
    INCLUDE         reduce using rule 56 (statement -> THROW expr SEMI .)
    INCLUDE_ONCE    reduce using rule 56 (statement -> THROW expr SEMI .)
    REQUIRE         reduce using rule 56 (statement -> THROW expr SEMI .)
    REQUIRE_ONCE    reduce using rule 56 (statement -> THROW expr SEMI .)
    PRINT           reduce using rule 56 (statement -> THROW expr SEMI .)
    AT              reduce using rule 56 (statement -> THROW expr SEMI .)
    LPAREN          reduce using rule 56 (statement -> THROW expr SEMI .)
    CLASS           reduce using rule 56 (statement -> THROW expr SEMI .)
    ABSTRACT        reduce using rule 56 (statement -> THROW expr SEMI .)
    FINAL           reduce using rule 56 (statement -> THROW expr SEMI .)
    QUOTE           reduce using rule 56 (statement -> THROW expr SEMI .)
    STRING          reduce using rule 56 (statement -> THROW expr SEMI .)
    STRING_VARNAME  reduce using rule 56 (statement -> THROW expr SEMI .)
    NS_SEPARATOR    reduce using rule 56 (statement -> THROW expr SEMI .)
    EXIT            reduce using rule 56 (statement -> THROW expr SEMI .)
    DIE             reduce using rule 56 (statement -> THROW expr SEMI .)
    LNUMBER         reduce using rule 56 (statement -> THROW expr SEMI .)
    DNUMBER         reduce using rule 56 (statement -> THROW expr SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 56 (statement -> THROW expr SEMI .)
    LINE            reduce using rule 56 (statement -> THROW expr SEMI .)
    FILE            reduce using rule 56 (statement -> THROW expr SEMI .)
    DIR             reduce using rule 56 (statement -> THROW expr SEMI .)
    CLASS_C         reduce using rule 56 (statement -> THROW expr SEMI .)
    METHOD_C        reduce using rule 56 (statement -> THROW expr SEMI .)
    FUNC_C          reduce using rule 56 (statement -> THROW expr SEMI .)
    NS_C            reduce using rule 56 (statement -> THROW expr SEMI .)
    START_HEREDOC   reduce using rule 56 (statement -> THROW expr SEMI .)
    START_NOWDOC    reduce using rule 56 (statement -> THROW expr SEMI .)
    BACKTICK        reduce using rule 56 (statement -> THROW expr SEMI .)
    DOLLAR          reduce using rule 56 (statement -> THROW expr SEMI .)
    VARIABLE        reduce using rule 56 (statement -> THROW expr SEMI .)
    $end            reduce using rule 56 (statement -> THROW expr SEMI .)
    RBRACE          reduce using rule 56 (statement -> THROW expr SEMI .)
    YIELD           reduce using rule 56 (statement -> THROW expr SEMI .)
    ELSEIF          reduce using rule 56 (statement -> THROW expr SEMI .)
    ELSE            reduce using rule 56 (statement -> THROW expr SEMI .)
    ENDIF           reduce using rule 56 (statement -> THROW expr SEMI .)
    ENDWHILE        reduce using rule 56 (statement -> THROW expr SEMI .)
    ENDDECLARE      reduce using rule 56 (statement -> THROW expr SEMI .)
    ENDFOREACH      reduce using rule 56 (statement -> THROW expr SEMI .)
    CASE            reduce using rule 56 (statement -> THROW expr SEMI .)
    DEFAULT         reduce using rule 56 (statement -> THROW expr SEMI .)
    ENDSWITCH       reduce using rule 56 (statement -> THROW expr SEMI .)
    ENDFOR          reduce using rule 56 (statement -> THROW expr SEMI .)


state 362

    (57) statement -> DECLARE LPAREN declare_list . RPAREN declare_statement
    (59) declare_list -> declare_list . COMMA STRING EQUALS static_scalar

    RPAREN          shift and go to state 501
    COMMA           shift and go to state 502


state 363

    (58) declare_list -> STRING . EQUALS static_scalar

    EQUALS          shift and go to state 503


state 364

    (108) function_declaration_statement -> FUNCTION is_reference STRING . LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE

    LPAREN          shift and go to state 504


state 365

    (271) expr -> FUNCTION is_reference LPAREN . parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (169) parameter_list -> . parameter_list COMMA parameter
    (170) parameter_list -> . parameter
    (171) parameter_list -> . empty
    (172) parameter -> . VARIABLE
    (173) parameter -> . class_name VARIABLE
    (174) parameter -> . AND VARIABLE
    (175) parameter -> . class_name AND VARIABLE
    (176) parameter -> . VARIABLE EQUALS static_scalar
    (177) parameter -> . class_name VARIABLE EQUALS static_scalar
    (178) parameter -> . AND VARIABLE EQUALS static_scalar
    (179) parameter -> . class_name AND VARIABLE EQUALS static_scalar
    (443) empty -> .
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    VARIABLE        shift and go to state 508
    AND             shift and go to state 510
    RPAREN          reduce using rule 443 (empty -> .)
    COMMA           reduce using rule 443 (empty -> .)
    NS_SEPARATOR    shift and go to state 210
    NAMESPACE       shift and go to state 211
    STATIC          shift and go to state 111
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117

    parameter_list                 shift and go to state 505
    parameter                      shift and go to state 506
    empty                          shift and go to state 507
    class_name                     shift and go to state 509
    namespace_name                 shift and go to state 209

state 366

    (353) scalar -> STRING QUOTE encaps_list . QUOTE
    (431) encaps_list -> encaps_list . encaps_var
    (433) encaps_list -> encaps_list . ENCAPSED_AND_WHITESPACE
    (434) encaps_var -> . VARIABLE
    (435) encaps_var -> . VARIABLE LBRACKET encaps_var_offset RBRACKET
    (436) encaps_var -> . VARIABLE OBJECT_OPERATOR STRING
    (437) encaps_var -> . DOLLAR_OPEN_CURLY_BRACES expr RBRACE
    (438) encaps_var -> . DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET expr RBRACKET RBRACE
    (439) encaps_var -> . CURLY_OPEN variable RBRACE

    QUOTE           shift and go to state 511
    ENCAPSED_AND_WHITESPACE shift and go to state 421
    VARIABLE        shift and go to state 422
    DOLLAR_OPEN_CURLY_BRACES shift and go to state 423
    CURLY_OPEN      shift and go to state 424

    encaps_var                     shift and go to state 420

state 367

    (109) class_declaration_statement -> class_entry_type STRING extends_from . implements_list LBRACE class_statement_list RBRACE
    (120) implements_list -> . IMPLEMENTS interface_list
    (121) implements_list -> . empty
    (443) empty -> .

    IMPLEMENTS      shift and go to state 513
    LBRACE          reduce using rule 443 (empty -> .)

    implements_list                shift and go to state 512
    empty                          shift and go to state 514

state 368

    (115) extends_from -> empty .

    IMPLEMENTS      reduce using rule 115 (extends_from -> empty .)
    LBRACE          reduce using rule 115 (extends_from -> empty .)


state 369

    (116) extends_from -> EXTENDS . fully_qualified_class_name
    (117) fully_qualified_class_name -> . namespace_name
    (118) fully_qualified_class_name -> . NS_SEPARATOR namespace_name
    (119) fully_qualified_class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    NS_SEPARATOR    shift and go to state 517
    NAMESPACE       shift and go to state 518
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117

    fully_qualified_class_name     shift and go to state 515
    namespace_name                 shift and go to state 516

state 370

    (110) class_declaration_statement -> INTERFACE STRING interface_extends_list . LBRACE class_statement_list RBRACE

    LBRACE          shift and go to state 519


state 371

    (150) interface_extends_list -> EXTENDS . interface_list
    (148) interface_list -> . interface_list COMMA fully_qualified_class_name
    (149) interface_list -> . fully_qualified_class_name
    (117) fully_qualified_class_name -> . namespace_name
    (118) fully_qualified_class_name -> . NS_SEPARATOR namespace_name
    (119) fully_qualified_class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    NS_SEPARATOR    shift and go to state 517
    NAMESPACE       shift and go to state 518
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117

    interface_list                 shift and go to state 520
    fully_qualified_class_name     shift and go to state 521
    namespace_name                 shift and go to state 516

state 372

    (151) interface_extends_list -> empty .

    LBRACE          reduce using rule 151 (interface_extends_list -> empty .)


state 373

    (111) class_declaration_statement -> TRAIT STRING LBRACE . trait_statement_list RBRACE
    (129) trait_statement_list -> . trait_statement_list trait_statement
    (130) trait_statement_list -> . empty
    (443) empty -> .

    RBRACE          reduce using rule 443 (empty -> .)
    USE             reduce using rule 443 (empty -> .)
    VAR             reduce using rule 443 (empty -> .)
    STATIC          reduce using rule 443 (empty -> .)
    ABSTRACT        reduce using rule 443 (empty -> .)
    FINAL           reduce using rule 443 (empty -> .)
    PUBLIC          reduce using rule 443 (empty -> .)
    PROTECTED       reduce using rule 443 (empty -> .)
    PRIVATE         reduce using rule 443 (empty -> .)
    FUNCTION        reduce using rule 443 (empty -> .)

    trait_statement_list           shift and go to state 522
    empty                          shift and go to state 523

state 374

    (181) expr -> variable EQUALS expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 181 (expr -> variable EQUALS expr .)
    OBJECT_OPERATOR reduce using rule 181 (expr -> variable EQUALS expr .)
    LBRACE          reduce using rule 181 (expr -> variable EQUALS expr .)
    LOGICAL_AND     reduce using rule 181 (expr -> variable EQUALS expr .)
    LOGICAL_OR      reduce using rule 181 (expr -> variable EQUALS expr .)
    LOGICAL_XOR     reduce using rule 181 (expr -> variable EQUALS expr .)
    RPAREN          reduce using rule 181 (expr -> variable EQUALS expr .)
    COMMA           reduce using rule 181 (expr -> variable EQUALS expr .)
    DOUBLE_ARROW    reduce using rule 181 (expr -> variable EQUALS expr .)
    RBRACKET        reduce using rule 181 (expr -> variable EQUALS expr .)
    RBRACE          reduce using rule 181 (expr -> variable EQUALS expr .)
    COLON           reduce using rule 181 (expr -> variable EQUALS expr .)
    AS              reduce using rule 181 (expr -> variable EQUALS expr .)
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158

  ! BOOLEAN_AND     [ reduce using rule 181 (expr -> variable EQUALS expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 181 (expr -> variable EQUALS expr .) ]
  ! AND             [ reduce using rule 181 (expr -> variable EQUALS expr .) ]
  ! OR              [ reduce using rule 181 (expr -> variable EQUALS expr .) ]
  ! XOR             [ reduce using rule 181 (expr -> variable EQUALS expr .) ]
  ! CONCAT          [ reduce using rule 181 (expr -> variable EQUALS expr .) ]
  ! PLUS            [ reduce using rule 181 (expr -> variable EQUALS expr .) ]
  ! MINUS           [ reduce using rule 181 (expr -> variable EQUALS expr .) ]
  ! MUL             [ reduce using rule 181 (expr -> variable EQUALS expr .) ]
  ! DIV             [ reduce using rule 181 (expr -> variable EQUALS expr .) ]
  ! SL              [ reduce using rule 181 (expr -> variable EQUALS expr .) ]
  ! SR              [ reduce using rule 181 (expr -> variable EQUALS expr .) ]
  ! MOD             [ reduce using rule 181 (expr -> variable EQUALS expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 181 (expr -> variable EQUALS expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 181 (expr -> variable EQUALS expr .) ]
  ! IS_EQUAL        [ reduce using rule 181 (expr -> variable EQUALS expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 181 (expr -> variable EQUALS expr .) ]
  ! IS_SMALLER      [ reduce using rule 181 (expr -> variable EQUALS expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 181 (expr -> variable EQUALS expr .) ]
  ! IS_GREATER      [ reduce using rule 181 (expr -> variable EQUALS expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 181 (expr -> variable EQUALS expr .) ]
  ! INSTANCEOF      [ reduce using rule 181 (expr -> variable EQUALS expr .) ]
  ! QUESTION        [ reduce using rule 181 (expr -> variable EQUALS expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]


state 375

    (182) expr -> variable EQUALS AND . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    variable                       shift and go to state 39
    expr                           shift and go to state 524
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 376

    (278) expr -> variable PLUS_EQUAL expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 278 (expr -> variable PLUS_EQUAL expr .)
    OBJECT_OPERATOR reduce using rule 278 (expr -> variable PLUS_EQUAL expr .)
    LBRACE          reduce using rule 278 (expr -> variable PLUS_EQUAL expr .)
    LOGICAL_AND     reduce using rule 278 (expr -> variable PLUS_EQUAL expr .)
    LOGICAL_OR      reduce using rule 278 (expr -> variable PLUS_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 278 (expr -> variable PLUS_EQUAL expr .)
    RPAREN          reduce using rule 278 (expr -> variable PLUS_EQUAL expr .)
    COMMA           reduce using rule 278 (expr -> variable PLUS_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 278 (expr -> variable PLUS_EQUAL expr .)
    RBRACKET        reduce using rule 278 (expr -> variable PLUS_EQUAL expr .)
    RBRACE          reduce using rule 278 (expr -> variable PLUS_EQUAL expr .)
    COLON           reduce using rule 278 (expr -> variable PLUS_EQUAL expr .)
    AS              reduce using rule 278 (expr -> variable PLUS_EQUAL expr .)
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158

  ! BOOLEAN_AND     [ reduce using rule 278 (expr -> variable PLUS_EQUAL expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 278 (expr -> variable PLUS_EQUAL expr .) ]
  ! AND             [ reduce using rule 278 (expr -> variable PLUS_EQUAL expr .) ]
  ! OR              [ reduce using rule 278 (expr -> variable PLUS_EQUAL expr .) ]
  ! XOR             [ reduce using rule 278 (expr -> variable PLUS_EQUAL expr .) ]
  ! CONCAT          [ reduce using rule 278 (expr -> variable PLUS_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 278 (expr -> variable PLUS_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 278 (expr -> variable PLUS_EQUAL expr .) ]
  ! MUL             [ reduce using rule 278 (expr -> variable PLUS_EQUAL expr .) ]
  ! DIV             [ reduce using rule 278 (expr -> variable PLUS_EQUAL expr .) ]
  ! SL              [ reduce using rule 278 (expr -> variable PLUS_EQUAL expr .) ]
  ! SR              [ reduce using rule 278 (expr -> variable PLUS_EQUAL expr .) ]
  ! MOD             [ reduce using rule 278 (expr -> variable PLUS_EQUAL expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 278 (expr -> variable PLUS_EQUAL expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 278 (expr -> variable PLUS_EQUAL expr .) ]
  ! IS_EQUAL        [ reduce using rule 278 (expr -> variable PLUS_EQUAL expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 278 (expr -> variable PLUS_EQUAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 278 (expr -> variable PLUS_EQUAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 278 (expr -> variable PLUS_EQUAL expr .) ]
  ! IS_GREATER      [ reduce using rule 278 (expr -> variable PLUS_EQUAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 278 (expr -> variable PLUS_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 278 (expr -> variable PLUS_EQUAL expr .) ]
  ! QUESTION        [ reduce using rule 278 (expr -> variable PLUS_EQUAL expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]


state 377

    (279) expr -> variable MINUS_EQUAL expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 279 (expr -> variable MINUS_EQUAL expr .)
    OBJECT_OPERATOR reduce using rule 279 (expr -> variable MINUS_EQUAL expr .)
    LBRACE          reduce using rule 279 (expr -> variable MINUS_EQUAL expr .)
    LOGICAL_AND     reduce using rule 279 (expr -> variable MINUS_EQUAL expr .)
    LOGICAL_OR      reduce using rule 279 (expr -> variable MINUS_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 279 (expr -> variable MINUS_EQUAL expr .)
    RPAREN          reduce using rule 279 (expr -> variable MINUS_EQUAL expr .)
    COMMA           reduce using rule 279 (expr -> variable MINUS_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 279 (expr -> variable MINUS_EQUAL expr .)
    RBRACKET        reduce using rule 279 (expr -> variable MINUS_EQUAL expr .)
    RBRACE          reduce using rule 279 (expr -> variable MINUS_EQUAL expr .)
    COLON           reduce using rule 279 (expr -> variable MINUS_EQUAL expr .)
    AS              reduce using rule 279 (expr -> variable MINUS_EQUAL expr .)
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158

  ! BOOLEAN_AND     [ reduce using rule 279 (expr -> variable MINUS_EQUAL expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 279 (expr -> variable MINUS_EQUAL expr .) ]
  ! AND             [ reduce using rule 279 (expr -> variable MINUS_EQUAL expr .) ]
  ! OR              [ reduce using rule 279 (expr -> variable MINUS_EQUAL expr .) ]
  ! XOR             [ reduce using rule 279 (expr -> variable MINUS_EQUAL expr .) ]
  ! CONCAT          [ reduce using rule 279 (expr -> variable MINUS_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 279 (expr -> variable MINUS_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 279 (expr -> variable MINUS_EQUAL expr .) ]
  ! MUL             [ reduce using rule 279 (expr -> variable MINUS_EQUAL expr .) ]
  ! DIV             [ reduce using rule 279 (expr -> variable MINUS_EQUAL expr .) ]
  ! SL              [ reduce using rule 279 (expr -> variable MINUS_EQUAL expr .) ]
  ! SR              [ reduce using rule 279 (expr -> variable MINUS_EQUAL expr .) ]
  ! MOD             [ reduce using rule 279 (expr -> variable MINUS_EQUAL expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 279 (expr -> variable MINUS_EQUAL expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 279 (expr -> variable MINUS_EQUAL expr .) ]
  ! IS_EQUAL        [ reduce using rule 279 (expr -> variable MINUS_EQUAL expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 279 (expr -> variable MINUS_EQUAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 279 (expr -> variable MINUS_EQUAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 279 (expr -> variable MINUS_EQUAL expr .) ]
  ! IS_GREATER      [ reduce using rule 279 (expr -> variable MINUS_EQUAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 279 (expr -> variable MINUS_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 279 (expr -> variable MINUS_EQUAL expr .) ]
  ! QUESTION        [ reduce using rule 279 (expr -> variable MINUS_EQUAL expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]


state 378

    (280) expr -> variable MUL_EQUAL expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 280 (expr -> variable MUL_EQUAL expr .)
    OBJECT_OPERATOR reduce using rule 280 (expr -> variable MUL_EQUAL expr .)
    LBRACE          reduce using rule 280 (expr -> variable MUL_EQUAL expr .)
    LOGICAL_AND     reduce using rule 280 (expr -> variable MUL_EQUAL expr .)
    LOGICAL_OR      reduce using rule 280 (expr -> variable MUL_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 280 (expr -> variable MUL_EQUAL expr .)
    RPAREN          reduce using rule 280 (expr -> variable MUL_EQUAL expr .)
    COMMA           reduce using rule 280 (expr -> variable MUL_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 280 (expr -> variable MUL_EQUAL expr .)
    RBRACKET        reduce using rule 280 (expr -> variable MUL_EQUAL expr .)
    RBRACE          reduce using rule 280 (expr -> variable MUL_EQUAL expr .)
    COLON           reduce using rule 280 (expr -> variable MUL_EQUAL expr .)
    AS              reduce using rule 280 (expr -> variable MUL_EQUAL expr .)
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158

  ! BOOLEAN_AND     [ reduce using rule 280 (expr -> variable MUL_EQUAL expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 280 (expr -> variable MUL_EQUAL expr .) ]
  ! AND             [ reduce using rule 280 (expr -> variable MUL_EQUAL expr .) ]
  ! OR              [ reduce using rule 280 (expr -> variable MUL_EQUAL expr .) ]
  ! XOR             [ reduce using rule 280 (expr -> variable MUL_EQUAL expr .) ]
  ! CONCAT          [ reduce using rule 280 (expr -> variable MUL_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 280 (expr -> variable MUL_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 280 (expr -> variable MUL_EQUAL expr .) ]
  ! MUL             [ reduce using rule 280 (expr -> variable MUL_EQUAL expr .) ]
  ! DIV             [ reduce using rule 280 (expr -> variable MUL_EQUAL expr .) ]
  ! SL              [ reduce using rule 280 (expr -> variable MUL_EQUAL expr .) ]
  ! SR              [ reduce using rule 280 (expr -> variable MUL_EQUAL expr .) ]
  ! MOD             [ reduce using rule 280 (expr -> variable MUL_EQUAL expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 280 (expr -> variable MUL_EQUAL expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 280 (expr -> variable MUL_EQUAL expr .) ]
  ! IS_EQUAL        [ reduce using rule 280 (expr -> variable MUL_EQUAL expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 280 (expr -> variable MUL_EQUAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 280 (expr -> variable MUL_EQUAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 280 (expr -> variable MUL_EQUAL expr .) ]
  ! IS_GREATER      [ reduce using rule 280 (expr -> variable MUL_EQUAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 280 (expr -> variable MUL_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 280 (expr -> variable MUL_EQUAL expr .) ]
  ! QUESTION        [ reduce using rule 280 (expr -> variable MUL_EQUAL expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]


state 379

    (281) expr -> variable DIV_EQUAL expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 281 (expr -> variable DIV_EQUAL expr .)
    OBJECT_OPERATOR reduce using rule 281 (expr -> variable DIV_EQUAL expr .)
    LBRACE          reduce using rule 281 (expr -> variable DIV_EQUAL expr .)
    LOGICAL_AND     reduce using rule 281 (expr -> variable DIV_EQUAL expr .)
    LOGICAL_OR      reduce using rule 281 (expr -> variable DIV_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 281 (expr -> variable DIV_EQUAL expr .)
    RPAREN          reduce using rule 281 (expr -> variable DIV_EQUAL expr .)
    COMMA           reduce using rule 281 (expr -> variable DIV_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 281 (expr -> variable DIV_EQUAL expr .)
    RBRACKET        reduce using rule 281 (expr -> variable DIV_EQUAL expr .)
    RBRACE          reduce using rule 281 (expr -> variable DIV_EQUAL expr .)
    COLON           reduce using rule 281 (expr -> variable DIV_EQUAL expr .)
    AS              reduce using rule 281 (expr -> variable DIV_EQUAL expr .)
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158

  ! BOOLEAN_AND     [ reduce using rule 281 (expr -> variable DIV_EQUAL expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 281 (expr -> variable DIV_EQUAL expr .) ]
  ! AND             [ reduce using rule 281 (expr -> variable DIV_EQUAL expr .) ]
  ! OR              [ reduce using rule 281 (expr -> variable DIV_EQUAL expr .) ]
  ! XOR             [ reduce using rule 281 (expr -> variable DIV_EQUAL expr .) ]
  ! CONCAT          [ reduce using rule 281 (expr -> variable DIV_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 281 (expr -> variable DIV_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 281 (expr -> variable DIV_EQUAL expr .) ]
  ! MUL             [ reduce using rule 281 (expr -> variable DIV_EQUAL expr .) ]
  ! DIV             [ reduce using rule 281 (expr -> variable DIV_EQUAL expr .) ]
  ! SL              [ reduce using rule 281 (expr -> variable DIV_EQUAL expr .) ]
  ! SR              [ reduce using rule 281 (expr -> variable DIV_EQUAL expr .) ]
  ! MOD             [ reduce using rule 281 (expr -> variable DIV_EQUAL expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 281 (expr -> variable DIV_EQUAL expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 281 (expr -> variable DIV_EQUAL expr .) ]
  ! IS_EQUAL        [ reduce using rule 281 (expr -> variable DIV_EQUAL expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 281 (expr -> variable DIV_EQUAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 281 (expr -> variable DIV_EQUAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 281 (expr -> variable DIV_EQUAL expr .) ]
  ! IS_GREATER      [ reduce using rule 281 (expr -> variable DIV_EQUAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 281 (expr -> variable DIV_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 281 (expr -> variable DIV_EQUAL expr .) ]
  ! QUESTION        [ reduce using rule 281 (expr -> variable DIV_EQUAL expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]


state 380

    (282) expr -> variable CONCAT_EQUAL expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .)
    OBJECT_OPERATOR reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .)
    LBRACE          reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .)
    LOGICAL_AND     reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .)
    LOGICAL_OR      reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .)
    RPAREN          reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .)
    COMMA           reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .)
    RBRACKET        reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .)
    RBRACE          reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .)
    COLON           reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .)
    AS              reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .)
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158

  ! BOOLEAN_AND     [ reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .) ]
  ! AND             [ reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .) ]
  ! OR              [ reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .) ]
  ! XOR             [ reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .) ]
  ! CONCAT          [ reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .) ]
  ! MUL             [ reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .) ]
  ! DIV             [ reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .) ]
  ! SL              [ reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .) ]
  ! SR              [ reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .) ]
  ! MOD             [ reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .) ]
  ! IS_EQUAL        [ reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .) ]
  ! IS_GREATER      [ reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .) ]
  ! QUESTION        [ reduce using rule 282 (expr -> variable CONCAT_EQUAL expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]


state 381

    (283) expr -> variable MOD_EQUAL expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 283 (expr -> variable MOD_EQUAL expr .)
    OBJECT_OPERATOR reduce using rule 283 (expr -> variable MOD_EQUAL expr .)
    LBRACE          reduce using rule 283 (expr -> variable MOD_EQUAL expr .)
    LOGICAL_AND     reduce using rule 283 (expr -> variable MOD_EQUAL expr .)
    LOGICAL_OR      reduce using rule 283 (expr -> variable MOD_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 283 (expr -> variable MOD_EQUAL expr .)
    RPAREN          reduce using rule 283 (expr -> variable MOD_EQUAL expr .)
    COMMA           reduce using rule 283 (expr -> variable MOD_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 283 (expr -> variable MOD_EQUAL expr .)
    RBRACKET        reduce using rule 283 (expr -> variable MOD_EQUAL expr .)
    RBRACE          reduce using rule 283 (expr -> variable MOD_EQUAL expr .)
    COLON           reduce using rule 283 (expr -> variable MOD_EQUAL expr .)
    AS              reduce using rule 283 (expr -> variable MOD_EQUAL expr .)
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158

  ! BOOLEAN_AND     [ reduce using rule 283 (expr -> variable MOD_EQUAL expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 283 (expr -> variable MOD_EQUAL expr .) ]
  ! AND             [ reduce using rule 283 (expr -> variable MOD_EQUAL expr .) ]
  ! OR              [ reduce using rule 283 (expr -> variable MOD_EQUAL expr .) ]
  ! XOR             [ reduce using rule 283 (expr -> variable MOD_EQUAL expr .) ]
  ! CONCAT          [ reduce using rule 283 (expr -> variable MOD_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 283 (expr -> variable MOD_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 283 (expr -> variable MOD_EQUAL expr .) ]
  ! MUL             [ reduce using rule 283 (expr -> variable MOD_EQUAL expr .) ]
  ! DIV             [ reduce using rule 283 (expr -> variable MOD_EQUAL expr .) ]
  ! SL              [ reduce using rule 283 (expr -> variable MOD_EQUAL expr .) ]
  ! SR              [ reduce using rule 283 (expr -> variable MOD_EQUAL expr .) ]
  ! MOD             [ reduce using rule 283 (expr -> variable MOD_EQUAL expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 283 (expr -> variable MOD_EQUAL expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 283 (expr -> variable MOD_EQUAL expr .) ]
  ! IS_EQUAL        [ reduce using rule 283 (expr -> variable MOD_EQUAL expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 283 (expr -> variable MOD_EQUAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 283 (expr -> variable MOD_EQUAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 283 (expr -> variable MOD_EQUAL expr .) ]
  ! IS_GREATER      [ reduce using rule 283 (expr -> variable MOD_EQUAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 283 (expr -> variable MOD_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 283 (expr -> variable MOD_EQUAL expr .) ]
  ! QUESTION        [ reduce using rule 283 (expr -> variable MOD_EQUAL expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]


state 382

    (284) expr -> variable AND_EQUAL expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 284 (expr -> variable AND_EQUAL expr .)
    OBJECT_OPERATOR reduce using rule 284 (expr -> variable AND_EQUAL expr .)
    LBRACE          reduce using rule 284 (expr -> variable AND_EQUAL expr .)
    LOGICAL_AND     reduce using rule 284 (expr -> variable AND_EQUAL expr .)
    LOGICAL_OR      reduce using rule 284 (expr -> variable AND_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 284 (expr -> variable AND_EQUAL expr .)
    RPAREN          reduce using rule 284 (expr -> variable AND_EQUAL expr .)
    COMMA           reduce using rule 284 (expr -> variable AND_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 284 (expr -> variable AND_EQUAL expr .)
    RBRACKET        reduce using rule 284 (expr -> variable AND_EQUAL expr .)
    RBRACE          reduce using rule 284 (expr -> variable AND_EQUAL expr .)
    COLON           reduce using rule 284 (expr -> variable AND_EQUAL expr .)
    AS              reduce using rule 284 (expr -> variable AND_EQUAL expr .)
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158

  ! BOOLEAN_AND     [ reduce using rule 284 (expr -> variable AND_EQUAL expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 284 (expr -> variable AND_EQUAL expr .) ]
  ! AND             [ reduce using rule 284 (expr -> variable AND_EQUAL expr .) ]
  ! OR              [ reduce using rule 284 (expr -> variable AND_EQUAL expr .) ]
  ! XOR             [ reduce using rule 284 (expr -> variable AND_EQUAL expr .) ]
  ! CONCAT          [ reduce using rule 284 (expr -> variable AND_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 284 (expr -> variable AND_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 284 (expr -> variable AND_EQUAL expr .) ]
  ! MUL             [ reduce using rule 284 (expr -> variable AND_EQUAL expr .) ]
  ! DIV             [ reduce using rule 284 (expr -> variable AND_EQUAL expr .) ]
  ! SL              [ reduce using rule 284 (expr -> variable AND_EQUAL expr .) ]
  ! SR              [ reduce using rule 284 (expr -> variable AND_EQUAL expr .) ]
  ! MOD             [ reduce using rule 284 (expr -> variable AND_EQUAL expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 284 (expr -> variable AND_EQUAL expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 284 (expr -> variable AND_EQUAL expr .) ]
  ! IS_EQUAL        [ reduce using rule 284 (expr -> variable AND_EQUAL expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 284 (expr -> variable AND_EQUAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 284 (expr -> variable AND_EQUAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 284 (expr -> variable AND_EQUAL expr .) ]
  ! IS_GREATER      [ reduce using rule 284 (expr -> variable AND_EQUAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 284 (expr -> variable AND_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 284 (expr -> variable AND_EQUAL expr .) ]
  ! QUESTION        [ reduce using rule 284 (expr -> variable AND_EQUAL expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]


state 383

    (285) expr -> variable OR_EQUAL expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 285 (expr -> variable OR_EQUAL expr .)
    OBJECT_OPERATOR reduce using rule 285 (expr -> variable OR_EQUAL expr .)
    LBRACE          reduce using rule 285 (expr -> variable OR_EQUAL expr .)
    LOGICAL_AND     reduce using rule 285 (expr -> variable OR_EQUAL expr .)
    LOGICAL_OR      reduce using rule 285 (expr -> variable OR_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 285 (expr -> variable OR_EQUAL expr .)
    RPAREN          reduce using rule 285 (expr -> variable OR_EQUAL expr .)
    COMMA           reduce using rule 285 (expr -> variable OR_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 285 (expr -> variable OR_EQUAL expr .)
    RBRACKET        reduce using rule 285 (expr -> variable OR_EQUAL expr .)
    RBRACE          reduce using rule 285 (expr -> variable OR_EQUAL expr .)
    COLON           reduce using rule 285 (expr -> variable OR_EQUAL expr .)
    AS              reduce using rule 285 (expr -> variable OR_EQUAL expr .)
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158

  ! BOOLEAN_AND     [ reduce using rule 285 (expr -> variable OR_EQUAL expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 285 (expr -> variable OR_EQUAL expr .) ]
  ! AND             [ reduce using rule 285 (expr -> variable OR_EQUAL expr .) ]
  ! OR              [ reduce using rule 285 (expr -> variable OR_EQUAL expr .) ]
  ! XOR             [ reduce using rule 285 (expr -> variable OR_EQUAL expr .) ]
  ! CONCAT          [ reduce using rule 285 (expr -> variable OR_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 285 (expr -> variable OR_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 285 (expr -> variable OR_EQUAL expr .) ]
  ! MUL             [ reduce using rule 285 (expr -> variable OR_EQUAL expr .) ]
  ! DIV             [ reduce using rule 285 (expr -> variable OR_EQUAL expr .) ]
  ! SL              [ reduce using rule 285 (expr -> variable OR_EQUAL expr .) ]
  ! SR              [ reduce using rule 285 (expr -> variable OR_EQUAL expr .) ]
  ! MOD             [ reduce using rule 285 (expr -> variable OR_EQUAL expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 285 (expr -> variable OR_EQUAL expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 285 (expr -> variable OR_EQUAL expr .) ]
  ! IS_EQUAL        [ reduce using rule 285 (expr -> variable OR_EQUAL expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 285 (expr -> variable OR_EQUAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 285 (expr -> variable OR_EQUAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 285 (expr -> variable OR_EQUAL expr .) ]
  ! IS_GREATER      [ reduce using rule 285 (expr -> variable OR_EQUAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 285 (expr -> variable OR_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 285 (expr -> variable OR_EQUAL expr .) ]
  ! QUESTION        [ reduce using rule 285 (expr -> variable OR_EQUAL expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]


state 384

    (286) expr -> variable XOR_EQUAL expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 286 (expr -> variable XOR_EQUAL expr .)
    OBJECT_OPERATOR reduce using rule 286 (expr -> variable XOR_EQUAL expr .)
    LBRACE          reduce using rule 286 (expr -> variable XOR_EQUAL expr .)
    LOGICAL_AND     reduce using rule 286 (expr -> variable XOR_EQUAL expr .)
    LOGICAL_OR      reduce using rule 286 (expr -> variable XOR_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 286 (expr -> variable XOR_EQUAL expr .)
    RPAREN          reduce using rule 286 (expr -> variable XOR_EQUAL expr .)
    COMMA           reduce using rule 286 (expr -> variable XOR_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 286 (expr -> variable XOR_EQUAL expr .)
    RBRACKET        reduce using rule 286 (expr -> variable XOR_EQUAL expr .)
    RBRACE          reduce using rule 286 (expr -> variable XOR_EQUAL expr .)
    COLON           reduce using rule 286 (expr -> variable XOR_EQUAL expr .)
    AS              reduce using rule 286 (expr -> variable XOR_EQUAL expr .)
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158

  ! BOOLEAN_AND     [ reduce using rule 286 (expr -> variable XOR_EQUAL expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 286 (expr -> variable XOR_EQUAL expr .) ]
  ! AND             [ reduce using rule 286 (expr -> variable XOR_EQUAL expr .) ]
  ! OR              [ reduce using rule 286 (expr -> variable XOR_EQUAL expr .) ]
  ! XOR             [ reduce using rule 286 (expr -> variable XOR_EQUAL expr .) ]
  ! CONCAT          [ reduce using rule 286 (expr -> variable XOR_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 286 (expr -> variable XOR_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 286 (expr -> variable XOR_EQUAL expr .) ]
  ! MUL             [ reduce using rule 286 (expr -> variable XOR_EQUAL expr .) ]
  ! DIV             [ reduce using rule 286 (expr -> variable XOR_EQUAL expr .) ]
  ! SL              [ reduce using rule 286 (expr -> variable XOR_EQUAL expr .) ]
  ! SR              [ reduce using rule 286 (expr -> variable XOR_EQUAL expr .) ]
  ! MOD             [ reduce using rule 286 (expr -> variable XOR_EQUAL expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 286 (expr -> variable XOR_EQUAL expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 286 (expr -> variable XOR_EQUAL expr .) ]
  ! IS_EQUAL        [ reduce using rule 286 (expr -> variable XOR_EQUAL expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 286 (expr -> variable XOR_EQUAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 286 (expr -> variable XOR_EQUAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 286 (expr -> variable XOR_EQUAL expr .) ]
  ! IS_GREATER      [ reduce using rule 286 (expr -> variable XOR_EQUAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 286 (expr -> variable XOR_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 286 (expr -> variable XOR_EQUAL expr .) ]
  ! QUESTION        [ reduce using rule 286 (expr -> variable XOR_EQUAL expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]


state 385

    (287) expr -> variable SL_EQUAL expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 287 (expr -> variable SL_EQUAL expr .)
    OBJECT_OPERATOR reduce using rule 287 (expr -> variable SL_EQUAL expr .)
    LBRACE          reduce using rule 287 (expr -> variable SL_EQUAL expr .)
    LOGICAL_AND     reduce using rule 287 (expr -> variable SL_EQUAL expr .)
    LOGICAL_OR      reduce using rule 287 (expr -> variable SL_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 287 (expr -> variable SL_EQUAL expr .)
    RPAREN          reduce using rule 287 (expr -> variable SL_EQUAL expr .)
    COMMA           reduce using rule 287 (expr -> variable SL_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 287 (expr -> variable SL_EQUAL expr .)
    RBRACKET        reduce using rule 287 (expr -> variable SL_EQUAL expr .)
    RBRACE          reduce using rule 287 (expr -> variable SL_EQUAL expr .)
    COLON           reduce using rule 287 (expr -> variable SL_EQUAL expr .)
    AS              reduce using rule 287 (expr -> variable SL_EQUAL expr .)
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158

  ! BOOLEAN_AND     [ reduce using rule 287 (expr -> variable SL_EQUAL expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 287 (expr -> variable SL_EQUAL expr .) ]
  ! AND             [ reduce using rule 287 (expr -> variable SL_EQUAL expr .) ]
  ! OR              [ reduce using rule 287 (expr -> variable SL_EQUAL expr .) ]
  ! XOR             [ reduce using rule 287 (expr -> variable SL_EQUAL expr .) ]
  ! CONCAT          [ reduce using rule 287 (expr -> variable SL_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 287 (expr -> variable SL_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 287 (expr -> variable SL_EQUAL expr .) ]
  ! MUL             [ reduce using rule 287 (expr -> variable SL_EQUAL expr .) ]
  ! DIV             [ reduce using rule 287 (expr -> variable SL_EQUAL expr .) ]
  ! SL              [ reduce using rule 287 (expr -> variable SL_EQUAL expr .) ]
  ! SR              [ reduce using rule 287 (expr -> variable SL_EQUAL expr .) ]
  ! MOD             [ reduce using rule 287 (expr -> variable SL_EQUAL expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 287 (expr -> variable SL_EQUAL expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 287 (expr -> variable SL_EQUAL expr .) ]
  ! IS_EQUAL        [ reduce using rule 287 (expr -> variable SL_EQUAL expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 287 (expr -> variable SL_EQUAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 287 (expr -> variable SL_EQUAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 287 (expr -> variable SL_EQUAL expr .) ]
  ! IS_GREATER      [ reduce using rule 287 (expr -> variable SL_EQUAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 287 (expr -> variable SL_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 287 (expr -> variable SL_EQUAL expr .) ]
  ! QUESTION        [ reduce using rule 287 (expr -> variable SL_EQUAL expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]


state 386

    (288) expr -> variable SR_EQUAL expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 288 (expr -> variable SR_EQUAL expr .)
    OBJECT_OPERATOR reduce using rule 288 (expr -> variable SR_EQUAL expr .)
    LBRACE          reduce using rule 288 (expr -> variable SR_EQUAL expr .)
    LOGICAL_AND     reduce using rule 288 (expr -> variable SR_EQUAL expr .)
    LOGICAL_OR      reduce using rule 288 (expr -> variable SR_EQUAL expr .)
    LOGICAL_XOR     reduce using rule 288 (expr -> variable SR_EQUAL expr .)
    RPAREN          reduce using rule 288 (expr -> variable SR_EQUAL expr .)
    COMMA           reduce using rule 288 (expr -> variable SR_EQUAL expr .)
    DOUBLE_ARROW    reduce using rule 288 (expr -> variable SR_EQUAL expr .)
    RBRACKET        reduce using rule 288 (expr -> variable SR_EQUAL expr .)
    RBRACE          reduce using rule 288 (expr -> variable SR_EQUAL expr .)
    COLON           reduce using rule 288 (expr -> variable SR_EQUAL expr .)
    AS              reduce using rule 288 (expr -> variable SR_EQUAL expr .)
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158

  ! BOOLEAN_AND     [ reduce using rule 288 (expr -> variable SR_EQUAL expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 288 (expr -> variable SR_EQUAL expr .) ]
  ! AND             [ reduce using rule 288 (expr -> variable SR_EQUAL expr .) ]
  ! OR              [ reduce using rule 288 (expr -> variable SR_EQUAL expr .) ]
  ! XOR             [ reduce using rule 288 (expr -> variable SR_EQUAL expr .) ]
  ! CONCAT          [ reduce using rule 288 (expr -> variable SR_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 288 (expr -> variable SR_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 288 (expr -> variable SR_EQUAL expr .) ]
  ! MUL             [ reduce using rule 288 (expr -> variable SR_EQUAL expr .) ]
  ! DIV             [ reduce using rule 288 (expr -> variable SR_EQUAL expr .) ]
  ! SL              [ reduce using rule 288 (expr -> variable SR_EQUAL expr .) ]
  ! SR              [ reduce using rule 288 (expr -> variable SR_EQUAL expr .) ]
  ! MOD             [ reduce using rule 288 (expr -> variable SR_EQUAL expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 288 (expr -> variable SR_EQUAL expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 288 (expr -> variable SR_EQUAL expr .) ]
  ! IS_EQUAL        [ reduce using rule 288 (expr -> variable SR_EQUAL expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 288 (expr -> variable SR_EQUAL expr .) ]
  ! IS_SMALLER      [ reduce using rule 288 (expr -> variable SR_EQUAL expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 288 (expr -> variable SR_EQUAL expr .) ]
  ! IS_GREATER      [ reduce using rule 288 (expr -> variable SR_EQUAL expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 288 (expr -> variable SR_EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 288 (expr -> variable SR_EQUAL expr .) ]
  ! QUESTION        [ reduce using rule 288 (expr -> variable SR_EQUAL expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]


state 387

    (234) variable -> variable LBRACKET dim_offset . RBRACKET

    RBRACKET        shift and go to state 525


state 388

    (183) expr -> NEW class_name_reference ctor_arguments .

    SEMI            reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    OBJECT_OPERATOR reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    LBRACE          reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    BOOLEAN_AND     reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    BOOLEAN_OR      reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    LOGICAL_AND     reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    LOGICAL_OR      reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    LOGICAL_XOR     reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    AND             reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    OR              reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    XOR             reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    CONCAT          reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    PLUS            reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    MINUS           reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    MUL             reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    DIV             reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    SL              reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    SR              reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    MOD             reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    IS_IDENTICAL    reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    IS_NOT_IDENTICAL reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    IS_EQUAL        reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    IS_NOT_EQUAL    reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    IS_SMALLER      reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    IS_SMALLER_OR_EQUAL reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    IS_GREATER      reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    IS_GREATER_OR_EQUAL reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    INSTANCEOF      reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    QUESTION        reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    RPAREN          reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    COMMA           reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    DOUBLE_ARROW    reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    RBRACKET        reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    RBRACE          reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    COLON           reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)
    AS              reduce using rule 183 (expr -> NEW class_name_reference ctor_arguments .)


state 389

    (196) ctor_arguments -> LPAREN . function_call_parameter_list RPAREN
    (266) function_call_parameter_list -> . function_call_parameter_list COMMA function_call_parameter
    (267) function_call_parameter_list -> . function_call_parameter
    (268) function_call_parameter_list -> . empty
    (269) function_call_parameter -> . expr
    (270) function_call_parameter -> . AND variable
    (443) empty -> .
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 284
    RPAREN          reduce using rule 443 (empty -> .)
    COMMA           reduce using rule 443 (empty -> .)
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    function_call_parameter_list   shift and go to state 526
    function_call_parameter        shift and go to state 281
    empty                          shift and go to state 282
    expr                           shift and go to state 283
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 390

    (197) ctor_arguments -> empty .

    SEMI            reduce using rule 197 (ctor_arguments -> empty .)
    OBJECT_OPERATOR reduce using rule 197 (ctor_arguments -> empty .)
    LBRACE          reduce using rule 197 (ctor_arguments -> empty .)
    BOOLEAN_AND     reduce using rule 197 (ctor_arguments -> empty .)
    BOOLEAN_OR      reduce using rule 197 (ctor_arguments -> empty .)
    LOGICAL_AND     reduce using rule 197 (ctor_arguments -> empty .)
    LOGICAL_OR      reduce using rule 197 (ctor_arguments -> empty .)
    LOGICAL_XOR     reduce using rule 197 (ctor_arguments -> empty .)
    AND             reduce using rule 197 (ctor_arguments -> empty .)
    OR              reduce using rule 197 (ctor_arguments -> empty .)
    XOR             reduce using rule 197 (ctor_arguments -> empty .)
    CONCAT          reduce using rule 197 (ctor_arguments -> empty .)
    PLUS            reduce using rule 197 (ctor_arguments -> empty .)
    MINUS           reduce using rule 197 (ctor_arguments -> empty .)
    MUL             reduce using rule 197 (ctor_arguments -> empty .)
    DIV             reduce using rule 197 (ctor_arguments -> empty .)
    SL              reduce using rule 197 (ctor_arguments -> empty .)
    SR              reduce using rule 197 (ctor_arguments -> empty .)
    MOD             reduce using rule 197 (ctor_arguments -> empty .)
    IS_IDENTICAL    reduce using rule 197 (ctor_arguments -> empty .)
    IS_NOT_IDENTICAL reduce using rule 197 (ctor_arguments -> empty .)
    IS_EQUAL        reduce using rule 197 (ctor_arguments -> empty .)
    IS_NOT_EQUAL    reduce using rule 197 (ctor_arguments -> empty .)
    IS_SMALLER      reduce using rule 197 (ctor_arguments -> empty .)
    IS_SMALLER_OR_EQUAL reduce using rule 197 (ctor_arguments -> empty .)
    IS_GREATER      reduce using rule 197 (ctor_arguments -> empty .)
    IS_GREATER_OR_EQUAL reduce using rule 197 (ctor_arguments -> empty .)
    INSTANCEOF      reduce using rule 197 (ctor_arguments -> empty .)
    QUESTION        reduce using rule 197 (ctor_arguments -> empty .)
    RPAREN          reduce using rule 197 (ctor_arguments -> empty .)
    COMMA           reduce using rule 197 (ctor_arguments -> empty .)
    DOUBLE_ARROW    reduce using rule 197 (ctor_arguments -> empty .)
    RBRACKET        reduce using rule 197 (ctor_arguments -> empty .)
    RBRACE          reduce using rule 197 (ctor_arguments -> empty .)
    COLON           reduce using rule 197 (ctor_arguments -> empty .)
    AS              reduce using rule 197 (ctor_arguments -> empty .)


state 391

    (229) static_member -> class_name DOUBLE_COLON . variable_without_objects
    (231) static_member -> class_name DOUBLE_COLON . LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LBRACE          shift and go to state 528
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    variable_without_objects       shift and go to state 527
    simple_indirect_reference      shift and go to state 305
    reference_variable             shift and go to state 271
    compound_variable              shift and go to state 106

state 392

    (188) class_name -> NS_SEPARATOR namespace_name .
    (428) namespace_name -> namespace_name . NS_SEPARATOR STRING

    DOUBLE_COLON    reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    LPAREN          reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    SEMI            reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    OBJECT_OPERATOR reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    LBRACE          reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    BOOLEAN_AND     reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    BOOLEAN_OR      reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    LOGICAL_AND     reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    LOGICAL_OR      reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    LOGICAL_XOR     reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    AND             reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    OR              reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    XOR             reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    CONCAT          reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    PLUS            reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    MINUS           reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    MUL             reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    DIV             reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    SL              reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    SR              reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    MOD             reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    IS_IDENTICAL    reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    IS_NOT_IDENTICAL reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    IS_EQUAL        reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    IS_NOT_EQUAL    reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    IS_SMALLER      reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    IS_SMALLER_OR_EQUAL reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    IS_GREATER      reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    IS_GREATER_OR_EQUAL reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    INSTANCEOF      reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    QUESTION        reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    RPAREN          reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    COMMA           reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    DOUBLE_ARROW    reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    RBRACKET        reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    RBRACE          reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    COLON           reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    AS              reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    VARIABLE        reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    NS_SEPARATOR    shift and go to state 118


state 393

    (189) class_name -> NAMESPACE NS_SEPARATOR . namespace_name
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    STRING          shift and go to state 116
    ARRAY           shift and go to state 117

    namespace_name                 shift and go to state 529

state 394

    (191) dynamic_class_name_reference -> base_variable OBJECT_OPERATOR . object_property dynamic_class_name_variable_properties
    (243) object_property -> . variable_name object_dim_list
    (244) object_property -> . variable_without_objects
    (248) variable_name -> . STRING
    (249) variable_name -> . LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    STRING          shift and go to state 303
    LBRACE          shift and go to state 304
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    object_property                shift and go to state 530
    variable_name                  shift and go to state 301
    variable_without_objects       shift and go to state 302
    simple_indirect_reference      shift and go to state 305
    reference_variable             shift and go to state 271
    compound_variable              shift and go to state 106

state 395

    (230) static_member -> variable_class_name DOUBLE_COLON . variable_without_objects
    (232) static_member -> variable_class_name DOUBLE_COLON . LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LBRACE          shift and go to state 532
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    variable_without_objects       shift and go to state 531
    simple_indirect_reference      shift and go to state 305
    reference_variable             shift and go to state 271
    compound_variable              shift and go to state 106

state 396

    (204) assignment_list_element -> LIST . LPAREN assignment_list RPAREN

    LPAREN          shift and go to state 533


state 397

    (199) expr -> LIST LPAREN assignment_list . RPAREN EQUALS expr
    (200) assignment_list -> assignment_list . COMMA assignment_list_element

    RPAREN          shift and go to state 534
    COMMA           shift and go to state 535


state 398

    (201) assignment_list -> assignment_list_element .

    RPAREN          reduce using rule 201 (assignment_list -> assignment_list_element .)
    COMMA           reduce using rule 201 (assignment_list -> assignment_list_element .)


state 399

    (202) assignment_list_element -> variable .
    (234) variable -> variable . LBRACKET dim_offset RBRACKET

    RPAREN          reduce using rule 202 (assignment_list_element -> variable .)
    COMMA           reduce using rule 202 (assignment_list_element -> variable .)
    LBRACKET        shift and go to state 205


state 400

    (203) assignment_list_element -> empty .

    RPAREN          reduce using rule 203 (assignment_list_element -> empty .)
    COMMA           reduce using rule 203 (assignment_list_element -> empty .)


state 401

    (252) expr -> ARRAY LPAREN array_pair_list . RPAREN

    RPAREN          shift and go to state 536


state 402

    (253) expr -> LBRACKET array_pair_list RBRACKET .

    SEMI            reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    OBJECT_OPERATOR reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    LBRACE          reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    BOOLEAN_AND     reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    BOOLEAN_OR      reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    LOGICAL_AND     reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    LOGICAL_OR      reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    LOGICAL_XOR     reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    AND             reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    OR              reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    XOR             reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    CONCAT          reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    PLUS            reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    MINUS           reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    MUL             reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    DIV             reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    SL              reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    SR              reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    MOD             reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    IS_IDENTICAL    reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    IS_NOT_IDENTICAL reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    IS_EQUAL        reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    IS_NOT_EQUAL    reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    IS_SMALLER      reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    IS_SMALLER_OR_EQUAL reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    IS_GREATER      reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    IS_GREATER_OR_EQUAL reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    INSTANCEOF      reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    QUESTION        reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    RPAREN          reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    COMMA           reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    DOUBLE_ARROW    reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    RBRACKET        reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    RBRACE          reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    COLON           reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)
    AS              reduce using rule 253 (expr -> LBRACKET array_pair_list RBRACKET .)


state 403

    (255) array_pair_list -> non_empty_array_pair_list possible_comma .

    RBRACKET        reduce using rule 255 (array_pair_list -> non_empty_array_pair_list possible_comma .)
    RPAREN          reduce using rule 255 (array_pair_list -> non_empty_array_pair_list possible_comma .)


state 404

    (256) non_empty_array_pair_list -> non_empty_array_pair_list COMMA . AND variable
    (257) non_empty_array_pair_list -> non_empty_array_pair_list COMMA . expr
    (260) non_empty_array_pair_list -> non_empty_array_pair_list COMMA . expr DOUBLE_ARROW AND variable
    (261) non_empty_array_pair_list -> non_empty_array_pair_list COMMA . expr DOUBLE_ARROW expr
    (265) possible_comma -> COMMA .
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 537
    RBRACKET        reduce using rule 265 (possible_comma -> COMMA .)
    RPAREN          reduce using rule 265 (possible_comma -> COMMA .)
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    variable                       shift and go to state 39
    expr                           shift and go to state 538
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 405

    (264) possible_comma -> empty .

    RBRACKET        reduce using rule 264 (possible_comma -> empty .)
    RPAREN          reduce using rule 264 (possible_comma -> empty .)


state 406

    (258) non_empty_array_pair_list -> AND variable .
    (234) variable -> variable . LBRACKET dim_offset RBRACKET

    COMMA           reduce using rule 258 (non_empty_array_pair_list -> AND variable .)
    RBRACKET        reduce using rule 258 (non_empty_array_pair_list -> AND variable .)
    RPAREN          reduce using rule 258 (non_empty_array_pair_list -> AND variable .)
    LBRACKET        shift and go to state 205


state 407

    (262) non_empty_array_pair_list -> expr DOUBLE_ARROW . AND variable
    (263) non_empty_array_pair_list -> expr DOUBLE_ARROW . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 540
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 539
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 408

    (210) function_call -> NS_SEPARATOR namespace_name . LPAREN function_call_parameter_list RPAREN
    (188) class_name -> NS_SEPARATOR namespace_name .
    (428) namespace_name -> namespace_name . NS_SEPARATOR STRING

    LPAREN          shift and go to state 425
    DOUBLE_COLON    reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    NS_SEPARATOR    shift and go to state 118


state 409

    (211) function_call -> NAMESPACE NS_SEPARATOR . namespace_name LPAREN function_call_parameter_list RPAREN
    (189) class_name -> NAMESPACE NS_SEPARATOR . namespace_name
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    STRING          shift and go to state 116
    ARRAY           shift and go to state 117

    namespace_name                 shift and go to state 541

state 410

    (212) function_call -> class_name DOUBLE_COLON . STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> class_name DOUBLE_COLON . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> class_name DOUBLE_COLON . LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (229) static_member -> class_name DOUBLE_COLON . variable_without_objects
    (231) static_member -> class_name DOUBLE_COLON . LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    STRING          shift and go to state 542
    LBRACE          shift and go to state 429
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    variable_without_objects       shift and go to state 428
    simple_indirect_reference      shift and go to state 305
    reference_variable             shift and go to state 271
    compound_variable              shift and go to state 106

state 411

    (214) function_call -> variable_class_name DOUBLE_COLON . STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> variable_class_name DOUBLE_COLON . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (217) function_call -> variable_class_name DOUBLE_COLON . LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (230) static_member -> variable_class_name DOUBLE_COLON . variable_without_objects
    (232) static_member -> variable_class_name DOUBLE_COLON . LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    STRING          shift and go to state 543
    LBRACE          shift and go to state 432
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    variable_without_objects       shift and go to state 431
    simple_indirect_reference      shift and go to state 305
    reference_variable             shift and go to state 271
    compound_variable              shift and go to state 106

state 412

    (333) expr -> ISSET LPAREN isset_variables . RPAREN
    (334) isset_variables -> isset_variables . COMMA variable

    RPAREN          shift and go to state 544
    COMMA           shift and go to state 545


state 413

    (335) isset_variables -> variable .
    (234) variable -> variable . LBRACKET dim_offset RBRACKET

    RPAREN          reduce using rule 335 (isset_variables -> variable .)
    COMMA           reduce using rule 335 (isset_variables -> variable .)
    LBRACKET        shift and go to state 205


state 414

    (336) expr -> EMPTY LPAREN expr . RPAREN
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    RPAREN          shift and go to state 546
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 415

    (337) expr -> EVAL LPAREN expr . RPAREN
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    RPAREN          shift and go to state 547
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 416

    (345) expr -> exit_or_die LPAREN RPAREN .

    SEMI            reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    OBJECT_OPERATOR reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    LBRACE          reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    BOOLEAN_AND     reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    BOOLEAN_OR      reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    LOGICAL_AND     reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    LOGICAL_OR      reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    LOGICAL_XOR     reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    AND             reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    OR              reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    XOR             reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    CONCAT          reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    PLUS            reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    MINUS           reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    MUL             reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    DIV             reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    SL              reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    SR              reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    MOD             reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    IS_IDENTICAL    reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    IS_EQUAL        reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    IS_NOT_EQUAL    reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    IS_SMALLER      reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    IS_GREATER      reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    INSTANCEOF      reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    QUESTION        reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    RPAREN          reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    COMMA           reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    DOUBLE_ARROW    reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    RBRACKET        reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    RBRACE          reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    COLON           reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)
    AS              reduce using rule 345 (expr -> exit_or_die LPAREN RPAREN .)


state 417

    (346) expr -> exit_or_die LPAREN expr . RPAREN
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    RPAREN          shift and go to state 548
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 418

    (205) variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property . method_or_not variable_properties
    (220) method_or_not -> . LPAREN function_call_parameter_list RPAREN
    (221) method_or_not -> . empty
    (443) empty -> .

    LPAREN          shift and go to state 479
    OBJECT_OPERATOR reduce using rule 443 (empty -> .)
    EQUALS          reduce using rule 443 (empty -> .)
    PLUS_EQUAL      reduce using rule 443 (empty -> .)
    MINUS_EQUAL     reduce using rule 443 (empty -> .)
    MUL_EQUAL       reduce using rule 443 (empty -> .)
    DIV_EQUAL       reduce using rule 443 (empty -> .)
    CONCAT_EQUAL    reduce using rule 443 (empty -> .)
    MOD_EQUAL       reduce using rule 443 (empty -> .)
    AND_EQUAL       reduce using rule 443 (empty -> .)
    OR_EQUAL        reduce using rule 443 (empty -> .)
    XOR_EQUAL       reduce using rule 443 (empty -> .)
    SL_EQUAL        reduce using rule 443 (empty -> .)
    SR_EQUAL        reduce using rule 443 (empty -> .)
    INC             reduce using rule 443 (empty -> .)
    DEC             reduce using rule 443 (empty -> .)
    LBRACKET        reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    BOOLEAN_AND     reduce using rule 443 (empty -> .)
    BOOLEAN_OR      reduce using rule 443 (empty -> .)
    LOGICAL_AND     reduce using rule 443 (empty -> .)
    LOGICAL_OR      reduce using rule 443 (empty -> .)
    LOGICAL_XOR     reduce using rule 443 (empty -> .)
    AND             reduce using rule 443 (empty -> .)
    OR              reduce using rule 443 (empty -> .)
    XOR             reduce using rule 443 (empty -> .)
    CONCAT          reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    MUL             reduce using rule 443 (empty -> .)
    DIV             reduce using rule 443 (empty -> .)
    SL              reduce using rule 443 (empty -> .)
    SR              reduce using rule 443 (empty -> .)
    MOD             reduce using rule 443 (empty -> .)
    IS_IDENTICAL    reduce using rule 443 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 443 (empty -> .)
    IS_EQUAL        reduce using rule 443 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 443 (empty -> .)
    IS_SMALLER      reduce using rule 443 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 443 (empty -> .)
    IS_GREATER      reduce using rule 443 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 443 (empty -> .)
    INSTANCEOF      reduce using rule 443 (empty -> .)
    QUESTION        reduce using rule 443 (empty -> .)
    RPAREN          reduce using rule 443 (empty -> .)
    COMMA           reduce using rule 443 (empty -> .)
    DOUBLE_ARROW    reduce using rule 443 (empty -> .)
    RBRACKET        reduce using rule 443 (empty -> .)
    RBRACE          reduce using rule 443 (empty -> .)
    COLON           reduce using rule 443 (empty -> .)
    AS              reduce using rule 443 (empty -> .)

    method_or_not                  shift and go to state 549
    empty                          shift and go to state 480

state 419

    (352) scalar -> QUOTE encaps_list QUOTE .

    SEMI            reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    OBJECT_OPERATOR reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    LBRACE          reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    BOOLEAN_AND     reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    BOOLEAN_OR      reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    LOGICAL_AND     reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    LOGICAL_OR      reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    LOGICAL_XOR     reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    AND             reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    OR              reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    XOR             reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    CONCAT          reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    PLUS            reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    MINUS           reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    MUL             reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    DIV             reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    SL              reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    SR              reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    MOD             reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    IS_IDENTICAL    reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    IS_NOT_IDENTICAL reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    IS_EQUAL        reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    IS_NOT_EQUAL    reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    IS_SMALLER      reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    IS_SMALLER_OR_EQUAL reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    IS_GREATER      reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    IS_GREATER_OR_EQUAL reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    INSTANCEOF      reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    QUESTION        reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    RPAREN          reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    COMMA           reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    DOUBLE_ARROW    reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    RBRACKET        reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    RBRACE          reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    COLON           reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)
    AS              reduce using rule 352 (scalar -> QUOTE encaps_list QUOTE .)


state 420

    (431) encaps_list -> encaps_list encaps_var .

    QUOTE           reduce using rule 431 (encaps_list -> encaps_list encaps_var .)
    ENCAPSED_AND_WHITESPACE reduce using rule 431 (encaps_list -> encaps_list encaps_var .)
    VARIABLE        reduce using rule 431 (encaps_list -> encaps_list encaps_var .)
    DOLLAR_OPEN_CURLY_BRACES reduce using rule 431 (encaps_list -> encaps_list encaps_var .)
    CURLY_OPEN      reduce using rule 431 (encaps_list -> encaps_list encaps_var .)
    END_HEREDOC     reduce using rule 431 (encaps_list -> encaps_list encaps_var .)
    BACKTICK        reduce using rule 431 (encaps_list -> encaps_list encaps_var .)


state 421

    (433) encaps_list -> encaps_list ENCAPSED_AND_WHITESPACE .

    QUOTE           reduce using rule 433 (encaps_list -> encaps_list ENCAPSED_AND_WHITESPACE .)
    ENCAPSED_AND_WHITESPACE reduce using rule 433 (encaps_list -> encaps_list ENCAPSED_AND_WHITESPACE .)
    VARIABLE        reduce using rule 433 (encaps_list -> encaps_list ENCAPSED_AND_WHITESPACE .)
    DOLLAR_OPEN_CURLY_BRACES reduce using rule 433 (encaps_list -> encaps_list ENCAPSED_AND_WHITESPACE .)
    CURLY_OPEN      reduce using rule 433 (encaps_list -> encaps_list ENCAPSED_AND_WHITESPACE .)
    END_HEREDOC     reduce using rule 433 (encaps_list -> encaps_list ENCAPSED_AND_WHITESPACE .)
    BACKTICK        reduce using rule 433 (encaps_list -> encaps_list ENCAPSED_AND_WHITESPACE .)


state 422

    (434) encaps_var -> VARIABLE .
    (435) encaps_var -> VARIABLE . LBRACKET encaps_var_offset RBRACKET
    (436) encaps_var -> VARIABLE . OBJECT_OPERATOR STRING

    QUOTE           reduce using rule 434 (encaps_var -> VARIABLE .)
    ENCAPSED_AND_WHITESPACE reduce using rule 434 (encaps_var -> VARIABLE .)
    VARIABLE        reduce using rule 434 (encaps_var -> VARIABLE .)
    DOLLAR_OPEN_CURLY_BRACES reduce using rule 434 (encaps_var -> VARIABLE .)
    CURLY_OPEN      reduce using rule 434 (encaps_var -> VARIABLE .)
    END_HEREDOC     reduce using rule 434 (encaps_var -> VARIABLE .)
    BACKTICK        reduce using rule 434 (encaps_var -> VARIABLE .)
    LBRACKET        shift and go to state 550
    OBJECT_OPERATOR shift and go to state 551


state 423

    (437) encaps_var -> DOLLAR_OPEN_CURLY_BRACES . expr RBRACE
    (438) encaps_var -> DOLLAR_OPEN_CURLY_BRACES . STRING_VARNAME LBRACKET expr RBRACKET RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    STRING_VARNAME  shift and go to state 553
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 552
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 424

    (439) encaps_var -> CURLY_OPEN . variable RBRACE
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NS_SEPARATOR    shift and go to state 230
    NAMESPACE       shift and go to state 231
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107

    variable                       shift and go to state 554
    base_variable_with_function_calls shift and go to state 73
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    namespace_name                 shift and go to state 229
    class_name                     shift and go to state 232
    variable_without_objects       shift and go to state 102
    variable_class_name            shift and go to state 233
    reference_variable             shift and go to state 234
    compound_variable              shift and go to state 106

state 425

    (210) function_call -> NS_SEPARATOR namespace_name LPAREN . function_call_parameter_list RPAREN
    (266) function_call_parameter_list -> . function_call_parameter_list COMMA function_call_parameter
    (267) function_call_parameter_list -> . function_call_parameter
    (268) function_call_parameter_list -> . empty
    (269) function_call_parameter -> . expr
    (270) function_call_parameter -> . AND variable
    (443) empty -> .
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 284
    RPAREN          reduce using rule 443 (empty -> .)
    COMMA           reduce using rule 443 (empty -> .)
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    namespace_name                 shift and go to state 12
    function_call_parameter_list   shift and go to state 555
    function_call_parameter        shift and go to state 281
    empty                          shift and go to state 282
    expr                           shift and go to state 283
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 426

    (365) class_constant -> class_name DOUBLE_COLON STRING .
    (212) function_call -> class_name DOUBLE_COLON STRING . LPAREN function_call_parameter_list RPAREN

    SEMI            reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    OBJECT_OPERATOR reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    LBRACE          reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    BOOLEAN_AND     reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    BOOLEAN_OR      reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    LOGICAL_AND     reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    LOGICAL_OR      reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    LOGICAL_XOR     reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    AND             reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    OR              reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    XOR             reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    CONCAT          reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    PLUS            reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    MINUS           reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    MUL             reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    DIV             reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    SL              reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    SR              reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    MOD             reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    IS_IDENTICAL    reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    IS_NOT_IDENTICAL reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    IS_EQUAL        reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    IS_NOT_EQUAL    reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    IS_SMALLER      reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    IS_GREATER      reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    INSTANCEOF      reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    QUESTION        reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    RPAREN          reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    COMMA           reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    DOUBLE_ARROW    reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    RBRACKET        reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    RBRACE          reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    COLON           reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    AS              reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    LPAREN          shift and go to state 556


state 427

    (385) class_name_constant -> class_name DOUBLE_COLON CLASS .

    SEMI            reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    OBJECT_OPERATOR reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    LBRACE          reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    BOOLEAN_AND     reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    BOOLEAN_OR      reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    LOGICAL_AND     reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    LOGICAL_OR      reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    LOGICAL_XOR     reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    AND             reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    OR              reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    XOR             reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    CONCAT          reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    PLUS            reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    MINUS           reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    MUL             reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    DIV             reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    SL              reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    SR              reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    MOD             reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    IS_IDENTICAL    reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    IS_NOT_IDENTICAL reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    IS_EQUAL        reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    IS_NOT_EQUAL    reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    IS_SMALLER      reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    IS_SMALLER_OR_EQUAL reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    IS_GREATER      reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    IS_GREATER_OR_EQUAL reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    INSTANCEOF      reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    QUESTION        reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    RPAREN          reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    COMMA           reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    DOUBLE_ARROW    reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    RBRACKET        reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    RBRACE          reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    COLON           reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)
    AS              reduce using rule 385 (class_name_constant -> class_name DOUBLE_COLON CLASS .)


state 428

    (213) function_call -> class_name DOUBLE_COLON variable_without_objects . LPAREN function_call_parameter_list RPAREN
    (229) static_member -> class_name DOUBLE_COLON variable_without_objects .

    LPAREN          shift and go to state 557
    OBJECT_OPERATOR reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    EQUALS          reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    PLUS_EQUAL      reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    MINUS_EQUAL     reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    MUL_EQUAL       reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    DIV_EQUAL       reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    CONCAT_EQUAL    reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    MOD_EQUAL       reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    AND_EQUAL       reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    OR_EQUAL        reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    XOR_EQUAL       reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    SL_EQUAL        reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    SR_EQUAL        reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    INC             reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    DEC             reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    LBRACKET        reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    SEMI            reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    LBRACE          reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    BOOLEAN_AND     reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    BOOLEAN_OR      reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    LOGICAL_AND     reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    LOGICAL_OR      reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    LOGICAL_XOR     reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    AND             reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    OR              reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    XOR             reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    CONCAT          reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    PLUS            reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    MINUS           reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    MUL             reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    DIV             reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    SL              reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    SR              reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    MOD             reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_IDENTICAL    reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_NOT_IDENTICAL reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_EQUAL        reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_NOT_EQUAL    reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_SMALLER      reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_SMALLER_OR_EQUAL reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_GREATER      reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_GREATER_OR_EQUAL reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    INSTANCEOF      reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    QUESTION        reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    RPAREN          reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    COMMA           reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    DOUBLE_ARROW    reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    RBRACKET        reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    RBRACE          reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    COLON           reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    AS              reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)


state 429

    (216) function_call -> class_name DOUBLE_COLON LBRACE . expr RBRACE LPAREN function_call_parameter_list RPAREN
    (231) static_member -> class_name DOUBLE_COLON LBRACE . expr RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    class_name                     shift and go to state 86
    expr                           shift and go to state 558
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 430

    (366) class_constant -> variable_class_name DOUBLE_COLON STRING .
    (214) function_call -> variable_class_name DOUBLE_COLON STRING . LPAREN function_call_parameter_list RPAREN

    SEMI            reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    OBJECT_OPERATOR reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    LBRACE          reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    BOOLEAN_AND     reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    BOOLEAN_OR      reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    LOGICAL_AND     reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    LOGICAL_OR      reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    LOGICAL_XOR     reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    AND             reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    OR              reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    XOR             reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    CONCAT          reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    PLUS            reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    MINUS           reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    MUL             reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    DIV             reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    SL              reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    SR              reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    MOD             reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    IS_IDENTICAL    reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    IS_NOT_IDENTICAL reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    IS_EQUAL        reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    IS_NOT_EQUAL    reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    IS_SMALLER      reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    IS_GREATER      reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    INSTANCEOF      reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    QUESTION        reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    RPAREN          reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    COMMA           reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    DOUBLE_ARROW    reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    RBRACKET        reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    RBRACE          reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    COLON           reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    AS              reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    LPAREN          shift and go to state 559


state 431

    (215) function_call -> variable_class_name DOUBLE_COLON variable_without_objects . LPAREN function_call_parameter_list RPAREN
    (230) static_member -> variable_class_name DOUBLE_COLON variable_without_objects .

    LPAREN          shift and go to state 560
    OBJECT_OPERATOR reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    EQUALS          reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    PLUS_EQUAL      reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    MINUS_EQUAL     reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    MUL_EQUAL       reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    DIV_EQUAL       reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    CONCAT_EQUAL    reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    MOD_EQUAL       reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    AND_EQUAL       reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    OR_EQUAL        reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    XOR_EQUAL       reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    SL_EQUAL        reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    SR_EQUAL        reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    INC             reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    DEC             reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    LBRACKET        reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    SEMI            reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    LBRACE          reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    BOOLEAN_AND     reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    BOOLEAN_OR      reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    LOGICAL_AND     reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    LOGICAL_OR      reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    LOGICAL_XOR     reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    AND             reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    OR              reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    XOR             reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    CONCAT          reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    PLUS            reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    MINUS           reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    MUL             reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    DIV             reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    SL              reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    SR              reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    MOD             reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_IDENTICAL    reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_NOT_IDENTICAL reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_EQUAL        reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_NOT_EQUAL    reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_SMALLER      reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_SMALLER_OR_EQUAL reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_GREATER      reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_GREATER_OR_EQUAL reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    INSTANCEOF      reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    QUESTION        reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    RPAREN          reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    COMMA           reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    DOUBLE_ARROW    reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    RBRACKET        reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    RBRACE          reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    COLON           reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    AS              reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)


state 432

    (217) function_call -> variable_class_name DOUBLE_COLON LBRACE . expr RBRACE LPAREN function_call_parameter_list RPAREN
    (232) static_member -> variable_class_name DOUBLE_COLON LBRACE . expr RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    variable_class_name            shift and go to state 87
    expr                           shift and go to state 561
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 433

    (357) scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .

    SEMI            reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    OBJECT_OPERATOR reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    LBRACE          reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    BOOLEAN_AND     reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    BOOLEAN_OR      reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    LOGICAL_AND     reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    LOGICAL_OR      reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    LOGICAL_XOR     reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    AND             reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    OR              reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    XOR             reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    CONCAT          reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    PLUS            reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    MINUS           reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    MUL             reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    DIV             reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    SL              reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    SR              reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    MOD             reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    IS_IDENTICAL    reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    IS_NOT_IDENTICAL reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    IS_EQUAL        reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    IS_NOT_EQUAL    reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    IS_SMALLER      reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    IS_SMALLER_OR_EQUAL reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    IS_GREATER      reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    IS_GREATER_OR_EQUAL reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    INSTANCEOF      reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    QUESTION        reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    RPAREN          reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    COMMA           reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    DOUBLE_ARROW    reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    RBRACKET        reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    RBRACE          reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    COLON           reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)
    AS              reduce using rule 357 (scalar_heredoc -> START_HEREDOC encaps_list END_HEREDOC .)


state 434

    (358) nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .

    SEMI            reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    OBJECT_OPERATOR reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    LBRACE          reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    BOOLEAN_AND     reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    BOOLEAN_OR      reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    LOGICAL_AND     reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    LOGICAL_OR      reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    LOGICAL_XOR     reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    AND             reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    OR              reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    XOR             reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    CONCAT          reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    PLUS            reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    MINUS           reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    MUL             reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    DIV             reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    SL              reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    SR              reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    MOD             reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    IS_IDENTICAL    reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    IS_NOT_IDENTICAL reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    IS_EQUAL        reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    IS_NOT_EQUAL    reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    IS_SMALLER      reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    IS_SMALLER_OR_EQUAL reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    IS_GREATER      reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    IS_GREATER_OR_EQUAL reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    INSTANCEOF      reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    QUESTION        reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    RPAREN          reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    COMMA           reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    DOUBLE_ARROW    reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    RBRACKET        reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    RBRACE          reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    COLON           reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)
    AS              reduce using rule 358 (nowdoc -> START_NOWDOC nowdoc_text_content END_NOWDOC .)


state 435

    (359) nowdoc_text_content -> nowdoc_text_content ENCAPSED_AND_WHITESPACE .

    END_NOWDOC      reduce using rule 359 (nowdoc_text_content -> nowdoc_text_content ENCAPSED_AND_WHITESPACE .)
    ENCAPSED_AND_WHITESPACE reduce using rule 359 (nowdoc_text_content -> nowdoc_text_content ENCAPSED_AND_WHITESPACE .)


state 436

    (218) function_call -> variable_without_objects LPAREN function_call_parameter_list . RPAREN
    (266) function_call_parameter_list -> function_call_parameter_list . COMMA function_call_parameter

    RPAREN          shift and go to state 562
    COMMA           shift and go to state 446


state 437

    (219) function_call -> BACKTICK encaps_list BACKTICK .

    OBJECT_OPERATOR reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    EQUALS          reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    PLUS_EQUAL      reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    MINUS_EQUAL     reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    MUL_EQUAL       reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    DIV_EQUAL       reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    CONCAT_EQUAL    reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    MOD_EQUAL       reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    AND_EQUAL       reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    OR_EQUAL        reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    XOR_EQUAL       reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    SL_EQUAL        reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    SR_EQUAL        reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    INC             reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    DEC             reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    LBRACKET        reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    SEMI            reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    LBRACE          reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    BOOLEAN_AND     reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    BOOLEAN_OR      reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    LOGICAL_AND     reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    LOGICAL_OR      reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    LOGICAL_XOR     reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    AND             reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    OR              reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    XOR             reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    CONCAT          reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    PLUS            reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    MINUS           reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    MUL             reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    DIV             reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    SL              reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    SR              reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    MOD             reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    IS_IDENTICAL    reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    IS_NOT_IDENTICAL reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    IS_EQUAL        reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    IS_NOT_EQUAL    reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    IS_SMALLER      reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    IS_SMALLER_OR_EQUAL reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    IS_GREATER      reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    IS_GREATER_OR_EQUAL reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    INSTANCEOF      reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    QUESTION        reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    RPAREN          reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    COMMA           reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    DOUBLE_ARROW    reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    RBRACKET        reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    RBRACE          reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    COLON           reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)
    AS              reduce using rule 219 (function_call -> BACKTICK encaps_list BACKTICK .)


state 438

    (235) reference_variable -> reference_variable LBRACKET dim_offset . RBRACKET

    RBRACKET        shift and go to state 563


state 439

    (236) reference_variable -> reference_variable LBRACE expr . RBRACE
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    RBRACE          shift and go to state 564
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 440

    (240) compound_variable -> DOLLAR LBRACE expr . RBRACE
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    RBRACE          shift and go to state 565
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 441

    (7) top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .

    HALT_COMPILER   reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    NAMESPACE       reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    CONST           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    USE             reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    LBRACE          reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    IF              reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DO              reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    FOR             reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    FOREACH         reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    SWITCH          reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    BREAK           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    CONTINUE        reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    RETURN          reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    GLOBAL          reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    STATIC          reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ECHO            reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    INLINE_HTML     reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    UNSET           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    SEMI            reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    TRY             reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    THROW           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DECLARE         reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    FUNCTION        reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    INTERFACE       reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    TRAIT           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    NEW             reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    CLONE           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    LIST            reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ARRAY           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    LBRACKET        reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    PLUS            reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    MINUS           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    NOT             reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    INC             reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DEC             reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    INT_CAST        reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DOUBLE_CAST     reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    STRING_CAST     reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ARRAY_CAST      reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    OBJECT_CAST     reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    BOOL_CAST       reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    UNSET_CAST      reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    BINARY_CAST     reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ISSET           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    EMPTY           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    EVAL            reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    INCLUDE         reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    INCLUDE_ONCE    reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    REQUIRE         reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    REQUIRE_ONCE    reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    PRINT           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    AT              reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    LPAREN          reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    CLASS           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ABSTRACT        reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    FINAL           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    QUOTE           reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    STRING          reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    STRING_VARNAME  reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    NS_SEPARATOR    reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    EXIT            reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DIE             reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    LNUMBER         reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DNUMBER         reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    LINE            reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    FILE            reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DIR             reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    CLASS_C         reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    METHOD_C        reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    FUNC_C          reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    NS_C            reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    START_HEREDOC   reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    START_NOWDOC    reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    BACKTICK        reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DOLLAR          reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    VARIABLE        reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    $end            reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 7 (top_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)


state 442

    (10) top_statement -> NAMESPACE namespace_name LBRACE top_statement_list . RBRACE
    (2) top_statement_list -> top_statement_list . top_statement
    (4) top_statement -> . statement
    (5) top_statement -> . function_declaration_statement
    (6) top_statement -> . class_declaration_statement
    (7) top_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (8) top_statement -> . NAMESPACE namespace_name SEMI
    (9) top_statement -> . NAMESPACE LBRACE top_statement_list RBRACE
    (10) top_statement -> . NAMESPACE namespace_name LBRACE top_statement_list RBRACE
    (11) top_statement -> . CONST constant_declarations SEMI
    (12) top_statement -> . USE use_declarations SEMI
    (30) statement -> . LBRACE inner_statement_list RBRACE
    (31) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (33) statement -> . WHILE LPAREN expr RPAREN while_statement
    (34) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (35) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (36) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (37) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (38) statement -> . BREAK SEMI
    (39) statement -> . BREAK expr SEMI
    (40) statement -> . CONTINUE SEMI
    (41) statement -> . CONTINUE expr SEMI
    (42) statement -> . RETURN SEMI
    (43) statement -> . RETURN expr SEMI
    (44) statement -> . GLOBAL global_var_list SEMI
    (45) statement -> . STATIC static_var_list SEMI
    (46) statement -> . ECHO echo_expr_list SEMI
    (47) statement -> . INLINE_HTML
    (48) statement -> . expr SEMI
    (49) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (50) statement -> . SEMI
    (51) statement -> . TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
    (56) statement -> . THROW expr SEMI
    (57) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (108) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (109) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (110) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (111) class_declaration_statement -> . TRAIT STRING LBRACE trait_statement_list RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (112) class_entry_type -> . CLASS
    (113) class_entry_type -> . ABSTRACT CLASS
    (114) class_entry_type -> . FINAL CLASS
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RBRACE          shift and go to state 566
    HALT_COMPILER   shift and go to state 8
    NAMESPACE       shift and go to state 11
    CONST           shift and go to state 14
    USE             shift and go to state 15
    LBRACE          shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    FOREACH         shift and go to state 21
    SWITCH          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    GLOBAL          shift and go to state 26
    STATIC          shift and go to state 27
    ECHO            shift and go to state 28
    INLINE_HTML     shift and go to state 29
    UNSET           shift and go to state 30
    SEMI            shift and go to state 10
    TRY             shift and go to state 31
    THROW           shift and go to state 32
    DECLARE         shift and go to state 33
    FUNCTION        shift and go to state 34
    INTERFACE       shift and go to state 37
    TRAIT           shift and go to state 38
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    CLASS           shift and go to state 70
    ABSTRACT        shift and go to state 71
    FINAL           shift and go to state 72
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    namespace_name                 shift and go to state 12
    top_statement                  shift and go to state 4
    statement                      shift and go to state 5
    function_declaration_statement shift and go to state 6
    class_declaration_statement    shift and go to state 7
    expr                           shift and go to state 17
    class_entry_type               shift and go to state 36
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 443

    (9) top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .

    HALT_COMPILER   reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    NAMESPACE       reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    CONST           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    USE             reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    LBRACE          reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    IF              reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    WHILE           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    DO              reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    FOR             reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    FOREACH         reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    SWITCH          reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    BREAK           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    CONTINUE        reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    RETURN          reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    GLOBAL          reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    STATIC          reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    ECHO            reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    INLINE_HTML     reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    UNSET           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    SEMI            reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    TRY             reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    THROW           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    DECLARE         reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    FUNCTION        reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    INTERFACE       reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    TRAIT           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    NEW             reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    CLONE           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    LIST            reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    ARRAY           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    LBRACKET        reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    PLUS            reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    MINUS           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    NOT             reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    BOOLEAN_NOT     reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    INC             reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    DEC             reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    INT_CAST        reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    DOUBLE_CAST     reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    STRING_CAST     reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    ARRAY_CAST      reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    OBJECT_CAST     reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    BOOL_CAST       reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    UNSET_CAST      reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    BINARY_CAST     reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    ISSET           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    EMPTY           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    EVAL            reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    INCLUDE         reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    INCLUDE_ONCE    reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    REQUIRE         reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    REQUIRE_ONCE    reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    PRINT           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    AT              reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    LPAREN          reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    CLASS           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    ABSTRACT        reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    FINAL           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    QUOTE           reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    STRING          reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    STRING_VARNAME  reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    NS_SEPARATOR    reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    EXIT            reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    DIE             reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    LNUMBER         reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    DNUMBER         reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    LINE            reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    FILE            reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    DIR             reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    CLASS_C         reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    METHOD_C        reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    FUNC_C          reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    NS_C            reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    START_HEREDOC   reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    START_NOWDOC    reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    BACKTICK        reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    DOLLAR          reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    VARIABLE        reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    $end            reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)
    RBRACE          reduce using rule 9 (top_statement -> NAMESPACE LBRACE top_statement_list RBRACE .)


state 444

    (211) function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN . function_call_parameter_list RPAREN
    (266) function_call_parameter_list -> . function_call_parameter_list COMMA function_call_parameter
    (267) function_call_parameter_list -> . function_call_parameter
    (268) function_call_parameter_list -> . empty
    (269) function_call_parameter -> . expr
    (270) function_call_parameter -> . AND variable
    (443) empty -> .
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 284
    RPAREN          reduce using rule 443 (empty -> .)
    COMMA           reduce using rule 443 (empty -> .)
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    namespace_name                 shift and go to state 12
    function_call_parameter_list   shift and go to state 567
    function_call_parameter        shift and go to state 281
    empty                          shift and go to state 282
    expr                           shift and go to state 283
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 445

    (209) function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .

    OBJECT_OPERATOR reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    PLUS_EQUAL      reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    MINUS_EQUAL     reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    MUL_EQUAL       reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    DIV_EQUAL       reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    CONCAT_EQUAL    reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    MOD_EQUAL       reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    AND_EQUAL       reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    OR_EQUAL        reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    XOR_EQUAL       reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    SL_EQUAL        reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    SR_EQUAL        reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    INC             reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    DEC             reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    LBRACKET        reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    SEMI            reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    LBRACE          reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_AND     reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_OR      reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_AND     reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_OR      reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_XOR     reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    XOR             reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    CONCAT          reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    MUL             reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    DIV             reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    SL              reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    SR              reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    MOD             reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_IDENTICAL    reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_EQUAL        reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_EQUAL    reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER      reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER      reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    INSTANCEOF      reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    QUESTION        reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    COMMA           reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    DOUBLE_ARROW    reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    RBRACE          reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 209 (function_call -> namespace_name LPAREN function_call_parameter_list RPAREN .)


state 446

    (266) function_call_parameter_list -> function_call_parameter_list COMMA . function_call_parameter
    (269) function_call_parameter -> . expr
    (270) function_call_parameter -> . AND variable
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 284
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    function_call_parameter        shift and go to state 568
    expr                           shift and go to state 283
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 447

    (270) function_call_parameter -> AND variable .
    (234) variable -> variable . LBRACKET dim_offset RBRACKET

    RPAREN          reduce using rule 270 (function_call_parameter -> AND variable .)
    COMMA           reduce using rule 270 (function_call_parameter -> AND variable .)
    LBRACKET        shift and go to state 205


state 448

    (27) inner_statement -> HALT_COMPILER LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 569


state 449

    (28) inner_statement -> YIELD SEMI .

    RBRACE          reduce using rule 28 (inner_statement -> YIELD SEMI .)
    HALT_COMPILER   reduce using rule 28 (inner_statement -> YIELD SEMI .)
    YIELD           reduce using rule 28 (inner_statement -> YIELD SEMI .)
    LBRACE          reduce using rule 28 (inner_statement -> YIELD SEMI .)
    IF              reduce using rule 28 (inner_statement -> YIELD SEMI .)
    WHILE           reduce using rule 28 (inner_statement -> YIELD SEMI .)
    DO              reduce using rule 28 (inner_statement -> YIELD SEMI .)
    FOR             reduce using rule 28 (inner_statement -> YIELD SEMI .)
    FOREACH         reduce using rule 28 (inner_statement -> YIELD SEMI .)
    SWITCH          reduce using rule 28 (inner_statement -> YIELD SEMI .)
    BREAK           reduce using rule 28 (inner_statement -> YIELD SEMI .)
    CONTINUE        reduce using rule 28 (inner_statement -> YIELD SEMI .)
    RETURN          reduce using rule 28 (inner_statement -> YIELD SEMI .)
    GLOBAL          reduce using rule 28 (inner_statement -> YIELD SEMI .)
    STATIC          reduce using rule 28 (inner_statement -> YIELD SEMI .)
    ECHO            reduce using rule 28 (inner_statement -> YIELD SEMI .)
    INLINE_HTML     reduce using rule 28 (inner_statement -> YIELD SEMI .)
    UNSET           reduce using rule 28 (inner_statement -> YIELD SEMI .)
    SEMI            reduce using rule 28 (inner_statement -> YIELD SEMI .)
    TRY             reduce using rule 28 (inner_statement -> YIELD SEMI .)
    THROW           reduce using rule 28 (inner_statement -> YIELD SEMI .)
    DECLARE         reduce using rule 28 (inner_statement -> YIELD SEMI .)
    FUNCTION        reduce using rule 28 (inner_statement -> YIELD SEMI .)
    INTERFACE       reduce using rule 28 (inner_statement -> YIELD SEMI .)
    TRAIT           reduce using rule 28 (inner_statement -> YIELD SEMI .)
    NEW             reduce using rule 28 (inner_statement -> YIELD SEMI .)
    CLONE           reduce using rule 28 (inner_statement -> YIELD SEMI .)
    LIST            reduce using rule 28 (inner_statement -> YIELD SEMI .)
    ARRAY           reduce using rule 28 (inner_statement -> YIELD SEMI .)
    LBRACKET        reduce using rule 28 (inner_statement -> YIELD SEMI .)
    PLUS            reduce using rule 28 (inner_statement -> YIELD SEMI .)
    MINUS           reduce using rule 28 (inner_statement -> YIELD SEMI .)
    NOT             reduce using rule 28 (inner_statement -> YIELD SEMI .)
    BOOLEAN_NOT     reduce using rule 28 (inner_statement -> YIELD SEMI .)
    INC             reduce using rule 28 (inner_statement -> YIELD SEMI .)
    DEC             reduce using rule 28 (inner_statement -> YIELD SEMI .)
    INT_CAST        reduce using rule 28 (inner_statement -> YIELD SEMI .)
    DOUBLE_CAST     reduce using rule 28 (inner_statement -> YIELD SEMI .)
    STRING_CAST     reduce using rule 28 (inner_statement -> YIELD SEMI .)
    ARRAY_CAST      reduce using rule 28 (inner_statement -> YIELD SEMI .)
    OBJECT_CAST     reduce using rule 28 (inner_statement -> YIELD SEMI .)
    BOOL_CAST       reduce using rule 28 (inner_statement -> YIELD SEMI .)
    UNSET_CAST      reduce using rule 28 (inner_statement -> YIELD SEMI .)
    BINARY_CAST     reduce using rule 28 (inner_statement -> YIELD SEMI .)
    ISSET           reduce using rule 28 (inner_statement -> YIELD SEMI .)
    EMPTY           reduce using rule 28 (inner_statement -> YIELD SEMI .)
    EVAL            reduce using rule 28 (inner_statement -> YIELD SEMI .)
    INCLUDE         reduce using rule 28 (inner_statement -> YIELD SEMI .)
    INCLUDE_ONCE    reduce using rule 28 (inner_statement -> YIELD SEMI .)
    REQUIRE         reduce using rule 28 (inner_statement -> YIELD SEMI .)
    REQUIRE_ONCE    reduce using rule 28 (inner_statement -> YIELD SEMI .)
    PRINT           reduce using rule 28 (inner_statement -> YIELD SEMI .)
    AT              reduce using rule 28 (inner_statement -> YIELD SEMI .)
    LPAREN          reduce using rule 28 (inner_statement -> YIELD SEMI .)
    CLASS           reduce using rule 28 (inner_statement -> YIELD SEMI .)
    ABSTRACT        reduce using rule 28 (inner_statement -> YIELD SEMI .)
    FINAL           reduce using rule 28 (inner_statement -> YIELD SEMI .)
    QUOTE           reduce using rule 28 (inner_statement -> YIELD SEMI .)
    STRING          reduce using rule 28 (inner_statement -> YIELD SEMI .)
    STRING_VARNAME  reduce using rule 28 (inner_statement -> YIELD SEMI .)
    NS_SEPARATOR    reduce using rule 28 (inner_statement -> YIELD SEMI .)
    NAMESPACE       reduce using rule 28 (inner_statement -> YIELD SEMI .)
    EXIT            reduce using rule 28 (inner_statement -> YIELD SEMI .)
    DIE             reduce using rule 28 (inner_statement -> YIELD SEMI .)
    LNUMBER         reduce using rule 28 (inner_statement -> YIELD SEMI .)
    DNUMBER         reduce using rule 28 (inner_statement -> YIELD SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 28 (inner_statement -> YIELD SEMI .)
    LINE            reduce using rule 28 (inner_statement -> YIELD SEMI .)
    FILE            reduce using rule 28 (inner_statement -> YIELD SEMI .)
    DIR             reduce using rule 28 (inner_statement -> YIELD SEMI .)
    CLASS_C         reduce using rule 28 (inner_statement -> YIELD SEMI .)
    METHOD_C        reduce using rule 28 (inner_statement -> YIELD SEMI .)
    FUNC_C          reduce using rule 28 (inner_statement -> YIELD SEMI .)
    NS_C            reduce using rule 28 (inner_statement -> YIELD SEMI .)
    START_HEREDOC   reduce using rule 28 (inner_statement -> YIELD SEMI .)
    START_NOWDOC    reduce using rule 28 (inner_statement -> YIELD SEMI .)
    BACKTICK        reduce using rule 28 (inner_statement -> YIELD SEMI .)
    DOLLAR          reduce using rule 28 (inner_statement -> YIELD SEMI .)
    VARIABLE        reduce using rule 28 (inner_statement -> YIELD SEMI .)
    ELSEIF          reduce using rule 28 (inner_statement -> YIELD SEMI .)
    ELSE            reduce using rule 28 (inner_statement -> YIELD SEMI .)
    ENDIF           reduce using rule 28 (inner_statement -> YIELD SEMI .)
    ENDWHILE        reduce using rule 28 (inner_statement -> YIELD SEMI .)
    ENDDECLARE      reduce using rule 28 (inner_statement -> YIELD SEMI .)
    ENDFOREACH      reduce using rule 28 (inner_statement -> YIELD SEMI .)
    CASE            reduce using rule 28 (inner_statement -> YIELD SEMI .)
    DEFAULT         reduce using rule 28 (inner_statement -> YIELD SEMI .)
    ENDSWITCH       reduce using rule 28 (inner_statement -> YIELD SEMI .)
    ENDFOR          reduce using rule 28 (inner_statement -> YIELD SEMI .)


state 450

    (29) inner_statement -> YIELD expr . SEMI
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            shift and go to state 570
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 451

    (19) constant_declarations -> constant_declarations COMMA constant_declaration .

    SEMI            reduce using rule 19 (constant_declarations -> constant_declarations COMMA constant_declaration .)
    COMMA           reduce using rule 19 (constant_declarations -> constant_declarations COMMA constant_declaration .)


state 452

    (370) common_scalar -> STRING . CONSTANT_ENCAPSED_STRING
    (429) namespace_name -> STRING .

    CONSTANT_ENCAPSED_STRING shift and go to state 187
    NS_SEPARATOR    reduce using rule 429 (namespace_name -> STRING .)
    BOOLEAN_AND     reduce using rule 429 (namespace_name -> STRING .)
    BOOLEAN_OR      reduce using rule 429 (namespace_name -> STRING .)
    LOGICAL_AND     reduce using rule 429 (namespace_name -> STRING .)
    LOGICAL_OR      reduce using rule 429 (namespace_name -> STRING .)
    LOGICAL_XOR     reduce using rule 429 (namespace_name -> STRING .)
    AND             reduce using rule 429 (namespace_name -> STRING .)
    OR              reduce using rule 429 (namespace_name -> STRING .)
    XOR             reduce using rule 429 (namespace_name -> STRING .)
    CONCAT          reduce using rule 429 (namespace_name -> STRING .)
    PLUS            reduce using rule 429 (namespace_name -> STRING .)
    MINUS           reduce using rule 429 (namespace_name -> STRING .)
    MUL             reduce using rule 429 (namespace_name -> STRING .)
    DIV             reduce using rule 429 (namespace_name -> STRING .)
    SL              reduce using rule 429 (namespace_name -> STRING .)
    SR              reduce using rule 429 (namespace_name -> STRING .)
    MOD             reduce using rule 429 (namespace_name -> STRING .)
    IS_IDENTICAL    reduce using rule 429 (namespace_name -> STRING .)
    IS_NOT_IDENTICAL reduce using rule 429 (namespace_name -> STRING .)
    IS_EQUAL        reduce using rule 429 (namespace_name -> STRING .)
    IS_NOT_EQUAL    reduce using rule 429 (namespace_name -> STRING .)
    IS_SMALLER      reduce using rule 429 (namespace_name -> STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 429 (namespace_name -> STRING .)
    IS_GREATER      reduce using rule 429 (namespace_name -> STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 429 (namespace_name -> STRING .)
    SEMI            reduce using rule 429 (namespace_name -> STRING .)
    COMMA           reduce using rule 429 (namespace_name -> STRING .)
    DOUBLE_COLON    reduce using rule 429 (namespace_name -> STRING .)
    RPAREN          reduce using rule 429 (namespace_name -> STRING .)
    DOUBLE_ARROW    reduce using rule 429 (namespace_name -> STRING .)
    RBRACKET        reduce using rule 429 (namespace_name -> STRING .)


state 453

    (21) constant_declaration -> STRING EQUALS static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    SEMI            reduce using rule 21 (constant_declaration -> STRING EQUALS static_expr .)
    COMMA           reduce using rule 21 (constant_declaration -> STRING EQUALS static_expr .)
    BOOLEAN_AND     shift and go to state 571
    BOOLEAN_OR      shift and go to state 572
    LOGICAL_AND     shift and go to state 573
    LOGICAL_OR      shift and go to state 574
    LOGICAL_XOR     shift and go to state 575
    AND             shift and go to state 576
    OR              shift and go to state 577
    XOR             shift and go to state 578
    CONCAT          shift and go to state 579
    PLUS            shift and go to state 580
    MINUS           shift and go to state 581
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    SL              shift and go to state 584
    SR              shift and go to state 585
    MOD             shift and go to state 586
    IS_IDENTICAL    shift and go to state 587
    IS_NOT_IDENTICAL shift and go to state 588
    IS_EQUAL        shift and go to state 589
    IS_NOT_EQUAL    shift and go to state 590
    IS_SMALLER      shift and go to state 591
    IS_SMALLER_OR_EQUAL shift and go to state 592
    IS_GREATER      shift and go to state 593
    IS_GREATER_OR_EQUAL shift and go to state 594


state 454

    (402) static_expr -> static_scalar .

    BOOLEAN_AND     reduce using rule 402 (static_expr -> static_scalar .)
    BOOLEAN_OR      reduce using rule 402 (static_expr -> static_scalar .)
    LOGICAL_AND     reduce using rule 402 (static_expr -> static_scalar .)
    LOGICAL_OR      reduce using rule 402 (static_expr -> static_scalar .)
    LOGICAL_XOR     reduce using rule 402 (static_expr -> static_scalar .)
    AND             reduce using rule 402 (static_expr -> static_scalar .)
    OR              reduce using rule 402 (static_expr -> static_scalar .)
    XOR             reduce using rule 402 (static_expr -> static_scalar .)
    CONCAT          reduce using rule 402 (static_expr -> static_scalar .)
    PLUS            reduce using rule 402 (static_expr -> static_scalar .)
    MINUS           reduce using rule 402 (static_expr -> static_scalar .)
    MUL             reduce using rule 402 (static_expr -> static_scalar .)
    DIV             reduce using rule 402 (static_expr -> static_scalar .)
    SL              reduce using rule 402 (static_expr -> static_scalar .)
    SR              reduce using rule 402 (static_expr -> static_scalar .)
    MOD             reduce using rule 402 (static_expr -> static_scalar .)
    IS_IDENTICAL    reduce using rule 402 (static_expr -> static_scalar .)
    IS_NOT_IDENTICAL reduce using rule 402 (static_expr -> static_scalar .)
    IS_EQUAL        reduce using rule 402 (static_expr -> static_scalar .)
    IS_NOT_EQUAL    reduce using rule 402 (static_expr -> static_scalar .)
    IS_SMALLER      reduce using rule 402 (static_expr -> static_scalar .)
    IS_SMALLER_OR_EQUAL reduce using rule 402 (static_expr -> static_scalar .)
    IS_GREATER      reduce using rule 402 (static_expr -> static_scalar .)
    IS_GREATER_OR_EQUAL reduce using rule 402 (static_expr -> static_scalar .)
    SEMI            reduce using rule 402 (static_expr -> static_scalar .)
    COMMA           reduce using rule 402 (static_expr -> static_scalar .)
    RPAREN          reduce using rule 402 (static_expr -> static_scalar .)
    RBRACKET        reduce using rule 402 (static_expr -> static_scalar .)


state 455

    (392) static_scalar -> PLUS . static_scalar
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_scalar                  shift and go to state 595
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 456

    (393) static_scalar -> MINUS . static_scalar
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_scalar                  shift and go to state 596
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 457

    (427) static_expr -> LPAREN . static_expr RPAREN
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 597
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 458

    (378) static_scalar -> common_scalar .

    BOOLEAN_AND     reduce using rule 378 (static_scalar -> common_scalar .)
    BOOLEAN_OR      reduce using rule 378 (static_scalar -> common_scalar .)
    LOGICAL_AND     reduce using rule 378 (static_scalar -> common_scalar .)
    LOGICAL_OR      reduce using rule 378 (static_scalar -> common_scalar .)
    LOGICAL_XOR     reduce using rule 378 (static_scalar -> common_scalar .)
    AND             reduce using rule 378 (static_scalar -> common_scalar .)
    OR              reduce using rule 378 (static_scalar -> common_scalar .)
    XOR             reduce using rule 378 (static_scalar -> common_scalar .)
    CONCAT          reduce using rule 378 (static_scalar -> common_scalar .)
    PLUS            reduce using rule 378 (static_scalar -> common_scalar .)
    MINUS           reduce using rule 378 (static_scalar -> common_scalar .)
    MUL             reduce using rule 378 (static_scalar -> common_scalar .)
    DIV             reduce using rule 378 (static_scalar -> common_scalar .)
    SL              reduce using rule 378 (static_scalar -> common_scalar .)
    SR              reduce using rule 378 (static_scalar -> common_scalar .)
    MOD             reduce using rule 378 (static_scalar -> common_scalar .)
    IS_IDENTICAL    reduce using rule 378 (static_scalar -> common_scalar .)
    IS_NOT_IDENTICAL reduce using rule 378 (static_scalar -> common_scalar .)
    IS_EQUAL        reduce using rule 378 (static_scalar -> common_scalar .)
    IS_NOT_EQUAL    reduce using rule 378 (static_scalar -> common_scalar .)
    IS_SMALLER      reduce using rule 378 (static_scalar -> common_scalar .)
    IS_SMALLER_OR_EQUAL reduce using rule 378 (static_scalar -> common_scalar .)
    IS_GREATER      reduce using rule 378 (static_scalar -> common_scalar .)
    IS_GREATER_OR_EQUAL reduce using rule 378 (static_scalar -> common_scalar .)
    SEMI            reduce using rule 378 (static_scalar -> common_scalar .)
    COMMA           reduce using rule 378 (static_scalar -> common_scalar .)
    RPAREN          reduce using rule 378 (static_scalar -> common_scalar .)
    DOUBLE_ARROW    reduce using rule 378 (static_scalar -> common_scalar .)
    RBRACKET        reduce using rule 378 (static_scalar -> common_scalar .)


state 459

    (379) static_scalar -> class_constant .

    BOOLEAN_AND     reduce using rule 379 (static_scalar -> class_constant .)
    BOOLEAN_OR      reduce using rule 379 (static_scalar -> class_constant .)
    LOGICAL_AND     reduce using rule 379 (static_scalar -> class_constant .)
    LOGICAL_OR      reduce using rule 379 (static_scalar -> class_constant .)
    LOGICAL_XOR     reduce using rule 379 (static_scalar -> class_constant .)
    AND             reduce using rule 379 (static_scalar -> class_constant .)
    OR              reduce using rule 379 (static_scalar -> class_constant .)
    XOR             reduce using rule 379 (static_scalar -> class_constant .)
    CONCAT          reduce using rule 379 (static_scalar -> class_constant .)
    PLUS            reduce using rule 379 (static_scalar -> class_constant .)
    MINUS           reduce using rule 379 (static_scalar -> class_constant .)
    MUL             reduce using rule 379 (static_scalar -> class_constant .)
    DIV             reduce using rule 379 (static_scalar -> class_constant .)
    SL              reduce using rule 379 (static_scalar -> class_constant .)
    SR              reduce using rule 379 (static_scalar -> class_constant .)
    MOD             reduce using rule 379 (static_scalar -> class_constant .)
    IS_IDENTICAL    reduce using rule 379 (static_scalar -> class_constant .)
    IS_NOT_IDENTICAL reduce using rule 379 (static_scalar -> class_constant .)
    IS_EQUAL        reduce using rule 379 (static_scalar -> class_constant .)
    IS_NOT_EQUAL    reduce using rule 379 (static_scalar -> class_constant .)
    IS_SMALLER      reduce using rule 379 (static_scalar -> class_constant .)
    IS_SMALLER_OR_EQUAL reduce using rule 379 (static_scalar -> class_constant .)
    IS_GREATER      reduce using rule 379 (static_scalar -> class_constant .)
    IS_GREATER_OR_EQUAL reduce using rule 379 (static_scalar -> class_constant .)
    SEMI            reduce using rule 379 (static_scalar -> class_constant .)
    COMMA           reduce using rule 379 (static_scalar -> class_constant .)
    RPAREN          reduce using rule 379 (static_scalar -> class_constant .)
    DOUBLE_ARROW    reduce using rule 379 (static_scalar -> class_constant .)
    RBRACKET        reduce using rule 379 (static_scalar -> class_constant .)


state 460

    (380) static_scalar -> QUOTE . QUOTE
    (381) static_scalar -> QUOTE . ENCAPSED_AND_WHITESPACE QUOTE

    QUOTE           shift and go to state 598
    ENCAPSED_AND_WHITESPACE shift and go to state 599


state 461

    (382) static_scalar -> static_heredoc .

    BOOLEAN_AND     reduce using rule 382 (static_scalar -> static_heredoc .)
    BOOLEAN_OR      reduce using rule 382 (static_scalar -> static_heredoc .)
    LOGICAL_AND     reduce using rule 382 (static_scalar -> static_heredoc .)
    LOGICAL_OR      reduce using rule 382 (static_scalar -> static_heredoc .)
    LOGICAL_XOR     reduce using rule 382 (static_scalar -> static_heredoc .)
    AND             reduce using rule 382 (static_scalar -> static_heredoc .)
    OR              reduce using rule 382 (static_scalar -> static_heredoc .)
    XOR             reduce using rule 382 (static_scalar -> static_heredoc .)
    CONCAT          reduce using rule 382 (static_scalar -> static_heredoc .)
    PLUS            reduce using rule 382 (static_scalar -> static_heredoc .)
    MINUS           reduce using rule 382 (static_scalar -> static_heredoc .)
    MUL             reduce using rule 382 (static_scalar -> static_heredoc .)
    DIV             reduce using rule 382 (static_scalar -> static_heredoc .)
    SL              reduce using rule 382 (static_scalar -> static_heredoc .)
    SR              reduce using rule 382 (static_scalar -> static_heredoc .)
    MOD             reduce using rule 382 (static_scalar -> static_heredoc .)
    IS_IDENTICAL    reduce using rule 382 (static_scalar -> static_heredoc .)
    IS_NOT_IDENTICAL reduce using rule 382 (static_scalar -> static_heredoc .)
    IS_EQUAL        reduce using rule 382 (static_scalar -> static_heredoc .)
    IS_NOT_EQUAL    reduce using rule 382 (static_scalar -> static_heredoc .)
    IS_SMALLER      reduce using rule 382 (static_scalar -> static_heredoc .)
    IS_SMALLER_OR_EQUAL reduce using rule 382 (static_scalar -> static_heredoc .)
    IS_GREATER      reduce using rule 382 (static_scalar -> static_heredoc .)
    IS_GREATER_OR_EQUAL reduce using rule 382 (static_scalar -> static_heredoc .)
    SEMI            reduce using rule 382 (static_scalar -> static_heredoc .)
    COMMA           reduce using rule 382 (static_scalar -> static_heredoc .)
    RPAREN          reduce using rule 382 (static_scalar -> static_heredoc .)
    DOUBLE_ARROW    reduce using rule 382 (static_scalar -> static_heredoc .)
    RBRACKET        reduce using rule 382 (static_scalar -> static_heredoc .)


state 462

    (383) static_scalar -> nowdoc .

    BOOLEAN_AND     reduce using rule 383 (static_scalar -> nowdoc .)
    BOOLEAN_OR      reduce using rule 383 (static_scalar -> nowdoc .)
    LOGICAL_AND     reduce using rule 383 (static_scalar -> nowdoc .)
    LOGICAL_OR      reduce using rule 383 (static_scalar -> nowdoc .)
    LOGICAL_XOR     reduce using rule 383 (static_scalar -> nowdoc .)
    AND             reduce using rule 383 (static_scalar -> nowdoc .)
    OR              reduce using rule 383 (static_scalar -> nowdoc .)
    XOR             reduce using rule 383 (static_scalar -> nowdoc .)
    CONCAT          reduce using rule 383 (static_scalar -> nowdoc .)
    PLUS            reduce using rule 383 (static_scalar -> nowdoc .)
    MINUS           reduce using rule 383 (static_scalar -> nowdoc .)
    MUL             reduce using rule 383 (static_scalar -> nowdoc .)
    DIV             reduce using rule 383 (static_scalar -> nowdoc .)
    SL              reduce using rule 383 (static_scalar -> nowdoc .)
    SR              reduce using rule 383 (static_scalar -> nowdoc .)
    MOD             reduce using rule 383 (static_scalar -> nowdoc .)
    IS_IDENTICAL    reduce using rule 383 (static_scalar -> nowdoc .)
    IS_NOT_IDENTICAL reduce using rule 383 (static_scalar -> nowdoc .)
    IS_EQUAL        reduce using rule 383 (static_scalar -> nowdoc .)
    IS_NOT_EQUAL    reduce using rule 383 (static_scalar -> nowdoc .)
    IS_SMALLER      reduce using rule 383 (static_scalar -> nowdoc .)
    IS_SMALLER_OR_EQUAL reduce using rule 383 (static_scalar -> nowdoc .)
    IS_GREATER      reduce using rule 383 (static_scalar -> nowdoc .)
    IS_GREATER_OR_EQUAL reduce using rule 383 (static_scalar -> nowdoc .)
    SEMI            reduce using rule 383 (static_scalar -> nowdoc .)
    COMMA           reduce using rule 383 (static_scalar -> nowdoc .)
    RPAREN          reduce using rule 383 (static_scalar -> nowdoc .)
    DOUBLE_ARROW    reduce using rule 383 (static_scalar -> nowdoc .)
    RBRACKET        reduce using rule 383 (static_scalar -> nowdoc .)


state 463

    (384) static_scalar -> class_name_constant .

    BOOLEAN_AND     reduce using rule 384 (static_scalar -> class_name_constant .)
    BOOLEAN_OR      reduce using rule 384 (static_scalar -> class_name_constant .)
    LOGICAL_AND     reduce using rule 384 (static_scalar -> class_name_constant .)
    LOGICAL_OR      reduce using rule 384 (static_scalar -> class_name_constant .)
    LOGICAL_XOR     reduce using rule 384 (static_scalar -> class_name_constant .)
    AND             reduce using rule 384 (static_scalar -> class_name_constant .)
    OR              reduce using rule 384 (static_scalar -> class_name_constant .)
    XOR             reduce using rule 384 (static_scalar -> class_name_constant .)
    CONCAT          reduce using rule 384 (static_scalar -> class_name_constant .)
    PLUS            reduce using rule 384 (static_scalar -> class_name_constant .)
    MINUS           reduce using rule 384 (static_scalar -> class_name_constant .)
    MUL             reduce using rule 384 (static_scalar -> class_name_constant .)
    DIV             reduce using rule 384 (static_scalar -> class_name_constant .)
    SL              reduce using rule 384 (static_scalar -> class_name_constant .)
    SR              reduce using rule 384 (static_scalar -> class_name_constant .)
    MOD             reduce using rule 384 (static_scalar -> class_name_constant .)
    IS_IDENTICAL    reduce using rule 384 (static_scalar -> class_name_constant .)
    IS_NOT_IDENTICAL reduce using rule 384 (static_scalar -> class_name_constant .)
    IS_EQUAL        reduce using rule 384 (static_scalar -> class_name_constant .)
    IS_NOT_EQUAL    reduce using rule 384 (static_scalar -> class_name_constant .)
    IS_SMALLER      reduce using rule 384 (static_scalar -> class_name_constant .)
    IS_SMALLER_OR_EQUAL reduce using rule 384 (static_scalar -> class_name_constant .)
    IS_GREATER      reduce using rule 384 (static_scalar -> class_name_constant .)
    IS_GREATER_OR_EQUAL reduce using rule 384 (static_scalar -> class_name_constant .)
    SEMI            reduce using rule 384 (static_scalar -> class_name_constant .)
    COMMA           reduce using rule 384 (static_scalar -> class_name_constant .)
    RPAREN          reduce using rule 384 (static_scalar -> class_name_constant .)
    DOUBLE_ARROW    reduce using rule 384 (static_scalar -> class_name_constant .)
    RBRACKET        reduce using rule 384 (static_scalar -> class_name_constant .)


state 464

    (389) static_scalar -> namespace_name .
    (428) namespace_name -> namespace_name . NS_SEPARATOR STRING
    (187) class_name -> namespace_name .

    BOOLEAN_AND     reduce using rule 389 (static_scalar -> namespace_name .)
    BOOLEAN_OR      reduce using rule 389 (static_scalar -> namespace_name .)
    LOGICAL_AND     reduce using rule 389 (static_scalar -> namespace_name .)
    LOGICAL_OR      reduce using rule 389 (static_scalar -> namespace_name .)
    LOGICAL_XOR     reduce using rule 389 (static_scalar -> namespace_name .)
    AND             reduce using rule 389 (static_scalar -> namespace_name .)
    OR              reduce using rule 389 (static_scalar -> namespace_name .)
    XOR             reduce using rule 389 (static_scalar -> namespace_name .)
    CONCAT          reduce using rule 389 (static_scalar -> namespace_name .)
    PLUS            reduce using rule 389 (static_scalar -> namespace_name .)
    MINUS           reduce using rule 389 (static_scalar -> namespace_name .)
    MUL             reduce using rule 389 (static_scalar -> namespace_name .)
    DIV             reduce using rule 389 (static_scalar -> namespace_name .)
    SL              reduce using rule 389 (static_scalar -> namespace_name .)
    SR              reduce using rule 389 (static_scalar -> namespace_name .)
    MOD             reduce using rule 389 (static_scalar -> namespace_name .)
    IS_IDENTICAL    reduce using rule 389 (static_scalar -> namespace_name .)
    IS_NOT_IDENTICAL reduce using rule 389 (static_scalar -> namespace_name .)
    IS_EQUAL        reduce using rule 389 (static_scalar -> namespace_name .)
    IS_NOT_EQUAL    reduce using rule 389 (static_scalar -> namespace_name .)
    IS_SMALLER      reduce using rule 389 (static_scalar -> namespace_name .)
    IS_SMALLER_OR_EQUAL reduce using rule 389 (static_scalar -> namespace_name .)
    IS_GREATER      reduce using rule 389 (static_scalar -> namespace_name .)
    IS_GREATER_OR_EQUAL reduce using rule 389 (static_scalar -> namespace_name .)
    SEMI            reduce using rule 389 (static_scalar -> namespace_name .)
    COMMA           reduce using rule 389 (static_scalar -> namespace_name .)
    RPAREN          reduce using rule 389 (static_scalar -> namespace_name .)
    DOUBLE_ARROW    reduce using rule 389 (static_scalar -> namespace_name .)
    RBRACKET        reduce using rule 389 (static_scalar -> namespace_name .)
    NS_SEPARATOR    shift and go to state 118
    DOUBLE_COLON    reduce using rule 187 (class_name -> namespace_name .)


state 465

    (390) static_scalar -> NS_SEPARATOR . namespace_name
    (188) class_name -> NS_SEPARATOR . namespace_name
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    STRING          shift and go to state 116
    ARRAY           shift and go to state 117

    namespace_name                 shift and go to state 600

state 466

    (391) static_scalar -> NAMESPACE . NS_SEPARATOR namespace_name
    (189) class_name -> NAMESPACE . NS_SEPARATOR namespace_name

    NS_SEPARATOR    shift and go to state 601


state 467

    (394) static_scalar -> ARRAY . LPAREN static_array_pair_list RPAREN
    (430) namespace_name -> ARRAY .

    LPAREN          shift and go to state 602
    NS_SEPARATOR    reduce using rule 430 (namespace_name -> ARRAY .)
    BOOLEAN_AND     reduce using rule 430 (namespace_name -> ARRAY .)
    BOOLEAN_OR      reduce using rule 430 (namespace_name -> ARRAY .)
    LOGICAL_AND     reduce using rule 430 (namespace_name -> ARRAY .)
    LOGICAL_OR      reduce using rule 430 (namespace_name -> ARRAY .)
    LOGICAL_XOR     reduce using rule 430 (namespace_name -> ARRAY .)
    AND             reduce using rule 430 (namespace_name -> ARRAY .)
    OR              reduce using rule 430 (namespace_name -> ARRAY .)
    XOR             reduce using rule 430 (namespace_name -> ARRAY .)
    CONCAT          reduce using rule 430 (namespace_name -> ARRAY .)
    PLUS            reduce using rule 430 (namespace_name -> ARRAY .)
    MINUS           reduce using rule 430 (namespace_name -> ARRAY .)
    MUL             reduce using rule 430 (namespace_name -> ARRAY .)
    DIV             reduce using rule 430 (namespace_name -> ARRAY .)
    SL              reduce using rule 430 (namespace_name -> ARRAY .)
    SR              reduce using rule 430 (namespace_name -> ARRAY .)
    MOD             reduce using rule 430 (namespace_name -> ARRAY .)
    IS_IDENTICAL    reduce using rule 430 (namespace_name -> ARRAY .)
    IS_NOT_IDENTICAL reduce using rule 430 (namespace_name -> ARRAY .)
    IS_EQUAL        reduce using rule 430 (namespace_name -> ARRAY .)
    IS_NOT_EQUAL    reduce using rule 430 (namespace_name -> ARRAY .)
    IS_SMALLER      reduce using rule 430 (namespace_name -> ARRAY .)
    IS_SMALLER_OR_EQUAL reduce using rule 430 (namespace_name -> ARRAY .)
    IS_GREATER      reduce using rule 430 (namespace_name -> ARRAY .)
    IS_GREATER_OR_EQUAL reduce using rule 430 (namespace_name -> ARRAY .)
    SEMI            reduce using rule 430 (namespace_name -> ARRAY .)
    COMMA           reduce using rule 430 (namespace_name -> ARRAY .)
    DOUBLE_COLON    reduce using rule 430 (namespace_name -> ARRAY .)
    RPAREN          reduce using rule 430 (namespace_name -> ARRAY .)
    DOUBLE_ARROW    reduce using rule 430 (namespace_name -> ARRAY .)
    RBRACKET        reduce using rule 430 (namespace_name -> ARRAY .)


state 468

    (395) static_scalar -> LBRACKET . static_array_pair_list RBRACKET
    (396) static_array_pair_list -> . empty
    (397) static_array_pair_list -> . static_non_empty_array_pair_list possible_comma
    (443) empty -> .
    (398) static_non_empty_array_pair_list -> . static_non_empty_array_pair_list COMMA static_expr
    (399) static_non_empty_array_pair_list -> . static_expr
    (400) static_non_empty_array_pair_list -> . static_non_empty_array_pair_list COMMA static_scalar DOUBLE_ARROW static_expr
    (401) static_non_empty_array_pair_list -> . static_scalar DOUBLE_ARROW static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RBRACKET        reduce using rule 443 (empty -> .)
    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_array_pair_list         shift and go to state 603
    empty                          shift and go to state 604
    static_non_empty_array_pair_list shift and go to state 605
    static_expr                    shift and go to state 606
    static_scalar                  shift and go to state 607
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 469

    (365) class_constant -> class_name . DOUBLE_COLON STRING
    (385) class_name_constant -> class_name . DOUBLE_COLON CLASS

    DOUBLE_COLON    shift and go to state 608


state 470

    (366) class_constant -> variable_class_name . DOUBLE_COLON STRING

    DOUBLE_COLON    shift and go to state 609


state 471

    (386) static_heredoc -> START_HEREDOC . multiple_encapsed END_HEREDOC
    (387) multiple_encapsed -> . multiple_encapsed ENCAPSED_AND_WHITESPACE
    (388) multiple_encapsed -> . empty
    (443) empty -> .

    END_HEREDOC     reduce using rule 443 (empty -> .)
    ENCAPSED_AND_WHITESPACE reduce using rule 443 (empty -> .)

    multiple_encapsed              shift and go to state 610
    empty                          shift and go to state 611

state 472

    (233) variable_class_name -> reference_variable .
    (235) reference_variable -> reference_variable . LBRACKET dim_offset RBRACKET
    (236) reference_variable -> reference_variable . LBRACE expr RBRACE

    DOUBLE_COLON    reduce using rule 233 (variable_class_name -> reference_variable .)
    LBRACKET        shift and go to state 267
    LBRACE          shift and go to state 268


state 473

    (240) compound_variable -> DOLLAR . LBRACE expr RBRACE

    LBRACE          shift and go to state 270


state 474

    (13) use_declarations -> use_declarations COMMA use_declaration .

    SEMI            reduce using rule 13 (use_declarations -> use_declarations COMMA use_declaration .)
    COMMA           reduce using rule 13 (use_declarations -> use_declarations COMMA use_declaration .)


state 475

    (17) use_declaration -> namespace_name AS STRING .

    SEMI            reduce using rule 17 (use_declaration -> namespace_name AS STRING .)
    COMMA           reduce using rule 17 (use_declaration -> namespace_name AS STRING .)


state 476

    (18) use_declaration -> NS_SEPARATOR namespace_name AS . STRING

    STRING          shift and go to state 612


state 477

    (31) statement -> IF LPAREN expr RPAREN . statement elseif_list else_single
    (32) statement -> IF LPAREN expr RPAREN . COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (30) statement -> . LBRACE inner_statement_list RBRACE
    (31) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (33) statement -> . WHILE LPAREN expr RPAREN while_statement
    (34) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (35) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (36) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (37) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (38) statement -> . BREAK SEMI
    (39) statement -> . BREAK expr SEMI
    (40) statement -> . CONTINUE SEMI
    (41) statement -> . CONTINUE expr SEMI
    (42) statement -> . RETURN SEMI
    (43) statement -> . RETURN expr SEMI
    (44) statement -> . GLOBAL global_var_list SEMI
    (45) statement -> . STATIC static_var_list SEMI
    (46) statement -> . ECHO echo_expr_list SEMI
    (47) statement -> . INLINE_HTML
    (48) statement -> . expr SEMI
    (49) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (50) statement -> . SEMI
    (51) statement -> . TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
    (56) statement -> . THROW expr SEMI
    (57) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    COLON           shift and go to state 614
    LBRACE          shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    FOREACH         shift and go to state 21
    SWITCH          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    GLOBAL          shift and go to state 26
    STATIC          shift and go to state 27
    ECHO            shift and go to state 28
    INLINE_HTML     shift and go to state 29
    UNSET           shift and go to state 30
    SEMI            shift and go to state 10
    TRY             shift and go to state 31
    THROW           shift and go to state 32
    DECLARE         shift and go to state 33
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 17
    statement                      shift and go to state 613
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 478

    (184) expr -> expr OBJECT_OPERATOR object_property method_or_not .

    SEMI            reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    OBJECT_OPERATOR reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    LBRACE          reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    BOOLEAN_AND     reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    BOOLEAN_OR      reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    LOGICAL_AND     reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    LOGICAL_OR      reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    LOGICAL_XOR     reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    AND             reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    OR              reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    XOR             reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    CONCAT          reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    PLUS            reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    MINUS           reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    MUL             reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    DIV             reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    SL              reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    SR              reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    MOD             reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    IS_IDENTICAL    reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    IS_NOT_IDENTICAL reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    IS_EQUAL        reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    IS_NOT_EQUAL    reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    IS_SMALLER      reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    IS_SMALLER_OR_EQUAL reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    IS_GREATER      reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    IS_GREATER_OR_EQUAL reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    INSTANCEOF      reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    QUESTION        reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    RPAREN          reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    COMMA           reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    DOUBLE_ARROW    reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    RBRACKET        reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    RBRACE          reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    COLON           reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)
    AS              reduce using rule 184 (expr -> expr OBJECT_OPERATOR object_property method_or_not .)


state 479

    (220) method_or_not -> LPAREN . function_call_parameter_list RPAREN
    (266) function_call_parameter_list -> . function_call_parameter_list COMMA function_call_parameter
    (267) function_call_parameter_list -> . function_call_parameter
    (268) function_call_parameter_list -> . empty
    (269) function_call_parameter -> . expr
    (270) function_call_parameter -> . AND variable
    (443) empty -> .
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 284
    RPAREN          reduce using rule 443 (empty -> .)
    COMMA           reduce using rule 443 (empty -> .)
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    function_call_parameter_list   shift and go to state 615
    function_call_parameter        shift and go to state 281
    empty                          shift and go to state 282
    expr                           shift and go to state 283
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 480

    (221) method_or_not -> empty .

    SEMI            reduce using rule 221 (method_or_not -> empty .)
    OBJECT_OPERATOR reduce using rule 221 (method_or_not -> empty .)
    LBRACE          reduce using rule 221 (method_or_not -> empty .)
    BOOLEAN_AND     reduce using rule 221 (method_or_not -> empty .)
    BOOLEAN_OR      reduce using rule 221 (method_or_not -> empty .)
    LOGICAL_AND     reduce using rule 221 (method_or_not -> empty .)
    LOGICAL_OR      reduce using rule 221 (method_or_not -> empty .)
    LOGICAL_XOR     reduce using rule 221 (method_or_not -> empty .)
    AND             reduce using rule 221 (method_or_not -> empty .)
    OR              reduce using rule 221 (method_or_not -> empty .)
    XOR             reduce using rule 221 (method_or_not -> empty .)
    CONCAT          reduce using rule 221 (method_or_not -> empty .)
    PLUS            reduce using rule 221 (method_or_not -> empty .)
    MINUS           reduce using rule 221 (method_or_not -> empty .)
    MUL             reduce using rule 221 (method_or_not -> empty .)
    DIV             reduce using rule 221 (method_or_not -> empty .)
    SL              reduce using rule 221 (method_or_not -> empty .)
    SR              reduce using rule 221 (method_or_not -> empty .)
    MOD             reduce using rule 221 (method_or_not -> empty .)
    IS_IDENTICAL    reduce using rule 221 (method_or_not -> empty .)
    IS_NOT_IDENTICAL reduce using rule 221 (method_or_not -> empty .)
    IS_EQUAL        reduce using rule 221 (method_or_not -> empty .)
    IS_NOT_EQUAL    reduce using rule 221 (method_or_not -> empty .)
    IS_SMALLER      reduce using rule 221 (method_or_not -> empty .)
    IS_SMALLER_OR_EQUAL reduce using rule 221 (method_or_not -> empty .)
    IS_GREATER      reduce using rule 221 (method_or_not -> empty .)
    IS_GREATER_OR_EQUAL reduce using rule 221 (method_or_not -> empty .)
    INSTANCEOF      reduce using rule 221 (method_or_not -> empty .)
    QUESTION        reduce using rule 221 (method_or_not -> empty .)
    RPAREN          reduce using rule 221 (method_or_not -> empty .)
    COMMA           reduce using rule 221 (method_or_not -> empty .)
    DOUBLE_ARROW    reduce using rule 221 (method_or_not -> empty .)
    RBRACKET        reduce using rule 221 (method_or_not -> empty .)
    RBRACE          reduce using rule 221 (method_or_not -> empty .)
    COLON           reduce using rule 221 (method_or_not -> empty .)
    AS              reduce using rule 221 (method_or_not -> empty .)
    EQUALS          reduce using rule 221 (method_or_not -> empty .)
    PLUS_EQUAL      reduce using rule 221 (method_or_not -> empty .)
    MINUS_EQUAL     reduce using rule 221 (method_or_not -> empty .)
    MUL_EQUAL       reduce using rule 221 (method_or_not -> empty .)
    DIV_EQUAL       reduce using rule 221 (method_or_not -> empty .)
    CONCAT_EQUAL    reduce using rule 221 (method_or_not -> empty .)
    MOD_EQUAL       reduce using rule 221 (method_or_not -> empty .)
    AND_EQUAL       reduce using rule 221 (method_or_not -> empty .)
    OR_EQUAL        reduce using rule 221 (method_or_not -> empty .)
    XOR_EQUAL       reduce using rule 221 (method_or_not -> empty .)
    SL_EQUAL        reduce using rule 221 (method_or_not -> empty .)
    SR_EQUAL        reduce using rule 221 (method_or_not -> empty .)
    INC             reduce using rule 221 (method_or_not -> empty .)
    DEC             reduce using rule 221 (method_or_not -> empty .)
    LBRACKET        reduce using rule 221 (method_or_not -> empty .)


state 481

    (243) object_property -> variable_name object_dim_list .
    (246) object_dim_list -> object_dim_list . LBRACKET dim_offset RBRACKET
    (247) object_dim_list -> object_dim_list . LBRACE expr RBRACE

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
    LPAREN          reduce using rule 243 (object_property -> variable_name object_dim_list .)
    SEMI            reduce using rule 243 (object_property -> variable_name object_dim_list .)
    OBJECT_OPERATOR reduce using rule 243 (object_property -> variable_name object_dim_list .)
    BOOLEAN_AND     reduce using rule 243 (object_property -> variable_name object_dim_list .)
    BOOLEAN_OR      reduce using rule 243 (object_property -> variable_name object_dim_list .)
    LOGICAL_AND     reduce using rule 243 (object_property -> variable_name object_dim_list .)
    LOGICAL_OR      reduce using rule 243 (object_property -> variable_name object_dim_list .)
    LOGICAL_XOR     reduce using rule 243 (object_property -> variable_name object_dim_list .)
    AND             reduce using rule 243 (object_property -> variable_name object_dim_list .)
    OR              reduce using rule 243 (object_property -> variable_name object_dim_list .)
    XOR             reduce using rule 243 (object_property -> variable_name object_dim_list .)
    CONCAT          reduce using rule 243 (object_property -> variable_name object_dim_list .)
    PLUS            reduce using rule 243 (object_property -> variable_name object_dim_list .)
    MINUS           reduce using rule 243 (object_property -> variable_name object_dim_list .)
    MUL             reduce using rule 243 (object_property -> variable_name object_dim_list .)
    DIV             reduce using rule 243 (object_property -> variable_name object_dim_list .)
    SL              reduce using rule 243 (object_property -> variable_name object_dim_list .)
    SR              reduce using rule 243 (object_property -> variable_name object_dim_list .)
    MOD             reduce using rule 243 (object_property -> variable_name object_dim_list .)
    IS_IDENTICAL    reduce using rule 243 (object_property -> variable_name object_dim_list .)
    IS_NOT_IDENTICAL reduce using rule 243 (object_property -> variable_name object_dim_list .)
    IS_EQUAL        reduce using rule 243 (object_property -> variable_name object_dim_list .)
    IS_NOT_EQUAL    reduce using rule 243 (object_property -> variable_name object_dim_list .)
    IS_SMALLER      reduce using rule 243 (object_property -> variable_name object_dim_list .)
    IS_SMALLER_OR_EQUAL reduce using rule 243 (object_property -> variable_name object_dim_list .)
    IS_GREATER      reduce using rule 243 (object_property -> variable_name object_dim_list .)
    IS_GREATER_OR_EQUAL reduce using rule 243 (object_property -> variable_name object_dim_list .)
    INSTANCEOF      reduce using rule 243 (object_property -> variable_name object_dim_list .)
    QUESTION        reduce using rule 243 (object_property -> variable_name object_dim_list .)
    RPAREN          reduce using rule 243 (object_property -> variable_name object_dim_list .)
    COMMA           reduce using rule 243 (object_property -> variable_name object_dim_list .)
    DOUBLE_ARROW    reduce using rule 243 (object_property -> variable_name object_dim_list .)
    RBRACKET        reduce using rule 243 (object_property -> variable_name object_dim_list .)
    RBRACE          reduce using rule 243 (object_property -> variable_name object_dim_list .)
    COLON           reduce using rule 243 (object_property -> variable_name object_dim_list .)
    AS              reduce using rule 243 (object_property -> variable_name object_dim_list .)
    EQUALS          reduce using rule 243 (object_property -> variable_name object_dim_list .)
    PLUS_EQUAL      reduce using rule 243 (object_property -> variable_name object_dim_list .)
    MINUS_EQUAL     reduce using rule 243 (object_property -> variable_name object_dim_list .)
    MUL_EQUAL       reduce using rule 243 (object_property -> variable_name object_dim_list .)
    DIV_EQUAL       reduce using rule 243 (object_property -> variable_name object_dim_list .)
    CONCAT_EQUAL    reduce using rule 243 (object_property -> variable_name object_dim_list .)
    MOD_EQUAL       reduce using rule 243 (object_property -> variable_name object_dim_list .)
    AND_EQUAL       reduce using rule 243 (object_property -> variable_name object_dim_list .)
    OR_EQUAL        reduce using rule 243 (object_property -> variable_name object_dim_list .)
    XOR_EQUAL       reduce using rule 243 (object_property -> variable_name object_dim_list .)
    SL_EQUAL        reduce using rule 243 (object_property -> variable_name object_dim_list .)
    SR_EQUAL        reduce using rule 243 (object_property -> variable_name object_dim_list .)
    INC             reduce using rule 243 (object_property -> variable_name object_dim_list .)
    DEC             reduce using rule 243 (object_property -> variable_name object_dim_list .)
    LBRACKET        shift and go to state 616
    LBRACE          shift and go to state 617

  ! LBRACE          [ reduce using rule 243 (object_property -> variable_name object_dim_list .) ]
  ! LBRACKET        [ reduce using rule 243 (object_property -> variable_name object_dim_list .) ]


state 482

    (245) object_dim_list -> empty .

    LBRACKET        reduce using rule 245 (object_dim_list -> empty .)
    LBRACE          reduce using rule 245 (object_dim_list -> empty .)
    LPAREN          reduce using rule 245 (object_dim_list -> empty .)
    SEMI            reduce using rule 245 (object_dim_list -> empty .)
    OBJECT_OPERATOR reduce using rule 245 (object_dim_list -> empty .)
    BOOLEAN_AND     reduce using rule 245 (object_dim_list -> empty .)
    BOOLEAN_OR      reduce using rule 245 (object_dim_list -> empty .)
    LOGICAL_AND     reduce using rule 245 (object_dim_list -> empty .)
    LOGICAL_OR      reduce using rule 245 (object_dim_list -> empty .)
    LOGICAL_XOR     reduce using rule 245 (object_dim_list -> empty .)
    AND             reduce using rule 245 (object_dim_list -> empty .)
    OR              reduce using rule 245 (object_dim_list -> empty .)
    XOR             reduce using rule 245 (object_dim_list -> empty .)
    CONCAT          reduce using rule 245 (object_dim_list -> empty .)
    PLUS            reduce using rule 245 (object_dim_list -> empty .)
    MINUS           reduce using rule 245 (object_dim_list -> empty .)
    MUL             reduce using rule 245 (object_dim_list -> empty .)
    DIV             reduce using rule 245 (object_dim_list -> empty .)
    SL              reduce using rule 245 (object_dim_list -> empty .)
    SR              reduce using rule 245 (object_dim_list -> empty .)
    MOD             reduce using rule 245 (object_dim_list -> empty .)
    IS_IDENTICAL    reduce using rule 245 (object_dim_list -> empty .)
    IS_NOT_IDENTICAL reduce using rule 245 (object_dim_list -> empty .)
    IS_EQUAL        reduce using rule 245 (object_dim_list -> empty .)
    IS_NOT_EQUAL    reduce using rule 245 (object_dim_list -> empty .)
    IS_SMALLER      reduce using rule 245 (object_dim_list -> empty .)
    IS_SMALLER_OR_EQUAL reduce using rule 245 (object_dim_list -> empty .)
    IS_GREATER      reduce using rule 245 (object_dim_list -> empty .)
    IS_GREATER_OR_EQUAL reduce using rule 245 (object_dim_list -> empty .)
    INSTANCEOF      reduce using rule 245 (object_dim_list -> empty .)
    QUESTION        reduce using rule 245 (object_dim_list -> empty .)
    RPAREN          reduce using rule 245 (object_dim_list -> empty .)
    COMMA           reduce using rule 245 (object_dim_list -> empty .)
    DOUBLE_ARROW    reduce using rule 245 (object_dim_list -> empty .)
    RBRACKET        reduce using rule 245 (object_dim_list -> empty .)
    RBRACE          reduce using rule 245 (object_dim_list -> empty .)
    COLON           reduce using rule 245 (object_dim_list -> empty .)
    AS              reduce using rule 245 (object_dim_list -> empty .)
    EQUALS          reduce using rule 245 (object_dim_list -> empty .)
    PLUS_EQUAL      reduce using rule 245 (object_dim_list -> empty .)
    MINUS_EQUAL     reduce using rule 245 (object_dim_list -> empty .)
    MUL_EQUAL       reduce using rule 245 (object_dim_list -> empty .)
    DIV_EQUAL       reduce using rule 245 (object_dim_list -> empty .)
    CONCAT_EQUAL    reduce using rule 245 (object_dim_list -> empty .)
    MOD_EQUAL       reduce using rule 245 (object_dim_list -> empty .)
    AND_EQUAL       reduce using rule 245 (object_dim_list -> empty .)
    OR_EQUAL        reduce using rule 245 (object_dim_list -> empty .)
    XOR_EQUAL       reduce using rule 245 (object_dim_list -> empty .)
    SL_EQUAL        reduce using rule 245 (object_dim_list -> empty .)
    SR_EQUAL        reduce using rule 245 (object_dim_list -> empty .)
    INC             reduce using rule 245 (object_dim_list -> empty .)
    DEC             reduce using rule 245 (object_dim_list -> empty .)


state 483

    (249) variable_name -> LBRACE expr . RBRACE
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    RBRACE          shift and go to state 618
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 484

    (238) expr -> expr LBRACE dim_offset RBRACE .

    SEMI            reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    OBJECT_OPERATOR reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    LBRACE          reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    BOOLEAN_AND     reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    BOOLEAN_OR      reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    LOGICAL_AND     reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    LOGICAL_OR      reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    LOGICAL_XOR     reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    AND             reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    OR              reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    XOR             reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    CONCAT          reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    PLUS            reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    MINUS           reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    MUL             reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    DIV             reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    SL              reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    SR              reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    MOD             reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    IS_IDENTICAL    reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    IS_EQUAL        reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    IS_NOT_EQUAL    reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    IS_SMALLER      reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    IS_GREATER      reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    INSTANCEOF      reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    QUESTION        reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    RPAREN          reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    COMMA           reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    DOUBLE_ARROW    reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    RBRACKET        reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    RBRACE          reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    COLON           reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)
    AS              reduce using rule 238 (expr -> expr LBRACE dim_offset RBRACE .)


state 485

    (319) expr -> expr QUESTION expr COLON . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 619
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 486

    (320) expr -> expr QUESTION COLON expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 320 (expr -> expr QUESTION COLON expr .)
    OBJECT_OPERATOR reduce using rule 320 (expr -> expr QUESTION COLON expr .)
    LBRACE          reduce using rule 320 (expr -> expr QUESTION COLON expr .)
    LOGICAL_AND     reduce using rule 320 (expr -> expr QUESTION COLON expr .)
    LOGICAL_OR      reduce using rule 320 (expr -> expr QUESTION COLON expr .)
    LOGICAL_XOR     reduce using rule 320 (expr -> expr QUESTION COLON expr .)
    QUESTION        reduce using rule 320 (expr -> expr QUESTION COLON expr .)
    RPAREN          reduce using rule 320 (expr -> expr QUESTION COLON expr .)
    COMMA           reduce using rule 320 (expr -> expr QUESTION COLON expr .)
    DOUBLE_ARROW    reduce using rule 320 (expr -> expr QUESTION COLON expr .)
    RBRACKET        reduce using rule 320 (expr -> expr QUESTION COLON expr .)
    RBRACE          reduce using rule 320 (expr -> expr QUESTION COLON expr .)
    COLON           reduce using rule 320 (expr -> expr QUESTION COLON expr .)
    AS              reduce using rule 320 (expr -> expr QUESTION COLON expr .)
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157

  ! BOOLEAN_AND     [ reduce using rule 320 (expr -> expr QUESTION COLON expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 320 (expr -> expr QUESTION COLON expr .) ]
  ! AND             [ reduce using rule 320 (expr -> expr QUESTION COLON expr .) ]
  ! OR              [ reduce using rule 320 (expr -> expr QUESTION COLON expr .) ]
  ! XOR             [ reduce using rule 320 (expr -> expr QUESTION COLON expr .) ]
  ! CONCAT          [ reduce using rule 320 (expr -> expr QUESTION COLON expr .) ]
  ! PLUS            [ reduce using rule 320 (expr -> expr QUESTION COLON expr .) ]
  ! MINUS           [ reduce using rule 320 (expr -> expr QUESTION COLON expr .) ]
  ! MUL             [ reduce using rule 320 (expr -> expr QUESTION COLON expr .) ]
  ! DIV             [ reduce using rule 320 (expr -> expr QUESTION COLON expr .) ]
  ! SL              [ reduce using rule 320 (expr -> expr QUESTION COLON expr .) ]
  ! SR              [ reduce using rule 320 (expr -> expr QUESTION COLON expr .) ]
  ! MOD             [ reduce using rule 320 (expr -> expr QUESTION COLON expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 320 (expr -> expr QUESTION COLON expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 320 (expr -> expr QUESTION COLON expr .) ]
  ! IS_EQUAL        [ reduce using rule 320 (expr -> expr QUESTION COLON expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 320 (expr -> expr QUESTION COLON expr .) ]
  ! IS_SMALLER      [ reduce using rule 320 (expr -> expr QUESTION COLON expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 320 (expr -> expr QUESTION COLON expr .) ]
  ! IS_GREATER      [ reduce using rule 320 (expr -> expr QUESTION COLON expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 320 (expr -> expr QUESTION COLON expr .) ]
  ! INSTANCEOF      [ reduce using rule 320 (expr -> expr QUESTION COLON expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! QUESTION        [ shift and go to state 158 ]


state 487

    (33) statement -> WHILE LPAREN expr RPAREN . while_statement
    (70) while_statement -> . statement
    (71) while_statement -> . COLON inner_statement_list ENDWHILE SEMI
    (30) statement -> . LBRACE inner_statement_list RBRACE
    (31) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (33) statement -> . WHILE LPAREN expr RPAREN while_statement
    (34) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (35) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (36) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (37) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (38) statement -> . BREAK SEMI
    (39) statement -> . BREAK expr SEMI
    (40) statement -> . CONTINUE SEMI
    (41) statement -> . CONTINUE expr SEMI
    (42) statement -> . RETURN SEMI
    (43) statement -> . RETURN expr SEMI
    (44) statement -> . GLOBAL global_var_list SEMI
    (45) statement -> . STATIC static_var_list SEMI
    (46) statement -> . ECHO echo_expr_list SEMI
    (47) statement -> . INLINE_HTML
    (48) statement -> . expr SEMI
    (49) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (50) statement -> . SEMI
    (51) statement -> . TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
    (56) statement -> . THROW expr SEMI
    (57) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    COLON           shift and go to state 622
    LBRACE          shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    FOREACH         shift and go to state 21
    SWITCH          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    GLOBAL          shift and go to state 26
    STATIC          shift and go to state 27
    ECHO            shift and go to state 28
    INLINE_HTML     shift and go to state 29
    UNSET           shift and go to state 30
    SEMI            shift and go to state 10
    TRY             shift and go to state 31
    THROW           shift and go to state 32
    DECLARE         shift and go to state 33
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 17
    while_statement                shift and go to state 620
    statement                      shift and go to state 621
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 488

    (34) statement -> DO statement WHILE LPAREN . expr RPAREN SEMI
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 623
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 489

    (35) statement -> FOR LPAREN for_expr SEMI . for_expr SEMI for_expr RPAREN for_statement
    (72) for_expr -> . empty
    (73) for_expr -> . non_empty_for_expr
    (443) empty -> .
    (74) non_empty_for_expr -> . non_empty_for_expr COMMA expr
    (75) non_empty_for_expr -> . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    SEMI            reduce using rule 443 (empty -> .)
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    for_expr                       shift and go to state 624
    empty                          shift and go to state 340
    non_empty_for_expr             shift and go to state 341
    expr                           shift and go to state 342
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 490

    (74) non_empty_for_expr -> non_empty_for_expr COMMA . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 625
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 491

    (36) statement -> FOREACH LPAREN expr AS . foreach_variable foreach_optional_arg RPAREN foreach_statement
    (78) foreach_variable -> . LIST LPAREN assignment_list RPAREN
    (79) foreach_variable -> . variable
    (80) foreach_variable -> . AND variable
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LIST            shift and go to state 627
    AND             shift and go to state 629
    NS_SEPARATOR    shift and go to state 230
    NAMESPACE       shift and go to state 231
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107

    foreach_variable               shift and go to state 626
    variable                       shift and go to state 628
    base_variable_with_function_calls shift and go to state 73
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    namespace_name                 shift and go to state 229
    class_name                     shift and go to state 232
    variable_without_objects       shift and go to state 102
    variable_class_name            shift and go to state 233
    reference_variable             shift and go to state 234
    compound_variable              shift and go to state 106

state 492

    (37) statement -> SWITCH LPAREN expr RPAREN . switch_case_list
    (85) switch_case_list -> . LBRACE case_list RBRACE
    (86) switch_case_list -> . LBRACE SEMI case_list RBRACE
    (87) switch_case_list -> . COLON case_list ENDSWITCH SEMI
    (88) switch_case_list -> . COLON SEMI case_list ENDSWITCH SEMI

    LBRACE          shift and go to state 631
    COLON           shift and go to state 632

    switch_case_list               shift and go to state 630

state 493

    (94) global_var_list -> global_var_list COMMA global_var .

    SEMI            reduce using rule 94 (global_var_list -> global_var_list COMMA global_var .)
    COMMA           reduce using rule 94 (global_var_list -> global_var_list COMMA global_var .)


state 494

    (98) global_var -> DOLLAR LBRACE expr . RBRACE
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    RBRACE          shift and go to state 633
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 495

    (99) static_var_list -> static_var_list COMMA static_var .

    SEMI            reduce using rule 99 (static_var_list -> static_var_list COMMA static_var .)
    COMMA           reduce using rule 99 (static_var_list -> static_var_list COMMA static_var .)


state 496

    (101) static_var -> VARIABLE EQUALS static_scalar .

    SEMI            reduce using rule 101 (static_var -> VARIABLE EQUALS static_scalar .)
    COMMA           reduce using rule 101 (static_var -> VARIABLE EQUALS static_scalar .)


state 497

    (103) echo_expr_list -> echo_expr_list COMMA expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 103 (echo_expr_list -> echo_expr_list COMMA expr .)
    COMMA           reduce using rule 103 (echo_expr_list -> echo_expr_list COMMA expr .)
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 498

    (49) statement -> UNSET LPAREN unset_variables RPAREN . SEMI

    SEMI            shift and go to state 634


state 499

    (105) unset_variables -> unset_variables COMMA . unset_variable
    (107) unset_variable -> . variable
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NS_SEPARATOR    shift and go to state 230
    NAMESPACE       shift and go to state 231
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107

    unset_variable                 shift and go to state 635
    variable                       shift and go to state 359
    base_variable_with_function_calls shift and go to state 73
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    namespace_name                 shift and go to state 229
    class_name                     shift and go to state 232
    variable_without_objects       shift and go to state 102
    variable_class_name            shift and go to state 233
    reference_variable             shift and go to state 234
    compound_variable              shift and go to state 106

state 500

    (51) statement -> TRY LBRACE inner_statement_list RBRACE . additional_catches maybe_finally
    (52) additional_catches -> . additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE
    (53) additional_catches -> . empty
    (443) empty -> .

    CATCH           reduce using rule 443 (empty -> .)
    FINALLY         reduce using rule 443 (empty -> .)
    HALT_COMPILER   reduce using rule 443 (empty -> .)
    NAMESPACE       reduce using rule 443 (empty -> .)
    CONST           reduce using rule 443 (empty -> .)
    USE             reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    IF              reduce using rule 443 (empty -> .)
    WHILE           reduce using rule 443 (empty -> .)
    DO              reduce using rule 443 (empty -> .)
    FOR             reduce using rule 443 (empty -> .)
    FOREACH         reduce using rule 443 (empty -> .)
    SWITCH          reduce using rule 443 (empty -> .)
    BREAK           reduce using rule 443 (empty -> .)
    CONTINUE        reduce using rule 443 (empty -> .)
    RETURN          reduce using rule 443 (empty -> .)
    GLOBAL          reduce using rule 443 (empty -> .)
    STATIC          reduce using rule 443 (empty -> .)
    ECHO            reduce using rule 443 (empty -> .)
    INLINE_HTML     reduce using rule 443 (empty -> .)
    UNSET           reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    TRY             reduce using rule 443 (empty -> .)
    THROW           reduce using rule 443 (empty -> .)
    DECLARE         reduce using rule 443 (empty -> .)
    FUNCTION        reduce using rule 443 (empty -> .)
    INTERFACE       reduce using rule 443 (empty -> .)
    TRAIT           reduce using rule 443 (empty -> .)
    NEW             reduce using rule 443 (empty -> .)
    CLONE           reduce using rule 443 (empty -> .)
    LIST            reduce using rule 443 (empty -> .)
    ARRAY           reduce using rule 443 (empty -> .)
    LBRACKET        reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    NOT             reduce using rule 443 (empty -> .)
    BOOLEAN_NOT     reduce using rule 443 (empty -> .)
    INC             reduce using rule 443 (empty -> .)
    DEC             reduce using rule 443 (empty -> .)
    INT_CAST        reduce using rule 443 (empty -> .)
    DOUBLE_CAST     reduce using rule 443 (empty -> .)
    STRING_CAST     reduce using rule 443 (empty -> .)
    ARRAY_CAST      reduce using rule 443 (empty -> .)
    OBJECT_CAST     reduce using rule 443 (empty -> .)
    BOOL_CAST       reduce using rule 443 (empty -> .)
    UNSET_CAST      reduce using rule 443 (empty -> .)
    BINARY_CAST     reduce using rule 443 (empty -> .)
    ISSET           reduce using rule 443 (empty -> .)
    EMPTY           reduce using rule 443 (empty -> .)
    EVAL            reduce using rule 443 (empty -> .)
    INCLUDE         reduce using rule 443 (empty -> .)
    INCLUDE_ONCE    reduce using rule 443 (empty -> .)
    REQUIRE         reduce using rule 443 (empty -> .)
    REQUIRE_ONCE    reduce using rule 443 (empty -> .)
    PRINT           reduce using rule 443 (empty -> .)
    AT              reduce using rule 443 (empty -> .)
    LPAREN          reduce using rule 443 (empty -> .)
    CLASS           reduce using rule 443 (empty -> .)
    ABSTRACT        reduce using rule 443 (empty -> .)
    FINAL           reduce using rule 443 (empty -> .)
    QUOTE           reduce using rule 443 (empty -> .)
    STRING          reduce using rule 443 (empty -> .)
    STRING_VARNAME  reduce using rule 443 (empty -> .)
    NS_SEPARATOR    reduce using rule 443 (empty -> .)
    EXIT            reduce using rule 443 (empty -> .)
    DIE             reduce using rule 443 (empty -> .)
    LNUMBER         reduce using rule 443 (empty -> .)
    DNUMBER         reduce using rule 443 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 443 (empty -> .)
    LINE            reduce using rule 443 (empty -> .)
    FILE            reduce using rule 443 (empty -> .)
    DIR             reduce using rule 443 (empty -> .)
    CLASS_C         reduce using rule 443 (empty -> .)
    METHOD_C        reduce using rule 443 (empty -> .)
    FUNC_C          reduce using rule 443 (empty -> .)
    NS_C            reduce using rule 443 (empty -> .)
    START_HEREDOC   reduce using rule 443 (empty -> .)
    START_NOWDOC    reduce using rule 443 (empty -> .)
    BACKTICK        reduce using rule 443 (empty -> .)
    DOLLAR          reduce using rule 443 (empty -> .)
    VARIABLE        reduce using rule 443 (empty -> .)
    $end            reduce using rule 443 (empty -> .)
    RBRACE          reduce using rule 443 (empty -> .)
    YIELD           reduce using rule 443 (empty -> .)
    ELSEIF          reduce using rule 443 (empty -> .)
    ELSE            reduce using rule 443 (empty -> .)
    ENDIF           reduce using rule 443 (empty -> .)
    ENDWHILE        reduce using rule 443 (empty -> .)
    ENDDECLARE      reduce using rule 443 (empty -> .)
    ENDFOREACH      reduce using rule 443 (empty -> .)
    CASE            reduce using rule 443 (empty -> .)
    DEFAULT         reduce using rule 443 (empty -> .)
    ENDSWITCH       reduce using rule 443 (empty -> .)
    ENDFOR          reduce using rule 443 (empty -> .)

    additional_catches             shift and go to state 636
    empty                          shift and go to state 637

state 501

    (57) statement -> DECLARE LPAREN declare_list RPAREN . declare_statement
    (60) declare_statement -> . statement
    (61) declare_statement -> . COLON inner_statement_list ENDDECLARE SEMI
    (30) statement -> . LBRACE inner_statement_list RBRACE
    (31) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (33) statement -> . WHILE LPAREN expr RPAREN while_statement
    (34) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (35) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (36) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (37) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (38) statement -> . BREAK SEMI
    (39) statement -> . BREAK expr SEMI
    (40) statement -> . CONTINUE SEMI
    (41) statement -> . CONTINUE expr SEMI
    (42) statement -> . RETURN SEMI
    (43) statement -> . RETURN expr SEMI
    (44) statement -> . GLOBAL global_var_list SEMI
    (45) statement -> . STATIC static_var_list SEMI
    (46) statement -> . ECHO echo_expr_list SEMI
    (47) statement -> . INLINE_HTML
    (48) statement -> . expr SEMI
    (49) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (50) statement -> . SEMI
    (51) statement -> . TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
    (56) statement -> . THROW expr SEMI
    (57) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    COLON           shift and go to state 640
    LBRACE          shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    FOREACH         shift and go to state 21
    SWITCH          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    GLOBAL          shift and go to state 26
    STATIC          shift and go to state 27
    ECHO            shift and go to state 28
    INLINE_HTML     shift and go to state 29
    UNSET           shift and go to state 30
    SEMI            shift and go to state 10
    TRY             shift and go to state 31
    THROW           shift and go to state 32
    DECLARE         shift and go to state 33
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    declare_statement              shift and go to state 638
    statement                      shift and go to state 639
    expr                           shift and go to state 17
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 502

    (59) declare_list -> declare_list COMMA . STRING EQUALS static_scalar

    STRING          shift and go to state 641


state 503

    (58) declare_list -> STRING EQUALS . static_scalar
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_scalar                  shift and go to state 642
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 504

    (108) function_declaration_statement -> FUNCTION is_reference STRING LPAREN . parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (169) parameter_list -> . parameter_list COMMA parameter
    (170) parameter_list -> . parameter
    (171) parameter_list -> . empty
    (172) parameter -> . VARIABLE
    (173) parameter -> . class_name VARIABLE
    (174) parameter -> . AND VARIABLE
    (175) parameter -> . class_name AND VARIABLE
    (176) parameter -> . VARIABLE EQUALS static_scalar
    (177) parameter -> . class_name VARIABLE EQUALS static_scalar
    (178) parameter -> . AND VARIABLE EQUALS static_scalar
    (179) parameter -> . class_name AND VARIABLE EQUALS static_scalar
    (443) empty -> .
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    VARIABLE        shift and go to state 508
    AND             shift and go to state 510
    RPAREN          reduce using rule 443 (empty -> .)
    COMMA           reduce using rule 443 (empty -> .)
    NS_SEPARATOR    shift and go to state 210
    NAMESPACE       shift and go to state 211
    STATIC          shift and go to state 111
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117

    parameter_list                 shift and go to state 643
    parameter                      shift and go to state 506
    empty                          shift and go to state 507
    class_name                     shift and go to state 509
    namespace_name                 shift and go to state 209

state 505

    (271) expr -> FUNCTION is_reference LPAREN parameter_list . RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (169) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 644
    COMMA           shift and go to state 645


state 506

    (170) parameter_list -> parameter .

    RPAREN          reduce using rule 170 (parameter_list -> parameter .)
    COMMA           reduce using rule 170 (parameter_list -> parameter .)


state 507

    (171) parameter_list -> empty .

    RPAREN          reduce using rule 171 (parameter_list -> empty .)
    COMMA           reduce using rule 171 (parameter_list -> empty .)


state 508

    (172) parameter -> VARIABLE .
    (176) parameter -> VARIABLE . EQUALS static_scalar

    RPAREN          reduce using rule 172 (parameter -> VARIABLE .)
    COMMA           reduce using rule 172 (parameter -> VARIABLE .)
    EQUALS          shift and go to state 646


state 509

    (173) parameter -> class_name . VARIABLE
    (175) parameter -> class_name . AND VARIABLE
    (177) parameter -> class_name . VARIABLE EQUALS static_scalar
    (179) parameter -> class_name . AND VARIABLE EQUALS static_scalar

    VARIABLE        shift and go to state 647
    AND             shift and go to state 648


state 510

    (174) parameter -> AND . VARIABLE
    (178) parameter -> AND . VARIABLE EQUALS static_scalar

    VARIABLE        shift and go to state 649


state 511

    (353) scalar -> STRING QUOTE encaps_list QUOTE .

    SEMI            reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    OBJECT_OPERATOR reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    LBRACE          reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    BOOLEAN_AND     reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    BOOLEAN_OR      reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    LOGICAL_AND     reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    LOGICAL_OR      reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    LOGICAL_XOR     reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    AND             reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    OR              reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    XOR             reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    CONCAT          reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    PLUS            reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    MINUS           reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    MUL             reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    DIV             reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    SL              reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    SR              reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    MOD             reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    IS_IDENTICAL    reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    IS_NOT_IDENTICAL reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    IS_EQUAL        reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    IS_NOT_EQUAL    reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    IS_SMALLER      reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    IS_SMALLER_OR_EQUAL reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    IS_GREATER      reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    IS_GREATER_OR_EQUAL reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    INSTANCEOF      reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    QUESTION        reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    RPAREN          reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    COMMA           reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    DOUBLE_ARROW    reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    RBRACKET        reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    RBRACE          reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    COLON           reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)
    AS              reduce using rule 353 (scalar -> STRING QUOTE encaps_list QUOTE .)


state 512

    (109) class_declaration_statement -> class_entry_type STRING extends_from implements_list . LBRACE class_statement_list RBRACE

    LBRACE          shift and go to state 650


state 513

    (120) implements_list -> IMPLEMENTS . interface_list
    (148) interface_list -> . interface_list COMMA fully_qualified_class_name
    (149) interface_list -> . fully_qualified_class_name
    (117) fully_qualified_class_name -> . namespace_name
    (118) fully_qualified_class_name -> . NS_SEPARATOR namespace_name
    (119) fully_qualified_class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    NS_SEPARATOR    shift and go to state 517
    NAMESPACE       shift and go to state 518
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117

    interface_list                 shift and go to state 651
    fully_qualified_class_name     shift and go to state 521
    namespace_name                 shift and go to state 516

state 514

    (121) implements_list -> empty .

    LBRACE          reduce using rule 121 (implements_list -> empty .)


state 515

    (116) extends_from -> EXTENDS fully_qualified_class_name .

    IMPLEMENTS      reduce using rule 116 (extends_from -> EXTENDS fully_qualified_class_name .)
    LBRACE          reduce using rule 116 (extends_from -> EXTENDS fully_qualified_class_name .)


state 516

    (117) fully_qualified_class_name -> namespace_name .
    (428) namespace_name -> namespace_name . NS_SEPARATOR STRING

    IMPLEMENTS      reduce using rule 117 (fully_qualified_class_name -> namespace_name .)
    LBRACE          reduce using rule 117 (fully_qualified_class_name -> namespace_name .)
    COMMA           reduce using rule 117 (fully_qualified_class_name -> namespace_name .)
    SEMI            reduce using rule 117 (fully_qualified_class_name -> namespace_name .)
    VARIABLE        reduce using rule 117 (fully_qualified_class_name -> namespace_name .)
    DOUBLE_COLON    reduce using rule 117 (fully_qualified_class_name -> namespace_name .)
    NS_SEPARATOR    shift and go to state 118


state 517

    (118) fully_qualified_class_name -> NS_SEPARATOR . namespace_name
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    STRING          shift and go to state 116
    ARRAY           shift and go to state 117

    namespace_name                 shift and go to state 652

state 518

    (119) fully_qualified_class_name -> NAMESPACE . NS_SEPARATOR namespace_name

    NS_SEPARATOR    shift and go to state 653


state 519

    (110) class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE . class_statement_list RBRACE
    (135) class_statement_list -> . class_statement_list class_statement
    (136) class_statement_list -> . empty
    (443) empty -> .

    RBRACE          reduce using rule 443 (empty -> .)
    USE             reduce using rule 443 (empty -> .)
    VAR             reduce using rule 443 (empty -> .)
    CONST           reduce using rule 443 (empty -> .)
    STATIC          reduce using rule 443 (empty -> .)
    ABSTRACT        reduce using rule 443 (empty -> .)
    FINAL           reduce using rule 443 (empty -> .)
    PUBLIC          reduce using rule 443 (empty -> .)
    PROTECTED       reduce using rule 443 (empty -> .)
    PRIVATE         reduce using rule 443 (empty -> .)
    FUNCTION        reduce using rule 443 (empty -> .)

    class_statement_list           shift and go to state 654
    empty                          shift and go to state 655

state 520

    (150) interface_extends_list -> EXTENDS interface_list .
    (148) interface_list -> interface_list . COMMA fully_qualified_class_name

    LBRACE          reduce using rule 150 (interface_extends_list -> EXTENDS interface_list .)
    COMMA           shift and go to state 656


state 521

    (149) interface_list -> fully_qualified_class_name .

    COMMA           reduce using rule 149 (interface_list -> fully_qualified_class_name .)
    LBRACE          reduce using rule 149 (interface_list -> fully_qualified_class_name .)


state 522

    (111) class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list . RBRACE
    (129) trait_statement_list -> trait_statement_list . trait_statement
    (131) trait_statement -> . method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body
    (132) trait_statement -> . variable_modifiers class_variable_declaration SEMI
    (133) trait_statement -> . USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE
    (134) trait_statement -> . USE fully_qualified_class_name SEMI
    (154) method_modifiers -> . non_empty_member_modifiers
    (155) method_modifiers -> . empty
    (152) variable_modifiers -> . non_empty_member_modifiers
    (153) variable_modifiers -> . VAR
    (158) non_empty_member_modifiers -> . non_empty_member_modifiers member_modifier
    (159) non_empty_member_modifiers -> . member_modifier
    (443) empty -> .
    (163) member_modifier -> . visibility_modifier
    (164) member_modifier -> . STATIC
    (165) member_modifier -> . ABSTRACT
    (166) member_modifier -> . FINAL
    (160) visibility_modifier -> . PUBLIC
    (161) visibility_modifier -> . PROTECTED
    (162) visibility_modifier -> . PRIVATE

    RBRACE          shift and go to state 657
    USE             shift and go to state 661
    VAR             shift and go to state 664
    FUNCTION        reduce using rule 443 (empty -> .)
    STATIC          shift and go to state 667
    ABSTRACT        shift and go to state 668
    FINAL           shift and go to state 669
    PUBLIC          shift and go to state 670
    PROTECTED       shift and go to state 671
    PRIVATE         shift and go to state 672

    trait_statement                shift and go to state 658
    method_modifiers               shift and go to state 659
    variable_modifiers             shift and go to state 660
    non_empty_member_modifiers     shift and go to state 662
    empty                          shift and go to state 663
    member_modifier                shift and go to state 665
    visibility_modifier            shift and go to state 666

state 523

    (130) trait_statement_list -> empty .

    RBRACE          reduce using rule 130 (trait_statement_list -> empty .)
    USE             reduce using rule 130 (trait_statement_list -> empty .)
    VAR             reduce using rule 130 (trait_statement_list -> empty .)
    STATIC          reduce using rule 130 (trait_statement_list -> empty .)
    ABSTRACT        reduce using rule 130 (trait_statement_list -> empty .)
    FINAL           reduce using rule 130 (trait_statement_list -> empty .)
    PUBLIC          reduce using rule 130 (trait_statement_list -> empty .)
    PROTECTED       reduce using rule 130 (trait_statement_list -> empty .)
    PRIVATE         reduce using rule 130 (trait_statement_list -> empty .)
    FUNCTION        reduce using rule 130 (trait_statement_list -> empty .)


state 524

    (182) expr -> variable EQUALS AND expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 182 (expr -> variable EQUALS AND expr .)
    OBJECT_OPERATOR reduce using rule 182 (expr -> variable EQUALS AND expr .)
    LBRACE          reduce using rule 182 (expr -> variable EQUALS AND expr .)
    BOOLEAN_AND     reduce using rule 182 (expr -> variable EQUALS AND expr .)
    BOOLEAN_OR      reduce using rule 182 (expr -> variable EQUALS AND expr .)
    LOGICAL_AND     reduce using rule 182 (expr -> variable EQUALS AND expr .)
    LOGICAL_OR      reduce using rule 182 (expr -> variable EQUALS AND expr .)
    LOGICAL_XOR     reduce using rule 182 (expr -> variable EQUALS AND expr .)
    AND             reduce using rule 182 (expr -> variable EQUALS AND expr .)
    OR              reduce using rule 182 (expr -> variable EQUALS AND expr .)
    XOR             reduce using rule 182 (expr -> variable EQUALS AND expr .)
    QUESTION        reduce using rule 182 (expr -> variable EQUALS AND expr .)
    RPAREN          reduce using rule 182 (expr -> variable EQUALS AND expr .)
    COMMA           reduce using rule 182 (expr -> variable EQUALS AND expr .)
    DOUBLE_ARROW    reduce using rule 182 (expr -> variable EQUALS AND expr .)
    RBRACKET        reduce using rule 182 (expr -> variable EQUALS AND expr .)
    RBRACE          reduce using rule 182 (expr -> variable EQUALS AND expr .)
    COLON           reduce using rule 182 (expr -> variable EQUALS AND expr .)
    AS              reduce using rule 182 (expr -> variable EQUALS AND expr .)
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157

  ! CONCAT          [ reduce using rule 182 (expr -> variable EQUALS AND expr .) ]
  ! PLUS            [ reduce using rule 182 (expr -> variable EQUALS AND expr .) ]
  ! MINUS           [ reduce using rule 182 (expr -> variable EQUALS AND expr .) ]
  ! MUL             [ reduce using rule 182 (expr -> variable EQUALS AND expr .) ]
  ! DIV             [ reduce using rule 182 (expr -> variable EQUALS AND expr .) ]
  ! SL              [ reduce using rule 182 (expr -> variable EQUALS AND expr .) ]
  ! SR              [ reduce using rule 182 (expr -> variable EQUALS AND expr .) ]
  ! MOD             [ reduce using rule 182 (expr -> variable EQUALS AND expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 182 (expr -> variable EQUALS AND expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 182 (expr -> variable EQUALS AND expr .) ]
  ! IS_EQUAL        [ reduce using rule 182 (expr -> variable EQUALS AND expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 182 (expr -> variable EQUALS AND expr .) ]
  ! IS_SMALLER      [ reduce using rule 182 (expr -> variable EQUALS AND expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 182 (expr -> variable EQUALS AND expr .) ]
  ! IS_GREATER      [ reduce using rule 182 (expr -> variable EQUALS AND expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 182 (expr -> variable EQUALS AND expr .) ]
  ! INSTANCEOF      [ reduce using rule 182 (expr -> variable EQUALS AND expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! BOOLEAN_AND     [ shift and go to state 133 ]
  ! BOOLEAN_OR      [ shift and go to state 134 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! AND             [ shift and go to state 138 ]
  ! OR              [ shift and go to state 139 ]
  ! XOR             [ shift and go to state 140 ]
  ! QUESTION        [ shift and go to state 158 ]


state 525

    (234) variable -> variable LBRACKET dim_offset RBRACKET .

    EQUALS          reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    PLUS_EQUAL      reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    MINUS_EQUAL     reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    MUL_EQUAL       reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    DIV_EQUAL       reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    CONCAT_EQUAL    reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    MOD_EQUAL       reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    AND_EQUAL       reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    OR_EQUAL        reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    XOR_EQUAL       reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    SL_EQUAL        reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    SR_EQUAL        reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    INC             reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    DEC             reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    LBRACKET        reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    SEMI            reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    OBJECT_OPERATOR reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    LBRACE          reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    BOOLEAN_AND     reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    BOOLEAN_OR      reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    LOGICAL_AND     reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    LOGICAL_OR      reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    LOGICAL_XOR     reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    AND             reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    OR              reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    XOR             reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    CONCAT          reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    PLUS            reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    MINUS           reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    MUL             reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    DIV             reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    SL              reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    SR              reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    MOD             reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    IS_IDENTICAL    reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    IS_NOT_IDENTICAL reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    IS_EQUAL        reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    IS_NOT_EQUAL    reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    IS_SMALLER      reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    IS_SMALLER_OR_EQUAL reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    IS_GREATER      reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    IS_GREATER_OR_EQUAL reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    INSTANCEOF      reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    QUESTION        reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    RPAREN          reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    COMMA           reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    DOUBLE_ARROW    reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    RBRACKET        reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    RBRACE          reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    COLON           reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)
    AS              reduce using rule 234 (variable -> variable LBRACKET dim_offset RBRACKET .)


state 526

    (196) ctor_arguments -> LPAREN function_call_parameter_list . RPAREN
    (266) function_call_parameter_list -> function_call_parameter_list . COMMA function_call_parameter

    RPAREN          shift and go to state 673
    COMMA           shift and go to state 446


state 527

    (229) static_member -> class_name DOUBLE_COLON variable_without_objects .

    OBJECT_OPERATOR reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    LPAREN          reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    SEMI            reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    LBRACE          reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    BOOLEAN_AND     reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    BOOLEAN_OR      reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    LOGICAL_AND     reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    LOGICAL_OR      reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    LOGICAL_XOR     reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    AND             reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    OR              reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    XOR             reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    CONCAT          reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    PLUS            reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    MINUS           reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    MUL             reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    DIV             reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    SL              reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    SR              reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    MOD             reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_IDENTICAL    reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_NOT_IDENTICAL reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_EQUAL        reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_NOT_EQUAL    reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_SMALLER      reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_SMALLER_OR_EQUAL reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_GREATER      reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    IS_GREATER_OR_EQUAL reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    INSTANCEOF      reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    QUESTION        reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    RPAREN          reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    COMMA           reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    DOUBLE_ARROW    reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    RBRACKET        reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    RBRACE          reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    COLON           reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)
    AS              reduce using rule 229 (static_member -> class_name DOUBLE_COLON variable_without_objects .)


state 528

    (231) static_member -> class_name DOUBLE_COLON LBRACE . expr RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    class_name                     shift and go to state 86
    expr                           shift and go to state 674
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 529

    (189) class_name -> NAMESPACE NS_SEPARATOR namespace_name .
    (428) namespace_name -> namespace_name . NS_SEPARATOR STRING

    DOUBLE_COLON    reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    LPAREN          reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    SEMI            reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    OBJECT_OPERATOR reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    LBRACE          reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    BOOLEAN_AND     reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    BOOLEAN_OR      reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    LOGICAL_AND     reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    LOGICAL_OR      reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    LOGICAL_XOR     reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    AND             reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    OR              reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    XOR             reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    CONCAT          reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    PLUS            reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    MINUS           reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    MUL             reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    DIV             reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    SL              reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    SR              reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    MOD             reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_IDENTICAL    reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_NOT_IDENTICAL reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_EQUAL        reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_NOT_EQUAL    reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_SMALLER      reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_SMALLER_OR_EQUAL reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_GREATER      reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_GREATER_OR_EQUAL reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    INSTANCEOF      reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    QUESTION        reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    RPAREN          reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    COMMA           reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    DOUBLE_ARROW    reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    RBRACKET        reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    RBRACE          reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    COLON           reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    AS              reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    VARIABLE        reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    NS_SEPARATOR    shift and go to state 118


state 530

    (191) dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property . dynamic_class_name_variable_properties
    (193) dynamic_class_name_variable_properties -> . dynamic_class_name_variable_properties dynamic_class_name_variable_property
    (194) dynamic_class_name_variable_properties -> . empty
    (443) empty -> .

    OBJECT_OPERATOR reduce using rule 443 (empty -> .)
    LPAREN          reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    BOOLEAN_AND     reduce using rule 443 (empty -> .)
    BOOLEAN_OR      reduce using rule 443 (empty -> .)
    LOGICAL_AND     reduce using rule 443 (empty -> .)
    LOGICAL_OR      reduce using rule 443 (empty -> .)
    LOGICAL_XOR     reduce using rule 443 (empty -> .)
    AND             reduce using rule 443 (empty -> .)
    OR              reduce using rule 443 (empty -> .)
    XOR             reduce using rule 443 (empty -> .)
    CONCAT          reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    MUL             reduce using rule 443 (empty -> .)
    DIV             reduce using rule 443 (empty -> .)
    SL              reduce using rule 443 (empty -> .)
    SR              reduce using rule 443 (empty -> .)
    MOD             reduce using rule 443 (empty -> .)
    IS_IDENTICAL    reduce using rule 443 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 443 (empty -> .)
    IS_EQUAL        reduce using rule 443 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 443 (empty -> .)
    IS_SMALLER      reduce using rule 443 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 443 (empty -> .)
    IS_GREATER      reduce using rule 443 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 443 (empty -> .)
    INSTANCEOF      reduce using rule 443 (empty -> .)
    QUESTION        reduce using rule 443 (empty -> .)
    RPAREN          reduce using rule 443 (empty -> .)
    COMMA           reduce using rule 443 (empty -> .)
    DOUBLE_ARROW    reduce using rule 443 (empty -> .)
    RBRACKET        reduce using rule 443 (empty -> .)
    RBRACE          reduce using rule 443 (empty -> .)
    COLON           reduce using rule 443 (empty -> .)
    AS              reduce using rule 443 (empty -> .)

    dynamic_class_name_variable_properties shift and go to state 675
    empty                          shift and go to state 676

state 531

    (230) static_member -> variable_class_name DOUBLE_COLON variable_without_objects .

    OBJECT_OPERATOR reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    LPAREN          reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    SEMI            reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    LBRACE          reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    BOOLEAN_AND     reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    BOOLEAN_OR      reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    LOGICAL_AND     reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    LOGICAL_OR      reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    LOGICAL_XOR     reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    AND             reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    OR              reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    XOR             reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    CONCAT          reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    PLUS            reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    MINUS           reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    MUL             reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    DIV             reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    SL              reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    SR              reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    MOD             reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_IDENTICAL    reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_NOT_IDENTICAL reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_EQUAL        reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_NOT_EQUAL    reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_SMALLER      reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_SMALLER_OR_EQUAL reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_GREATER      reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    IS_GREATER_OR_EQUAL reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    INSTANCEOF      reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    QUESTION        reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    RPAREN          reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    COMMA           reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    DOUBLE_ARROW    reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    RBRACKET        reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    RBRACE          reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    COLON           reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)
    AS              reduce using rule 230 (static_member -> variable_class_name DOUBLE_COLON variable_without_objects .)


state 532

    (232) static_member -> variable_class_name DOUBLE_COLON LBRACE . expr RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    variable_class_name            shift and go to state 87
    expr                           shift and go to state 677
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 533

    (204) assignment_list_element -> LIST LPAREN . assignment_list RPAREN
    (200) assignment_list -> . assignment_list COMMA assignment_list_element
    (201) assignment_list -> . assignment_list_element
    (202) assignment_list_element -> . variable
    (203) assignment_list_element -> . empty
    (204) assignment_list_element -> . LIST LPAREN assignment_list RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (443) empty -> .
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LIST            shift and go to state 396
    RPAREN          reduce using rule 443 (empty -> .)
    COMMA           reduce using rule 443 (empty -> .)
    NS_SEPARATOR    shift and go to state 230
    NAMESPACE       shift and go to state 231
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107

    assignment_list                shift and go to state 678
    assignment_list_element        shift and go to state 398
    variable                       shift and go to state 399
    empty                          shift and go to state 400
    base_variable_with_function_calls shift and go to state 73
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    namespace_name                 shift and go to state 229
    class_name                     shift and go to state 232
    variable_without_objects       shift and go to state 102
    variable_class_name            shift and go to state 233
    reference_variable             shift and go to state 234
    compound_variable              shift and go to state 106

state 534

    (199) expr -> LIST LPAREN assignment_list RPAREN . EQUALS expr

    EQUALS          shift and go to state 679


state 535

    (200) assignment_list -> assignment_list COMMA . assignment_list_element
    (202) assignment_list_element -> . variable
    (203) assignment_list_element -> . empty
    (204) assignment_list_element -> . LIST LPAREN assignment_list RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (443) empty -> .
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LIST            shift and go to state 396
    RPAREN          reduce using rule 443 (empty -> .)
    COMMA           reduce using rule 443 (empty -> .)
    NS_SEPARATOR    shift and go to state 230
    NAMESPACE       shift and go to state 231
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107

    assignment_list_element        shift and go to state 680
    variable                       shift and go to state 399
    empty                          shift and go to state 400
    base_variable_with_function_calls shift and go to state 73
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    namespace_name                 shift and go to state 229
    class_name                     shift and go to state 232
    variable_without_objects       shift and go to state 102
    variable_class_name            shift and go to state 233
    reference_variable             shift and go to state 234
    compound_variable              shift and go to state 106

state 536

    (252) expr -> ARRAY LPAREN array_pair_list RPAREN .

    SEMI            reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    OBJECT_OPERATOR reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    LBRACE          reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    BOOLEAN_AND     reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    BOOLEAN_OR      reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    LOGICAL_AND     reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    LOGICAL_OR      reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    LOGICAL_XOR     reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    AND             reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    OR              reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    XOR             reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    CONCAT          reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    PLUS            reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    MINUS           reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    MUL             reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    DIV             reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    SL              reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    SR              reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    MOD             reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    IS_IDENTICAL    reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    IS_EQUAL        reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    IS_NOT_EQUAL    reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    IS_SMALLER      reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    IS_GREATER      reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    INSTANCEOF      reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    QUESTION        reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    RPAREN          reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    COMMA           reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    DOUBLE_ARROW    reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    RBRACKET        reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    RBRACE          reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    COLON           reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)
    AS              reduce using rule 252 (expr -> ARRAY LPAREN array_pair_list RPAREN .)


state 537

    (256) non_empty_array_pair_list -> non_empty_array_pair_list COMMA AND . variable
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NS_SEPARATOR    shift and go to state 230
    NAMESPACE       shift and go to state 231
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107

    variable                       shift and go to state 681
    base_variable_with_function_calls shift and go to state 73
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    namespace_name                 shift and go to state 229
    class_name                     shift and go to state 232
    variable_without_objects       shift and go to state 102
    variable_class_name            shift and go to state 233
    reference_variable             shift and go to state 234
    compound_variable              shift and go to state 106

state 538

    (257) non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr .
    (260) non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr . DOUBLE_ARROW AND variable
    (261) non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr . DOUBLE_ARROW expr
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    COMMA           reduce using rule 257 (non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr .)
    RBRACKET        reduce using rule 257 (non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr .)
    RPAREN          reduce using rule 257 (non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr .)
    DOUBLE_ARROW    shift and go to state 682
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 539

    (263) non_empty_array_pair_list -> expr DOUBLE_ARROW expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    COMMA           reduce using rule 263 (non_empty_array_pair_list -> expr DOUBLE_ARROW expr .)
    RBRACKET        reduce using rule 263 (non_empty_array_pair_list -> expr DOUBLE_ARROW expr .)
    RPAREN          reduce using rule 263 (non_empty_array_pair_list -> expr DOUBLE_ARROW expr .)
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 540

    (262) non_empty_array_pair_list -> expr DOUBLE_ARROW AND . variable
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NS_SEPARATOR    shift and go to state 230
    NAMESPACE       shift and go to state 231
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107

    variable                       shift and go to state 683
    base_variable_with_function_calls shift and go to state 73
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    namespace_name                 shift and go to state 229
    class_name                     shift and go to state 232
    variable_without_objects       shift and go to state 102
    variable_class_name            shift and go to state 233
    reference_variable             shift and go to state 234
    compound_variable              shift and go to state 106

state 541

    (211) function_call -> NAMESPACE NS_SEPARATOR namespace_name . LPAREN function_call_parameter_list RPAREN
    (189) class_name -> NAMESPACE NS_SEPARATOR namespace_name .
    (428) namespace_name -> namespace_name . NS_SEPARATOR STRING

    LPAREN          shift and go to state 444
    DOUBLE_COLON    reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    NS_SEPARATOR    shift and go to state 118


state 542

    (212) function_call -> class_name DOUBLE_COLON STRING . LPAREN function_call_parameter_list RPAREN

    LPAREN          shift and go to state 556


state 543

    (214) function_call -> variable_class_name DOUBLE_COLON STRING . LPAREN function_call_parameter_list RPAREN

    LPAREN          shift and go to state 559


state 544

    (333) expr -> ISSET LPAREN isset_variables RPAREN .

    SEMI            reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    OBJECT_OPERATOR reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    LBRACE          reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    BOOLEAN_AND     reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    BOOLEAN_OR      reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    LOGICAL_AND     reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    LOGICAL_OR      reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    LOGICAL_XOR     reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    AND             reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    OR              reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    XOR             reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    CONCAT          reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    PLUS            reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    MINUS           reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    MUL             reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    DIV             reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    SL              reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    SR              reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    MOD             reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    IS_IDENTICAL    reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    IS_EQUAL        reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    IS_NOT_EQUAL    reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    IS_SMALLER      reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    IS_GREATER      reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    INSTANCEOF      reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    QUESTION        reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    RPAREN          reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    COMMA           reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    DOUBLE_ARROW    reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    RBRACKET        reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    RBRACE          reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    COLON           reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)
    AS              reduce using rule 333 (expr -> ISSET LPAREN isset_variables RPAREN .)


state 545

    (334) isset_variables -> isset_variables COMMA . variable
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NS_SEPARATOR    shift and go to state 230
    NAMESPACE       shift and go to state 231
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107

    variable                       shift and go to state 684
    base_variable_with_function_calls shift and go to state 73
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    namespace_name                 shift and go to state 229
    class_name                     shift and go to state 232
    variable_without_objects       shift and go to state 102
    variable_class_name            shift and go to state 233
    reference_variable             shift and go to state 234
    compound_variable              shift and go to state 106

state 546

    (336) expr -> EMPTY LPAREN expr RPAREN .

    SEMI            reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    OBJECT_OPERATOR reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    LBRACE          reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    BOOLEAN_AND     reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    BOOLEAN_OR      reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    LOGICAL_AND     reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    LOGICAL_OR      reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    LOGICAL_XOR     reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    AND             reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    OR              reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    XOR             reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    CONCAT          reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    PLUS            reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    MINUS           reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    MUL             reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    DIV             reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    SL              reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    SR              reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    MOD             reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    IS_IDENTICAL    reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    IS_EQUAL        reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    IS_NOT_EQUAL    reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    IS_SMALLER      reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    IS_GREATER      reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    INSTANCEOF      reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    QUESTION        reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    RPAREN          reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    COMMA           reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    DOUBLE_ARROW    reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    RBRACE          reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    COLON           reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)
    AS              reduce using rule 336 (expr -> EMPTY LPAREN expr RPAREN .)


state 547

    (337) expr -> EVAL LPAREN expr RPAREN .

    SEMI            reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    OBJECT_OPERATOR reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    LBRACE          reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    BOOLEAN_AND     reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    BOOLEAN_OR      reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    LOGICAL_AND     reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    LOGICAL_OR      reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    LOGICAL_XOR     reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    AND             reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    OR              reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    XOR             reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    CONCAT          reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    PLUS            reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    MINUS           reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    MUL             reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    DIV             reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    SL              reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    SR              reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    MOD             reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    IS_IDENTICAL    reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    IS_EQUAL        reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    IS_NOT_EQUAL    reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    IS_SMALLER      reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    IS_GREATER      reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    INSTANCEOF      reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    QUESTION        reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    RPAREN          reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    COMMA           reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    DOUBLE_ARROW    reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    RBRACE          reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    COLON           reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)
    AS              reduce using rule 337 (expr -> EVAL LPAREN expr RPAREN .)


state 548

    (346) expr -> exit_or_die LPAREN expr RPAREN .

    SEMI            reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    OBJECT_OPERATOR reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    LBRACE          reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    BOOLEAN_AND     reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    BOOLEAN_OR      reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    LOGICAL_AND     reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    LOGICAL_OR      reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    LOGICAL_XOR     reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    AND             reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    OR              reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    XOR             reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    CONCAT          reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    PLUS            reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    MINUS           reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    MUL             reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    DIV             reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    SL              reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    SR              reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    MOD             reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    IS_IDENTICAL    reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    IS_EQUAL        reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    IS_NOT_EQUAL    reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    IS_SMALLER      reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    IS_GREATER      reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    INSTANCEOF      reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    QUESTION        reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    RPAREN          reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    COMMA           reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    DOUBLE_ARROW    reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    RBRACE          reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    COLON           reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)
    AS              reduce using rule 346 (expr -> exit_or_die LPAREN expr RPAREN .)


state 549

    (205) variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not . variable_properties
    (222) variable_properties -> . variable_properties variable_property
    (223) variable_properties -> . empty
    (443) empty -> .

    OBJECT_OPERATOR reduce using rule 443 (empty -> .)
    EQUALS          reduce using rule 443 (empty -> .)
    PLUS_EQUAL      reduce using rule 443 (empty -> .)
    MINUS_EQUAL     reduce using rule 443 (empty -> .)
    MUL_EQUAL       reduce using rule 443 (empty -> .)
    DIV_EQUAL       reduce using rule 443 (empty -> .)
    CONCAT_EQUAL    reduce using rule 443 (empty -> .)
    MOD_EQUAL       reduce using rule 443 (empty -> .)
    AND_EQUAL       reduce using rule 443 (empty -> .)
    OR_EQUAL        reduce using rule 443 (empty -> .)
    XOR_EQUAL       reduce using rule 443 (empty -> .)
    SL_EQUAL        reduce using rule 443 (empty -> .)
    SR_EQUAL        reduce using rule 443 (empty -> .)
    INC             reduce using rule 443 (empty -> .)
    DEC             reduce using rule 443 (empty -> .)
    LBRACKET        reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    BOOLEAN_AND     reduce using rule 443 (empty -> .)
    BOOLEAN_OR      reduce using rule 443 (empty -> .)
    LOGICAL_AND     reduce using rule 443 (empty -> .)
    LOGICAL_OR      reduce using rule 443 (empty -> .)
    LOGICAL_XOR     reduce using rule 443 (empty -> .)
    AND             reduce using rule 443 (empty -> .)
    OR              reduce using rule 443 (empty -> .)
    XOR             reduce using rule 443 (empty -> .)
    CONCAT          reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    MUL             reduce using rule 443 (empty -> .)
    DIV             reduce using rule 443 (empty -> .)
    SL              reduce using rule 443 (empty -> .)
    SR              reduce using rule 443 (empty -> .)
    MOD             reduce using rule 443 (empty -> .)
    IS_IDENTICAL    reduce using rule 443 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 443 (empty -> .)
    IS_EQUAL        reduce using rule 443 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 443 (empty -> .)
    IS_SMALLER      reduce using rule 443 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 443 (empty -> .)
    IS_GREATER      reduce using rule 443 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 443 (empty -> .)
    INSTANCEOF      reduce using rule 443 (empty -> .)
    QUESTION        reduce using rule 443 (empty -> .)
    RPAREN          reduce using rule 443 (empty -> .)
    COMMA           reduce using rule 443 (empty -> .)
    DOUBLE_ARROW    reduce using rule 443 (empty -> .)
    RBRACKET        reduce using rule 443 (empty -> .)
    RBRACE          reduce using rule 443 (empty -> .)
    COLON           reduce using rule 443 (empty -> .)
    AS              reduce using rule 443 (empty -> .)

    variable_properties            shift and go to state 685
    empty                          shift and go to state 686

state 550

    (435) encaps_var -> VARIABLE LBRACKET . encaps_var_offset RBRACKET
    (440) encaps_var_offset -> . STRING
    (441) encaps_var_offset -> . NUM_STRING
    (442) encaps_var_offset -> . VARIABLE

    STRING          shift and go to state 689
    NUM_STRING      shift and go to state 690
    VARIABLE        shift and go to state 687

    encaps_var_offset              shift and go to state 688

state 551

    (436) encaps_var -> VARIABLE OBJECT_OPERATOR . STRING

    STRING          shift and go to state 691


state 552

    (437) encaps_var -> DOLLAR_OPEN_CURLY_BRACES expr . RBRACE
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    RBRACE          shift and go to state 692
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 553

    (438) encaps_var -> DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME . LBRACKET expr RBRACKET RBRACE
    (361) scalar -> STRING_VARNAME .

    LBRACKET        shift and go to state 693
    RBRACE          reduce using rule 361 (scalar -> STRING_VARNAME .)
    OBJECT_OPERATOR reduce using rule 361 (scalar -> STRING_VARNAME .)
    LBRACE          reduce using rule 361 (scalar -> STRING_VARNAME .)
    BOOLEAN_AND     reduce using rule 361 (scalar -> STRING_VARNAME .)
    BOOLEAN_OR      reduce using rule 361 (scalar -> STRING_VARNAME .)
    LOGICAL_AND     reduce using rule 361 (scalar -> STRING_VARNAME .)
    LOGICAL_OR      reduce using rule 361 (scalar -> STRING_VARNAME .)
    LOGICAL_XOR     reduce using rule 361 (scalar -> STRING_VARNAME .)
    AND             reduce using rule 361 (scalar -> STRING_VARNAME .)
    OR              reduce using rule 361 (scalar -> STRING_VARNAME .)
    XOR             reduce using rule 361 (scalar -> STRING_VARNAME .)
    CONCAT          reduce using rule 361 (scalar -> STRING_VARNAME .)
    PLUS            reduce using rule 361 (scalar -> STRING_VARNAME .)
    MINUS           reduce using rule 361 (scalar -> STRING_VARNAME .)
    MUL             reduce using rule 361 (scalar -> STRING_VARNAME .)
    DIV             reduce using rule 361 (scalar -> STRING_VARNAME .)
    SL              reduce using rule 361 (scalar -> STRING_VARNAME .)
    SR              reduce using rule 361 (scalar -> STRING_VARNAME .)
    MOD             reduce using rule 361 (scalar -> STRING_VARNAME .)
    IS_IDENTICAL    reduce using rule 361 (scalar -> STRING_VARNAME .)
    IS_NOT_IDENTICAL reduce using rule 361 (scalar -> STRING_VARNAME .)
    IS_EQUAL        reduce using rule 361 (scalar -> STRING_VARNAME .)
    IS_NOT_EQUAL    reduce using rule 361 (scalar -> STRING_VARNAME .)
    IS_SMALLER      reduce using rule 361 (scalar -> STRING_VARNAME .)
    IS_SMALLER_OR_EQUAL reduce using rule 361 (scalar -> STRING_VARNAME .)
    IS_GREATER      reduce using rule 361 (scalar -> STRING_VARNAME .)
    IS_GREATER_OR_EQUAL reduce using rule 361 (scalar -> STRING_VARNAME .)
    INSTANCEOF      reduce using rule 361 (scalar -> STRING_VARNAME .)
    QUESTION        reduce using rule 361 (scalar -> STRING_VARNAME .)


state 554

    (439) encaps_var -> CURLY_OPEN variable . RBRACE
    (234) variable -> variable . LBRACKET dim_offset RBRACKET

    RBRACE          shift and go to state 694
    LBRACKET        shift and go to state 205


state 555

    (210) function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list . RPAREN
    (266) function_call_parameter_list -> function_call_parameter_list . COMMA function_call_parameter

    RPAREN          shift and go to state 695
    COMMA           shift and go to state 446


state 556

    (212) function_call -> class_name DOUBLE_COLON STRING LPAREN . function_call_parameter_list RPAREN
    (266) function_call_parameter_list -> . function_call_parameter_list COMMA function_call_parameter
    (267) function_call_parameter_list -> . function_call_parameter
    (268) function_call_parameter_list -> . empty
    (269) function_call_parameter -> . expr
    (270) function_call_parameter -> . AND variable
    (443) empty -> .
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 284
    RPAREN          reduce using rule 443 (empty -> .)
    COMMA           reduce using rule 443 (empty -> .)
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    class_name                     shift and go to state 86
    function_call_parameter_list   shift and go to state 696
    function_call_parameter        shift and go to state 281
    empty                          shift and go to state 282
    expr                           shift and go to state 283
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 557

    (213) function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN . function_call_parameter_list RPAREN
    (266) function_call_parameter_list -> . function_call_parameter_list COMMA function_call_parameter
    (267) function_call_parameter_list -> . function_call_parameter
    (268) function_call_parameter_list -> . empty
    (269) function_call_parameter -> . expr
    (270) function_call_parameter -> . AND variable
    (443) empty -> .
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 284
    RPAREN          reduce using rule 443 (empty -> .)
    COMMA           reduce using rule 443 (empty -> .)
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    class_name                     shift and go to state 86
    variable_without_objects       shift and go to state 102
    function_call_parameter_list   shift and go to state 697
    function_call_parameter        shift and go to state 281
    empty                          shift and go to state 282
    expr                           shift and go to state 283
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 558

    (216) function_call -> class_name DOUBLE_COLON LBRACE expr . RBRACE LPAREN function_call_parameter_list RPAREN
    (231) static_member -> class_name DOUBLE_COLON LBRACE expr . RBRACE
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    RBRACE          shift and go to state 698
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 559

    (214) function_call -> variable_class_name DOUBLE_COLON STRING LPAREN . function_call_parameter_list RPAREN
    (266) function_call_parameter_list -> . function_call_parameter_list COMMA function_call_parameter
    (267) function_call_parameter_list -> . function_call_parameter
    (268) function_call_parameter_list -> . empty
    (269) function_call_parameter -> . expr
    (270) function_call_parameter -> . AND variable
    (443) empty -> .
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 284
    RPAREN          reduce using rule 443 (empty -> .)
    COMMA           reduce using rule 443 (empty -> .)
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    variable_class_name            shift and go to state 87
    function_call_parameter_list   shift and go to state 699
    function_call_parameter        shift and go to state 281
    empty                          shift and go to state 282
    expr                           shift and go to state 283
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 560

    (215) function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN . function_call_parameter_list RPAREN
    (266) function_call_parameter_list -> . function_call_parameter_list COMMA function_call_parameter
    (267) function_call_parameter_list -> . function_call_parameter
    (268) function_call_parameter_list -> . empty
    (269) function_call_parameter -> . expr
    (270) function_call_parameter -> . AND variable
    (443) empty -> .
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 284
    RPAREN          reduce using rule 443 (empty -> .)
    COMMA           reduce using rule 443 (empty -> .)
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    variable_class_name            shift and go to state 87
    variable_without_objects       shift and go to state 102
    function_call_parameter_list   shift and go to state 700
    function_call_parameter        shift and go to state 281
    empty                          shift and go to state 282
    expr                           shift and go to state 283
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 561

    (217) function_call -> variable_class_name DOUBLE_COLON LBRACE expr . RBRACE LPAREN function_call_parameter_list RPAREN
    (232) static_member -> variable_class_name DOUBLE_COLON LBRACE expr . RBRACE
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    RBRACE          shift and go to state 701
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 562

    (218) function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .

    OBJECT_OPERATOR reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    PLUS_EQUAL      reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MINUS_EQUAL     reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MUL_EQUAL       reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    DIV_EQUAL       reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    CONCAT_EQUAL    reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MOD_EQUAL       reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    AND_EQUAL       reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    OR_EQUAL        reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    XOR_EQUAL       reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SL_EQUAL        reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SR_EQUAL        reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    INC             reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    DEC             reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    LBRACKET        reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SEMI            reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    LBRACE          reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_AND     reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_OR      reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_AND     reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_OR      reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_XOR     reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    XOR             reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    CONCAT          reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MUL             reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    DIV             reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SL              reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SR              reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MOD             reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_IDENTICAL    reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_EQUAL        reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_EQUAL    reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER      reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER      reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    INSTANCEOF      reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    QUESTION        reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    COMMA           reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    DOUBLE_ARROW    reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    RBRACE          reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 218 (function_call -> variable_without_objects LPAREN function_call_parameter_list RPAREN .)


state 563

    (235) reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .

    LBRACKET        reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    LBRACE          reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    DOUBLE_COLON    reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    OBJECT_OPERATOR reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    EQUALS          reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    PLUS_EQUAL      reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    MINUS_EQUAL     reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    MUL_EQUAL       reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    DIV_EQUAL       reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    CONCAT_EQUAL    reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    MOD_EQUAL       reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    AND_EQUAL       reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    OR_EQUAL        reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    XOR_EQUAL       reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    SL_EQUAL        reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    SR_EQUAL        reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    INC             reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    DEC             reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    SEMI            reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    BOOLEAN_AND     reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    BOOLEAN_OR      reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    LOGICAL_AND     reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    LOGICAL_OR      reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    LOGICAL_XOR     reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    AND             reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    OR              reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    XOR             reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    CONCAT          reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    PLUS            reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    MINUS           reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    MUL             reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    DIV             reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    SL              reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    SR              reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    MOD             reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    IS_IDENTICAL    reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    IS_NOT_IDENTICAL reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    IS_EQUAL        reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    IS_NOT_EQUAL    reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    IS_SMALLER      reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    IS_SMALLER_OR_EQUAL reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    IS_GREATER      reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    IS_GREATER_OR_EQUAL reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    INSTANCEOF      reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    QUESTION        reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    LPAREN          reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    RPAREN          reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    COMMA           reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    DOUBLE_ARROW    reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    RBRACKET        reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    RBRACE          reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    COLON           reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)
    AS              reduce using rule 235 (reference_variable -> reference_variable LBRACKET dim_offset RBRACKET .)


state 564

    (236) reference_variable -> reference_variable LBRACE expr RBRACE .

    LBRACKET        reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    LBRACE          reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    DOUBLE_COLON    reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    OBJECT_OPERATOR reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    EQUALS          reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    PLUS_EQUAL      reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    MINUS_EQUAL     reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    MUL_EQUAL       reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    DIV_EQUAL       reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    CONCAT_EQUAL    reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    MOD_EQUAL       reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    AND_EQUAL       reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    OR_EQUAL        reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    XOR_EQUAL       reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    SL_EQUAL        reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    SR_EQUAL        reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    INC             reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    DEC             reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    SEMI            reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    BOOLEAN_AND     reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    BOOLEAN_OR      reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    LOGICAL_AND     reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    LOGICAL_OR      reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    LOGICAL_XOR     reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    AND             reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    OR              reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    XOR             reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    CONCAT          reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    PLUS            reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    MINUS           reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    MUL             reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    DIV             reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    SL              reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    SR              reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    MOD             reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    IS_IDENTICAL    reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    IS_EQUAL        reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    IS_NOT_EQUAL    reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    IS_SMALLER      reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    IS_GREATER      reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    INSTANCEOF      reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    QUESTION        reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    LPAREN          reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    RPAREN          reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    COMMA           reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    DOUBLE_ARROW    reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    RBRACKET        reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    RBRACE          reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    COLON           reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)
    AS              reduce using rule 236 (reference_variable -> reference_variable LBRACE expr RBRACE .)


state 565

    (240) compound_variable -> DOLLAR LBRACE expr RBRACE .

    LBRACKET        reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    LBRACE          reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    DOUBLE_COLON    reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    OBJECT_OPERATOR reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    EQUALS          reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    PLUS_EQUAL      reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    MINUS_EQUAL     reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    MUL_EQUAL       reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    DIV_EQUAL       reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    CONCAT_EQUAL    reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    MOD_EQUAL       reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    AND_EQUAL       reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    OR_EQUAL        reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    XOR_EQUAL       reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    SL_EQUAL        reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    SR_EQUAL        reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    INC             reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    DEC             reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    SEMI            reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    BOOLEAN_AND     reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    BOOLEAN_OR      reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    LOGICAL_AND     reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    LOGICAL_OR      reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    LOGICAL_XOR     reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    AND             reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    OR              reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    XOR             reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    CONCAT          reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    PLUS            reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    MINUS           reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    MUL             reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    DIV             reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    SL              reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    SR              reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    MOD             reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    IS_IDENTICAL    reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    IS_EQUAL        reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    IS_NOT_EQUAL    reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    IS_SMALLER      reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    IS_GREATER      reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    INSTANCEOF      reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    QUESTION        reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    LPAREN          reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    RPAREN          reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    COMMA           reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    DOUBLE_ARROW    reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    RBRACKET        reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    RBRACE          reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    COLON           reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)
    AS              reduce using rule 240 (compound_variable -> DOLLAR LBRACE expr RBRACE .)


state 566

    (10) top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .

    HALT_COMPILER   reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    NAMESPACE       reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    CONST           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    USE             reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    LBRACE          reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    IF              reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    WHILE           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    DO              reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    FOR             reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    FOREACH         reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    SWITCH          reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    BREAK           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    CONTINUE        reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    RETURN          reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    GLOBAL          reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    STATIC          reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    ECHO            reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    INLINE_HTML     reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    UNSET           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    SEMI            reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    TRY             reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    THROW           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    DECLARE         reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    FUNCTION        reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    INTERFACE       reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    TRAIT           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    NEW             reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    CLONE           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    LIST            reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    ARRAY           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    LBRACKET        reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    PLUS            reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    MINUS           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    NOT             reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    BOOLEAN_NOT     reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    INC             reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    DEC             reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    INT_CAST        reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    DOUBLE_CAST     reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    STRING_CAST     reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    ARRAY_CAST      reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    OBJECT_CAST     reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    BOOL_CAST       reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    UNSET_CAST      reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    BINARY_CAST     reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    ISSET           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    EMPTY           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    EVAL            reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    INCLUDE         reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    INCLUDE_ONCE    reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    REQUIRE         reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    REQUIRE_ONCE    reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    PRINT           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    AT              reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    LPAREN          reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    CLASS           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    ABSTRACT        reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    FINAL           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    QUOTE           reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    STRING          reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    STRING_VARNAME  reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    NS_SEPARATOR    reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    EXIT            reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    DIE             reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    LNUMBER         reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    DNUMBER         reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    LINE            reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    FILE            reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    DIR             reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    CLASS_C         reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    METHOD_C        reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    FUNC_C          reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    NS_C            reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    START_HEREDOC   reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    START_NOWDOC    reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    BACKTICK        reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    DOLLAR          reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    VARIABLE        reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    $end            reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)
    RBRACE          reduce using rule 10 (top_statement -> NAMESPACE namespace_name LBRACE top_statement_list RBRACE .)


state 567

    (211) function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list . RPAREN
    (266) function_call_parameter_list -> function_call_parameter_list . COMMA function_call_parameter

    RPAREN          shift and go to state 702
    COMMA           shift and go to state 446


state 568

    (266) function_call_parameter_list -> function_call_parameter_list COMMA function_call_parameter .

    RPAREN          reduce using rule 266 (function_call_parameter_list -> function_call_parameter_list COMMA function_call_parameter .)
    COMMA           reduce using rule 266 (function_call_parameter_list -> function_call_parameter_list COMMA function_call_parameter .)


state 569

    (27) inner_statement -> HALT_COMPILER LPAREN RPAREN . SEMI

    SEMI            shift and go to state 703


state 570

    (29) inner_statement -> YIELD expr SEMI .

    RBRACE          reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    HALT_COMPILER   reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    YIELD           reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    LBRACE          reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    IF              reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    WHILE           reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    DO              reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    FOR             reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    FOREACH         reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    SWITCH          reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    BREAK           reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    CONTINUE        reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    RETURN          reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    GLOBAL          reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    STATIC          reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    ECHO            reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    INLINE_HTML     reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    UNSET           reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    SEMI            reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    TRY             reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    THROW           reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    DECLARE         reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    FUNCTION        reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    INTERFACE       reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    TRAIT           reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    NEW             reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    CLONE           reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    LIST            reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    ARRAY           reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    LBRACKET        reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    PLUS            reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    MINUS           reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    NOT             reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    BOOLEAN_NOT     reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    INC             reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    DEC             reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    INT_CAST        reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    DOUBLE_CAST     reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    STRING_CAST     reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    ARRAY_CAST      reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    OBJECT_CAST     reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    BOOL_CAST       reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    UNSET_CAST      reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    BINARY_CAST     reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    ISSET           reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    EMPTY           reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    EVAL            reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    INCLUDE         reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    INCLUDE_ONCE    reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    REQUIRE         reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    REQUIRE_ONCE    reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    PRINT           reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    AT              reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    LPAREN          reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    CLASS           reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    ABSTRACT        reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    FINAL           reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    QUOTE           reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    STRING          reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    STRING_VARNAME  reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    NS_SEPARATOR    reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    NAMESPACE       reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    EXIT            reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    DIE             reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    LNUMBER         reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    DNUMBER         reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    LINE            reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    FILE            reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    DIR             reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    CLASS_C         reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    METHOD_C        reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    FUNC_C          reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    NS_C            reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    START_HEREDOC   reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    START_NOWDOC    reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    BACKTICK        reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    DOLLAR          reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    VARIABLE        reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    ELSEIF          reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    ELSE            reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    ENDIF           reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    ENDWHILE        reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    ENDDECLARE      reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    ENDFOREACH      reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    CASE            reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    DEFAULT         reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    ENDSWITCH       reduce using rule 29 (inner_statement -> YIELD expr SEMI .)
    ENDFOR          reduce using rule 29 (inner_statement -> YIELD expr SEMI .)


state 571

    (403) static_expr -> static_expr BOOLEAN_AND . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 704
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 572

    (404) static_expr -> static_expr BOOLEAN_OR . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 705
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 573

    (405) static_expr -> static_expr LOGICAL_AND . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 706
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 574

    (406) static_expr -> static_expr LOGICAL_OR . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 707
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 575

    (407) static_expr -> static_expr LOGICAL_XOR . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 708
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 576

    (408) static_expr -> static_expr AND . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 709
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 577

    (409) static_expr -> static_expr OR . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 710
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 578

    (410) static_expr -> static_expr XOR . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 711
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 579

    (411) static_expr -> static_expr CONCAT . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 712
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 580

    (412) static_expr -> static_expr PLUS . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 713
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 581

    (413) static_expr -> static_expr MINUS . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 714
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 582

    (414) static_expr -> static_expr MUL . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 715
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 583

    (415) static_expr -> static_expr DIV . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 716
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 584

    (416) static_expr -> static_expr SL . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 717
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 585

    (417) static_expr -> static_expr SR . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 718
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 586

    (418) static_expr -> static_expr MOD . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 719
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 587

    (419) static_expr -> static_expr IS_IDENTICAL . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 720
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 588

    (420) static_expr -> static_expr IS_NOT_IDENTICAL . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 721
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 589

    (421) static_expr -> static_expr IS_EQUAL . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 722
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 590

    (422) static_expr -> static_expr IS_NOT_EQUAL . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 723
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 591

    (423) static_expr -> static_expr IS_SMALLER . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 724
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 592

    (424) static_expr -> static_expr IS_SMALLER_OR_EQUAL . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 725
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 593

    (425) static_expr -> static_expr IS_GREATER . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 726
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 594

    (426) static_expr -> static_expr IS_GREATER_OR_EQUAL . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 727
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 595

    (392) static_scalar -> PLUS static_scalar .

    BOOLEAN_AND     reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    BOOLEAN_OR      reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    LOGICAL_AND     reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    LOGICAL_OR      reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    LOGICAL_XOR     reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    AND             reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    OR              reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    XOR             reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    CONCAT          reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    PLUS            reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    MINUS           reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    MUL             reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    DIV             reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    SL              reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    SR              reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    MOD             reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    IS_IDENTICAL    reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    IS_NOT_IDENTICAL reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    IS_EQUAL        reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    IS_NOT_EQUAL    reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    IS_SMALLER      reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    IS_SMALLER_OR_EQUAL reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    IS_GREATER      reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    IS_GREATER_OR_EQUAL reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    SEMI            reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    COMMA           reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    RPAREN          reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    DOUBLE_ARROW    reduce using rule 392 (static_scalar -> PLUS static_scalar .)
    RBRACKET        reduce using rule 392 (static_scalar -> PLUS static_scalar .)


state 596

    (393) static_scalar -> MINUS static_scalar .

    BOOLEAN_AND     reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    BOOLEAN_OR      reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    LOGICAL_AND     reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    LOGICAL_OR      reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    LOGICAL_XOR     reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    AND             reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    OR              reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    XOR             reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    CONCAT          reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    PLUS            reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    MINUS           reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    MUL             reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    DIV             reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    SL              reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    SR              reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    MOD             reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    IS_IDENTICAL    reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    IS_NOT_IDENTICAL reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    IS_EQUAL        reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    IS_NOT_EQUAL    reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    IS_SMALLER      reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    IS_SMALLER_OR_EQUAL reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    IS_GREATER      reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    IS_GREATER_OR_EQUAL reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    SEMI            reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    COMMA           reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    RPAREN          reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    DOUBLE_ARROW    reduce using rule 393 (static_scalar -> MINUS static_scalar .)
    RBRACKET        reduce using rule 393 (static_scalar -> MINUS static_scalar .)


state 597

    (427) static_expr -> LPAREN static_expr . RPAREN
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    RPAREN          shift and go to state 728
    BOOLEAN_AND     shift and go to state 571
    BOOLEAN_OR      shift and go to state 572
    LOGICAL_AND     shift and go to state 573
    LOGICAL_OR      shift and go to state 574
    LOGICAL_XOR     shift and go to state 575
    AND             shift and go to state 576
    OR              shift and go to state 577
    XOR             shift and go to state 578
    CONCAT          shift and go to state 579
    PLUS            shift and go to state 580
    MINUS           shift and go to state 581
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    SL              shift and go to state 584
    SR              shift and go to state 585
    MOD             shift and go to state 586
    IS_IDENTICAL    shift and go to state 587
    IS_NOT_IDENTICAL shift and go to state 588
    IS_EQUAL        shift and go to state 589
    IS_NOT_EQUAL    shift and go to state 590
    IS_SMALLER      shift and go to state 591
    IS_SMALLER_OR_EQUAL shift and go to state 592
    IS_GREATER      shift and go to state 593
    IS_GREATER_OR_EQUAL shift and go to state 594


state 598

    (380) static_scalar -> QUOTE QUOTE .

    BOOLEAN_AND     reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    BOOLEAN_OR      reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    LOGICAL_AND     reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    LOGICAL_OR      reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    LOGICAL_XOR     reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    AND             reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    OR              reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    XOR             reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    CONCAT          reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    PLUS            reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    MINUS           reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    MUL             reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    DIV             reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    SL              reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    SR              reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    MOD             reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    IS_IDENTICAL    reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    IS_NOT_IDENTICAL reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    IS_EQUAL        reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    IS_NOT_EQUAL    reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    IS_SMALLER      reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    IS_SMALLER_OR_EQUAL reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    IS_GREATER      reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    IS_GREATER_OR_EQUAL reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    SEMI            reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    COMMA           reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    RPAREN          reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    DOUBLE_ARROW    reduce using rule 380 (static_scalar -> QUOTE QUOTE .)
    RBRACKET        reduce using rule 380 (static_scalar -> QUOTE QUOTE .)


state 599

    (381) static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE . QUOTE

    QUOTE           shift and go to state 729


state 600

    (390) static_scalar -> NS_SEPARATOR namespace_name .
    (188) class_name -> NS_SEPARATOR namespace_name .
    (428) namespace_name -> namespace_name . NS_SEPARATOR STRING

    BOOLEAN_AND     reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    BOOLEAN_OR      reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    LOGICAL_AND     reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    LOGICAL_OR      reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    LOGICAL_XOR     reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    AND             reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    OR              reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    XOR             reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    CONCAT          reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    PLUS            reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    MINUS           reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    MUL             reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    DIV             reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    SL              reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    SR              reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    MOD             reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    IS_IDENTICAL    reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    IS_NOT_IDENTICAL reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    IS_EQUAL        reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    IS_NOT_EQUAL    reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    IS_SMALLER      reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    IS_SMALLER_OR_EQUAL reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    IS_GREATER      reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    IS_GREATER_OR_EQUAL reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    SEMI            reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    COMMA           reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    RPAREN          reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    DOUBLE_ARROW    reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    RBRACKET        reduce using rule 390 (static_scalar -> NS_SEPARATOR namespace_name .)
    DOUBLE_COLON    reduce using rule 188 (class_name -> NS_SEPARATOR namespace_name .)
    NS_SEPARATOR    shift and go to state 118


state 601

    (391) static_scalar -> NAMESPACE NS_SEPARATOR . namespace_name
    (189) class_name -> NAMESPACE NS_SEPARATOR . namespace_name
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    STRING          shift and go to state 116
    ARRAY           shift and go to state 117

    namespace_name                 shift and go to state 730

state 602

    (394) static_scalar -> ARRAY LPAREN . static_array_pair_list RPAREN
    (396) static_array_pair_list -> . empty
    (397) static_array_pair_list -> . static_non_empty_array_pair_list possible_comma
    (443) empty -> .
    (398) static_non_empty_array_pair_list -> . static_non_empty_array_pair_list COMMA static_expr
    (399) static_non_empty_array_pair_list -> . static_expr
    (400) static_non_empty_array_pair_list -> . static_non_empty_array_pair_list COMMA static_scalar DOUBLE_ARROW static_expr
    (401) static_non_empty_array_pair_list -> . static_scalar DOUBLE_ARROW static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RPAREN          reduce using rule 443 (empty -> .)
    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_array_pair_list         shift and go to state 731
    empty                          shift and go to state 604
    static_non_empty_array_pair_list shift and go to state 605
    static_expr                    shift and go to state 606
    static_scalar                  shift and go to state 607
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 603

    (395) static_scalar -> LBRACKET static_array_pair_list . RBRACKET

    RBRACKET        shift and go to state 732


state 604

    (396) static_array_pair_list -> empty .

    RBRACKET        reduce using rule 396 (static_array_pair_list -> empty .)
    RPAREN          reduce using rule 396 (static_array_pair_list -> empty .)


state 605

    (397) static_array_pair_list -> static_non_empty_array_pair_list . possible_comma
    (398) static_non_empty_array_pair_list -> static_non_empty_array_pair_list . COMMA static_expr
    (400) static_non_empty_array_pair_list -> static_non_empty_array_pair_list . COMMA static_scalar DOUBLE_ARROW static_expr
    (264) possible_comma -> . empty
    (265) possible_comma -> . COMMA
    (443) empty -> .

    COMMA           shift and go to state 734
    RBRACKET        reduce using rule 443 (empty -> .)
    RPAREN          reduce using rule 443 (empty -> .)

    possible_comma                 shift and go to state 733
    empty                          shift and go to state 405

state 606

    (399) static_non_empty_array_pair_list -> static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    COMMA           reduce using rule 399 (static_non_empty_array_pair_list -> static_expr .)
    RBRACKET        reduce using rule 399 (static_non_empty_array_pair_list -> static_expr .)
    RPAREN          reduce using rule 399 (static_non_empty_array_pair_list -> static_expr .)
    BOOLEAN_AND     shift and go to state 571
    BOOLEAN_OR      shift and go to state 572
    LOGICAL_AND     shift and go to state 573
    LOGICAL_OR      shift and go to state 574
    LOGICAL_XOR     shift and go to state 575
    AND             shift and go to state 576
    OR              shift and go to state 577
    XOR             shift and go to state 578
    CONCAT          shift and go to state 579
    PLUS            shift and go to state 580
    MINUS           shift and go to state 581
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    SL              shift and go to state 584
    SR              shift and go to state 585
    MOD             shift and go to state 586
    IS_IDENTICAL    shift and go to state 587
    IS_NOT_IDENTICAL shift and go to state 588
    IS_EQUAL        shift and go to state 589
    IS_NOT_EQUAL    shift and go to state 590
    IS_SMALLER      shift and go to state 591
    IS_SMALLER_OR_EQUAL shift and go to state 592
    IS_GREATER      shift and go to state 593
    IS_GREATER_OR_EQUAL shift and go to state 594


state 607

    (401) static_non_empty_array_pair_list -> static_scalar . DOUBLE_ARROW static_expr
    (402) static_expr -> static_scalar .

    DOUBLE_ARROW    shift and go to state 735
    BOOLEAN_AND     reduce using rule 402 (static_expr -> static_scalar .)
    BOOLEAN_OR      reduce using rule 402 (static_expr -> static_scalar .)
    LOGICAL_AND     reduce using rule 402 (static_expr -> static_scalar .)
    LOGICAL_OR      reduce using rule 402 (static_expr -> static_scalar .)
    LOGICAL_XOR     reduce using rule 402 (static_expr -> static_scalar .)
    AND             reduce using rule 402 (static_expr -> static_scalar .)
    OR              reduce using rule 402 (static_expr -> static_scalar .)
    XOR             reduce using rule 402 (static_expr -> static_scalar .)
    CONCAT          reduce using rule 402 (static_expr -> static_scalar .)
    PLUS            reduce using rule 402 (static_expr -> static_scalar .)
    MINUS           reduce using rule 402 (static_expr -> static_scalar .)
    MUL             reduce using rule 402 (static_expr -> static_scalar .)
    DIV             reduce using rule 402 (static_expr -> static_scalar .)
    SL              reduce using rule 402 (static_expr -> static_scalar .)
    SR              reduce using rule 402 (static_expr -> static_scalar .)
    MOD             reduce using rule 402 (static_expr -> static_scalar .)
    IS_IDENTICAL    reduce using rule 402 (static_expr -> static_scalar .)
    IS_NOT_IDENTICAL reduce using rule 402 (static_expr -> static_scalar .)
    IS_EQUAL        reduce using rule 402 (static_expr -> static_scalar .)
    IS_NOT_EQUAL    reduce using rule 402 (static_expr -> static_scalar .)
    IS_SMALLER      reduce using rule 402 (static_expr -> static_scalar .)
    IS_SMALLER_OR_EQUAL reduce using rule 402 (static_expr -> static_scalar .)
    IS_GREATER      reduce using rule 402 (static_expr -> static_scalar .)
    IS_GREATER_OR_EQUAL reduce using rule 402 (static_expr -> static_scalar .)
    COMMA           reduce using rule 402 (static_expr -> static_scalar .)
    RBRACKET        reduce using rule 402 (static_expr -> static_scalar .)
    RPAREN          reduce using rule 402 (static_expr -> static_scalar .)


state 608

    (365) class_constant -> class_name DOUBLE_COLON . STRING
    (385) class_name_constant -> class_name DOUBLE_COLON . CLASS

    STRING          shift and go to state 736
    CLASS           shift and go to state 427


state 609

    (366) class_constant -> variable_class_name DOUBLE_COLON . STRING

    STRING          shift and go to state 737


state 610

    (386) static_heredoc -> START_HEREDOC multiple_encapsed . END_HEREDOC
    (387) multiple_encapsed -> multiple_encapsed . ENCAPSED_AND_WHITESPACE

    END_HEREDOC     shift and go to state 738
    ENCAPSED_AND_WHITESPACE shift and go to state 739


state 611

    (388) multiple_encapsed -> empty .

    END_HEREDOC     reduce using rule 388 (multiple_encapsed -> empty .)
    ENCAPSED_AND_WHITESPACE reduce using rule 388 (multiple_encapsed -> empty .)


state 612

    (18) use_declaration -> NS_SEPARATOR namespace_name AS STRING .

    SEMI            reduce using rule 18 (use_declaration -> NS_SEPARATOR namespace_name AS STRING .)
    COMMA           reduce using rule 18 (use_declaration -> NS_SEPARATOR namespace_name AS STRING .)


state 613

    (31) statement -> IF LPAREN expr RPAREN statement . elseif_list else_single
    (62) elseif_list -> . empty
    (63) elseif_list -> . elseif_list ELSEIF LPAREN expr RPAREN statement
    (443) empty -> .

    ELSEIF          reduce using rule 443 (empty -> .)
    ELSE            reduce using rule 443 (empty -> .)
    HALT_COMPILER   reduce using rule 443 (empty -> .)
    NAMESPACE       reduce using rule 443 (empty -> .)
    CONST           reduce using rule 443 (empty -> .)
    USE             reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    IF              reduce using rule 443 (empty -> .)
    WHILE           reduce using rule 443 (empty -> .)
    DO              reduce using rule 443 (empty -> .)
    FOR             reduce using rule 443 (empty -> .)
    FOREACH         reduce using rule 443 (empty -> .)
    SWITCH          reduce using rule 443 (empty -> .)
    BREAK           reduce using rule 443 (empty -> .)
    CONTINUE        reduce using rule 443 (empty -> .)
    RETURN          reduce using rule 443 (empty -> .)
    GLOBAL          reduce using rule 443 (empty -> .)
    STATIC          reduce using rule 443 (empty -> .)
    ECHO            reduce using rule 443 (empty -> .)
    INLINE_HTML     reduce using rule 443 (empty -> .)
    UNSET           reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    TRY             reduce using rule 443 (empty -> .)
    THROW           reduce using rule 443 (empty -> .)
    DECLARE         reduce using rule 443 (empty -> .)
    FUNCTION        reduce using rule 443 (empty -> .)
    INTERFACE       reduce using rule 443 (empty -> .)
    TRAIT           reduce using rule 443 (empty -> .)
    NEW             reduce using rule 443 (empty -> .)
    CLONE           reduce using rule 443 (empty -> .)
    LIST            reduce using rule 443 (empty -> .)
    ARRAY           reduce using rule 443 (empty -> .)
    LBRACKET        reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    NOT             reduce using rule 443 (empty -> .)
    BOOLEAN_NOT     reduce using rule 443 (empty -> .)
    INC             reduce using rule 443 (empty -> .)
    DEC             reduce using rule 443 (empty -> .)
    INT_CAST        reduce using rule 443 (empty -> .)
    DOUBLE_CAST     reduce using rule 443 (empty -> .)
    STRING_CAST     reduce using rule 443 (empty -> .)
    ARRAY_CAST      reduce using rule 443 (empty -> .)
    OBJECT_CAST     reduce using rule 443 (empty -> .)
    BOOL_CAST       reduce using rule 443 (empty -> .)
    UNSET_CAST      reduce using rule 443 (empty -> .)
    BINARY_CAST     reduce using rule 443 (empty -> .)
    ISSET           reduce using rule 443 (empty -> .)
    EMPTY           reduce using rule 443 (empty -> .)
    EVAL            reduce using rule 443 (empty -> .)
    INCLUDE         reduce using rule 443 (empty -> .)
    INCLUDE_ONCE    reduce using rule 443 (empty -> .)
    REQUIRE         reduce using rule 443 (empty -> .)
    REQUIRE_ONCE    reduce using rule 443 (empty -> .)
    PRINT           reduce using rule 443 (empty -> .)
    AT              reduce using rule 443 (empty -> .)
    LPAREN          reduce using rule 443 (empty -> .)
    CLASS           reduce using rule 443 (empty -> .)
    ABSTRACT        reduce using rule 443 (empty -> .)
    FINAL           reduce using rule 443 (empty -> .)
    QUOTE           reduce using rule 443 (empty -> .)
    STRING          reduce using rule 443 (empty -> .)
    STRING_VARNAME  reduce using rule 443 (empty -> .)
    NS_SEPARATOR    reduce using rule 443 (empty -> .)
    EXIT            reduce using rule 443 (empty -> .)
    DIE             reduce using rule 443 (empty -> .)
    LNUMBER         reduce using rule 443 (empty -> .)
    DNUMBER         reduce using rule 443 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 443 (empty -> .)
    LINE            reduce using rule 443 (empty -> .)
    FILE            reduce using rule 443 (empty -> .)
    DIR             reduce using rule 443 (empty -> .)
    CLASS_C         reduce using rule 443 (empty -> .)
    METHOD_C        reduce using rule 443 (empty -> .)
    FUNC_C          reduce using rule 443 (empty -> .)
    NS_C            reduce using rule 443 (empty -> .)
    START_HEREDOC   reduce using rule 443 (empty -> .)
    START_NOWDOC    reduce using rule 443 (empty -> .)
    BACKTICK        reduce using rule 443 (empty -> .)
    DOLLAR          reduce using rule 443 (empty -> .)
    VARIABLE        reduce using rule 443 (empty -> .)
    $end            reduce using rule 443 (empty -> .)
    RBRACE          reduce using rule 443 (empty -> .)
    YIELD           reduce using rule 443 (empty -> .)
    ENDIF           reduce using rule 443 (empty -> .)
    ENDWHILE        reduce using rule 443 (empty -> .)
    ENDDECLARE      reduce using rule 443 (empty -> .)
    ENDFOREACH      reduce using rule 443 (empty -> .)
    CASE            reduce using rule 443 (empty -> .)
    DEFAULT         reduce using rule 443 (empty -> .)
    ENDSWITCH       reduce using rule 443 (empty -> .)
    ENDFOR          reduce using rule 443 (empty -> .)

    elseif_list                    shift and go to state 740
    empty                          shift and go to state 741

state 614

    (32) statement -> IF LPAREN expr RPAREN COLON . inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (443) empty -> .

    HALT_COMPILER   reduce using rule 443 (empty -> .)
    YIELD           reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    IF              reduce using rule 443 (empty -> .)
    WHILE           reduce using rule 443 (empty -> .)
    DO              reduce using rule 443 (empty -> .)
    FOR             reduce using rule 443 (empty -> .)
    FOREACH         reduce using rule 443 (empty -> .)
    SWITCH          reduce using rule 443 (empty -> .)
    BREAK           reduce using rule 443 (empty -> .)
    CONTINUE        reduce using rule 443 (empty -> .)
    RETURN          reduce using rule 443 (empty -> .)
    GLOBAL          reduce using rule 443 (empty -> .)
    STATIC          reduce using rule 443 (empty -> .)
    ECHO            reduce using rule 443 (empty -> .)
    INLINE_HTML     reduce using rule 443 (empty -> .)
    UNSET           reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    TRY             reduce using rule 443 (empty -> .)
    THROW           reduce using rule 443 (empty -> .)
    DECLARE         reduce using rule 443 (empty -> .)
    FUNCTION        reduce using rule 443 (empty -> .)
    INTERFACE       reduce using rule 443 (empty -> .)
    TRAIT           reduce using rule 443 (empty -> .)
    NEW             reduce using rule 443 (empty -> .)
    CLONE           reduce using rule 443 (empty -> .)
    LIST            reduce using rule 443 (empty -> .)
    ARRAY           reduce using rule 443 (empty -> .)
    LBRACKET        reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    NOT             reduce using rule 443 (empty -> .)
    BOOLEAN_NOT     reduce using rule 443 (empty -> .)
    INC             reduce using rule 443 (empty -> .)
    DEC             reduce using rule 443 (empty -> .)
    INT_CAST        reduce using rule 443 (empty -> .)
    DOUBLE_CAST     reduce using rule 443 (empty -> .)
    STRING_CAST     reduce using rule 443 (empty -> .)
    ARRAY_CAST      reduce using rule 443 (empty -> .)
    OBJECT_CAST     reduce using rule 443 (empty -> .)
    BOOL_CAST       reduce using rule 443 (empty -> .)
    UNSET_CAST      reduce using rule 443 (empty -> .)
    BINARY_CAST     reduce using rule 443 (empty -> .)
    ISSET           reduce using rule 443 (empty -> .)
    EMPTY           reduce using rule 443 (empty -> .)
    EVAL            reduce using rule 443 (empty -> .)
    INCLUDE         reduce using rule 443 (empty -> .)
    INCLUDE_ONCE    reduce using rule 443 (empty -> .)
    REQUIRE         reduce using rule 443 (empty -> .)
    REQUIRE_ONCE    reduce using rule 443 (empty -> .)
    PRINT           reduce using rule 443 (empty -> .)
    AT              reduce using rule 443 (empty -> .)
    LPAREN          reduce using rule 443 (empty -> .)
    CLASS           reduce using rule 443 (empty -> .)
    ABSTRACT        reduce using rule 443 (empty -> .)
    FINAL           reduce using rule 443 (empty -> .)
    QUOTE           reduce using rule 443 (empty -> .)
    STRING          reduce using rule 443 (empty -> .)
    STRING_VARNAME  reduce using rule 443 (empty -> .)
    NS_SEPARATOR    reduce using rule 443 (empty -> .)
    NAMESPACE       reduce using rule 443 (empty -> .)
    EXIT            reduce using rule 443 (empty -> .)
    DIE             reduce using rule 443 (empty -> .)
    LNUMBER         reduce using rule 443 (empty -> .)
    DNUMBER         reduce using rule 443 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 443 (empty -> .)
    LINE            reduce using rule 443 (empty -> .)
    FILE            reduce using rule 443 (empty -> .)
    DIR             reduce using rule 443 (empty -> .)
    CLASS_C         reduce using rule 443 (empty -> .)
    METHOD_C        reduce using rule 443 (empty -> .)
    FUNC_C          reduce using rule 443 (empty -> .)
    NS_C            reduce using rule 443 (empty -> .)
    START_HEREDOC   reduce using rule 443 (empty -> .)
    START_NOWDOC    reduce using rule 443 (empty -> .)
    BACKTICK        reduce using rule 443 (empty -> .)
    DOLLAR          reduce using rule 443 (empty -> .)
    VARIABLE        reduce using rule 443 (empty -> .)
    ELSEIF          reduce using rule 443 (empty -> .)
    ELSE            reduce using rule 443 (empty -> .)
    ENDIF           reduce using rule 443 (empty -> .)

    inner_statement_list           shift and go to state 742
    empty                          shift and go to state 121

state 615

    (220) method_or_not -> LPAREN function_call_parameter_list . RPAREN
    (266) function_call_parameter_list -> function_call_parameter_list . COMMA function_call_parameter

    RPAREN          shift and go to state 743
    COMMA           shift and go to state 446


state 616

    (246) object_dim_list -> object_dim_list LBRACKET . dim_offset RBRACKET
    (241) dim_offset -> . expr
    (242) dim_offset -> . empty
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (443) empty -> .
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    RBRACKET        reduce using rule 443 (empty -> .)
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    dim_offset                     shift and go to state 744
    expr                           shift and go to state 306
    empty                          shift and go to state 308
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 617

    (247) object_dim_list -> object_dim_list LBRACE . expr RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 745
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 618

    (249) variable_name -> LBRACE expr RBRACE .

    LBRACKET        reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    LBRACE          reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    LPAREN          reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    SEMI            reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    OBJECT_OPERATOR reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    BOOLEAN_AND     reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    BOOLEAN_OR      reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    LOGICAL_AND     reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    LOGICAL_OR      reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    LOGICAL_XOR     reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    AND             reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    OR              reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    XOR             reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    CONCAT          reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    PLUS            reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    MINUS           reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    MUL             reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    DIV             reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    SL              reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    SR              reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    MOD             reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    IS_IDENTICAL    reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    IS_EQUAL        reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    IS_NOT_EQUAL    reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    IS_SMALLER      reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    IS_GREATER      reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    INSTANCEOF      reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    QUESTION        reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    RPAREN          reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    COMMA           reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    DOUBLE_ARROW    reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    RBRACKET        reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    RBRACE          reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    COLON           reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    AS              reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    EQUALS          reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    PLUS_EQUAL      reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    MINUS_EQUAL     reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    MUL_EQUAL       reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    DIV_EQUAL       reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    CONCAT_EQUAL    reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    MOD_EQUAL       reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    AND_EQUAL       reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    OR_EQUAL        reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    XOR_EQUAL       reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    SL_EQUAL        reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    SR_EQUAL        reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    INC             reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)
    DEC             reduce using rule 249 (variable_name -> LBRACE expr RBRACE .)


state 619

    (319) expr -> expr QUESTION expr COLON expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 319 (expr -> expr QUESTION expr COLON expr .)
    OBJECT_OPERATOR reduce using rule 319 (expr -> expr QUESTION expr COLON expr .)
    LBRACE          reduce using rule 319 (expr -> expr QUESTION expr COLON expr .)
    LOGICAL_AND     reduce using rule 319 (expr -> expr QUESTION expr COLON expr .)
    LOGICAL_OR      reduce using rule 319 (expr -> expr QUESTION expr COLON expr .)
    LOGICAL_XOR     reduce using rule 319 (expr -> expr QUESTION expr COLON expr .)
    QUESTION        reduce using rule 319 (expr -> expr QUESTION expr COLON expr .)
    RPAREN          reduce using rule 319 (expr -> expr QUESTION expr COLON expr .)
    COMMA           reduce using rule 319 (expr -> expr QUESTION expr COLON expr .)
    DOUBLE_ARROW    reduce using rule 319 (expr -> expr QUESTION expr COLON expr .)
    RBRACKET        reduce using rule 319 (expr -> expr QUESTION expr COLON expr .)
    RBRACE          reduce using rule 319 (expr -> expr QUESTION expr COLON expr .)
    COLON           reduce using rule 319 (expr -> expr QUESTION expr COLON expr .)
    AS              reduce using rule 319 (expr -> expr QUESTION expr COLON expr .)
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157

  ! BOOLEAN_AND     [ reduce using rule 319 (expr -> expr QUESTION expr COLON expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 319 (expr -> expr QUESTION expr COLON expr .) ]
  ! AND             [ reduce using rule 319 (expr -> expr QUESTION expr COLON expr .) ]
  ! OR              [ reduce using rule 319 (expr -> expr QUESTION expr COLON expr .) ]
  ! XOR             [ reduce using rule 319 (expr -> expr QUESTION expr COLON expr .) ]
  ! CONCAT          [ reduce using rule 319 (expr -> expr QUESTION expr COLON expr .) ]
  ! PLUS            [ reduce using rule 319 (expr -> expr QUESTION expr COLON expr .) ]
  ! MINUS           [ reduce using rule 319 (expr -> expr QUESTION expr COLON expr .) ]
  ! MUL             [ reduce using rule 319 (expr -> expr QUESTION expr COLON expr .) ]
  ! DIV             [ reduce using rule 319 (expr -> expr QUESTION expr COLON expr .) ]
  ! SL              [ reduce using rule 319 (expr -> expr QUESTION expr COLON expr .) ]
  ! SR              [ reduce using rule 319 (expr -> expr QUESTION expr COLON expr .) ]
  ! MOD             [ reduce using rule 319 (expr -> expr QUESTION expr COLON expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 319 (expr -> expr QUESTION expr COLON expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 319 (expr -> expr QUESTION expr COLON expr .) ]
  ! IS_EQUAL        [ reduce using rule 319 (expr -> expr QUESTION expr COLON expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 319 (expr -> expr QUESTION expr COLON expr .) ]
  ! IS_SMALLER      [ reduce using rule 319 (expr -> expr QUESTION expr COLON expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 319 (expr -> expr QUESTION expr COLON expr .) ]
  ! IS_GREATER      [ reduce using rule 319 (expr -> expr QUESTION expr COLON expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 319 (expr -> expr QUESTION expr COLON expr .) ]
  ! INSTANCEOF      [ reduce using rule 319 (expr -> expr QUESTION expr COLON expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]
  ! QUESTION        [ shift and go to state 158 ]


state 620

    (33) statement -> WHILE LPAREN expr RPAREN while_statement .

    HALT_COMPILER   reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    NAMESPACE       reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    CONST           reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    USE             reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    LBRACE          reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    IF              reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    WHILE           reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    DO              reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    FOR             reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    FOREACH         reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    SWITCH          reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    BREAK           reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    CONTINUE        reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    RETURN          reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    GLOBAL          reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    STATIC          reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    ECHO            reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    INLINE_HTML     reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    UNSET           reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    SEMI            reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    TRY             reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    THROW           reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    DECLARE         reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    FUNCTION        reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    INTERFACE       reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    TRAIT           reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    NEW             reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    CLONE           reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    LIST            reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    ARRAY           reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    LBRACKET        reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    PLUS            reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    MINUS           reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    NOT             reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    BOOLEAN_NOT     reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    INC             reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    DEC             reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    INT_CAST        reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    DOUBLE_CAST     reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    STRING_CAST     reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    ARRAY_CAST      reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    OBJECT_CAST     reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    BOOL_CAST       reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    UNSET_CAST      reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    BINARY_CAST     reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    ISSET           reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    EMPTY           reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    EVAL            reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    INCLUDE         reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    INCLUDE_ONCE    reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    REQUIRE         reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    REQUIRE_ONCE    reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    PRINT           reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    AT              reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    LPAREN          reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    CLASS           reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    ABSTRACT        reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    FINAL           reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    QUOTE           reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    STRING          reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    STRING_VARNAME  reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    NS_SEPARATOR    reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    EXIT            reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    DIE             reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    LNUMBER         reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    DNUMBER         reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    LINE            reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    FILE            reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    DIR             reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    CLASS_C         reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    METHOD_C        reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    FUNC_C          reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    NS_C            reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    START_HEREDOC   reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    START_NOWDOC    reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    BACKTICK        reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    DOLLAR          reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    VARIABLE        reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    $end            reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    RBRACE          reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    YIELD           reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    ELSEIF          reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    ELSE            reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    ENDIF           reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    ENDWHILE        reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    ENDDECLARE      reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    ENDFOREACH      reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    CASE            reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    DEFAULT         reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    ENDSWITCH       reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)
    ENDFOR          reduce using rule 33 (statement -> WHILE LPAREN expr RPAREN while_statement .)


state 621

    (70) while_statement -> statement .

    ELSEIF          reduce using rule 70 (while_statement -> statement .)
    ELSE            reduce using rule 70 (while_statement -> statement .)
    HALT_COMPILER   reduce using rule 70 (while_statement -> statement .)
    NAMESPACE       reduce using rule 70 (while_statement -> statement .)
    CONST           reduce using rule 70 (while_statement -> statement .)
    USE             reduce using rule 70 (while_statement -> statement .)
    LBRACE          reduce using rule 70 (while_statement -> statement .)
    IF              reduce using rule 70 (while_statement -> statement .)
    WHILE           reduce using rule 70 (while_statement -> statement .)
    DO              reduce using rule 70 (while_statement -> statement .)
    FOR             reduce using rule 70 (while_statement -> statement .)
    FOREACH         reduce using rule 70 (while_statement -> statement .)
    SWITCH          reduce using rule 70 (while_statement -> statement .)
    BREAK           reduce using rule 70 (while_statement -> statement .)
    CONTINUE        reduce using rule 70 (while_statement -> statement .)
    RETURN          reduce using rule 70 (while_statement -> statement .)
    GLOBAL          reduce using rule 70 (while_statement -> statement .)
    STATIC          reduce using rule 70 (while_statement -> statement .)
    ECHO            reduce using rule 70 (while_statement -> statement .)
    INLINE_HTML     reduce using rule 70 (while_statement -> statement .)
    UNSET           reduce using rule 70 (while_statement -> statement .)
    SEMI            reduce using rule 70 (while_statement -> statement .)
    TRY             reduce using rule 70 (while_statement -> statement .)
    THROW           reduce using rule 70 (while_statement -> statement .)
    DECLARE         reduce using rule 70 (while_statement -> statement .)
    FUNCTION        reduce using rule 70 (while_statement -> statement .)
    INTERFACE       reduce using rule 70 (while_statement -> statement .)
    TRAIT           reduce using rule 70 (while_statement -> statement .)
    NEW             reduce using rule 70 (while_statement -> statement .)
    CLONE           reduce using rule 70 (while_statement -> statement .)
    LIST            reduce using rule 70 (while_statement -> statement .)
    ARRAY           reduce using rule 70 (while_statement -> statement .)
    LBRACKET        reduce using rule 70 (while_statement -> statement .)
    PLUS            reduce using rule 70 (while_statement -> statement .)
    MINUS           reduce using rule 70 (while_statement -> statement .)
    NOT             reduce using rule 70 (while_statement -> statement .)
    BOOLEAN_NOT     reduce using rule 70 (while_statement -> statement .)
    INC             reduce using rule 70 (while_statement -> statement .)
    DEC             reduce using rule 70 (while_statement -> statement .)
    INT_CAST        reduce using rule 70 (while_statement -> statement .)
    DOUBLE_CAST     reduce using rule 70 (while_statement -> statement .)
    STRING_CAST     reduce using rule 70 (while_statement -> statement .)
    ARRAY_CAST      reduce using rule 70 (while_statement -> statement .)
    OBJECT_CAST     reduce using rule 70 (while_statement -> statement .)
    BOOL_CAST       reduce using rule 70 (while_statement -> statement .)
    UNSET_CAST      reduce using rule 70 (while_statement -> statement .)
    BINARY_CAST     reduce using rule 70 (while_statement -> statement .)
    ISSET           reduce using rule 70 (while_statement -> statement .)
    EMPTY           reduce using rule 70 (while_statement -> statement .)
    EVAL            reduce using rule 70 (while_statement -> statement .)
    INCLUDE         reduce using rule 70 (while_statement -> statement .)
    INCLUDE_ONCE    reduce using rule 70 (while_statement -> statement .)
    REQUIRE         reduce using rule 70 (while_statement -> statement .)
    REQUIRE_ONCE    reduce using rule 70 (while_statement -> statement .)
    PRINT           reduce using rule 70 (while_statement -> statement .)
    AT              reduce using rule 70 (while_statement -> statement .)
    LPAREN          reduce using rule 70 (while_statement -> statement .)
    CLASS           reduce using rule 70 (while_statement -> statement .)
    ABSTRACT        reduce using rule 70 (while_statement -> statement .)
    FINAL           reduce using rule 70 (while_statement -> statement .)
    QUOTE           reduce using rule 70 (while_statement -> statement .)
    STRING          reduce using rule 70 (while_statement -> statement .)
    STRING_VARNAME  reduce using rule 70 (while_statement -> statement .)
    NS_SEPARATOR    reduce using rule 70 (while_statement -> statement .)
    EXIT            reduce using rule 70 (while_statement -> statement .)
    DIE             reduce using rule 70 (while_statement -> statement .)
    LNUMBER         reduce using rule 70 (while_statement -> statement .)
    DNUMBER         reduce using rule 70 (while_statement -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 70 (while_statement -> statement .)
    LINE            reduce using rule 70 (while_statement -> statement .)
    FILE            reduce using rule 70 (while_statement -> statement .)
    DIR             reduce using rule 70 (while_statement -> statement .)
    CLASS_C         reduce using rule 70 (while_statement -> statement .)
    METHOD_C        reduce using rule 70 (while_statement -> statement .)
    FUNC_C          reduce using rule 70 (while_statement -> statement .)
    NS_C            reduce using rule 70 (while_statement -> statement .)
    START_HEREDOC   reduce using rule 70 (while_statement -> statement .)
    START_NOWDOC    reduce using rule 70 (while_statement -> statement .)
    BACKTICK        reduce using rule 70 (while_statement -> statement .)
    DOLLAR          reduce using rule 70 (while_statement -> statement .)
    VARIABLE        reduce using rule 70 (while_statement -> statement .)
    $end            reduce using rule 70 (while_statement -> statement .)
    RBRACE          reduce using rule 70 (while_statement -> statement .)
    YIELD           reduce using rule 70 (while_statement -> statement .)
    ENDIF           reduce using rule 70 (while_statement -> statement .)
    ENDWHILE        reduce using rule 70 (while_statement -> statement .)
    ENDDECLARE      reduce using rule 70 (while_statement -> statement .)
    ENDFOREACH      reduce using rule 70 (while_statement -> statement .)
    CASE            reduce using rule 70 (while_statement -> statement .)
    DEFAULT         reduce using rule 70 (while_statement -> statement .)
    ENDSWITCH       reduce using rule 70 (while_statement -> statement .)
    ENDFOR          reduce using rule 70 (while_statement -> statement .)


state 622

    (71) while_statement -> COLON . inner_statement_list ENDWHILE SEMI
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (443) empty -> .

    ENDWHILE        reduce using rule 443 (empty -> .)
    HALT_COMPILER   reduce using rule 443 (empty -> .)
    YIELD           reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    IF              reduce using rule 443 (empty -> .)
    WHILE           reduce using rule 443 (empty -> .)
    DO              reduce using rule 443 (empty -> .)
    FOR             reduce using rule 443 (empty -> .)
    FOREACH         reduce using rule 443 (empty -> .)
    SWITCH          reduce using rule 443 (empty -> .)
    BREAK           reduce using rule 443 (empty -> .)
    CONTINUE        reduce using rule 443 (empty -> .)
    RETURN          reduce using rule 443 (empty -> .)
    GLOBAL          reduce using rule 443 (empty -> .)
    STATIC          reduce using rule 443 (empty -> .)
    ECHO            reduce using rule 443 (empty -> .)
    INLINE_HTML     reduce using rule 443 (empty -> .)
    UNSET           reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    TRY             reduce using rule 443 (empty -> .)
    THROW           reduce using rule 443 (empty -> .)
    DECLARE         reduce using rule 443 (empty -> .)
    FUNCTION        reduce using rule 443 (empty -> .)
    INTERFACE       reduce using rule 443 (empty -> .)
    TRAIT           reduce using rule 443 (empty -> .)
    NEW             reduce using rule 443 (empty -> .)
    CLONE           reduce using rule 443 (empty -> .)
    LIST            reduce using rule 443 (empty -> .)
    ARRAY           reduce using rule 443 (empty -> .)
    LBRACKET        reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    NOT             reduce using rule 443 (empty -> .)
    BOOLEAN_NOT     reduce using rule 443 (empty -> .)
    INC             reduce using rule 443 (empty -> .)
    DEC             reduce using rule 443 (empty -> .)
    INT_CAST        reduce using rule 443 (empty -> .)
    DOUBLE_CAST     reduce using rule 443 (empty -> .)
    STRING_CAST     reduce using rule 443 (empty -> .)
    ARRAY_CAST      reduce using rule 443 (empty -> .)
    OBJECT_CAST     reduce using rule 443 (empty -> .)
    BOOL_CAST       reduce using rule 443 (empty -> .)
    UNSET_CAST      reduce using rule 443 (empty -> .)
    BINARY_CAST     reduce using rule 443 (empty -> .)
    ISSET           reduce using rule 443 (empty -> .)
    EMPTY           reduce using rule 443 (empty -> .)
    EVAL            reduce using rule 443 (empty -> .)
    INCLUDE         reduce using rule 443 (empty -> .)
    INCLUDE_ONCE    reduce using rule 443 (empty -> .)
    REQUIRE         reduce using rule 443 (empty -> .)
    REQUIRE_ONCE    reduce using rule 443 (empty -> .)
    PRINT           reduce using rule 443 (empty -> .)
    AT              reduce using rule 443 (empty -> .)
    LPAREN          reduce using rule 443 (empty -> .)
    CLASS           reduce using rule 443 (empty -> .)
    ABSTRACT        reduce using rule 443 (empty -> .)
    FINAL           reduce using rule 443 (empty -> .)
    QUOTE           reduce using rule 443 (empty -> .)
    STRING          reduce using rule 443 (empty -> .)
    STRING_VARNAME  reduce using rule 443 (empty -> .)
    NS_SEPARATOR    reduce using rule 443 (empty -> .)
    NAMESPACE       reduce using rule 443 (empty -> .)
    EXIT            reduce using rule 443 (empty -> .)
    DIE             reduce using rule 443 (empty -> .)
    LNUMBER         reduce using rule 443 (empty -> .)
    DNUMBER         reduce using rule 443 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 443 (empty -> .)
    LINE            reduce using rule 443 (empty -> .)
    FILE            reduce using rule 443 (empty -> .)
    DIR             reduce using rule 443 (empty -> .)
    CLASS_C         reduce using rule 443 (empty -> .)
    METHOD_C        reduce using rule 443 (empty -> .)
    FUNC_C          reduce using rule 443 (empty -> .)
    NS_C            reduce using rule 443 (empty -> .)
    START_HEREDOC   reduce using rule 443 (empty -> .)
    START_NOWDOC    reduce using rule 443 (empty -> .)
    BACKTICK        reduce using rule 443 (empty -> .)
    DOLLAR          reduce using rule 443 (empty -> .)
    VARIABLE        reduce using rule 443 (empty -> .)

    inner_statement_list           shift and go to state 746
    empty                          shift and go to state 121

state 623

    (34) statement -> DO statement WHILE LPAREN expr . RPAREN SEMI
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    RPAREN          shift and go to state 747
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 624

    (35) statement -> FOR LPAREN for_expr SEMI for_expr . SEMI for_expr RPAREN for_statement

    SEMI            shift and go to state 748


state 625

    (74) non_empty_for_expr -> non_empty_for_expr COMMA expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    COMMA           reduce using rule 74 (non_empty_for_expr -> non_empty_for_expr COMMA expr .)
    SEMI            reduce using rule 74 (non_empty_for_expr -> non_empty_for_expr COMMA expr .)
    RPAREN          reduce using rule 74 (non_empty_for_expr -> non_empty_for_expr COMMA expr .)
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 626

    (36) statement -> FOREACH LPAREN expr AS foreach_variable . foreach_optional_arg RPAREN foreach_statement
    (81) foreach_optional_arg -> . empty
    (82) foreach_optional_arg -> . DOUBLE_ARROW foreach_variable
    (443) empty -> .

    DOUBLE_ARROW    shift and go to state 751
    RPAREN          reduce using rule 443 (empty -> .)

    foreach_optional_arg           shift and go to state 749
    empty                          shift and go to state 750

state 627

    (78) foreach_variable -> LIST . LPAREN assignment_list RPAREN

    LPAREN          shift and go to state 752


state 628

    (79) foreach_variable -> variable .
    (234) variable -> variable . LBRACKET dim_offset RBRACKET

    DOUBLE_ARROW    reduce using rule 79 (foreach_variable -> variable .)
    RPAREN          reduce using rule 79 (foreach_variable -> variable .)
    LBRACKET        shift and go to state 205


state 629

    (80) foreach_variable -> AND . variable
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NS_SEPARATOR    shift and go to state 230
    NAMESPACE       shift and go to state 231
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107

    variable                       shift and go to state 753
    base_variable_with_function_calls shift and go to state 73
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    namespace_name                 shift and go to state 229
    class_name                     shift and go to state 232
    variable_without_objects       shift and go to state 102
    variable_class_name            shift and go to state 233
    reference_variable             shift and go to state 234
    compound_variable              shift and go to state 106

state 630

    (37) statement -> SWITCH LPAREN expr RPAREN switch_case_list .

    HALT_COMPILER   reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    NAMESPACE       reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    CONST           reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    USE             reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    LBRACE          reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    IF              reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    WHILE           reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    DO              reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    FOR             reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    FOREACH         reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    SWITCH          reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    BREAK           reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    CONTINUE        reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    RETURN          reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    GLOBAL          reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    STATIC          reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    ECHO            reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    INLINE_HTML     reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    UNSET           reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    SEMI            reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    TRY             reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    THROW           reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    DECLARE         reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    FUNCTION        reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    INTERFACE       reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    TRAIT           reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    NEW             reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    CLONE           reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    LIST            reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    ARRAY           reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    LBRACKET        reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    PLUS            reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    MINUS           reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    NOT             reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    BOOLEAN_NOT     reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    INC             reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    DEC             reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    INT_CAST        reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    DOUBLE_CAST     reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    STRING_CAST     reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    ARRAY_CAST      reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    OBJECT_CAST     reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    BOOL_CAST       reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    UNSET_CAST      reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    BINARY_CAST     reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    ISSET           reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    EMPTY           reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    EVAL            reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    INCLUDE         reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    INCLUDE_ONCE    reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    REQUIRE         reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    REQUIRE_ONCE    reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    PRINT           reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    AT              reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    LPAREN          reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    CLASS           reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    ABSTRACT        reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    FINAL           reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    QUOTE           reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    STRING          reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    STRING_VARNAME  reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    NS_SEPARATOR    reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    EXIT            reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    DIE             reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    LNUMBER         reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    DNUMBER         reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    CONSTANT_ENCAPSED_STRING reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    LINE            reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    FILE            reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    DIR             reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    CLASS_C         reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    METHOD_C        reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    FUNC_C          reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    NS_C            reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    START_HEREDOC   reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    START_NOWDOC    reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    BACKTICK        reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    DOLLAR          reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    VARIABLE        reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    $end            reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    RBRACE          reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    YIELD           reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    ELSEIF          reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    ELSE            reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    ENDIF           reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    ENDWHILE        reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    ENDDECLARE      reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    ENDFOREACH      reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    CASE            reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    DEFAULT         reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    ENDSWITCH       reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)
    ENDFOR          reduce using rule 37 (statement -> SWITCH LPAREN expr RPAREN switch_case_list .)


state 631

    (85) switch_case_list -> LBRACE . case_list RBRACE
    (86) switch_case_list -> LBRACE . SEMI case_list RBRACE
    (89) case_list -> . empty
    (90) case_list -> . case_list CASE expr case_separator inner_statement_list
    (91) case_list -> . case_list DEFAULT case_separator inner_statement_list
    (443) empty -> .

    SEMI            shift and go to state 755
    RBRACE          reduce using rule 443 (empty -> .)
    CASE            reduce using rule 443 (empty -> .)
    DEFAULT         reduce using rule 443 (empty -> .)

    case_list                      shift and go to state 754
    empty                          shift and go to state 756

state 632

    (87) switch_case_list -> COLON . case_list ENDSWITCH SEMI
    (88) switch_case_list -> COLON . SEMI case_list ENDSWITCH SEMI
    (89) case_list -> . empty
    (90) case_list -> . case_list CASE expr case_separator inner_statement_list
    (91) case_list -> . case_list DEFAULT case_separator inner_statement_list
    (443) empty -> .

    SEMI            shift and go to state 758
    ENDSWITCH       reduce using rule 443 (empty -> .)
    CASE            reduce using rule 443 (empty -> .)
    DEFAULT         reduce using rule 443 (empty -> .)

    case_list                      shift and go to state 757
    empty                          shift and go to state 756

state 633

    (98) global_var -> DOLLAR LBRACE expr RBRACE .

    SEMI            reduce using rule 98 (global_var -> DOLLAR LBRACE expr RBRACE .)
    COMMA           reduce using rule 98 (global_var -> DOLLAR LBRACE expr RBRACE .)


state 634

    (49) statement -> UNSET LPAREN unset_variables RPAREN SEMI .

    HALT_COMPILER   reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    NAMESPACE       reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    CONST           reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    USE             reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    LBRACE          reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    IF              reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    WHILE           reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    DO              reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    FOR             reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    FOREACH         reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    SWITCH          reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    BREAK           reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    CONTINUE        reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    RETURN          reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    GLOBAL          reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    STATIC          reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    ECHO            reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    INLINE_HTML     reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    UNSET           reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    SEMI            reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    TRY             reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    THROW           reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    DECLARE         reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    FUNCTION        reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    INTERFACE       reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    TRAIT           reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    NEW             reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    CLONE           reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    LIST            reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    ARRAY           reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    LBRACKET        reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    PLUS            reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    MINUS           reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    NOT             reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    INC             reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    DEC             reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    INT_CAST        reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    DOUBLE_CAST     reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    STRING_CAST     reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    ARRAY_CAST      reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    OBJECT_CAST     reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    BOOL_CAST       reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    UNSET_CAST      reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    BINARY_CAST     reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    ISSET           reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    EMPTY           reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    EVAL            reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    INCLUDE         reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    INCLUDE_ONCE    reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    REQUIRE         reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    REQUIRE_ONCE    reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    PRINT           reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    AT              reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    LPAREN          reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    CLASS           reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    ABSTRACT        reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    FINAL           reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    QUOTE           reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    STRING          reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    STRING_VARNAME  reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    NS_SEPARATOR    reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    EXIT            reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    DIE             reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    LNUMBER         reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    DNUMBER         reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    LINE            reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    FILE            reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    DIR             reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    CLASS_C         reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    METHOD_C        reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    FUNC_C          reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    NS_C            reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    START_HEREDOC   reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    START_NOWDOC    reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    BACKTICK        reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    DOLLAR          reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    VARIABLE        reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    $end            reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    RBRACE          reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    YIELD           reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    ELSEIF          reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    ELSE            reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    ENDIF           reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    ENDWHILE        reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    ENDDECLARE      reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    ENDFOREACH      reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    CASE            reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    DEFAULT         reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    ENDSWITCH       reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)
    ENDFOR          reduce using rule 49 (statement -> UNSET LPAREN unset_variables RPAREN SEMI .)


state 635

    (105) unset_variables -> unset_variables COMMA unset_variable .

    RPAREN          reduce using rule 105 (unset_variables -> unset_variables COMMA unset_variable .)
    COMMA           reduce using rule 105 (unset_variables -> unset_variables COMMA unset_variable .)


state 636

    (51) statement -> TRY LBRACE inner_statement_list RBRACE additional_catches . maybe_finally
    (52) additional_catches -> additional_catches . CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE
    (54) maybe_finally -> . FINALLY LBRACE inner_statement_list RBRACE
    (55) maybe_finally -> . empty
    (443) empty -> .

    CATCH           shift and go to state 760
    FINALLY         shift and go to state 761
    HALT_COMPILER   reduce using rule 443 (empty -> .)
    NAMESPACE       reduce using rule 443 (empty -> .)
    CONST           reduce using rule 443 (empty -> .)
    USE             reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    IF              reduce using rule 443 (empty -> .)
    WHILE           reduce using rule 443 (empty -> .)
    DO              reduce using rule 443 (empty -> .)
    FOR             reduce using rule 443 (empty -> .)
    FOREACH         reduce using rule 443 (empty -> .)
    SWITCH          reduce using rule 443 (empty -> .)
    BREAK           reduce using rule 443 (empty -> .)
    CONTINUE        reduce using rule 443 (empty -> .)
    RETURN          reduce using rule 443 (empty -> .)
    GLOBAL          reduce using rule 443 (empty -> .)
    STATIC          reduce using rule 443 (empty -> .)
    ECHO            reduce using rule 443 (empty -> .)
    INLINE_HTML     reduce using rule 443 (empty -> .)
    UNSET           reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    TRY             reduce using rule 443 (empty -> .)
    THROW           reduce using rule 443 (empty -> .)
    DECLARE         reduce using rule 443 (empty -> .)
    FUNCTION        reduce using rule 443 (empty -> .)
    INTERFACE       reduce using rule 443 (empty -> .)
    TRAIT           reduce using rule 443 (empty -> .)
    NEW             reduce using rule 443 (empty -> .)
    CLONE           reduce using rule 443 (empty -> .)
    LIST            reduce using rule 443 (empty -> .)
    ARRAY           reduce using rule 443 (empty -> .)
    LBRACKET        reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    NOT             reduce using rule 443 (empty -> .)
    BOOLEAN_NOT     reduce using rule 443 (empty -> .)
    INC             reduce using rule 443 (empty -> .)
    DEC             reduce using rule 443 (empty -> .)
    INT_CAST        reduce using rule 443 (empty -> .)
    DOUBLE_CAST     reduce using rule 443 (empty -> .)
    STRING_CAST     reduce using rule 443 (empty -> .)
    ARRAY_CAST      reduce using rule 443 (empty -> .)
    OBJECT_CAST     reduce using rule 443 (empty -> .)
    BOOL_CAST       reduce using rule 443 (empty -> .)
    UNSET_CAST      reduce using rule 443 (empty -> .)
    BINARY_CAST     reduce using rule 443 (empty -> .)
    ISSET           reduce using rule 443 (empty -> .)
    EMPTY           reduce using rule 443 (empty -> .)
    EVAL            reduce using rule 443 (empty -> .)
    INCLUDE         reduce using rule 443 (empty -> .)
    INCLUDE_ONCE    reduce using rule 443 (empty -> .)
    REQUIRE         reduce using rule 443 (empty -> .)
    REQUIRE_ONCE    reduce using rule 443 (empty -> .)
    PRINT           reduce using rule 443 (empty -> .)
    AT              reduce using rule 443 (empty -> .)
    LPAREN          reduce using rule 443 (empty -> .)
    CLASS           reduce using rule 443 (empty -> .)
    ABSTRACT        reduce using rule 443 (empty -> .)
    FINAL           reduce using rule 443 (empty -> .)
    QUOTE           reduce using rule 443 (empty -> .)
    STRING          reduce using rule 443 (empty -> .)
    STRING_VARNAME  reduce using rule 443 (empty -> .)
    NS_SEPARATOR    reduce using rule 443 (empty -> .)
    EXIT            reduce using rule 443 (empty -> .)
    DIE             reduce using rule 443 (empty -> .)
    LNUMBER         reduce using rule 443 (empty -> .)
    DNUMBER         reduce using rule 443 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 443 (empty -> .)
    LINE            reduce using rule 443 (empty -> .)
    FILE            reduce using rule 443 (empty -> .)
    DIR             reduce using rule 443 (empty -> .)
    CLASS_C         reduce using rule 443 (empty -> .)
    METHOD_C        reduce using rule 443 (empty -> .)
    FUNC_C          reduce using rule 443 (empty -> .)
    NS_C            reduce using rule 443 (empty -> .)
    START_HEREDOC   reduce using rule 443 (empty -> .)
    START_NOWDOC    reduce using rule 443 (empty -> .)
    BACKTICK        reduce using rule 443 (empty -> .)
    DOLLAR          reduce using rule 443 (empty -> .)
    VARIABLE        reduce using rule 443 (empty -> .)
    $end            reduce using rule 443 (empty -> .)
    RBRACE          reduce using rule 443 (empty -> .)
    YIELD           reduce using rule 443 (empty -> .)
    ELSEIF          reduce using rule 443 (empty -> .)
    ELSE            reduce using rule 443 (empty -> .)
    ENDIF           reduce using rule 443 (empty -> .)
    ENDWHILE        reduce using rule 443 (empty -> .)
    ENDDECLARE      reduce using rule 443 (empty -> .)
    ENDFOREACH      reduce using rule 443 (empty -> .)
    CASE            reduce using rule 443 (empty -> .)
    DEFAULT         reduce using rule 443 (empty -> .)
    ENDSWITCH       reduce using rule 443 (empty -> .)
    ENDFOR          reduce using rule 443 (empty -> .)

    maybe_finally                  shift and go to state 759
    empty                          shift and go to state 762

state 637

    (53) additional_catches -> empty .

    CATCH           reduce using rule 53 (additional_catches -> empty .)
    FINALLY         reduce using rule 53 (additional_catches -> empty .)
    HALT_COMPILER   reduce using rule 53 (additional_catches -> empty .)
    NAMESPACE       reduce using rule 53 (additional_catches -> empty .)
    CONST           reduce using rule 53 (additional_catches -> empty .)
    USE             reduce using rule 53 (additional_catches -> empty .)
    LBRACE          reduce using rule 53 (additional_catches -> empty .)
    IF              reduce using rule 53 (additional_catches -> empty .)
    WHILE           reduce using rule 53 (additional_catches -> empty .)
    DO              reduce using rule 53 (additional_catches -> empty .)
    FOR             reduce using rule 53 (additional_catches -> empty .)
    FOREACH         reduce using rule 53 (additional_catches -> empty .)
    SWITCH          reduce using rule 53 (additional_catches -> empty .)
    BREAK           reduce using rule 53 (additional_catches -> empty .)
    CONTINUE        reduce using rule 53 (additional_catches -> empty .)
    RETURN          reduce using rule 53 (additional_catches -> empty .)
    GLOBAL          reduce using rule 53 (additional_catches -> empty .)
    STATIC          reduce using rule 53 (additional_catches -> empty .)
    ECHO            reduce using rule 53 (additional_catches -> empty .)
    INLINE_HTML     reduce using rule 53 (additional_catches -> empty .)
    UNSET           reduce using rule 53 (additional_catches -> empty .)
    SEMI            reduce using rule 53 (additional_catches -> empty .)
    TRY             reduce using rule 53 (additional_catches -> empty .)
    THROW           reduce using rule 53 (additional_catches -> empty .)
    DECLARE         reduce using rule 53 (additional_catches -> empty .)
    FUNCTION        reduce using rule 53 (additional_catches -> empty .)
    INTERFACE       reduce using rule 53 (additional_catches -> empty .)
    TRAIT           reduce using rule 53 (additional_catches -> empty .)
    NEW             reduce using rule 53 (additional_catches -> empty .)
    CLONE           reduce using rule 53 (additional_catches -> empty .)
    LIST            reduce using rule 53 (additional_catches -> empty .)
    ARRAY           reduce using rule 53 (additional_catches -> empty .)
    LBRACKET        reduce using rule 53 (additional_catches -> empty .)
    PLUS            reduce using rule 53 (additional_catches -> empty .)
    MINUS           reduce using rule 53 (additional_catches -> empty .)
    NOT             reduce using rule 53 (additional_catches -> empty .)
    BOOLEAN_NOT     reduce using rule 53 (additional_catches -> empty .)
    INC             reduce using rule 53 (additional_catches -> empty .)
    DEC             reduce using rule 53 (additional_catches -> empty .)
    INT_CAST        reduce using rule 53 (additional_catches -> empty .)
    DOUBLE_CAST     reduce using rule 53 (additional_catches -> empty .)
    STRING_CAST     reduce using rule 53 (additional_catches -> empty .)
    ARRAY_CAST      reduce using rule 53 (additional_catches -> empty .)
    OBJECT_CAST     reduce using rule 53 (additional_catches -> empty .)
    BOOL_CAST       reduce using rule 53 (additional_catches -> empty .)
    UNSET_CAST      reduce using rule 53 (additional_catches -> empty .)
    BINARY_CAST     reduce using rule 53 (additional_catches -> empty .)
    ISSET           reduce using rule 53 (additional_catches -> empty .)
    EMPTY           reduce using rule 53 (additional_catches -> empty .)
    EVAL            reduce using rule 53 (additional_catches -> empty .)
    INCLUDE         reduce using rule 53 (additional_catches -> empty .)
    INCLUDE_ONCE    reduce using rule 53 (additional_catches -> empty .)
    REQUIRE         reduce using rule 53 (additional_catches -> empty .)
    REQUIRE_ONCE    reduce using rule 53 (additional_catches -> empty .)
    PRINT           reduce using rule 53 (additional_catches -> empty .)
    AT              reduce using rule 53 (additional_catches -> empty .)
    LPAREN          reduce using rule 53 (additional_catches -> empty .)
    CLASS           reduce using rule 53 (additional_catches -> empty .)
    ABSTRACT        reduce using rule 53 (additional_catches -> empty .)
    FINAL           reduce using rule 53 (additional_catches -> empty .)
    QUOTE           reduce using rule 53 (additional_catches -> empty .)
    STRING          reduce using rule 53 (additional_catches -> empty .)
    STRING_VARNAME  reduce using rule 53 (additional_catches -> empty .)
    NS_SEPARATOR    reduce using rule 53 (additional_catches -> empty .)
    EXIT            reduce using rule 53 (additional_catches -> empty .)
    DIE             reduce using rule 53 (additional_catches -> empty .)
    LNUMBER         reduce using rule 53 (additional_catches -> empty .)
    DNUMBER         reduce using rule 53 (additional_catches -> empty .)
    CONSTANT_ENCAPSED_STRING reduce using rule 53 (additional_catches -> empty .)
    LINE            reduce using rule 53 (additional_catches -> empty .)
    FILE            reduce using rule 53 (additional_catches -> empty .)
    DIR             reduce using rule 53 (additional_catches -> empty .)
    CLASS_C         reduce using rule 53 (additional_catches -> empty .)
    METHOD_C        reduce using rule 53 (additional_catches -> empty .)
    FUNC_C          reduce using rule 53 (additional_catches -> empty .)
    NS_C            reduce using rule 53 (additional_catches -> empty .)
    START_HEREDOC   reduce using rule 53 (additional_catches -> empty .)
    START_NOWDOC    reduce using rule 53 (additional_catches -> empty .)
    BACKTICK        reduce using rule 53 (additional_catches -> empty .)
    DOLLAR          reduce using rule 53 (additional_catches -> empty .)
    VARIABLE        reduce using rule 53 (additional_catches -> empty .)
    $end            reduce using rule 53 (additional_catches -> empty .)
    RBRACE          reduce using rule 53 (additional_catches -> empty .)
    YIELD           reduce using rule 53 (additional_catches -> empty .)
    ELSEIF          reduce using rule 53 (additional_catches -> empty .)
    ELSE            reduce using rule 53 (additional_catches -> empty .)
    ENDIF           reduce using rule 53 (additional_catches -> empty .)
    ENDWHILE        reduce using rule 53 (additional_catches -> empty .)
    ENDDECLARE      reduce using rule 53 (additional_catches -> empty .)
    ENDFOREACH      reduce using rule 53 (additional_catches -> empty .)
    CASE            reduce using rule 53 (additional_catches -> empty .)
    DEFAULT         reduce using rule 53 (additional_catches -> empty .)
    ENDSWITCH       reduce using rule 53 (additional_catches -> empty .)
    ENDFOR          reduce using rule 53 (additional_catches -> empty .)


state 638

    (57) statement -> DECLARE LPAREN declare_list RPAREN declare_statement .

    HALT_COMPILER   reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    NAMESPACE       reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    CONST           reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    USE             reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    LBRACE          reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    IF              reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    WHILE           reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    DO              reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    FOR             reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    FOREACH         reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    SWITCH          reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    BREAK           reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    CONTINUE        reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    RETURN          reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    GLOBAL          reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    STATIC          reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    ECHO            reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    INLINE_HTML     reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    UNSET           reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    SEMI            reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    TRY             reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    THROW           reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    DECLARE         reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    FUNCTION        reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    INTERFACE       reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    TRAIT           reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    NEW             reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    CLONE           reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    LIST            reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    ARRAY           reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    LBRACKET        reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    PLUS            reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    MINUS           reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    NOT             reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    BOOLEAN_NOT     reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    INC             reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    DEC             reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    INT_CAST        reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    DOUBLE_CAST     reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    STRING_CAST     reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    ARRAY_CAST      reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    OBJECT_CAST     reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    BOOL_CAST       reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    UNSET_CAST      reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    BINARY_CAST     reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    ISSET           reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    EMPTY           reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    EVAL            reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    INCLUDE         reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    INCLUDE_ONCE    reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    REQUIRE         reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    REQUIRE_ONCE    reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    PRINT           reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    AT              reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    LPAREN          reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    CLASS           reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    ABSTRACT        reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    FINAL           reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    QUOTE           reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    STRING          reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    STRING_VARNAME  reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    NS_SEPARATOR    reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    EXIT            reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    DIE             reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    LNUMBER         reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    DNUMBER         reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    LINE            reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    FILE            reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    DIR             reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    CLASS_C         reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    METHOD_C        reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    FUNC_C          reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    NS_C            reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    START_HEREDOC   reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    START_NOWDOC    reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    BACKTICK        reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    DOLLAR          reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    VARIABLE        reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    $end            reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    RBRACE          reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    YIELD           reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    ELSEIF          reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    ELSE            reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    ENDIF           reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    ENDWHILE        reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    ENDDECLARE      reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    ENDFOREACH      reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    CASE            reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    DEFAULT         reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    ENDSWITCH       reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)
    ENDFOR          reduce using rule 57 (statement -> DECLARE LPAREN declare_list RPAREN declare_statement .)


state 639

    (60) declare_statement -> statement .

    ELSEIF          reduce using rule 60 (declare_statement -> statement .)
    ELSE            reduce using rule 60 (declare_statement -> statement .)
    HALT_COMPILER   reduce using rule 60 (declare_statement -> statement .)
    NAMESPACE       reduce using rule 60 (declare_statement -> statement .)
    CONST           reduce using rule 60 (declare_statement -> statement .)
    USE             reduce using rule 60 (declare_statement -> statement .)
    LBRACE          reduce using rule 60 (declare_statement -> statement .)
    IF              reduce using rule 60 (declare_statement -> statement .)
    WHILE           reduce using rule 60 (declare_statement -> statement .)
    DO              reduce using rule 60 (declare_statement -> statement .)
    FOR             reduce using rule 60 (declare_statement -> statement .)
    FOREACH         reduce using rule 60 (declare_statement -> statement .)
    SWITCH          reduce using rule 60 (declare_statement -> statement .)
    BREAK           reduce using rule 60 (declare_statement -> statement .)
    CONTINUE        reduce using rule 60 (declare_statement -> statement .)
    RETURN          reduce using rule 60 (declare_statement -> statement .)
    GLOBAL          reduce using rule 60 (declare_statement -> statement .)
    STATIC          reduce using rule 60 (declare_statement -> statement .)
    ECHO            reduce using rule 60 (declare_statement -> statement .)
    INLINE_HTML     reduce using rule 60 (declare_statement -> statement .)
    UNSET           reduce using rule 60 (declare_statement -> statement .)
    SEMI            reduce using rule 60 (declare_statement -> statement .)
    TRY             reduce using rule 60 (declare_statement -> statement .)
    THROW           reduce using rule 60 (declare_statement -> statement .)
    DECLARE         reduce using rule 60 (declare_statement -> statement .)
    FUNCTION        reduce using rule 60 (declare_statement -> statement .)
    INTERFACE       reduce using rule 60 (declare_statement -> statement .)
    TRAIT           reduce using rule 60 (declare_statement -> statement .)
    NEW             reduce using rule 60 (declare_statement -> statement .)
    CLONE           reduce using rule 60 (declare_statement -> statement .)
    LIST            reduce using rule 60 (declare_statement -> statement .)
    ARRAY           reduce using rule 60 (declare_statement -> statement .)
    LBRACKET        reduce using rule 60 (declare_statement -> statement .)
    PLUS            reduce using rule 60 (declare_statement -> statement .)
    MINUS           reduce using rule 60 (declare_statement -> statement .)
    NOT             reduce using rule 60 (declare_statement -> statement .)
    BOOLEAN_NOT     reduce using rule 60 (declare_statement -> statement .)
    INC             reduce using rule 60 (declare_statement -> statement .)
    DEC             reduce using rule 60 (declare_statement -> statement .)
    INT_CAST        reduce using rule 60 (declare_statement -> statement .)
    DOUBLE_CAST     reduce using rule 60 (declare_statement -> statement .)
    STRING_CAST     reduce using rule 60 (declare_statement -> statement .)
    ARRAY_CAST      reduce using rule 60 (declare_statement -> statement .)
    OBJECT_CAST     reduce using rule 60 (declare_statement -> statement .)
    BOOL_CAST       reduce using rule 60 (declare_statement -> statement .)
    UNSET_CAST      reduce using rule 60 (declare_statement -> statement .)
    BINARY_CAST     reduce using rule 60 (declare_statement -> statement .)
    ISSET           reduce using rule 60 (declare_statement -> statement .)
    EMPTY           reduce using rule 60 (declare_statement -> statement .)
    EVAL            reduce using rule 60 (declare_statement -> statement .)
    INCLUDE         reduce using rule 60 (declare_statement -> statement .)
    INCLUDE_ONCE    reduce using rule 60 (declare_statement -> statement .)
    REQUIRE         reduce using rule 60 (declare_statement -> statement .)
    REQUIRE_ONCE    reduce using rule 60 (declare_statement -> statement .)
    PRINT           reduce using rule 60 (declare_statement -> statement .)
    AT              reduce using rule 60 (declare_statement -> statement .)
    LPAREN          reduce using rule 60 (declare_statement -> statement .)
    CLASS           reduce using rule 60 (declare_statement -> statement .)
    ABSTRACT        reduce using rule 60 (declare_statement -> statement .)
    FINAL           reduce using rule 60 (declare_statement -> statement .)
    QUOTE           reduce using rule 60 (declare_statement -> statement .)
    STRING          reduce using rule 60 (declare_statement -> statement .)
    STRING_VARNAME  reduce using rule 60 (declare_statement -> statement .)
    NS_SEPARATOR    reduce using rule 60 (declare_statement -> statement .)
    EXIT            reduce using rule 60 (declare_statement -> statement .)
    DIE             reduce using rule 60 (declare_statement -> statement .)
    LNUMBER         reduce using rule 60 (declare_statement -> statement .)
    DNUMBER         reduce using rule 60 (declare_statement -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 60 (declare_statement -> statement .)
    LINE            reduce using rule 60 (declare_statement -> statement .)
    FILE            reduce using rule 60 (declare_statement -> statement .)
    DIR             reduce using rule 60 (declare_statement -> statement .)
    CLASS_C         reduce using rule 60 (declare_statement -> statement .)
    METHOD_C        reduce using rule 60 (declare_statement -> statement .)
    FUNC_C          reduce using rule 60 (declare_statement -> statement .)
    NS_C            reduce using rule 60 (declare_statement -> statement .)
    START_HEREDOC   reduce using rule 60 (declare_statement -> statement .)
    START_NOWDOC    reduce using rule 60 (declare_statement -> statement .)
    BACKTICK        reduce using rule 60 (declare_statement -> statement .)
    DOLLAR          reduce using rule 60 (declare_statement -> statement .)
    VARIABLE        reduce using rule 60 (declare_statement -> statement .)
    $end            reduce using rule 60 (declare_statement -> statement .)
    RBRACE          reduce using rule 60 (declare_statement -> statement .)
    YIELD           reduce using rule 60 (declare_statement -> statement .)
    ENDIF           reduce using rule 60 (declare_statement -> statement .)
    ENDWHILE        reduce using rule 60 (declare_statement -> statement .)
    ENDDECLARE      reduce using rule 60 (declare_statement -> statement .)
    ENDFOREACH      reduce using rule 60 (declare_statement -> statement .)
    CASE            reduce using rule 60 (declare_statement -> statement .)
    DEFAULT         reduce using rule 60 (declare_statement -> statement .)
    ENDSWITCH       reduce using rule 60 (declare_statement -> statement .)
    ENDFOR          reduce using rule 60 (declare_statement -> statement .)


state 640

    (61) declare_statement -> COLON . inner_statement_list ENDDECLARE SEMI
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (443) empty -> .

    ENDDECLARE      reduce using rule 443 (empty -> .)
    HALT_COMPILER   reduce using rule 443 (empty -> .)
    YIELD           reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    IF              reduce using rule 443 (empty -> .)
    WHILE           reduce using rule 443 (empty -> .)
    DO              reduce using rule 443 (empty -> .)
    FOR             reduce using rule 443 (empty -> .)
    FOREACH         reduce using rule 443 (empty -> .)
    SWITCH          reduce using rule 443 (empty -> .)
    BREAK           reduce using rule 443 (empty -> .)
    CONTINUE        reduce using rule 443 (empty -> .)
    RETURN          reduce using rule 443 (empty -> .)
    GLOBAL          reduce using rule 443 (empty -> .)
    STATIC          reduce using rule 443 (empty -> .)
    ECHO            reduce using rule 443 (empty -> .)
    INLINE_HTML     reduce using rule 443 (empty -> .)
    UNSET           reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    TRY             reduce using rule 443 (empty -> .)
    THROW           reduce using rule 443 (empty -> .)
    DECLARE         reduce using rule 443 (empty -> .)
    FUNCTION        reduce using rule 443 (empty -> .)
    INTERFACE       reduce using rule 443 (empty -> .)
    TRAIT           reduce using rule 443 (empty -> .)
    NEW             reduce using rule 443 (empty -> .)
    CLONE           reduce using rule 443 (empty -> .)
    LIST            reduce using rule 443 (empty -> .)
    ARRAY           reduce using rule 443 (empty -> .)
    LBRACKET        reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    NOT             reduce using rule 443 (empty -> .)
    BOOLEAN_NOT     reduce using rule 443 (empty -> .)
    INC             reduce using rule 443 (empty -> .)
    DEC             reduce using rule 443 (empty -> .)
    INT_CAST        reduce using rule 443 (empty -> .)
    DOUBLE_CAST     reduce using rule 443 (empty -> .)
    STRING_CAST     reduce using rule 443 (empty -> .)
    ARRAY_CAST      reduce using rule 443 (empty -> .)
    OBJECT_CAST     reduce using rule 443 (empty -> .)
    BOOL_CAST       reduce using rule 443 (empty -> .)
    UNSET_CAST      reduce using rule 443 (empty -> .)
    BINARY_CAST     reduce using rule 443 (empty -> .)
    ISSET           reduce using rule 443 (empty -> .)
    EMPTY           reduce using rule 443 (empty -> .)
    EVAL            reduce using rule 443 (empty -> .)
    INCLUDE         reduce using rule 443 (empty -> .)
    INCLUDE_ONCE    reduce using rule 443 (empty -> .)
    REQUIRE         reduce using rule 443 (empty -> .)
    REQUIRE_ONCE    reduce using rule 443 (empty -> .)
    PRINT           reduce using rule 443 (empty -> .)
    AT              reduce using rule 443 (empty -> .)
    LPAREN          reduce using rule 443 (empty -> .)
    CLASS           reduce using rule 443 (empty -> .)
    ABSTRACT        reduce using rule 443 (empty -> .)
    FINAL           reduce using rule 443 (empty -> .)
    QUOTE           reduce using rule 443 (empty -> .)
    STRING          reduce using rule 443 (empty -> .)
    STRING_VARNAME  reduce using rule 443 (empty -> .)
    NS_SEPARATOR    reduce using rule 443 (empty -> .)
    NAMESPACE       reduce using rule 443 (empty -> .)
    EXIT            reduce using rule 443 (empty -> .)
    DIE             reduce using rule 443 (empty -> .)
    LNUMBER         reduce using rule 443 (empty -> .)
    DNUMBER         reduce using rule 443 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 443 (empty -> .)
    LINE            reduce using rule 443 (empty -> .)
    FILE            reduce using rule 443 (empty -> .)
    DIR             reduce using rule 443 (empty -> .)
    CLASS_C         reduce using rule 443 (empty -> .)
    METHOD_C        reduce using rule 443 (empty -> .)
    FUNC_C          reduce using rule 443 (empty -> .)
    NS_C            reduce using rule 443 (empty -> .)
    START_HEREDOC   reduce using rule 443 (empty -> .)
    START_NOWDOC    reduce using rule 443 (empty -> .)
    BACKTICK        reduce using rule 443 (empty -> .)
    DOLLAR          reduce using rule 443 (empty -> .)
    VARIABLE        reduce using rule 443 (empty -> .)

    inner_statement_list           shift and go to state 763
    empty                          shift and go to state 121

state 641

    (59) declare_list -> declare_list COMMA STRING . EQUALS static_scalar

    EQUALS          shift and go to state 764


state 642

    (58) declare_list -> STRING EQUALS static_scalar .

    RPAREN          reduce using rule 58 (declare_list -> STRING EQUALS static_scalar .)
    COMMA           reduce using rule 58 (declare_list -> STRING EQUALS static_scalar .)


state 643

    (108) function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list . RPAREN LBRACE inner_statement_list RBRACE
    (169) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 765
    COMMA           shift and go to state 645


state 644

    (271) expr -> FUNCTION is_reference LPAREN parameter_list RPAREN . lexical_vars LBRACE inner_statement_list RBRACE
    (272) lexical_vars -> . USE LPAREN lexical_var_list RPAREN
    (273) lexical_vars -> . empty
    (443) empty -> .

    USE             shift and go to state 767
    LBRACE          reduce using rule 443 (empty -> .)

    lexical_vars                   shift and go to state 766
    empty                          shift and go to state 768

state 645

    (169) parameter_list -> parameter_list COMMA . parameter
    (172) parameter -> . VARIABLE
    (173) parameter -> . class_name VARIABLE
    (174) parameter -> . AND VARIABLE
    (175) parameter -> . class_name AND VARIABLE
    (176) parameter -> . VARIABLE EQUALS static_scalar
    (177) parameter -> . class_name VARIABLE EQUALS static_scalar
    (178) parameter -> . AND VARIABLE EQUALS static_scalar
    (179) parameter -> . class_name AND VARIABLE EQUALS static_scalar
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    VARIABLE        shift and go to state 508
    AND             shift and go to state 510
    NS_SEPARATOR    shift and go to state 210
    NAMESPACE       shift and go to state 211
    STATIC          shift and go to state 111
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117

    parameter                      shift and go to state 769
    class_name                     shift and go to state 509
    namespace_name                 shift and go to state 209

state 646

    (176) parameter -> VARIABLE EQUALS . static_scalar
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_scalar                  shift and go to state 770
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 647

    (173) parameter -> class_name VARIABLE .
    (177) parameter -> class_name VARIABLE . EQUALS static_scalar

    RPAREN          reduce using rule 173 (parameter -> class_name VARIABLE .)
    COMMA           reduce using rule 173 (parameter -> class_name VARIABLE .)
    EQUALS          shift and go to state 771


state 648

    (175) parameter -> class_name AND . VARIABLE
    (179) parameter -> class_name AND . VARIABLE EQUALS static_scalar

    VARIABLE        shift and go to state 772


state 649

    (174) parameter -> AND VARIABLE .
    (178) parameter -> AND VARIABLE . EQUALS static_scalar

    RPAREN          reduce using rule 174 (parameter -> AND VARIABLE .)
    COMMA           reduce using rule 174 (parameter -> AND VARIABLE .)
    EQUALS          shift and go to state 773


state 650

    (109) class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE . class_statement_list RBRACE
    (135) class_statement_list -> . class_statement_list class_statement
    (136) class_statement_list -> . empty
    (443) empty -> .

    RBRACE          reduce using rule 443 (empty -> .)
    USE             reduce using rule 443 (empty -> .)
    VAR             reduce using rule 443 (empty -> .)
    CONST           reduce using rule 443 (empty -> .)
    STATIC          reduce using rule 443 (empty -> .)
    ABSTRACT        reduce using rule 443 (empty -> .)
    FINAL           reduce using rule 443 (empty -> .)
    PUBLIC          reduce using rule 443 (empty -> .)
    PROTECTED       reduce using rule 443 (empty -> .)
    PRIVATE         reduce using rule 443 (empty -> .)
    FUNCTION        reduce using rule 443 (empty -> .)

    class_statement_list           shift and go to state 774
    empty                          shift and go to state 655

state 651

    (120) implements_list -> IMPLEMENTS interface_list .
    (148) interface_list -> interface_list . COMMA fully_qualified_class_name

    LBRACE          reduce using rule 120 (implements_list -> IMPLEMENTS interface_list .)
    COMMA           shift and go to state 656


state 652

    (118) fully_qualified_class_name -> NS_SEPARATOR namespace_name .
    (428) namespace_name -> namespace_name . NS_SEPARATOR STRING

    IMPLEMENTS      reduce using rule 118 (fully_qualified_class_name -> NS_SEPARATOR namespace_name .)
    LBRACE          reduce using rule 118 (fully_qualified_class_name -> NS_SEPARATOR namespace_name .)
    COMMA           reduce using rule 118 (fully_qualified_class_name -> NS_SEPARATOR namespace_name .)
    SEMI            reduce using rule 118 (fully_qualified_class_name -> NS_SEPARATOR namespace_name .)
    VARIABLE        reduce using rule 118 (fully_qualified_class_name -> NS_SEPARATOR namespace_name .)
    DOUBLE_COLON    reduce using rule 118 (fully_qualified_class_name -> NS_SEPARATOR namespace_name .)
    NS_SEPARATOR    shift and go to state 118


state 653

    (119) fully_qualified_class_name -> NAMESPACE NS_SEPARATOR . namespace_name
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    STRING          shift and go to state 116
    ARRAY           shift and go to state 117

    namespace_name                 shift and go to state 775

state 654

    (110) class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list . RBRACE
    (135) class_statement_list -> class_statement_list . class_statement
    (137) class_statement -> . method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body
    (138) class_statement -> . variable_modifiers class_variable_declaration SEMI
    (139) class_statement -> . class_constant_declaration SEMI
    (140) class_statement -> . USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE
    (141) class_statement -> . USE fully_qualified_class_name SEMI
    (154) method_modifiers -> . non_empty_member_modifiers
    (155) method_modifiers -> . empty
    (152) variable_modifiers -> . non_empty_member_modifiers
    (153) variable_modifiers -> . VAR
    (146) class_constant_declaration -> . class_constant_declaration COMMA STRING EQUALS static_expr
    (147) class_constant_declaration -> . CONST STRING EQUALS static_expr
    (158) non_empty_member_modifiers -> . non_empty_member_modifiers member_modifier
    (159) non_empty_member_modifiers -> . member_modifier
    (443) empty -> .
    (163) member_modifier -> . visibility_modifier
    (164) member_modifier -> . STATIC
    (165) member_modifier -> . ABSTRACT
    (166) member_modifier -> . FINAL
    (160) visibility_modifier -> . PUBLIC
    (161) visibility_modifier -> . PROTECTED
    (162) visibility_modifier -> . PRIVATE

    RBRACE          shift and go to state 776
    USE             shift and go to state 781
    VAR             shift and go to state 664
    CONST           shift and go to state 782
    FUNCTION        reduce using rule 443 (empty -> .)
    STATIC          shift and go to state 667
    ABSTRACT        shift and go to state 668
    FINAL           shift and go to state 669
    PUBLIC          shift and go to state 670
    PROTECTED       shift and go to state 671
    PRIVATE         shift and go to state 672

    class_statement                shift and go to state 777
    method_modifiers               shift and go to state 778
    variable_modifiers             shift and go to state 779
    class_constant_declaration     shift and go to state 780
    non_empty_member_modifiers     shift and go to state 662
    empty                          shift and go to state 663
    member_modifier                shift and go to state 665
    visibility_modifier            shift and go to state 666

state 655

    (136) class_statement_list -> empty .

    RBRACE          reduce using rule 136 (class_statement_list -> empty .)
    USE             reduce using rule 136 (class_statement_list -> empty .)
    VAR             reduce using rule 136 (class_statement_list -> empty .)
    CONST           reduce using rule 136 (class_statement_list -> empty .)
    STATIC          reduce using rule 136 (class_statement_list -> empty .)
    ABSTRACT        reduce using rule 136 (class_statement_list -> empty .)
    FINAL           reduce using rule 136 (class_statement_list -> empty .)
    PUBLIC          reduce using rule 136 (class_statement_list -> empty .)
    PROTECTED       reduce using rule 136 (class_statement_list -> empty .)
    PRIVATE         reduce using rule 136 (class_statement_list -> empty .)
    FUNCTION        reduce using rule 136 (class_statement_list -> empty .)


state 656

    (148) interface_list -> interface_list COMMA . fully_qualified_class_name
    (117) fully_qualified_class_name -> . namespace_name
    (118) fully_qualified_class_name -> . NS_SEPARATOR namespace_name
    (119) fully_qualified_class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    NS_SEPARATOR    shift and go to state 517
    NAMESPACE       shift and go to state 518
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117

    fully_qualified_class_name     shift and go to state 783
    namespace_name                 shift and go to state 516

state 657

    (111) class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .

    HALT_COMPILER   reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    NAMESPACE       reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    CONST           reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    USE             reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    LBRACE          reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    IF              reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    WHILE           reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    DO              reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    FOR             reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    FOREACH         reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    SWITCH          reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    BREAK           reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    CONTINUE        reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    RETURN          reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    GLOBAL          reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    STATIC          reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    ECHO            reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    INLINE_HTML     reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    UNSET           reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    SEMI            reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    TRY             reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    THROW           reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    DECLARE         reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    FUNCTION        reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    INTERFACE       reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    TRAIT           reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    NEW             reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    CLONE           reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    LIST            reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    ARRAY           reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    LBRACKET        reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    PLUS            reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    MINUS           reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    NOT             reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    BOOLEAN_NOT     reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    INC             reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    DEC             reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    INT_CAST        reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    DOUBLE_CAST     reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    STRING_CAST     reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    ARRAY_CAST      reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    OBJECT_CAST     reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    BOOL_CAST       reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    UNSET_CAST      reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    BINARY_CAST     reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    ISSET           reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    EMPTY           reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    EVAL            reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    INCLUDE         reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    INCLUDE_ONCE    reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    REQUIRE         reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    REQUIRE_ONCE    reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    PRINT           reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    AT              reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    LPAREN          reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    CLASS           reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    ABSTRACT        reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    FINAL           reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    QUOTE           reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    STRING          reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    STRING_VARNAME  reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    NS_SEPARATOR    reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    EXIT            reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    DIE             reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    LNUMBER         reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    DNUMBER         reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    LINE            reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    FILE            reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    DIR             reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    CLASS_C         reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    METHOD_C        reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    FUNC_C          reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    NS_C            reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    START_HEREDOC   reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    START_NOWDOC    reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    BACKTICK        reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    DOLLAR          reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    VARIABLE        reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    $end            reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    RBRACE          reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    YIELD           reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    ELSEIF          reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    ELSE            reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    ENDIF           reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    ENDWHILE        reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    ENDDECLARE      reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    ENDFOREACH      reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    CASE            reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    DEFAULT         reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    ENDSWITCH       reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)
    ENDFOR          reduce using rule 111 (class_declaration_statement -> TRAIT STRING LBRACE trait_statement_list RBRACE .)


state 658

    (129) trait_statement_list -> trait_statement_list trait_statement .

    RBRACE          reduce using rule 129 (trait_statement_list -> trait_statement_list trait_statement .)
    USE             reduce using rule 129 (trait_statement_list -> trait_statement_list trait_statement .)
    VAR             reduce using rule 129 (trait_statement_list -> trait_statement_list trait_statement .)
    STATIC          reduce using rule 129 (trait_statement_list -> trait_statement_list trait_statement .)
    ABSTRACT        reduce using rule 129 (trait_statement_list -> trait_statement_list trait_statement .)
    FINAL           reduce using rule 129 (trait_statement_list -> trait_statement_list trait_statement .)
    PUBLIC          reduce using rule 129 (trait_statement_list -> trait_statement_list trait_statement .)
    PROTECTED       reduce using rule 129 (trait_statement_list -> trait_statement_list trait_statement .)
    PRIVATE         reduce using rule 129 (trait_statement_list -> trait_statement_list trait_statement .)
    FUNCTION        reduce using rule 129 (trait_statement_list -> trait_statement_list trait_statement .)


state 659

    (131) trait_statement -> method_modifiers . FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body

    FUNCTION        shift and go to state 784


state 660

    (132) trait_statement -> variable_modifiers . class_variable_declaration SEMI
    (142) class_variable_declaration -> . class_variable_declaration COMMA VARIABLE EQUALS static_scalar
    (143) class_variable_declaration -> . VARIABLE EQUALS static_scalar
    (144) class_variable_declaration -> . class_variable_declaration COMMA VARIABLE
    (145) class_variable_declaration -> . VARIABLE

    VARIABLE        shift and go to state 786

    class_variable_declaration     shift and go to state 785

state 661

    (133) trait_statement -> USE . fully_qualified_class_name LBRACE trait_modifiers_list RBRACE
    (134) trait_statement -> USE . fully_qualified_class_name SEMI
    (117) fully_qualified_class_name -> . namespace_name
    (118) fully_qualified_class_name -> . NS_SEPARATOR namespace_name
    (119) fully_qualified_class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    NS_SEPARATOR    shift and go to state 517
    NAMESPACE       shift and go to state 518
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117

    fully_qualified_class_name     shift and go to state 787
    namespace_name                 shift and go to state 516

state 662

    (154) method_modifiers -> non_empty_member_modifiers .
    (152) variable_modifiers -> non_empty_member_modifiers .
    (158) non_empty_member_modifiers -> non_empty_member_modifiers . member_modifier
    (163) member_modifier -> . visibility_modifier
    (164) member_modifier -> . STATIC
    (165) member_modifier -> . ABSTRACT
    (166) member_modifier -> . FINAL
    (160) visibility_modifier -> . PUBLIC
    (161) visibility_modifier -> . PROTECTED
    (162) visibility_modifier -> . PRIVATE

    FUNCTION        reduce using rule 154 (method_modifiers -> non_empty_member_modifiers .)
    VARIABLE        reduce using rule 152 (variable_modifiers -> non_empty_member_modifiers .)
    STATIC          shift and go to state 667
    ABSTRACT        shift and go to state 668
    FINAL           shift and go to state 669
    PUBLIC          shift and go to state 670
    PROTECTED       shift and go to state 671
    PRIVATE         shift and go to state 672

    member_modifier                shift and go to state 788
    visibility_modifier            shift and go to state 666

state 663

    (155) method_modifiers -> empty .

    FUNCTION        reduce using rule 155 (method_modifiers -> empty .)


state 664

    (153) variable_modifiers -> VAR .

    VARIABLE        reduce using rule 153 (variable_modifiers -> VAR .)


state 665

    (159) non_empty_member_modifiers -> member_modifier .

    STATIC          reduce using rule 159 (non_empty_member_modifiers -> member_modifier .)
    ABSTRACT        reduce using rule 159 (non_empty_member_modifiers -> member_modifier .)
    FINAL           reduce using rule 159 (non_empty_member_modifiers -> member_modifier .)
    PUBLIC          reduce using rule 159 (non_empty_member_modifiers -> member_modifier .)
    PROTECTED       reduce using rule 159 (non_empty_member_modifiers -> member_modifier .)
    PRIVATE         reduce using rule 159 (non_empty_member_modifiers -> member_modifier .)
    FUNCTION        reduce using rule 159 (non_empty_member_modifiers -> member_modifier .)
    VARIABLE        reduce using rule 159 (non_empty_member_modifiers -> member_modifier .)


state 666

    (163) member_modifier -> visibility_modifier .

    STATIC          reduce using rule 163 (member_modifier -> visibility_modifier .)
    ABSTRACT        reduce using rule 163 (member_modifier -> visibility_modifier .)
    FINAL           reduce using rule 163 (member_modifier -> visibility_modifier .)
    PUBLIC          reduce using rule 163 (member_modifier -> visibility_modifier .)
    PROTECTED       reduce using rule 163 (member_modifier -> visibility_modifier .)
    PRIVATE         reduce using rule 163 (member_modifier -> visibility_modifier .)
    FUNCTION        reduce using rule 163 (member_modifier -> visibility_modifier .)
    VARIABLE        reduce using rule 163 (member_modifier -> visibility_modifier .)


state 667

    (164) member_modifier -> STATIC .

    STATIC          reduce using rule 164 (member_modifier -> STATIC .)
    ABSTRACT        reduce using rule 164 (member_modifier -> STATIC .)
    FINAL           reduce using rule 164 (member_modifier -> STATIC .)
    PUBLIC          reduce using rule 164 (member_modifier -> STATIC .)
    PROTECTED       reduce using rule 164 (member_modifier -> STATIC .)
    PRIVATE         reduce using rule 164 (member_modifier -> STATIC .)
    FUNCTION        reduce using rule 164 (member_modifier -> STATIC .)
    VARIABLE        reduce using rule 164 (member_modifier -> STATIC .)


state 668

    (165) member_modifier -> ABSTRACT .

    STATIC          reduce using rule 165 (member_modifier -> ABSTRACT .)
    ABSTRACT        reduce using rule 165 (member_modifier -> ABSTRACT .)
    FINAL           reduce using rule 165 (member_modifier -> ABSTRACT .)
    PUBLIC          reduce using rule 165 (member_modifier -> ABSTRACT .)
    PROTECTED       reduce using rule 165 (member_modifier -> ABSTRACT .)
    PRIVATE         reduce using rule 165 (member_modifier -> ABSTRACT .)
    FUNCTION        reduce using rule 165 (member_modifier -> ABSTRACT .)
    VARIABLE        reduce using rule 165 (member_modifier -> ABSTRACT .)


state 669

    (166) member_modifier -> FINAL .

    STATIC          reduce using rule 166 (member_modifier -> FINAL .)
    ABSTRACT        reduce using rule 166 (member_modifier -> FINAL .)
    FINAL           reduce using rule 166 (member_modifier -> FINAL .)
    PUBLIC          reduce using rule 166 (member_modifier -> FINAL .)
    PROTECTED       reduce using rule 166 (member_modifier -> FINAL .)
    PRIVATE         reduce using rule 166 (member_modifier -> FINAL .)
    FUNCTION        reduce using rule 166 (member_modifier -> FINAL .)
    VARIABLE        reduce using rule 166 (member_modifier -> FINAL .)


state 670

    (160) visibility_modifier -> PUBLIC .

    STATIC          reduce using rule 160 (visibility_modifier -> PUBLIC .)
    ABSTRACT        reduce using rule 160 (visibility_modifier -> PUBLIC .)
    FINAL           reduce using rule 160 (visibility_modifier -> PUBLIC .)
    PUBLIC          reduce using rule 160 (visibility_modifier -> PUBLIC .)
    PROTECTED       reduce using rule 160 (visibility_modifier -> PUBLIC .)
    PRIVATE         reduce using rule 160 (visibility_modifier -> PUBLIC .)
    FUNCTION        reduce using rule 160 (visibility_modifier -> PUBLIC .)
    VARIABLE        reduce using rule 160 (visibility_modifier -> PUBLIC .)
    STRING          reduce using rule 160 (visibility_modifier -> PUBLIC .)
    SEMI            reduce using rule 160 (visibility_modifier -> PUBLIC .)


state 671

    (161) visibility_modifier -> PROTECTED .

    STATIC          reduce using rule 161 (visibility_modifier -> PROTECTED .)
    ABSTRACT        reduce using rule 161 (visibility_modifier -> PROTECTED .)
    FINAL           reduce using rule 161 (visibility_modifier -> PROTECTED .)
    PUBLIC          reduce using rule 161 (visibility_modifier -> PROTECTED .)
    PROTECTED       reduce using rule 161 (visibility_modifier -> PROTECTED .)
    PRIVATE         reduce using rule 161 (visibility_modifier -> PROTECTED .)
    FUNCTION        reduce using rule 161 (visibility_modifier -> PROTECTED .)
    VARIABLE        reduce using rule 161 (visibility_modifier -> PROTECTED .)
    STRING          reduce using rule 161 (visibility_modifier -> PROTECTED .)
    SEMI            reduce using rule 161 (visibility_modifier -> PROTECTED .)


state 672

    (162) visibility_modifier -> PRIVATE .

    STATIC          reduce using rule 162 (visibility_modifier -> PRIVATE .)
    ABSTRACT        reduce using rule 162 (visibility_modifier -> PRIVATE .)
    FINAL           reduce using rule 162 (visibility_modifier -> PRIVATE .)
    PUBLIC          reduce using rule 162 (visibility_modifier -> PRIVATE .)
    PROTECTED       reduce using rule 162 (visibility_modifier -> PRIVATE .)
    PRIVATE         reduce using rule 162 (visibility_modifier -> PRIVATE .)
    FUNCTION        reduce using rule 162 (visibility_modifier -> PRIVATE .)
    VARIABLE        reduce using rule 162 (visibility_modifier -> PRIVATE .)
    STRING          reduce using rule 162 (visibility_modifier -> PRIVATE .)
    SEMI            reduce using rule 162 (visibility_modifier -> PRIVATE .)


state 673

    (196) ctor_arguments -> LPAREN function_call_parameter_list RPAREN .

    SEMI            reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    OBJECT_OPERATOR reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    LBRACE          reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_AND     reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_OR      reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_AND     reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_OR      reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_XOR     reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    XOR             reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    CONCAT          reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    MUL             reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    DIV             reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    SL              reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    SR              reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    MOD             reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    IS_IDENTICAL    reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    IS_EQUAL        reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_EQUAL    reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER      reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER      reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    INSTANCEOF      reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    QUESTION        reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    COMMA           reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    DOUBLE_ARROW    reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    RBRACE          reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 196 (ctor_arguments -> LPAREN function_call_parameter_list RPAREN .)


state 674

    (231) static_member -> class_name DOUBLE_COLON LBRACE expr . RBRACE
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    RBRACE          shift and go to state 789
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 675

    (191) dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .
    (193) dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties . dynamic_class_name_variable_property
    (195) dynamic_class_name_variable_property -> . OBJECT_OPERATOR object_property

  ! shift/reduce conflict for OBJECT_OPERATOR resolved as shift
    LPAREN          reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    SEMI            reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    LBRACE          reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    BOOLEAN_AND     reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    BOOLEAN_OR      reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    LOGICAL_AND     reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    LOGICAL_OR      reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    LOGICAL_XOR     reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    AND             reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    OR              reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    XOR             reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    CONCAT          reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    PLUS            reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    MINUS           reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    MUL             reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    DIV             reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    SL              reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    SR              reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    MOD             reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    IS_IDENTICAL    reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    IS_NOT_IDENTICAL reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    IS_EQUAL        reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    IS_NOT_EQUAL    reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    IS_SMALLER      reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    IS_SMALLER_OR_EQUAL reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    IS_GREATER      reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    IS_GREATER_OR_EQUAL reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    INSTANCEOF      reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    QUESTION        reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    RPAREN          reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    COMMA           reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    DOUBLE_ARROW    reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    RBRACKET        reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    RBRACE          reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    COLON           reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    AS              reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .)
    OBJECT_OPERATOR shift and go to state 790

  ! OBJECT_OPERATOR [ reduce using rule 191 (dynamic_class_name_reference -> base_variable OBJECT_OPERATOR object_property dynamic_class_name_variable_properties .) ]

    dynamic_class_name_variable_property shift and go to state 791

state 676

    (194) dynamic_class_name_variable_properties -> empty .

    OBJECT_OPERATOR reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    LPAREN          reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    SEMI            reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    LBRACE          reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    BOOLEAN_AND     reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    BOOLEAN_OR      reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    LOGICAL_AND     reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    LOGICAL_OR      reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    LOGICAL_XOR     reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    AND             reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    OR              reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    XOR             reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    CONCAT          reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    PLUS            reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    MINUS           reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    MUL             reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    DIV             reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    SL              reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    SR              reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    MOD             reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    IS_IDENTICAL    reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    IS_NOT_IDENTICAL reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    IS_EQUAL        reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    IS_NOT_EQUAL    reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    IS_SMALLER      reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    IS_SMALLER_OR_EQUAL reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    IS_GREATER      reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    IS_GREATER_OR_EQUAL reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    INSTANCEOF      reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    QUESTION        reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    RPAREN          reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    COMMA           reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    DOUBLE_ARROW    reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    RBRACKET        reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    RBRACE          reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    COLON           reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)
    AS              reduce using rule 194 (dynamic_class_name_variable_properties -> empty .)


state 677

    (232) static_member -> variable_class_name DOUBLE_COLON LBRACE expr . RBRACE
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    RBRACE          shift and go to state 792
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 678

    (204) assignment_list_element -> LIST LPAREN assignment_list . RPAREN
    (200) assignment_list -> assignment_list . COMMA assignment_list_element

    RPAREN          shift and go to state 793
    COMMA           shift and go to state 535


state 679

    (199) expr -> LIST LPAREN assignment_list RPAREN EQUALS . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 794
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 680

    (200) assignment_list -> assignment_list COMMA assignment_list_element .

    RPAREN          reduce using rule 200 (assignment_list -> assignment_list COMMA assignment_list_element .)
    COMMA           reduce using rule 200 (assignment_list -> assignment_list COMMA assignment_list_element .)


state 681

    (256) non_empty_array_pair_list -> non_empty_array_pair_list COMMA AND variable .
    (234) variable -> variable . LBRACKET dim_offset RBRACKET

    COMMA           reduce using rule 256 (non_empty_array_pair_list -> non_empty_array_pair_list COMMA AND variable .)
    RBRACKET        reduce using rule 256 (non_empty_array_pair_list -> non_empty_array_pair_list COMMA AND variable .)
    RPAREN          reduce using rule 256 (non_empty_array_pair_list -> non_empty_array_pair_list COMMA AND variable .)
    LBRACKET        shift and go to state 205


state 682

    (260) non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr DOUBLE_ARROW . AND variable
    (261) non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr DOUBLE_ARROW . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 796
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 795
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 683

    (262) non_empty_array_pair_list -> expr DOUBLE_ARROW AND variable .
    (234) variable -> variable . LBRACKET dim_offset RBRACKET

    COMMA           reduce using rule 262 (non_empty_array_pair_list -> expr DOUBLE_ARROW AND variable .)
    RBRACKET        reduce using rule 262 (non_empty_array_pair_list -> expr DOUBLE_ARROW AND variable .)
    RPAREN          reduce using rule 262 (non_empty_array_pair_list -> expr DOUBLE_ARROW AND variable .)
    LBRACKET        shift and go to state 205


state 684

    (334) isset_variables -> isset_variables COMMA variable .
    (234) variable -> variable . LBRACKET dim_offset RBRACKET

    RPAREN          reduce using rule 334 (isset_variables -> isset_variables COMMA variable .)
    COMMA           reduce using rule 334 (isset_variables -> isset_variables COMMA variable .)
    LBRACKET        shift and go to state 205


state 685

    (205) variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .
    (222) variable_properties -> variable_properties . variable_property
    (224) variable_property -> . OBJECT_OPERATOR object_property method_or_not

  ! shift/reduce conflict for OBJECT_OPERATOR resolved as shift
    EQUALS          reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    PLUS_EQUAL      reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    MINUS_EQUAL     reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    MUL_EQUAL       reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    DIV_EQUAL       reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    CONCAT_EQUAL    reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    MOD_EQUAL       reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    AND_EQUAL       reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    OR_EQUAL        reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    XOR_EQUAL       reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    SL_EQUAL        reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    SR_EQUAL        reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    INC             reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    DEC             reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    LBRACKET        reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    SEMI            reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    LBRACE          reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    BOOLEAN_AND     reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    BOOLEAN_OR      reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    LOGICAL_AND     reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    LOGICAL_OR      reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    LOGICAL_XOR     reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    AND             reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    OR              reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    XOR             reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    CONCAT          reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    PLUS            reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    MINUS           reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    MUL             reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    DIV             reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    SL              reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    SR              reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    MOD             reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    IS_IDENTICAL    reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    IS_NOT_IDENTICAL reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    IS_EQUAL        reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    IS_NOT_EQUAL    reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    IS_SMALLER      reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    IS_SMALLER_OR_EQUAL reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    IS_GREATER      reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    IS_GREATER_OR_EQUAL reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    INSTANCEOF      reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    QUESTION        reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    RPAREN          reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    COMMA           reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    DOUBLE_ARROW    reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    RBRACKET        reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    RBRACE          reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    COLON           reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    AS              reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .)
    OBJECT_OPERATOR shift and go to state 797

  ! OBJECT_OPERATOR [ reduce using rule 205 (variable -> base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties .) ]

    variable_property              shift and go to state 798

state 686

    (223) variable_properties -> empty .

    OBJECT_OPERATOR reduce using rule 223 (variable_properties -> empty .)
    EQUALS          reduce using rule 223 (variable_properties -> empty .)
    PLUS_EQUAL      reduce using rule 223 (variable_properties -> empty .)
    MINUS_EQUAL     reduce using rule 223 (variable_properties -> empty .)
    MUL_EQUAL       reduce using rule 223 (variable_properties -> empty .)
    DIV_EQUAL       reduce using rule 223 (variable_properties -> empty .)
    CONCAT_EQUAL    reduce using rule 223 (variable_properties -> empty .)
    MOD_EQUAL       reduce using rule 223 (variable_properties -> empty .)
    AND_EQUAL       reduce using rule 223 (variable_properties -> empty .)
    OR_EQUAL        reduce using rule 223 (variable_properties -> empty .)
    XOR_EQUAL       reduce using rule 223 (variable_properties -> empty .)
    SL_EQUAL        reduce using rule 223 (variable_properties -> empty .)
    SR_EQUAL        reduce using rule 223 (variable_properties -> empty .)
    INC             reduce using rule 223 (variable_properties -> empty .)
    DEC             reduce using rule 223 (variable_properties -> empty .)
    LBRACKET        reduce using rule 223 (variable_properties -> empty .)
    SEMI            reduce using rule 223 (variable_properties -> empty .)
    LBRACE          reduce using rule 223 (variable_properties -> empty .)
    BOOLEAN_AND     reduce using rule 223 (variable_properties -> empty .)
    BOOLEAN_OR      reduce using rule 223 (variable_properties -> empty .)
    LOGICAL_AND     reduce using rule 223 (variable_properties -> empty .)
    LOGICAL_OR      reduce using rule 223 (variable_properties -> empty .)
    LOGICAL_XOR     reduce using rule 223 (variable_properties -> empty .)
    AND             reduce using rule 223 (variable_properties -> empty .)
    OR              reduce using rule 223 (variable_properties -> empty .)
    XOR             reduce using rule 223 (variable_properties -> empty .)
    CONCAT          reduce using rule 223 (variable_properties -> empty .)
    PLUS            reduce using rule 223 (variable_properties -> empty .)
    MINUS           reduce using rule 223 (variable_properties -> empty .)
    MUL             reduce using rule 223 (variable_properties -> empty .)
    DIV             reduce using rule 223 (variable_properties -> empty .)
    SL              reduce using rule 223 (variable_properties -> empty .)
    SR              reduce using rule 223 (variable_properties -> empty .)
    MOD             reduce using rule 223 (variable_properties -> empty .)
    IS_IDENTICAL    reduce using rule 223 (variable_properties -> empty .)
    IS_NOT_IDENTICAL reduce using rule 223 (variable_properties -> empty .)
    IS_EQUAL        reduce using rule 223 (variable_properties -> empty .)
    IS_NOT_EQUAL    reduce using rule 223 (variable_properties -> empty .)
    IS_SMALLER      reduce using rule 223 (variable_properties -> empty .)
    IS_SMALLER_OR_EQUAL reduce using rule 223 (variable_properties -> empty .)
    IS_GREATER      reduce using rule 223 (variable_properties -> empty .)
    IS_GREATER_OR_EQUAL reduce using rule 223 (variable_properties -> empty .)
    INSTANCEOF      reduce using rule 223 (variable_properties -> empty .)
    QUESTION        reduce using rule 223 (variable_properties -> empty .)
    RPAREN          reduce using rule 223 (variable_properties -> empty .)
    COMMA           reduce using rule 223 (variable_properties -> empty .)
    DOUBLE_ARROW    reduce using rule 223 (variable_properties -> empty .)
    RBRACKET        reduce using rule 223 (variable_properties -> empty .)
    RBRACE          reduce using rule 223 (variable_properties -> empty .)
    COLON           reduce using rule 223 (variable_properties -> empty .)
    AS              reduce using rule 223 (variable_properties -> empty .)


state 687

    (442) encaps_var_offset -> VARIABLE .

    RBRACKET        reduce using rule 442 (encaps_var_offset -> VARIABLE .)


state 688

    (435) encaps_var -> VARIABLE LBRACKET encaps_var_offset . RBRACKET

    RBRACKET        shift and go to state 799


state 689

    (440) encaps_var_offset -> STRING .

    RBRACKET        reduce using rule 440 (encaps_var_offset -> STRING .)


state 690

    (441) encaps_var_offset -> NUM_STRING .

    RBRACKET        reduce using rule 441 (encaps_var_offset -> NUM_STRING .)


state 691

    (436) encaps_var -> VARIABLE OBJECT_OPERATOR STRING .

    QUOTE           reduce using rule 436 (encaps_var -> VARIABLE OBJECT_OPERATOR STRING .)
    ENCAPSED_AND_WHITESPACE reduce using rule 436 (encaps_var -> VARIABLE OBJECT_OPERATOR STRING .)
    VARIABLE        reduce using rule 436 (encaps_var -> VARIABLE OBJECT_OPERATOR STRING .)
    DOLLAR_OPEN_CURLY_BRACES reduce using rule 436 (encaps_var -> VARIABLE OBJECT_OPERATOR STRING .)
    CURLY_OPEN      reduce using rule 436 (encaps_var -> VARIABLE OBJECT_OPERATOR STRING .)
    END_HEREDOC     reduce using rule 436 (encaps_var -> VARIABLE OBJECT_OPERATOR STRING .)
    BACKTICK        reduce using rule 436 (encaps_var -> VARIABLE OBJECT_OPERATOR STRING .)


state 692

    (437) encaps_var -> DOLLAR_OPEN_CURLY_BRACES expr RBRACE .

    QUOTE           reduce using rule 437 (encaps_var -> DOLLAR_OPEN_CURLY_BRACES expr RBRACE .)
    ENCAPSED_AND_WHITESPACE reduce using rule 437 (encaps_var -> DOLLAR_OPEN_CURLY_BRACES expr RBRACE .)
    VARIABLE        reduce using rule 437 (encaps_var -> DOLLAR_OPEN_CURLY_BRACES expr RBRACE .)
    DOLLAR_OPEN_CURLY_BRACES reduce using rule 437 (encaps_var -> DOLLAR_OPEN_CURLY_BRACES expr RBRACE .)
    CURLY_OPEN      reduce using rule 437 (encaps_var -> DOLLAR_OPEN_CURLY_BRACES expr RBRACE .)
    END_HEREDOC     reduce using rule 437 (encaps_var -> DOLLAR_OPEN_CURLY_BRACES expr RBRACE .)
    BACKTICK        reduce using rule 437 (encaps_var -> DOLLAR_OPEN_CURLY_BRACES expr RBRACE .)


state 693

    (438) encaps_var -> DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET . expr RBRACKET RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 800
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 694

    (439) encaps_var -> CURLY_OPEN variable RBRACE .

    QUOTE           reduce using rule 439 (encaps_var -> CURLY_OPEN variable RBRACE .)
    ENCAPSED_AND_WHITESPACE reduce using rule 439 (encaps_var -> CURLY_OPEN variable RBRACE .)
    VARIABLE        reduce using rule 439 (encaps_var -> CURLY_OPEN variable RBRACE .)
    DOLLAR_OPEN_CURLY_BRACES reduce using rule 439 (encaps_var -> CURLY_OPEN variable RBRACE .)
    CURLY_OPEN      reduce using rule 439 (encaps_var -> CURLY_OPEN variable RBRACE .)
    END_HEREDOC     reduce using rule 439 (encaps_var -> CURLY_OPEN variable RBRACE .)
    BACKTICK        reduce using rule 439 (encaps_var -> CURLY_OPEN variable RBRACE .)


state 695

    (210) function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .

    OBJECT_OPERATOR reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    PLUS_EQUAL      reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    MINUS_EQUAL     reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    MUL_EQUAL       reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    DIV_EQUAL       reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    CONCAT_EQUAL    reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    MOD_EQUAL       reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    AND_EQUAL       reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    OR_EQUAL        reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    XOR_EQUAL       reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    SL_EQUAL        reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    SR_EQUAL        reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    INC             reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    DEC             reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    LBRACKET        reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    SEMI            reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    LBRACE          reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_AND     reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_OR      reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_AND     reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_OR      reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_XOR     reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    XOR             reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    CONCAT          reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    MUL             reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    DIV             reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    SL              reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    SR              reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    MOD             reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_IDENTICAL    reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_EQUAL        reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_EQUAL    reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER      reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER      reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    INSTANCEOF      reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    QUESTION        reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    COMMA           reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    DOUBLE_ARROW    reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    RBRACE          reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 210 (function_call -> NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)


state 696

    (212) function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list . RPAREN
    (266) function_call_parameter_list -> function_call_parameter_list . COMMA function_call_parameter

    RPAREN          shift and go to state 801
    COMMA           shift and go to state 446


state 697

    (213) function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list . RPAREN
    (266) function_call_parameter_list -> function_call_parameter_list . COMMA function_call_parameter

    RPAREN          shift and go to state 802
    COMMA           shift and go to state 446


state 698

    (216) function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE . LPAREN function_call_parameter_list RPAREN
    (231) static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .

    LPAREN          shift and go to state 803
    OBJECT_OPERATOR reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    EQUALS          reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    PLUS_EQUAL      reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    MINUS_EQUAL     reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    MUL_EQUAL       reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    DIV_EQUAL       reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    CONCAT_EQUAL    reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    MOD_EQUAL       reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    AND_EQUAL       reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    OR_EQUAL        reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    XOR_EQUAL       reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    SL_EQUAL        reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    SR_EQUAL        reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    INC             reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    DEC             reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    LBRACKET        reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    SEMI            reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    LBRACE          reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    BOOLEAN_AND     reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    BOOLEAN_OR      reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    LOGICAL_AND     reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    LOGICAL_OR      reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    LOGICAL_XOR     reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    AND             reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    OR              reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    XOR             reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    CONCAT          reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    PLUS            reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    MINUS           reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    MUL             reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    DIV             reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    SL              reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    SR              reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    MOD             reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_IDENTICAL    reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_EQUAL        reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_NOT_EQUAL    reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_SMALLER      reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_GREATER      reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    INSTANCEOF      reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    QUESTION        reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    RPAREN          reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    COMMA           reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    DOUBLE_ARROW    reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    RBRACKET        reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    RBRACE          reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    COLON           reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    AS              reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)


state 699

    (214) function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list . RPAREN
    (266) function_call_parameter_list -> function_call_parameter_list . COMMA function_call_parameter

    RPAREN          shift and go to state 804
    COMMA           shift and go to state 446


state 700

    (215) function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list . RPAREN
    (266) function_call_parameter_list -> function_call_parameter_list . COMMA function_call_parameter

    RPAREN          shift and go to state 805
    COMMA           shift and go to state 446


state 701

    (217) function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE . LPAREN function_call_parameter_list RPAREN
    (232) static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .

    LPAREN          shift and go to state 806
    OBJECT_OPERATOR reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    EQUALS          reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    PLUS_EQUAL      reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    MINUS_EQUAL     reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    MUL_EQUAL       reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    DIV_EQUAL       reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    CONCAT_EQUAL    reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    MOD_EQUAL       reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    AND_EQUAL       reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    OR_EQUAL        reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    XOR_EQUAL       reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    SL_EQUAL        reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    SR_EQUAL        reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    INC             reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    DEC             reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    LBRACKET        reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    SEMI            reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    LBRACE          reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    BOOLEAN_AND     reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    BOOLEAN_OR      reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    LOGICAL_AND     reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    LOGICAL_OR      reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    LOGICAL_XOR     reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    AND             reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    OR              reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    XOR             reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    CONCAT          reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    PLUS            reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    MINUS           reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    MUL             reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    DIV             reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    SL              reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    SR              reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    MOD             reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_IDENTICAL    reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_EQUAL        reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_NOT_EQUAL    reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_SMALLER      reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_GREATER      reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    INSTANCEOF      reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    QUESTION        reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    RPAREN          reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    COMMA           reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    DOUBLE_ARROW    reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    RBRACKET        reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    RBRACE          reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    COLON           reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    AS              reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)


state 702

    (211) function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .

    OBJECT_OPERATOR reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    PLUS_EQUAL      reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    MINUS_EQUAL     reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    MUL_EQUAL       reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    DIV_EQUAL       reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    CONCAT_EQUAL    reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    MOD_EQUAL       reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    AND_EQUAL       reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    OR_EQUAL        reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    XOR_EQUAL       reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    SL_EQUAL        reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    SR_EQUAL        reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    INC             reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    DEC             reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    LBRACKET        reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    SEMI            reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    LBRACE          reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_AND     reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_OR      reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_AND     reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_OR      reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_XOR     reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    XOR             reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    CONCAT          reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    MUL             reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    DIV             reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    SL              reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    SR              reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    MOD             reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_IDENTICAL    reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_EQUAL        reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_EQUAL    reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER      reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER      reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    INSTANCEOF      reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    QUESTION        reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    COMMA           reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    DOUBLE_ARROW    reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    RBRACE          reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 211 (function_call -> NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN .)


state 703

    (27) inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .

    RBRACE          reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    HALT_COMPILER   reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    YIELD           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    LBRACE          reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    IF              reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DO              reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    FOR             reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    FOREACH         reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    SWITCH          reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    BREAK           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    CONTINUE        reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    RETURN          reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    GLOBAL          reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    STATIC          reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ECHO            reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    INLINE_HTML     reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    UNSET           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    SEMI            reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    TRY             reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    THROW           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DECLARE         reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    FUNCTION        reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    INTERFACE       reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    TRAIT           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    NEW             reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    CLONE           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    LIST            reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ARRAY           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    LBRACKET        reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    PLUS            reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    MINUS           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    NOT             reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    INC             reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DEC             reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    INT_CAST        reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DOUBLE_CAST     reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    STRING_CAST     reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ARRAY_CAST      reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    OBJECT_CAST     reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    BOOL_CAST       reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    UNSET_CAST      reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    BINARY_CAST     reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ISSET           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    EMPTY           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    EVAL            reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    INCLUDE         reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    INCLUDE_ONCE    reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    REQUIRE         reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    REQUIRE_ONCE    reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    PRINT           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    AT              reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    LPAREN          reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    CLASS           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ABSTRACT        reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    FINAL           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    QUOTE           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    STRING          reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    STRING_VARNAME  reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    NS_SEPARATOR    reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    NAMESPACE       reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    EXIT            reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DIE             reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    LNUMBER         reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DNUMBER         reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    LINE            reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    FILE            reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DIR             reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    CLASS_C         reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    METHOD_C        reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    FUNC_C          reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    NS_C            reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    START_HEREDOC   reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    START_NOWDOC    reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    BACKTICK        reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DOLLAR          reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    VARIABLE        reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ELSEIF          reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ELSE            reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ENDIF           reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ENDWHILE        reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ENDDECLARE      reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ENDFOREACH      reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    CASE            reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    DEFAULT         reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ENDSWITCH       reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)
    ENDFOR          reduce using rule 27 (inner_statement -> HALT_COMPILER LPAREN RPAREN SEMI .)


state 704

    (403) static_expr -> static_expr BOOLEAN_AND static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    BOOLEAN_AND     reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .)
    BOOLEAN_OR      reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .)
    LOGICAL_AND     reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .)
    LOGICAL_OR      reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .)
    LOGICAL_XOR     reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .)
    SEMI            reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .)
    COMMA           reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .)
    RPAREN          reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .)
    RBRACKET        reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .)
    AND             shift and go to state 576
    OR              shift and go to state 577
    XOR             shift and go to state 578
    CONCAT          shift and go to state 579
    PLUS            shift and go to state 580
    MINUS           shift and go to state 581
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    SL              shift and go to state 584
    SR              shift and go to state 585
    MOD             shift and go to state 586
    IS_IDENTICAL    shift and go to state 587
    IS_NOT_IDENTICAL shift and go to state 588
    IS_EQUAL        shift and go to state 589
    IS_NOT_EQUAL    shift and go to state 590
    IS_SMALLER      shift and go to state 591
    IS_SMALLER_OR_EQUAL shift and go to state 592
    IS_GREATER      shift and go to state 593
    IS_GREATER_OR_EQUAL shift and go to state 594

  ! AND             [ reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .) ]
  ! OR              [ reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .) ]
  ! XOR             [ reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .) ]
  ! CONCAT          [ reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .) ]
  ! PLUS            [ reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .) ]
  ! MINUS           [ reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .) ]
  ! MUL             [ reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .) ]
  ! DIV             [ reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .) ]
  ! SL              [ reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .) ]
  ! SR              [ reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .) ]
  ! MOD             [ reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .) ]
  ! IS_EQUAL        [ reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .) ]
  ! IS_SMALLER      [ reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .) ]
  ! IS_GREATER      [ reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 403 (static_expr -> static_expr BOOLEAN_AND static_expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 571 ]
  ! BOOLEAN_OR      [ shift and go to state 572 ]
  ! LOGICAL_AND     [ shift and go to state 573 ]
  ! LOGICAL_OR      [ shift and go to state 574 ]
  ! LOGICAL_XOR     [ shift and go to state 575 ]


state 705

    (404) static_expr -> static_expr BOOLEAN_OR static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    BOOLEAN_OR      reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .)
    LOGICAL_AND     reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .)
    LOGICAL_OR      reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .)
    LOGICAL_XOR     reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .)
    SEMI            reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .)
    COMMA           reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .)
    RPAREN          reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .)
    RBRACKET        reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .)
    BOOLEAN_AND     shift and go to state 571
    AND             shift and go to state 576
    OR              shift and go to state 577
    XOR             shift and go to state 578
    CONCAT          shift and go to state 579
    PLUS            shift and go to state 580
    MINUS           shift and go to state 581
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    SL              shift and go to state 584
    SR              shift and go to state 585
    MOD             shift and go to state 586
    IS_IDENTICAL    shift and go to state 587
    IS_NOT_IDENTICAL shift and go to state 588
    IS_EQUAL        shift and go to state 589
    IS_NOT_EQUAL    shift and go to state 590
    IS_SMALLER      shift and go to state 591
    IS_SMALLER_OR_EQUAL shift and go to state 592
    IS_GREATER      shift and go to state 593
    IS_GREATER_OR_EQUAL shift and go to state 594

  ! BOOLEAN_AND     [ reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .) ]
  ! AND             [ reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .) ]
  ! OR              [ reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .) ]
  ! XOR             [ reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .) ]
  ! CONCAT          [ reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .) ]
  ! PLUS            [ reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .) ]
  ! MINUS           [ reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .) ]
  ! MUL             [ reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .) ]
  ! DIV             [ reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .) ]
  ! SL              [ reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .) ]
  ! SR              [ reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .) ]
  ! MOD             [ reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .) ]
  ! IS_EQUAL        [ reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .) ]
  ! IS_SMALLER      [ reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .) ]
  ! IS_GREATER      [ reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 404 (static_expr -> static_expr BOOLEAN_OR static_expr .) ]
  ! BOOLEAN_OR      [ shift and go to state 572 ]
  ! LOGICAL_AND     [ shift and go to state 573 ]
  ! LOGICAL_OR      [ shift and go to state 574 ]
  ! LOGICAL_XOR     [ shift and go to state 575 ]


state 706

    (405) static_expr -> static_expr LOGICAL_AND static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    LOGICAL_AND     reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .)
    LOGICAL_OR      reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .)
    LOGICAL_XOR     reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .)
    SEMI            reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .)
    COMMA           reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .)
    RPAREN          reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .)
    RBRACKET        reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .)
    BOOLEAN_AND     shift and go to state 571
    BOOLEAN_OR      shift and go to state 572
    AND             shift and go to state 576
    OR              shift and go to state 577
    XOR             shift and go to state 578
    CONCAT          shift and go to state 579
    PLUS            shift and go to state 580
    MINUS           shift and go to state 581
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    SL              shift and go to state 584
    SR              shift and go to state 585
    MOD             shift and go to state 586
    IS_IDENTICAL    shift and go to state 587
    IS_NOT_IDENTICAL shift and go to state 588
    IS_EQUAL        shift and go to state 589
    IS_NOT_EQUAL    shift and go to state 590
    IS_SMALLER      shift and go to state 591
    IS_SMALLER_OR_EQUAL shift and go to state 592
    IS_GREATER      shift and go to state 593
    IS_GREATER_OR_EQUAL shift and go to state 594

  ! BOOLEAN_AND     [ reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .) ]
  ! AND             [ reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .) ]
  ! OR              [ reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .) ]
  ! XOR             [ reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .) ]
  ! CONCAT          [ reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .) ]
  ! PLUS            [ reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .) ]
  ! MINUS           [ reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .) ]
  ! MUL             [ reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .) ]
  ! DIV             [ reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .) ]
  ! SL              [ reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .) ]
  ! SR              [ reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .) ]
  ! MOD             [ reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .) ]
  ! IS_EQUAL        [ reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .) ]
  ! IS_SMALLER      [ reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .) ]
  ! IS_GREATER      [ reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 405 (static_expr -> static_expr LOGICAL_AND static_expr .) ]
  ! LOGICAL_AND     [ shift and go to state 573 ]
  ! LOGICAL_OR      [ shift and go to state 574 ]
  ! LOGICAL_XOR     [ shift and go to state 575 ]


state 707

    (406) static_expr -> static_expr LOGICAL_OR static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    LOGICAL_OR      reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .)
    SEMI            reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .)
    COMMA           reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .)
    RPAREN          reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .)
    RBRACKET        reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .)
    BOOLEAN_AND     shift and go to state 571
    BOOLEAN_OR      shift and go to state 572
    LOGICAL_AND     shift and go to state 573
    LOGICAL_XOR     shift and go to state 575
    AND             shift and go to state 576
    OR              shift and go to state 577
    XOR             shift and go to state 578
    CONCAT          shift and go to state 579
    PLUS            shift and go to state 580
    MINUS           shift and go to state 581
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    SL              shift and go to state 584
    SR              shift and go to state 585
    MOD             shift and go to state 586
    IS_IDENTICAL    shift and go to state 587
    IS_NOT_IDENTICAL shift and go to state 588
    IS_EQUAL        shift and go to state 589
    IS_NOT_EQUAL    shift and go to state 590
    IS_SMALLER      shift and go to state 591
    IS_SMALLER_OR_EQUAL shift and go to state 592
    IS_GREATER      shift and go to state 593
    IS_GREATER_OR_EQUAL shift and go to state 594

  ! BOOLEAN_AND     [ reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .) ]
  ! LOGICAL_AND     [ reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .) ]
  ! LOGICAL_XOR     [ reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .) ]
  ! AND             [ reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .) ]
  ! OR              [ reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .) ]
  ! XOR             [ reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .) ]
  ! CONCAT          [ reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .) ]
  ! PLUS            [ reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .) ]
  ! MINUS           [ reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .) ]
  ! MUL             [ reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .) ]
  ! DIV             [ reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .) ]
  ! SL              [ reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .) ]
  ! SR              [ reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .) ]
  ! MOD             [ reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .) ]
  ! IS_EQUAL        [ reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .) ]
  ! IS_SMALLER      [ reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .) ]
  ! IS_GREATER      [ reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 406 (static_expr -> static_expr LOGICAL_OR static_expr .) ]
  ! LOGICAL_OR      [ shift and go to state 574 ]


state 708

    (407) static_expr -> static_expr LOGICAL_XOR static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    LOGICAL_OR      reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .)
    LOGICAL_XOR     reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .)
    SEMI            reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .)
    COMMA           reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .)
    RPAREN          reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .)
    RBRACKET        reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .)
    BOOLEAN_AND     shift and go to state 571
    BOOLEAN_OR      shift and go to state 572
    LOGICAL_AND     shift and go to state 573
    AND             shift and go to state 576
    OR              shift and go to state 577
    XOR             shift and go to state 578
    CONCAT          shift and go to state 579
    PLUS            shift and go to state 580
    MINUS           shift and go to state 581
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    SL              shift and go to state 584
    SR              shift and go to state 585
    MOD             shift and go to state 586
    IS_IDENTICAL    shift and go to state 587
    IS_NOT_IDENTICAL shift and go to state 588
    IS_EQUAL        shift and go to state 589
    IS_NOT_EQUAL    shift and go to state 590
    IS_SMALLER      shift and go to state 591
    IS_SMALLER_OR_EQUAL shift and go to state 592
    IS_GREATER      shift and go to state 593
    IS_GREATER_OR_EQUAL shift and go to state 594

  ! BOOLEAN_AND     [ reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .) ]
  ! LOGICAL_AND     [ reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .) ]
  ! AND             [ reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .) ]
  ! OR              [ reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .) ]
  ! XOR             [ reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .) ]
  ! CONCAT          [ reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .) ]
  ! PLUS            [ reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .) ]
  ! MINUS           [ reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .) ]
  ! MUL             [ reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .) ]
  ! DIV             [ reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .) ]
  ! SL              [ reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .) ]
  ! SR              [ reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .) ]
  ! MOD             [ reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .) ]
  ! IS_EQUAL        [ reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .) ]
  ! IS_SMALLER      [ reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .) ]
  ! IS_GREATER      [ reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 407 (static_expr -> static_expr LOGICAL_XOR static_expr .) ]
  ! LOGICAL_OR      [ shift and go to state 574 ]
  ! LOGICAL_XOR     [ shift and go to state 575 ]


state 709

    (408) static_expr -> static_expr AND static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    BOOLEAN_AND     reduce using rule 408 (static_expr -> static_expr AND static_expr .)
    BOOLEAN_OR      reduce using rule 408 (static_expr -> static_expr AND static_expr .)
    LOGICAL_AND     reduce using rule 408 (static_expr -> static_expr AND static_expr .)
    LOGICAL_OR      reduce using rule 408 (static_expr -> static_expr AND static_expr .)
    LOGICAL_XOR     reduce using rule 408 (static_expr -> static_expr AND static_expr .)
    AND             reduce using rule 408 (static_expr -> static_expr AND static_expr .)
    OR              reduce using rule 408 (static_expr -> static_expr AND static_expr .)
    XOR             reduce using rule 408 (static_expr -> static_expr AND static_expr .)
    SEMI            reduce using rule 408 (static_expr -> static_expr AND static_expr .)
    COMMA           reduce using rule 408 (static_expr -> static_expr AND static_expr .)
    RPAREN          reduce using rule 408 (static_expr -> static_expr AND static_expr .)
    RBRACKET        reduce using rule 408 (static_expr -> static_expr AND static_expr .)
    CONCAT          shift and go to state 579
    PLUS            shift and go to state 580
    MINUS           shift and go to state 581
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    SL              shift and go to state 584
    SR              shift and go to state 585
    MOD             shift and go to state 586
    IS_IDENTICAL    shift and go to state 587
    IS_NOT_IDENTICAL shift and go to state 588
    IS_EQUAL        shift and go to state 589
    IS_NOT_EQUAL    shift and go to state 590
    IS_SMALLER      shift and go to state 591
    IS_SMALLER_OR_EQUAL shift and go to state 592
    IS_GREATER      shift and go to state 593
    IS_GREATER_OR_EQUAL shift and go to state 594

  ! CONCAT          [ reduce using rule 408 (static_expr -> static_expr AND static_expr .) ]
  ! PLUS            [ reduce using rule 408 (static_expr -> static_expr AND static_expr .) ]
  ! MINUS           [ reduce using rule 408 (static_expr -> static_expr AND static_expr .) ]
  ! MUL             [ reduce using rule 408 (static_expr -> static_expr AND static_expr .) ]
  ! DIV             [ reduce using rule 408 (static_expr -> static_expr AND static_expr .) ]
  ! SL              [ reduce using rule 408 (static_expr -> static_expr AND static_expr .) ]
  ! SR              [ reduce using rule 408 (static_expr -> static_expr AND static_expr .) ]
  ! MOD             [ reduce using rule 408 (static_expr -> static_expr AND static_expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 408 (static_expr -> static_expr AND static_expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 408 (static_expr -> static_expr AND static_expr .) ]
  ! IS_EQUAL        [ reduce using rule 408 (static_expr -> static_expr AND static_expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 408 (static_expr -> static_expr AND static_expr .) ]
  ! IS_SMALLER      [ reduce using rule 408 (static_expr -> static_expr AND static_expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 408 (static_expr -> static_expr AND static_expr .) ]
  ! IS_GREATER      [ reduce using rule 408 (static_expr -> static_expr AND static_expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 408 (static_expr -> static_expr AND static_expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 571 ]
  ! BOOLEAN_OR      [ shift and go to state 572 ]
  ! LOGICAL_AND     [ shift and go to state 573 ]
  ! LOGICAL_OR      [ shift and go to state 574 ]
  ! LOGICAL_XOR     [ shift and go to state 575 ]
  ! AND             [ shift and go to state 576 ]
  ! OR              [ shift and go to state 577 ]
  ! XOR             [ shift and go to state 578 ]


state 710

    (409) static_expr -> static_expr OR static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    BOOLEAN_AND     reduce using rule 409 (static_expr -> static_expr OR static_expr .)
    BOOLEAN_OR      reduce using rule 409 (static_expr -> static_expr OR static_expr .)
    LOGICAL_AND     reduce using rule 409 (static_expr -> static_expr OR static_expr .)
    LOGICAL_OR      reduce using rule 409 (static_expr -> static_expr OR static_expr .)
    LOGICAL_XOR     reduce using rule 409 (static_expr -> static_expr OR static_expr .)
    OR              reduce using rule 409 (static_expr -> static_expr OR static_expr .)
    SEMI            reduce using rule 409 (static_expr -> static_expr OR static_expr .)
    COMMA           reduce using rule 409 (static_expr -> static_expr OR static_expr .)
    RPAREN          reduce using rule 409 (static_expr -> static_expr OR static_expr .)
    RBRACKET        reduce using rule 409 (static_expr -> static_expr OR static_expr .)
    AND             shift and go to state 576
    XOR             shift and go to state 578
    CONCAT          shift and go to state 579
    PLUS            shift and go to state 580
    MINUS           shift and go to state 581
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    SL              shift and go to state 584
    SR              shift and go to state 585
    MOD             shift and go to state 586
    IS_IDENTICAL    shift and go to state 587
    IS_NOT_IDENTICAL shift and go to state 588
    IS_EQUAL        shift and go to state 589
    IS_NOT_EQUAL    shift and go to state 590
    IS_SMALLER      shift and go to state 591
    IS_SMALLER_OR_EQUAL shift and go to state 592
    IS_GREATER      shift and go to state 593
    IS_GREATER_OR_EQUAL shift and go to state 594

  ! AND             [ reduce using rule 409 (static_expr -> static_expr OR static_expr .) ]
  ! XOR             [ reduce using rule 409 (static_expr -> static_expr OR static_expr .) ]
  ! CONCAT          [ reduce using rule 409 (static_expr -> static_expr OR static_expr .) ]
  ! PLUS            [ reduce using rule 409 (static_expr -> static_expr OR static_expr .) ]
  ! MINUS           [ reduce using rule 409 (static_expr -> static_expr OR static_expr .) ]
  ! MUL             [ reduce using rule 409 (static_expr -> static_expr OR static_expr .) ]
  ! DIV             [ reduce using rule 409 (static_expr -> static_expr OR static_expr .) ]
  ! SL              [ reduce using rule 409 (static_expr -> static_expr OR static_expr .) ]
  ! SR              [ reduce using rule 409 (static_expr -> static_expr OR static_expr .) ]
  ! MOD             [ reduce using rule 409 (static_expr -> static_expr OR static_expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 409 (static_expr -> static_expr OR static_expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 409 (static_expr -> static_expr OR static_expr .) ]
  ! IS_EQUAL        [ reduce using rule 409 (static_expr -> static_expr OR static_expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 409 (static_expr -> static_expr OR static_expr .) ]
  ! IS_SMALLER      [ reduce using rule 409 (static_expr -> static_expr OR static_expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 409 (static_expr -> static_expr OR static_expr .) ]
  ! IS_GREATER      [ reduce using rule 409 (static_expr -> static_expr OR static_expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 409 (static_expr -> static_expr OR static_expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 571 ]
  ! BOOLEAN_OR      [ shift and go to state 572 ]
  ! LOGICAL_AND     [ shift and go to state 573 ]
  ! LOGICAL_OR      [ shift and go to state 574 ]
  ! LOGICAL_XOR     [ shift and go to state 575 ]
  ! OR              [ shift and go to state 577 ]


state 711

    (410) static_expr -> static_expr XOR static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    BOOLEAN_AND     reduce using rule 410 (static_expr -> static_expr XOR static_expr .)
    BOOLEAN_OR      reduce using rule 410 (static_expr -> static_expr XOR static_expr .)
    LOGICAL_AND     reduce using rule 410 (static_expr -> static_expr XOR static_expr .)
    LOGICAL_OR      reduce using rule 410 (static_expr -> static_expr XOR static_expr .)
    LOGICAL_XOR     reduce using rule 410 (static_expr -> static_expr XOR static_expr .)
    OR              reduce using rule 410 (static_expr -> static_expr XOR static_expr .)
    XOR             reduce using rule 410 (static_expr -> static_expr XOR static_expr .)
    SEMI            reduce using rule 410 (static_expr -> static_expr XOR static_expr .)
    COMMA           reduce using rule 410 (static_expr -> static_expr XOR static_expr .)
    RPAREN          reduce using rule 410 (static_expr -> static_expr XOR static_expr .)
    RBRACKET        reduce using rule 410 (static_expr -> static_expr XOR static_expr .)
    AND             shift and go to state 576
    CONCAT          shift and go to state 579
    PLUS            shift and go to state 580
    MINUS           shift and go to state 581
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    SL              shift and go to state 584
    SR              shift and go to state 585
    MOD             shift and go to state 586
    IS_IDENTICAL    shift and go to state 587
    IS_NOT_IDENTICAL shift and go to state 588
    IS_EQUAL        shift and go to state 589
    IS_NOT_EQUAL    shift and go to state 590
    IS_SMALLER      shift and go to state 591
    IS_SMALLER_OR_EQUAL shift and go to state 592
    IS_GREATER      shift and go to state 593
    IS_GREATER_OR_EQUAL shift and go to state 594

  ! AND             [ reduce using rule 410 (static_expr -> static_expr XOR static_expr .) ]
  ! CONCAT          [ reduce using rule 410 (static_expr -> static_expr XOR static_expr .) ]
  ! PLUS            [ reduce using rule 410 (static_expr -> static_expr XOR static_expr .) ]
  ! MINUS           [ reduce using rule 410 (static_expr -> static_expr XOR static_expr .) ]
  ! MUL             [ reduce using rule 410 (static_expr -> static_expr XOR static_expr .) ]
  ! DIV             [ reduce using rule 410 (static_expr -> static_expr XOR static_expr .) ]
  ! SL              [ reduce using rule 410 (static_expr -> static_expr XOR static_expr .) ]
  ! SR              [ reduce using rule 410 (static_expr -> static_expr XOR static_expr .) ]
  ! MOD             [ reduce using rule 410 (static_expr -> static_expr XOR static_expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 410 (static_expr -> static_expr XOR static_expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 410 (static_expr -> static_expr XOR static_expr .) ]
  ! IS_EQUAL        [ reduce using rule 410 (static_expr -> static_expr XOR static_expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 410 (static_expr -> static_expr XOR static_expr .) ]
  ! IS_SMALLER      [ reduce using rule 410 (static_expr -> static_expr XOR static_expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 410 (static_expr -> static_expr XOR static_expr .) ]
  ! IS_GREATER      [ reduce using rule 410 (static_expr -> static_expr XOR static_expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 410 (static_expr -> static_expr XOR static_expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 571 ]
  ! BOOLEAN_OR      [ shift and go to state 572 ]
  ! LOGICAL_AND     [ shift and go to state 573 ]
  ! LOGICAL_OR      [ shift and go to state 574 ]
  ! LOGICAL_XOR     [ shift and go to state 575 ]
  ! OR              [ shift and go to state 577 ]
  ! XOR             [ shift and go to state 578 ]


state 712

    (411) static_expr -> static_expr CONCAT static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    BOOLEAN_AND     reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .)
    BOOLEAN_OR      reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .)
    LOGICAL_AND     reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .)
    LOGICAL_OR      reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .)
    LOGICAL_XOR     reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .)
    AND             reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .)
    OR              reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .)
    XOR             reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .)
    CONCAT          reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .)
    PLUS            reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .)
    MINUS           reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .)
    SL              reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .)
    SR              reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .)
    IS_IDENTICAL    reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .)
    IS_NOT_IDENTICAL reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .)
    IS_EQUAL        reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .)
    IS_NOT_EQUAL    reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .)
    IS_SMALLER      reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .)
    IS_GREATER      reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .)
    IS_GREATER_OR_EQUAL reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .)
    SEMI            reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .)
    COMMA           reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .)
    RPAREN          reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .)
    RBRACKET        reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .)
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    MOD             shift and go to state 586

  ! MUL             [ reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .) ]
  ! DIV             [ reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .) ]
  ! MOD             [ reduce using rule 411 (static_expr -> static_expr CONCAT static_expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 571 ]
  ! BOOLEAN_OR      [ shift and go to state 572 ]
  ! LOGICAL_AND     [ shift and go to state 573 ]
  ! LOGICAL_OR      [ shift and go to state 574 ]
  ! LOGICAL_XOR     [ shift and go to state 575 ]
  ! AND             [ shift and go to state 576 ]
  ! OR              [ shift and go to state 577 ]
  ! XOR             [ shift and go to state 578 ]
  ! CONCAT          [ shift and go to state 579 ]
  ! PLUS            [ shift and go to state 580 ]
  ! MINUS           [ shift and go to state 581 ]
  ! SL              [ shift and go to state 584 ]
  ! SR              [ shift and go to state 585 ]
  ! IS_IDENTICAL    [ shift and go to state 587 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 588 ]
  ! IS_EQUAL        [ shift and go to state 589 ]
  ! IS_NOT_EQUAL    [ shift and go to state 590 ]
  ! IS_SMALLER      [ shift and go to state 591 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 592 ]
  ! IS_GREATER      [ shift and go to state 593 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 594 ]


state 713

    (412) static_expr -> static_expr PLUS static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    BOOLEAN_AND     reduce using rule 412 (static_expr -> static_expr PLUS static_expr .)
    BOOLEAN_OR      reduce using rule 412 (static_expr -> static_expr PLUS static_expr .)
    LOGICAL_AND     reduce using rule 412 (static_expr -> static_expr PLUS static_expr .)
    LOGICAL_OR      reduce using rule 412 (static_expr -> static_expr PLUS static_expr .)
    LOGICAL_XOR     reduce using rule 412 (static_expr -> static_expr PLUS static_expr .)
    AND             reduce using rule 412 (static_expr -> static_expr PLUS static_expr .)
    OR              reduce using rule 412 (static_expr -> static_expr PLUS static_expr .)
    XOR             reduce using rule 412 (static_expr -> static_expr PLUS static_expr .)
    CONCAT          reduce using rule 412 (static_expr -> static_expr PLUS static_expr .)
    PLUS            reduce using rule 412 (static_expr -> static_expr PLUS static_expr .)
    MINUS           reduce using rule 412 (static_expr -> static_expr PLUS static_expr .)
    SL              reduce using rule 412 (static_expr -> static_expr PLUS static_expr .)
    SR              reduce using rule 412 (static_expr -> static_expr PLUS static_expr .)
    IS_IDENTICAL    reduce using rule 412 (static_expr -> static_expr PLUS static_expr .)
    IS_NOT_IDENTICAL reduce using rule 412 (static_expr -> static_expr PLUS static_expr .)
    IS_EQUAL        reduce using rule 412 (static_expr -> static_expr PLUS static_expr .)
    IS_NOT_EQUAL    reduce using rule 412 (static_expr -> static_expr PLUS static_expr .)
    IS_SMALLER      reduce using rule 412 (static_expr -> static_expr PLUS static_expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 412 (static_expr -> static_expr PLUS static_expr .)
    IS_GREATER      reduce using rule 412 (static_expr -> static_expr PLUS static_expr .)
    IS_GREATER_OR_EQUAL reduce using rule 412 (static_expr -> static_expr PLUS static_expr .)
    SEMI            reduce using rule 412 (static_expr -> static_expr PLUS static_expr .)
    COMMA           reduce using rule 412 (static_expr -> static_expr PLUS static_expr .)
    RPAREN          reduce using rule 412 (static_expr -> static_expr PLUS static_expr .)
    RBRACKET        reduce using rule 412 (static_expr -> static_expr PLUS static_expr .)
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    MOD             shift and go to state 586

  ! MUL             [ reduce using rule 412 (static_expr -> static_expr PLUS static_expr .) ]
  ! DIV             [ reduce using rule 412 (static_expr -> static_expr PLUS static_expr .) ]
  ! MOD             [ reduce using rule 412 (static_expr -> static_expr PLUS static_expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 571 ]
  ! BOOLEAN_OR      [ shift and go to state 572 ]
  ! LOGICAL_AND     [ shift and go to state 573 ]
  ! LOGICAL_OR      [ shift and go to state 574 ]
  ! LOGICAL_XOR     [ shift and go to state 575 ]
  ! AND             [ shift and go to state 576 ]
  ! OR              [ shift and go to state 577 ]
  ! XOR             [ shift and go to state 578 ]
  ! CONCAT          [ shift and go to state 579 ]
  ! PLUS            [ shift and go to state 580 ]
  ! MINUS           [ shift and go to state 581 ]
  ! SL              [ shift and go to state 584 ]
  ! SR              [ shift and go to state 585 ]
  ! IS_IDENTICAL    [ shift and go to state 587 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 588 ]
  ! IS_EQUAL        [ shift and go to state 589 ]
  ! IS_NOT_EQUAL    [ shift and go to state 590 ]
  ! IS_SMALLER      [ shift and go to state 591 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 592 ]
  ! IS_GREATER      [ shift and go to state 593 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 594 ]


state 714

    (413) static_expr -> static_expr MINUS static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    BOOLEAN_AND     reduce using rule 413 (static_expr -> static_expr MINUS static_expr .)
    BOOLEAN_OR      reduce using rule 413 (static_expr -> static_expr MINUS static_expr .)
    LOGICAL_AND     reduce using rule 413 (static_expr -> static_expr MINUS static_expr .)
    LOGICAL_OR      reduce using rule 413 (static_expr -> static_expr MINUS static_expr .)
    LOGICAL_XOR     reduce using rule 413 (static_expr -> static_expr MINUS static_expr .)
    AND             reduce using rule 413 (static_expr -> static_expr MINUS static_expr .)
    OR              reduce using rule 413 (static_expr -> static_expr MINUS static_expr .)
    XOR             reduce using rule 413 (static_expr -> static_expr MINUS static_expr .)
    CONCAT          reduce using rule 413 (static_expr -> static_expr MINUS static_expr .)
    PLUS            reduce using rule 413 (static_expr -> static_expr MINUS static_expr .)
    MINUS           reduce using rule 413 (static_expr -> static_expr MINUS static_expr .)
    SL              reduce using rule 413 (static_expr -> static_expr MINUS static_expr .)
    SR              reduce using rule 413 (static_expr -> static_expr MINUS static_expr .)
    IS_IDENTICAL    reduce using rule 413 (static_expr -> static_expr MINUS static_expr .)
    IS_NOT_IDENTICAL reduce using rule 413 (static_expr -> static_expr MINUS static_expr .)
    IS_EQUAL        reduce using rule 413 (static_expr -> static_expr MINUS static_expr .)
    IS_NOT_EQUAL    reduce using rule 413 (static_expr -> static_expr MINUS static_expr .)
    IS_SMALLER      reduce using rule 413 (static_expr -> static_expr MINUS static_expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 413 (static_expr -> static_expr MINUS static_expr .)
    IS_GREATER      reduce using rule 413 (static_expr -> static_expr MINUS static_expr .)
    IS_GREATER_OR_EQUAL reduce using rule 413 (static_expr -> static_expr MINUS static_expr .)
    SEMI            reduce using rule 413 (static_expr -> static_expr MINUS static_expr .)
    COMMA           reduce using rule 413 (static_expr -> static_expr MINUS static_expr .)
    RPAREN          reduce using rule 413 (static_expr -> static_expr MINUS static_expr .)
    RBRACKET        reduce using rule 413 (static_expr -> static_expr MINUS static_expr .)
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    MOD             shift and go to state 586

  ! MUL             [ reduce using rule 413 (static_expr -> static_expr MINUS static_expr .) ]
  ! DIV             [ reduce using rule 413 (static_expr -> static_expr MINUS static_expr .) ]
  ! MOD             [ reduce using rule 413 (static_expr -> static_expr MINUS static_expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 571 ]
  ! BOOLEAN_OR      [ shift and go to state 572 ]
  ! LOGICAL_AND     [ shift and go to state 573 ]
  ! LOGICAL_OR      [ shift and go to state 574 ]
  ! LOGICAL_XOR     [ shift and go to state 575 ]
  ! AND             [ shift and go to state 576 ]
  ! OR              [ shift and go to state 577 ]
  ! XOR             [ shift and go to state 578 ]
  ! CONCAT          [ shift and go to state 579 ]
  ! PLUS            [ shift and go to state 580 ]
  ! MINUS           [ shift and go to state 581 ]
  ! SL              [ shift and go to state 584 ]
  ! SR              [ shift and go to state 585 ]
  ! IS_IDENTICAL    [ shift and go to state 587 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 588 ]
  ! IS_EQUAL        [ shift and go to state 589 ]
  ! IS_NOT_EQUAL    [ shift and go to state 590 ]
  ! IS_SMALLER      [ shift and go to state 591 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 592 ]
  ! IS_GREATER      [ shift and go to state 593 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 594 ]


state 715

    (414) static_expr -> static_expr MUL static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    BOOLEAN_AND     reduce using rule 414 (static_expr -> static_expr MUL static_expr .)
    BOOLEAN_OR      reduce using rule 414 (static_expr -> static_expr MUL static_expr .)
    LOGICAL_AND     reduce using rule 414 (static_expr -> static_expr MUL static_expr .)
    LOGICAL_OR      reduce using rule 414 (static_expr -> static_expr MUL static_expr .)
    LOGICAL_XOR     reduce using rule 414 (static_expr -> static_expr MUL static_expr .)
    AND             reduce using rule 414 (static_expr -> static_expr MUL static_expr .)
    OR              reduce using rule 414 (static_expr -> static_expr MUL static_expr .)
    XOR             reduce using rule 414 (static_expr -> static_expr MUL static_expr .)
    CONCAT          reduce using rule 414 (static_expr -> static_expr MUL static_expr .)
    PLUS            reduce using rule 414 (static_expr -> static_expr MUL static_expr .)
    MINUS           reduce using rule 414 (static_expr -> static_expr MUL static_expr .)
    MUL             reduce using rule 414 (static_expr -> static_expr MUL static_expr .)
    DIV             reduce using rule 414 (static_expr -> static_expr MUL static_expr .)
    SL              reduce using rule 414 (static_expr -> static_expr MUL static_expr .)
    SR              reduce using rule 414 (static_expr -> static_expr MUL static_expr .)
    MOD             reduce using rule 414 (static_expr -> static_expr MUL static_expr .)
    IS_IDENTICAL    reduce using rule 414 (static_expr -> static_expr MUL static_expr .)
    IS_NOT_IDENTICAL reduce using rule 414 (static_expr -> static_expr MUL static_expr .)
    IS_EQUAL        reduce using rule 414 (static_expr -> static_expr MUL static_expr .)
    IS_NOT_EQUAL    reduce using rule 414 (static_expr -> static_expr MUL static_expr .)
    IS_SMALLER      reduce using rule 414 (static_expr -> static_expr MUL static_expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 414 (static_expr -> static_expr MUL static_expr .)
    IS_GREATER      reduce using rule 414 (static_expr -> static_expr MUL static_expr .)
    IS_GREATER_OR_EQUAL reduce using rule 414 (static_expr -> static_expr MUL static_expr .)
    SEMI            reduce using rule 414 (static_expr -> static_expr MUL static_expr .)
    COMMA           reduce using rule 414 (static_expr -> static_expr MUL static_expr .)
    RPAREN          reduce using rule 414 (static_expr -> static_expr MUL static_expr .)
    RBRACKET        reduce using rule 414 (static_expr -> static_expr MUL static_expr .)

  ! BOOLEAN_AND     [ shift and go to state 571 ]
  ! BOOLEAN_OR      [ shift and go to state 572 ]
  ! LOGICAL_AND     [ shift and go to state 573 ]
  ! LOGICAL_OR      [ shift and go to state 574 ]
  ! LOGICAL_XOR     [ shift and go to state 575 ]
  ! AND             [ shift and go to state 576 ]
  ! OR              [ shift and go to state 577 ]
  ! XOR             [ shift and go to state 578 ]
  ! CONCAT          [ shift and go to state 579 ]
  ! PLUS            [ shift and go to state 580 ]
  ! MINUS           [ shift and go to state 581 ]
  ! MUL             [ shift and go to state 582 ]
  ! DIV             [ shift and go to state 583 ]
  ! SL              [ shift and go to state 584 ]
  ! SR              [ shift and go to state 585 ]
  ! MOD             [ shift and go to state 586 ]
  ! IS_IDENTICAL    [ shift and go to state 587 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 588 ]
  ! IS_EQUAL        [ shift and go to state 589 ]
  ! IS_NOT_EQUAL    [ shift and go to state 590 ]
  ! IS_SMALLER      [ shift and go to state 591 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 592 ]
  ! IS_GREATER      [ shift and go to state 593 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 594 ]


state 716

    (415) static_expr -> static_expr DIV static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    BOOLEAN_AND     reduce using rule 415 (static_expr -> static_expr DIV static_expr .)
    BOOLEAN_OR      reduce using rule 415 (static_expr -> static_expr DIV static_expr .)
    LOGICAL_AND     reduce using rule 415 (static_expr -> static_expr DIV static_expr .)
    LOGICAL_OR      reduce using rule 415 (static_expr -> static_expr DIV static_expr .)
    LOGICAL_XOR     reduce using rule 415 (static_expr -> static_expr DIV static_expr .)
    AND             reduce using rule 415 (static_expr -> static_expr DIV static_expr .)
    OR              reduce using rule 415 (static_expr -> static_expr DIV static_expr .)
    XOR             reduce using rule 415 (static_expr -> static_expr DIV static_expr .)
    CONCAT          reduce using rule 415 (static_expr -> static_expr DIV static_expr .)
    PLUS            reduce using rule 415 (static_expr -> static_expr DIV static_expr .)
    MINUS           reduce using rule 415 (static_expr -> static_expr DIV static_expr .)
    MUL             reduce using rule 415 (static_expr -> static_expr DIV static_expr .)
    DIV             reduce using rule 415 (static_expr -> static_expr DIV static_expr .)
    SL              reduce using rule 415 (static_expr -> static_expr DIV static_expr .)
    SR              reduce using rule 415 (static_expr -> static_expr DIV static_expr .)
    MOD             reduce using rule 415 (static_expr -> static_expr DIV static_expr .)
    IS_IDENTICAL    reduce using rule 415 (static_expr -> static_expr DIV static_expr .)
    IS_NOT_IDENTICAL reduce using rule 415 (static_expr -> static_expr DIV static_expr .)
    IS_EQUAL        reduce using rule 415 (static_expr -> static_expr DIV static_expr .)
    IS_NOT_EQUAL    reduce using rule 415 (static_expr -> static_expr DIV static_expr .)
    IS_SMALLER      reduce using rule 415 (static_expr -> static_expr DIV static_expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 415 (static_expr -> static_expr DIV static_expr .)
    IS_GREATER      reduce using rule 415 (static_expr -> static_expr DIV static_expr .)
    IS_GREATER_OR_EQUAL reduce using rule 415 (static_expr -> static_expr DIV static_expr .)
    SEMI            reduce using rule 415 (static_expr -> static_expr DIV static_expr .)
    COMMA           reduce using rule 415 (static_expr -> static_expr DIV static_expr .)
    RPAREN          reduce using rule 415 (static_expr -> static_expr DIV static_expr .)
    RBRACKET        reduce using rule 415 (static_expr -> static_expr DIV static_expr .)

  ! BOOLEAN_AND     [ shift and go to state 571 ]
  ! BOOLEAN_OR      [ shift and go to state 572 ]
  ! LOGICAL_AND     [ shift and go to state 573 ]
  ! LOGICAL_OR      [ shift and go to state 574 ]
  ! LOGICAL_XOR     [ shift and go to state 575 ]
  ! AND             [ shift and go to state 576 ]
  ! OR              [ shift and go to state 577 ]
  ! XOR             [ shift and go to state 578 ]
  ! CONCAT          [ shift and go to state 579 ]
  ! PLUS            [ shift and go to state 580 ]
  ! MINUS           [ shift and go to state 581 ]
  ! MUL             [ shift and go to state 582 ]
  ! DIV             [ shift and go to state 583 ]
  ! SL              [ shift and go to state 584 ]
  ! SR              [ shift and go to state 585 ]
  ! MOD             [ shift and go to state 586 ]
  ! IS_IDENTICAL    [ shift and go to state 587 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 588 ]
  ! IS_EQUAL        [ shift and go to state 589 ]
  ! IS_NOT_EQUAL    [ shift and go to state 590 ]
  ! IS_SMALLER      [ shift and go to state 591 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 592 ]
  ! IS_GREATER      [ shift and go to state 593 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 594 ]


state 717

    (416) static_expr -> static_expr SL static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    BOOLEAN_AND     reduce using rule 416 (static_expr -> static_expr SL static_expr .)
    BOOLEAN_OR      reduce using rule 416 (static_expr -> static_expr SL static_expr .)
    LOGICAL_AND     reduce using rule 416 (static_expr -> static_expr SL static_expr .)
    LOGICAL_OR      reduce using rule 416 (static_expr -> static_expr SL static_expr .)
    LOGICAL_XOR     reduce using rule 416 (static_expr -> static_expr SL static_expr .)
    AND             reduce using rule 416 (static_expr -> static_expr SL static_expr .)
    OR              reduce using rule 416 (static_expr -> static_expr SL static_expr .)
    XOR             reduce using rule 416 (static_expr -> static_expr SL static_expr .)
    SL              reduce using rule 416 (static_expr -> static_expr SL static_expr .)
    SR              reduce using rule 416 (static_expr -> static_expr SL static_expr .)
    IS_IDENTICAL    reduce using rule 416 (static_expr -> static_expr SL static_expr .)
    IS_NOT_IDENTICAL reduce using rule 416 (static_expr -> static_expr SL static_expr .)
    IS_EQUAL        reduce using rule 416 (static_expr -> static_expr SL static_expr .)
    IS_NOT_EQUAL    reduce using rule 416 (static_expr -> static_expr SL static_expr .)
    IS_SMALLER      reduce using rule 416 (static_expr -> static_expr SL static_expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 416 (static_expr -> static_expr SL static_expr .)
    IS_GREATER      reduce using rule 416 (static_expr -> static_expr SL static_expr .)
    IS_GREATER_OR_EQUAL reduce using rule 416 (static_expr -> static_expr SL static_expr .)
    SEMI            reduce using rule 416 (static_expr -> static_expr SL static_expr .)
    COMMA           reduce using rule 416 (static_expr -> static_expr SL static_expr .)
    RPAREN          reduce using rule 416 (static_expr -> static_expr SL static_expr .)
    RBRACKET        reduce using rule 416 (static_expr -> static_expr SL static_expr .)
    CONCAT          shift and go to state 579
    PLUS            shift and go to state 580
    MINUS           shift and go to state 581
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    MOD             shift and go to state 586

  ! CONCAT          [ reduce using rule 416 (static_expr -> static_expr SL static_expr .) ]
  ! PLUS            [ reduce using rule 416 (static_expr -> static_expr SL static_expr .) ]
  ! MINUS           [ reduce using rule 416 (static_expr -> static_expr SL static_expr .) ]
  ! MUL             [ reduce using rule 416 (static_expr -> static_expr SL static_expr .) ]
  ! DIV             [ reduce using rule 416 (static_expr -> static_expr SL static_expr .) ]
  ! MOD             [ reduce using rule 416 (static_expr -> static_expr SL static_expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 571 ]
  ! BOOLEAN_OR      [ shift and go to state 572 ]
  ! LOGICAL_AND     [ shift and go to state 573 ]
  ! LOGICAL_OR      [ shift and go to state 574 ]
  ! LOGICAL_XOR     [ shift and go to state 575 ]
  ! AND             [ shift and go to state 576 ]
  ! OR              [ shift and go to state 577 ]
  ! XOR             [ shift and go to state 578 ]
  ! SL              [ shift and go to state 584 ]
  ! SR              [ shift and go to state 585 ]
  ! IS_IDENTICAL    [ shift and go to state 587 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 588 ]
  ! IS_EQUAL        [ shift and go to state 589 ]
  ! IS_NOT_EQUAL    [ shift and go to state 590 ]
  ! IS_SMALLER      [ shift and go to state 591 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 592 ]
  ! IS_GREATER      [ shift and go to state 593 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 594 ]


state 718

    (417) static_expr -> static_expr SR static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    BOOLEAN_AND     reduce using rule 417 (static_expr -> static_expr SR static_expr .)
    BOOLEAN_OR      reduce using rule 417 (static_expr -> static_expr SR static_expr .)
    LOGICAL_AND     reduce using rule 417 (static_expr -> static_expr SR static_expr .)
    LOGICAL_OR      reduce using rule 417 (static_expr -> static_expr SR static_expr .)
    LOGICAL_XOR     reduce using rule 417 (static_expr -> static_expr SR static_expr .)
    AND             reduce using rule 417 (static_expr -> static_expr SR static_expr .)
    OR              reduce using rule 417 (static_expr -> static_expr SR static_expr .)
    XOR             reduce using rule 417 (static_expr -> static_expr SR static_expr .)
    SL              reduce using rule 417 (static_expr -> static_expr SR static_expr .)
    SR              reduce using rule 417 (static_expr -> static_expr SR static_expr .)
    IS_IDENTICAL    reduce using rule 417 (static_expr -> static_expr SR static_expr .)
    IS_NOT_IDENTICAL reduce using rule 417 (static_expr -> static_expr SR static_expr .)
    IS_EQUAL        reduce using rule 417 (static_expr -> static_expr SR static_expr .)
    IS_NOT_EQUAL    reduce using rule 417 (static_expr -> static_expr SR static_expr .)
    IS_SMALLER      reduce using rule 417 (static_expr -> static_expr SR static_expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 417 (static_expr -> static_expr SR static_expr .)
    IS_GREATER      reduce using rule 417 (static_expr -> static_expr SR static_expr .)
    IS_GREATER_OR_EQUAL reduce using rule 417 (static_expr -> static_expr SR static_expr .)
    SEMI            reduce using rule 417 (static_expr -> static_expr SR static_expr .)
    COMMA           reduce using rule 417 (static_expr -> static_expr SR static_expr .)
    RPAREN          reduce using rule 417 (static_expr -> static_expr SR static_expr .)
    RBRACKET        reduce using rule 417 (static_expr -> static_expr SR static_expr .)
    CONCAT          shift and go to state 579
    PLUS            shift and go to state 580
    MINUS           shift and go to state 581
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    MOD             shift and go to state 586

  ! CONCAT          [ reduce using rule 417 (static_expr -> static_expr SR static_expr .) ]
  ! PLUS            [ reduce using rule 417 (static_expr -> static_expr SR static_expr .) ]
  ! MINUS           [ reduce using rule 417 (static_expr -> static_expr SR static_expr .) ]
  ! MUL             [ reduce using rule 417 (static_expr -> static_expr SR static_expr .) ]
  ! DIV             [ reduce using rule 417 (static_expr -> static_expr SR static_expr .) ]
  ! MOD             [ reduce using rule 417 (static_expr -> static_expr SR static_expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 571 ]
  ! BOOLEAN_OR      [ shift and go to state 572 ]
  ! LOGICAL_AND     [ shift and go to state 573 ]
  ! LOGICAL_OR      [ shift and go to state 574 ]
  ! LOGICAL_XOR     [ shift and go to state 575 ]
  ! AND             [ shift and go to state 576 ]
  ! OR              [ shift and go to state 577 ]
  ! XOR             [ shift and go to state 578 ]
  ! SL              [ shift and go to state 584 ]
  ! SR              [ shift and go to state 585 ]
  ! IS_IDENTICAL    [ shift and go to state 587 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 588 ]
  ! IS_EQUAL        [ shift and go to state 589 ]
  ! IS_NOT_EQUAL    [ shift and go to state 590 ]
  ! IS_SMALLER      [ shift and go to state 591 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 592 ]
  ! IS_GREATER      [ shift and go to state 593 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 594 ]


state 719

    (418) static_expr -> static_expr MOD static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    BOOLEAN_AND     reduce using rule 418 (static_expr -> static_expr MOD static_expr .)
    BOOLEAN_OR      reduce using rule 418 (static_expr -> static_expr MOD static_expr .)
    LOGICAL_AND     reduce using rule 418 (static_expr -> static_expr MOD static_expr .)
    LOGICAL_OR      reduce using rule 418 (static_expr -> static_expr MOD static_expr .)
    LOGICAL_XOR     reduce using rule 418 (static_expr -> static_expr MOD static_expr .)
    AND             reduce using rule 418 (static_expr -> static_expr MOD static_expr .)
    OR              reduce using rule 418 (static_expr -> static_expr MOD static_expr .)
    XOR             reduce using rule 418 (static_expr -> static_expr MOD static_expr .)
    CONCAT          reduce using rule 418 (static_expr -> static_expr MOD static_expr .)
    PLUS            reduce using rule 418 (static_expr -> static_expr MOD static_expr .)
    MINUS           reduce using rule 418 (static_expr -> static_expr MOD static_expr .)
    MUL             reduce using rule 418 (static_expr -> static_expr MOD static_expr .)
    DIV             reduce using rule 418 (static_expr -> static_expr MOD static_expr .)
    SL              reduce using rule 418 (static_expr -> static_expr MOD static_expr .)
    SR              reduce using rule 418 (static_expr -> static_expr MOD static_expr .)
    MOD             reduce using rule 418 (static_expr -> static_expr MOD static_expr .)
    IS_IDENTICAL    reduce using rule 418 (static_expr -> static_expr MOD static_expr .)
    IS_NOT_IDENTICAL reduce using rule 418 (static_expr -> static_expr MOD static_expr .)
    IS_EQUAL        reduce using rule 418 (static_expr -> static_expr MOD static_expr .)
    IS_NOT_EQUAL    reduce using rule 418 (static_expr -> static_expr MOD static_expr .)
    IS_SMALLER      reduce using rule 418 (static_expr -> static_expr MOD static_expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 418 (static_expr -> static_expr MOD static_expr .)
    IS_GREATER      reduce using rule 418 (static_expr -> static_expr MOD static_expr .)
    IS_GREATER_OR_EQUAL reduce using rule 418 (static_expr -> static_expr MOD static_expr .)
    SEMI            reduce using rule 418 (static_expr -> static_expr MOD static_expr .)
    COMMA           reduce using rule 418 (static_expr -> static_expr MOD static_expr .)
    RPAREN          reduce using rule 418 (static_expr -> static_expr MOD static_expr .)
    RBRACKET        reduce using rule 418 (static_expr -> static_expr MOD static_expr .)

  ! BOOLEAN_AND     [ shift and go to state 571 ]
  ! BOOLEAN_OR      [ shift and go to state 572 ]
  ! LOGICAL_AND     [ shift and go to state 573 ]
  ! LOGICAL_OR      [ shift and go to state 574 ]
  ! LOGICAL_XOR     [ shift and go to state 575 ]
  ! AND             [ shift and go to state 576 ]
  ! OR              [ shift and go to state 577 ]
  ! XOR             [ shift and go to state 578 ]
  ! CONCAT          [ shift and go to state 579 ]
  ! PLUS            [ shift and go to state 580 ]
  ! MINUS           [ shift and go to state 581 ]
  ! MUL             [ shift and go to state 582 ]
  ! DIV             [ shift and go to state 583 ]
  ! SL              [ shift and go to state 584 ]
  ! SR              [ shift and go to state 585 ]
  ! MOD             [ shift and go to state 586 ]
  ! IS_IDENTICAL    [ shift and go to state 587 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 588 ]
  ! IS_EQUAL        [ shift and go to state 589 ]
  ! IS_NOT_EQUAL    [ shift and go to state 590 ]
  ! IS_SMALLER      [ shift and go to state 591 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 592 ]
  ! IS_GREATER      [ shift and go to state 593 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 594 ]


state 720

    (419) static_expr -> static_expr IS_IDENTICAL static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    BOOLEAN_AND     reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .)
    BOOLEAN_OR      reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .)
    LOGICAL_AND     reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .)
    LOGICAL_OR      reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .)
    LOGICAL_XOR     reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .)
    AND             reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .)
    OR              reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .)
    XOR             reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .)
    IS_IDENTICAL    reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .)
    IS_NOT_IDENTICAL reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .)
    IS_EQUAL        reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .)
    IS_NOT_EQUAL    reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .)
    SEMI            reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .)
    COMMA           reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .)
    RPAREN          reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .)
    RBRACKET        reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .)
    CONCAT          shift and go to state 579
    PLUS            shift and go to state 580
    MINUS           shift and go to state 581
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    SL              shift and go to state 584
    SR              shift and go to state 585
    MOD             shift and go to state 586
    IS_SMALLER      shift and go to state 591
    IS_SMALLER_OR_EQUAL shift and go to state 592
    IS_GREATER      shift and go to state 593
    IS_GREATER_OR_EQUAL shift and go to state 594

  ! CONCAT          [ reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .) ]
  ! PLUS            [ reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .) ]
  ! MINUS           [ reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .) ]
  ! MUL             [ reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .) ]
  ! DIV             [ reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .) ]
  ! SL              [ reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .) ]
  ! SR              [ reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .) ]
  ! MOD             [ reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .) ]
  ! IS_SMALLER      [ reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .) ]
  ! IS_GREATER      [ reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 419 (static_expr -> static_expr IS_IDENTICAL static_expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 571 ]
  ! BOOLEAN_OR      [ shift and go to state 572 ]
  ! LOGICAL_AND     [ shift and go to state 573 ]
  ! LOGICAL_OR      [ shift and go to state 574 ]
  ! LOGICAL_XOR     [ shift and go to state 575 ]
  ! AND             [ shift and go to state 576 ]
  ! OR              [ shift and go to state 577 ]
  ! XOR             [ shift and go to state 578 ]
  ! IS_IDENTICAL    [ shift and go to state 587 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 588 ]
  ! IS_EQUAL        [ shift and go to state 589 ]
  ! IS_NOT_EQUAL    [ shift and go to state 590 ]


state 721

    (420) static_expr -> static_expr IS_NOT_IDENTICAL static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    BOOLEAN_AND     reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .)
    BOOLEAN_OR      reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .)
    LOGICAL_AND     reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .)
    LOGICAL_OR      reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .)
    LOGICAL_XOR     reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .)
    AND             reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .)
    OR              reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .)
    XOR             reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .)
    IS_IDENTICAL    reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .)
    IS_NOT_IDENTICAL reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .)
    IS_EQUAL        reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .)
    IS_NOT_EQUAL    reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .)
    SEMI            reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .)
    COMMA           reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .)
    RPAREN          reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .)
    RBRACKET        reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .)
    CONCAT          shift and go to state 579
    PLUS            shift and go to state 580
    MINUS           shift and go to state 581
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    SL              shift and go to state 584
    SR              shift and go to state 585
    MOD             shift and go to state 586
    IS_SMALLER      shift and go to state 591
    IS_SMALLER_OR_EQUAL shift and go to state 592
    IS_GREATER      shift and go to state 593
    IS_GREATER_OR_EQUAL shift and go to state 594

  ! CONCAT          [ reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .) ]
  ! PLUS            [ reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .) ]
  ! MINUS           [ reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .) ]
  ! MUL             [ reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .) ]
  ! DIV             [ reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .) ]
  ! SL              [ reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .) ]
  ! SR              [ reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .) ]
  ! MOD             [ reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .) ]
  ! IS_SMALLER      [ reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .) ]
  ! IS_GREATER      [ reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 420 (static_expr -> static_expr IS_NOT_IDENTICAL static_expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 571 ]
  ! BOOLEAN_OR      [ shift and go to state 572 ]
  ! LOGICAL_AND     [ shift and go to state 573 ]
  ! LOGICAL_OR      [ shift and go to state 574 ]
  ! LOGICAL_XOR     [ shift and go to state 575 ]
  ! AND             [ shift and go to state 576 ]
  ! OR              [ shift and go to state 577 ]
  ! XOR             [ shift and go to state 578 ]
  ! IS_IDENTICAL    [ shift and go to state 587 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 588 ]
  ! IS_EQUAL        [ shift and go to state 589 ]
  ! IS_NOT_EQUAL    [ shift and go to state 590 ]


state 722

    (421) static_expr -> static_expr IS_EQUAL static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    BOOLEAN_AND     reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .)
    BOOLEAN_OR      reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .)
    LOGICAL_AND     reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .)
    LOGICAL_OR      reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .)
    LOGICAL_XOR     reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .)
    AND             reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .)
    OR              reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .)
    XOR             reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .)
    IS_IDENTICAL    reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .)
    IS_NOT_IDENTICAL reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .)
    IS_EQUAL        reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .)
    IS_NOT_EQUAL    reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .)
    SEMI            reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .)
    COMMA           reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .)
    RPAREN          reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .)
    RBRACKET        reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .)
    CONCAT          shift and go to state 579
    PLUS            shift and go to state 580
    MINUS           shift and go to state 581
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    SL              shift and go to state 584
    SR              shift and go to state 585
    MOD             shift and go to state 586
    IS_SMALLER      shift and go to state 591
    IS_SMALLER_OR_EQUAL shift and go to state 592
    IS_GREATER      shift and go to state 593
    IS_GREATER_OR_EQUAL shift and go to state 594

  ! CONCAT          [ reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .) ]
  ! PLUS            [ reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .) ]
  ! MINUS           [ reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .) ]
  ! MUL             [ reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .) ]
  ! DIV             [ reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .) ]
  ! SL              [ reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .) ]
  ! SR              [ reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .) ]
  ! MOD             [ reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .) ]
  ! IS_SMALLER      [ reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .) ]
  ! IS_GREATER      [ reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 421 (static_expr -> static_expr IS_EQUAL static_expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 571 ]
  ! BOOLEAN_OR      [ shift and go to state 572 ]
  ! LOGICAL_AND     [ shift and go to state 573 ]
  ! LOGICAL_OR      [ shift and go to state 574 ]
  ! LOGICAL_XOR     [ shift and go to state 575 ]
  ! AND             [ shift and go to state 576 ]
  ! OR              [ shift and go to state 577 ]
  ! XOR             [ shift and go to state 578 ]
  ! IS_IDENTICAL    [ shift and go to state 587 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 588 ]
  ! IS_EQUAL        [ shift and go to state 589 ]
  ! IS_NOT_EQUAL    [ shift and go to state 590 ]


state 723

    (422) static_expr -> static_expr IS_NOT_EQUAL static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    BOOLEAN_AND     reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .)
    BOOLEAN_OR      reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .)
    LOGICAL_AND     reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .)
    LOGICAL_OR      reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .)
    LOGICAL_XOR     reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .)
    AND             reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .)
    OR              reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .)
    XOR             reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .)
    IS_IDENTICAL    reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .)
    IS_NOT_IDENTICAL reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .)
    IS_EQUAL        reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .)
    IS_NOT_EQUAL    reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .)
    SEMI            reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .)
    COMMA           reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .)
    RPAREN          reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .)
    RBRACKET        reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .)
    CONCAT          shift and go to state 579
    PLUS            shift and go to state 580
    MINUS           shift and go to state 581
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    SL              shift and go to state 584
    SR              shift and go to state 585
    MOD             shift and go to state 586
    IS_SMALLER      shift and go to state 591
    IS_SMALLER_OR_EQUAL shift and go to state 592
    IS_GREATER      shift and go to state 593
    IS_GREATER_OR_EQUAL shift and go to state 594

  ! CONCAT          [ reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .) ]
  ! PLUS            [ reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .) ]
  ! MINUS           [ reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .) ]
  ! MUL             [ reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .) ]
  ! DIV             [ reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .) ]
  ! SL              [ reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .) ]
  ! SR              [ reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .) ]
  ! MOD             [ reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .) ]
  ! IS_SMALLER      [ reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .) ]
  ! IS_GREATER      [ reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 422 (static_expr -> static_expr IS_NOT_EQUAL static_expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 571 ]
  ! BOOLEAN_OR      [ shift and go to state 572 ]
  ! LOGICAL_AND     [ shift and go to state 573 ]
  ! LOGICAL_OR      [ shift and go to state 574 ]
  ! LOGICAL_XOR     [ shift and go to state 575 ]
  ! AND             [ shift and go to state 576 ]
  ! OR              [ shift and go to state 577 ]
  ! XOR             [ shift and go to state 578 ]
  ! IS_IDENTICAL    [ shift and go to state 587 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 588 ]
  ! IS_EQUAL        [ shift and go to state 589 ]
  ! IS_NOT_EQUAL    [ shift and go to state 590 ]


state 724

    (423) static_expr -> static_expr IS_SMALLER static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    BOOLEAN_AND     reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .)
    BOOLEAN_OR      reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .)
    LOGICAL_AND     reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .)
    LOGICAL_OR      reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .)
    LOGICAL_XOR     reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .)
    AND             reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .)
    OR              reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .)
    XOR             reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .)
    IS_IDENTICAL    reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .)
    IS_NOT_IDENTICAL reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .)
    IS_EQUAL        reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .)
    IS_NOT_EQUAL    reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .)
    IS_SMALLER      reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .)
    IS_GREATER      reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .)
    IS_GREATER_OR_EQUAL reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .)
    SEMI            reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .)
    COMMA           reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .)
    RPAREN          reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .)
    RBRACKET        reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .)
    CONCAT          shift and go to state 579
    PLUS            shift and go to state 580
    MINUS           shift and go to state 581
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    SL              shift and go to state 584
    SR              shift and go to state 585
    MOD             shift and go to state 586

  ! CONCAT          [ reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .) ]
  ! PLUS            [ reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .) ]
  ! MINUS           [ reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .) ]
  ! MUL             [ reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .) ]
  ! DIV             [ reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .) ]
  ! SL              [ reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .) ]
  ! SR              [ reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .) ]
  ! MOD             [ reduce using rule 423 (static_expr -> static_expr IS_SMALLER static_expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 571 ]
  ! BOOLEAN_OR      [ shift and go to state 572 ]
  ! LOGICAL_AND     [ shift and go to state 573 ]
  ! LOGICAL_OR      [ shift and go to state 574 ]
  ! LOGICAL_XOR     [ shift and go to state 575 ]
  ! AND             [ shift and go to state 576 ]
  ! OR              [ shift and go to state 577 ]
  ! XOR             [ shift and go to state 578 ]
  ! IS_IDENTICAL    [ shift and go to state 587 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 588 ]
  ! IS_EQUAL        [ shift and go to state 589 ]
  ! IS_NOT_EQUAL    [ shift and go to state 590 ]
  ! IS_SMALLER      [ shift and go to state 591 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 592 ]
  ! IS_GREATER      [ shift and go to state 593 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 594 ]


state 725

    (424) static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    BOOLEAN_AND     reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .)
    BOOLEAN_OR      reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .)
    LOGICAL_AND     reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .)
    LOGICAL_OR      reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .)
    LOGICAL_XOR     reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .)
    AND             reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .)
    OR              reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .)
    XOR             reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .)
    IS_IDENTICAL    reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .)
    IS_NOT_IDENTICAL reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .)
    IS_EQUAL        reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .)
    IS_NOT_EQUAL    reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .)
    IS_SMALLER      reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .)
    IS_GREATER      reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .)
    IS_GREATER_OR_EQUAL reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .)
    SEMI            reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .)
    COMMA           reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .)
    RPAREN          reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .)
    RBRACKET        reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .)
    CONCAT          shift and go to state 579
    PLUS            shift and go to state 580
    MINUS           shift and go to state 581
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    SL              shift and go to state 584
    SR              shift and go to state 585
    MOD             shift and go to state 586

  ! CONCAT          [ reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .) ]
  ! PLUS            [ reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .) ]
  ! MINUS           [ reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .) ]
  ! MUL             [ reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .) ]
  ! DIV             [ reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .) ]
  ! SL              [ reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .) ]
  ! SR              [ reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .) ]
  ! MOD             [ reduce using rule 424 (static_expr -> static_expr IS_SMALLER_OR_EQUAL static_expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 571 ]
  ! BOOLEAN_OR      [ shift and go to state 572 ]
  ! LOGICAL_AND     [ shift and go to state 573 ]
  ! LOGICAL_OR      [ shift and go to state 574 ]
  ! LOGICAL_XOR     [ shift and go to state 575 ]
  ! AND             [ shift and go to state 576 ]
  ! OR              [ shift and go to state 577 ]
  ! XOR             [ shift and go to state 578 ]
  ! IS_IDENTICAL    [ shift and go to state 587 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 588 ]
  ! IS_EQUAL        [ shift and go to state 589 ]
  ! IS_NOT_EQUAL    [ shift and go to state 590 ]
  ! IS_SMALLER      [ shift and go to state 591 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 592 ]
  ! IS_GREATER      [ shift and go to state 593 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 594 ]


state 726

    (425) static_expr -> static_expr IS_GREATER static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    BOOLEAN_AND     reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .)
    BOOLEAN_OR      reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .)
    LOGICAL_AND     reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .)
    LOGICAL_OR      reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .)
    LOGICAL_XOR     reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .)
    AND             reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .)
    OR              reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .)
    XOR             reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .)
    IS_IDENTICAL    reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .)
    IS_NOT_IDENTICAL reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .)
    IS_EQUAL        reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .)
    IS_NOT_EQUAL    reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .)
    IS_SMALLER      reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .)
    IS_GREATER      reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .)
    IS_GREATER_OR_EQUAL reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .)
    SEMI            reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .)
    COMMA           reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .)
    RPAREN          reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .)
    RBRACKET        reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .)
    CONCAT          shift and go to state 579
    PLUS            shift and go to state 580
    MINUS           shift and go to state 581
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    SL              shift and go to state 584
    SR              shift and go to state 585
    MOD             shift and go to state 586

  ! CONCAT          [ reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .) ]
  ! PLUS            [ reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .) ]
  ! MINUS           [ reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .) ]
  ! MUL             [ reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .) ]
  ! DIV             [ reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .) ]
  ! SL              [ reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .) ]
  ! SR              [ reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .) ]
  ! MOD             [ reduce using rule 425 (static_expr -> static_expr IS_GREATER static_expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 571 ]
  ! BOOLEAN_OR      [ shift and go to state 572 ]
  ! LOGICAL_AND     [ shift and go to state 573 ]
  ! LOGICAL_OR      [ shift and go to state 574 ]
  ! LOGICAL_XOR     [ shift and go to state 575 ]
  ! AND             [ shift and go to state 576 ]
  ! OR              [ shift and go to state 577 ]
  ! XOR             [ shift and go to state 578 ]
  ! IS_IDENTICAL    [ shift and go to state 587 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 588 ]
  ! IS_EQUAL        [ shift and go to state 589 ]
  ! IS_NOT_EQUAL    [ shift and go to state 590 ]
  ! IS_SMALLER      [ shift and go to state 591 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 592 ]
  ! IS_GREATER      [ shift and go to state 593 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 594 ]


state 727

    (426) static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    BOOLEAN_AND     reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .)
    BOOLEAN_OR      reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .)
    LOGICAL_AND     reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .)
    LOGICAL_OR      reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .)
    LOGICAL_XOR     reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .)
    AND             reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .)
    OR              reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .)
    XOR             reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .)
    IS_IDENTICAL    reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .)
    IS_NOT_IDENTICAL reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .)
    IS_EQUAL        reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .)
    IS_NOT_EQUAL    reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .)
    IS_SMALLER      reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .)
    IS_SMALLER_OR_EQUAL reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .)
    IS_GREATER      reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .)
    IS_GREATER_OR_EQUAL reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .)
    SEMI            reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .)
    COMMA           reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .)
    RPAREN          reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .)
    RBRACKET        reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .)
    CONCAT          shift and go to state 579
    PLUS            shift and go to state 580
    MINUS           shift and go to state 581
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    SL              shift and go to state 584
    SR              shift and go to state 585
    MOD             shift and go to state 586

  ! CONCAT          [ reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .) ]
  ! PLUS            [ reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .) ]
  ! MINUS           [ reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .) ]
  ! MUL             [ reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .) ]
  ! DIV             [ reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .) ]
  ! SL              [ reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .) ]
  ! SR              [ reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .) ]
  ! MOD             [ reduce using rule 426 (static_expr -> static_expr IS_GREATER_OR_EQUAL static_expr .) ]
  ! BOOLEAN_AND     [ shift and go to state 571 ]
  ! BOOLEAN_OR      [ shift and go to state 572 ]
  ! LOGICAL_AND     [ shift and go to state 573 ]
  ! LOGICAL_OR      [ shift and go to state 574 ]
  ! LOGICAL_XOR     [ shift and go to state 575 ]
  ! AND             [ shift and go to state 576 ]
  ! OR              [ shift and go to state 577 ]
  ! XOR             [ shift and go to state 578 ]
  ! IS_IDENTICAL    [ shift and go to state 587 ]
  ! IS_NOT_IDENTICAL [ shift and go to state 588 ]
  ! IS_EQUAL        [ shift and go to state 589 ]
  ! IS_NOT_EQUAL    [ shift and go to state 590 ]
  ! IS_SMALLER      [ shift and go to state 591 ]
  ! IS_SMALLER_OR_EQUAL [ shift and go to state 592 ]
  ! IS_GREATER      [ shift and go to state 593 ]
  ! IS_GREATER_OR_EQUAL [ shift and go to state 594 ]


state 728

    (427) static_expr -> LPAREN static_expr RPAREN .

    BOOLEAN_AND     reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)
    BOOLEAN_OR      reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)
    LOGICAL_AND     reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)
    LOGICAL_OR      reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)
    LOGICAL_XOR     reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)
    AND             reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)
    OR              reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)
    XOR             reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)
    CONCAT          reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)
    PLUS            reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)
    MINUS           reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)
    MUL             reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)
    DIV             reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)
    SL              reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)
    SR              reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)
    MOD             reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)
    IS_IDENTICAL    reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)
    IS_EQUAL        reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)
    IS_NOT_EQUAL    reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)
    IS_SMALLER      reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)
    IS_GREATER      reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)
    SEMI            reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)
    COMMA           reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)
    RPAREN          reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)
    RBRACKET        reduce using rule 427 (static_expr -> LPAREN static_expr RPAREN .)


state 729

    (381) static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .

    BOOLEAN_AND     reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    BOOLEAN_OR      reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    LOGICAL_AND     reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    LOGICAL_OR      reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    LOGICAL_XOR     reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    AND             reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    OR              reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    XOR             reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    CONCAT          reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    PLUS            reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    MINUS           reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    MUL             reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    DIV             reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    SL              reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    SR              reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    MOD             reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    IS_IDENTICAL    reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    IS_NOT_IDENTICAL reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    IS_EQUAL        reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    IS_NOT_EQUAL    reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    IS_SMALLER      reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    IS_SMALLER_OR_EQUAL reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    IS_GREATER      reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    IS_GREATER_OR_EQUAL reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    SEMI            reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    COMMA           reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    RPAREN          reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    DOUBLE_ARROW    reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)
    RBRACKET        reduce using rule 381 (static_scalar -> QUOTE ENCAPSED_AND_WHITESPACE QUOTE .)


state 730

    (391) static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .
    (189) class_name -> NAMESPACE NS_SEPARATOR namespace_name .
    (428) namespace_name -> namespace_name . NS_SEPARATOR STRING

    BOOLEAN_AND     reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    BOOLEAN_OR      reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    LOGICAL_AND     reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    LOGICAL_OR      reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    LOGICAL_XOR     reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    AND             reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    OR              reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    XOR             reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    CONCAT          reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    PLUS            reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    MINUS           reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    MUL             reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    DIV             reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    SL              reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    SR              reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    MOD             reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_IDENTICAL    reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_NOT_IDENTICAL reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_EQUAL        reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_NOT_EQUAL    reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_SMALLER      reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_SMALLER_OR_EQUAL reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_GREATER      reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    IS_GREATER_OR_EQUAL reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    SEMI            reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    COMMA           reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    RPAREN          reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    DOUBLE_ARROW    reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    RBRACKET        reduce using rule 391 (static_scalar -> NAMESPACE NS_SEPARATOR namespace_name .)
    DOUBLE_COLON    reduce using rule 189 (class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    NS_SEPARATOR    shift and go to state 118


state 731

    (394) static_scalar -> ARRAY LPAREN static_array_pair_list . RPAREN

    RPAREN          shift and go to state 807


state 732

    (395) static_scalar -> LBRACKET static_array_pair_list RBRACKET .

    BOOLEAN_AND     reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    BOOLEAN_OR      reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    LOGICAL_AND     reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    LOGICAL_OR      reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    LOGICAL_XOR     reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    AND             reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    OR              reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    XOR             reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    CONCAT          reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    PLUS            reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    MINUS           reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    MUL             reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    DIV             reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    SL              reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    SR              reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    MOD             reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    IS_IDENTICAL    reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    IS_NOT_IDENTICAL reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    IS_EQUAL        reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    IS_NOT_EQUAL    reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    IS_SMALLER      reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    IS_SMALLER_OR_EQUAL reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    IS_GREATER      reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    IS_GREATER_OR_EQUAL reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    SEMI            reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    COMMA           reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    RPAREN          reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    DOUBLE_ARROW    reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)
    RBRACKET        reduce using rule 395 (static_scalar -> LBRACKET static_array_pair_list RBRACKET .)


state 733

    (397) static_array_pair_list -> static_non_empty_array_pair_list possible_comma .

    RBRACKET        reduce using rule 397 (static_array_pair_list -> static_non_empty_array_pair_list possible_comma .)
    RPAREN          reduce using rule 397 (static_array_pair_list -> static_non_empty_array_pair_list possible_comma .)


state 734

    (398) static_non_empty_array_pair_list -> static_non_empty_array_pair_list COMMA . static_expr
    (400) static_non_empty_array_pair_list -> static_non_empty_array_pair_list COMMA . static_scalar DOUBLE_ARROW static_expr
    (265) possible_comma -> COMMA .
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RBRACKET        reduce using rule 265 (possible_comma -> COMMA .)
    RPAREN          reduce using rule 265 (possible_comma -> COMMA .)
    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 808
    static_scalar                  shift and go to state 809
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 735

    (401) static_non_empty_array_pair_list -> static_scalar DOUBLE_ARROW . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_scalar                  shift and go to state 454
    static_expr                    shift and go to state 810
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 736

    (365) class_constant -> class_name DOUBLE_COLON STRING .

    BOOLEAN_AND     reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    BOOLEAN_OR      reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    LOGICAL_AND     reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    LOGICAL_OR      reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    LOGICAL_XOR     reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    AND             reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    OR              reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    XOR             reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    CONCAT          reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    PLUS            reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    MINUS           reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    MUL             reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    DIV             reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    SL              reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    SR              reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    MOD             reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    IS_IDENTICAL    reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    IS_NOT_IDENTICAL reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    IS_EQUAL        reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    IS_NOT_EQUAL    reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    IS_SMALLER      reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    IS_GREATER      reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    SEMI            reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    COMMA           reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    RPAREN          reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    DOUBLE_ARROW    reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)
    RBRACKET        reduce using rule 365 (class_constant -> class_name DOUBLE_COLON STRING .)


state 737

    (366) class_constant -> variable_class_name DOUBLE_COLON STRING .

    BOOLEAN_AND     reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    BOOLEAN_OR      reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    LOGICAL_AND     reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    LOGICAL_OR      reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    LOGICAL_XOR     reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    AND             reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    OR              reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    XOR             reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    CONCAT          reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    PLUS            reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    MINUS           reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    MUL             reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    DIV             reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    SL              reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    SR              reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    MOD             reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    IS_IDENTICAL    reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    IS_NOT_IDENTICAL reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    IS_EQUAL        reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    IS_NOT_EQUAL    reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    IS_SMALLER      reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    IS_GREATER      reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    SEMI            reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    COMMA           reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    RPAREN          reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    DOUBLE_ARROW    reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)
    RBRACKET        reduce using rule 366 (class_constant -> variable_class_name DOUBLE_COLON STRING .)


state 738

    (386) static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .

    BOOLEAN_AND     reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    BOOLEAN_OR      reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    LOGICAL_AND     reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    LOGICAL_OR      reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    LOGICAL_XOR     reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    AND             reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    OR              reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    XOR             reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    CONCAT          reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    PLUS            reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    MINUS           reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    MUL             reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    DIV             reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    SL              reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    SR              reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    MOD             reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    IS_IDENTICAL    reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    IS_NOT_IDENTICAL reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    IS_EQUAL        reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    IS_NOT_EQUAL    reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    IS_SMALLER      reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    IS_SMALLER_OR_EQUAL reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    IS_GREATER      reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    IS_GREATER_OR_EQUAL reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    SEMI            reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    COMMA           reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    RPAREN          reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    DOUBLE_ARROW    reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)
    RBRACKET        reduce using rule 386 (static_heredoc -> START_HEREDOC multiple_encapsed END_HEREDOC .)


state 739

    (387) multiple_encapsed -> multiple_encapsed ENCAPSED_AND_WHITESPACE .

    END_HEREDOC     reduce using rule 387 (multiple_encapsed -> multiple_encapsed ENCAPSED_AND_WHITESPACE .)
    ENCAPSED_AND_WHITESPACE reduce using rule 387 (multiple_encapsed -> multiple_encapsed ENCAPSED_AND_WHITESPACE .)


state 740

    (31) statement -> IF LPAREN expr RPAREN statement elseif_list . else_single
    (63) elseif_list -> elseif_list . ELSEIF LPAREN expr RPAREN statement
    (64) else_single -> . empty
    (65) else_single -> . ELSE statement
    (443) empty -> .

  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    ELSEIF          shift and go to state 812
    ELSE            shift and go to state 814
    HALT_COMPILER   reduce using rule 443 (empty -> .)
    NAMESPACE       reduce using rule 443 (empty -> .)
    CONST           reduce using rule 443 (empty -> .)
    USE             reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    IF              reduce using rule 443 (empty -> .)
    WHILE           reduce using rule 443 (empty -> .)
    DO              reduce using rule 443 (empty -> .)
    FOR             reduce using rule 443 (empty -> .)
    FOREACH         reduce using rule 443 (empty -> .)
    SWITCH          reduce using rule 443 (empty -> .)
    BREAK           reduce using rule 443 (empty -> .)
    CONTINUE        reduce using rule 443 (empty -> .)
    RETURN          reduce using rule 443 (empty -> .)
    GLOBAL          reduce using rule 443 (empty -> .)
    STATIC          reduce using rule 443 (empty -> .)
    ECHO            reduce using rule 443 (empty -> .)
    INLINE_HTML     reduce using rule 443 (empty -> .)
    UNSET           reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    TRY             reduce using rule 443 (empty -> .)
    THROW           reduce using rule 443 (empty -> .)
    DECLARE         reduce using rule 443 (empty -> .)
    FUNCTION        reduce using rule 443 (empty -> .)
    INTERFACE       reduce using rule 443 (empty -> .)
    TRAIT           reduce using rule 443 (empty -> .)
    NEW             reduce using rule 443 (empty -> .)
    CLONE           reduce using rule 443 (empty -> .)
    LIST            reduce using rule 443 (empty -> .)
    ARRAY           reduce using rule 443 (empty -> .)
    LBRACKET        reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    NOT             reduce using rule 443 (empty -> .)
    BOOLEAN_NOT     reduce using rule 443 (empty -> .)
    INC             reduce using rule 443 (empty -> .)
    DEC             reduce using rule 443 (empty -> .)
    INT_CAST        reduce using rule 443 (empty -> .)
    DOUBLE_CAST     reduce using rule 443 (empty -> .)
    STRING_CAST     reduce using rule 443 (empty -> .)
    ARRAY_CAST      reduce using rule 443 (empty -> .)
    OBJECT_CAST     reduce using rule 443 (empty -> .)
    BOOL_CAST       reduce using rule 443 (empty -> .)
    UNSET_CAST      reduce using rule 443 (empty -> .)
    BINARY_CAST     reduce using rule 443 (empty -> .)
    ISSET           reduce using rule 443 (empty -> .)
    EMPTY           reduce using rule 443 (empty -> .)
    EVAL            reduce using rule 443 (empty -> .)
    INCLUDE         reduce using rule 443 (empty -> .)
    INCLUDE_ONCE    reduce using rule 443 (empty -> .)
    REQUIRE         reduce using rule 443 (empty -> .)
    REQUIRE_ONCE    reduce using rule 443 (empty -> .)
    PRINT           reduce using rule 443 (empty -> .)
    AT              reduce using rule 443 (empty -> .)
    LPAREN          reduce using rule 443 (empty -> .)
    CLASS           reduce using rule 443 (empty -> .)
    ABSTRACT        reduce using rule 443 (empty -> .)
    FINAL           reduce using rule 443 (empty -> .)
    QUOTE           reduce using rule 443 (empty -> .)
    STRING          reduce using rule 443 (empty -> .)
    STRING_VARNAME  reduce using rule 443 (empty -> .)
    NS_SEPARATOR    reduce using rule 443 (empty -> .)
    EXIT            reduce using rule 443 (empty -> .)
    DIE             reduce using rule 443 (empty -> .)
    LNUMBER         reduce using rule 443 (empty -> .)
    DNUMBER         reduce using rule 443 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 443 (empty -> .)
    LINE            reduce using rule 443 (empty -> .)
    FILE            reduce using rule 443 (empty -> .)
    DIR             reduce using rule 443 (empty -> .)
    CLASS_C         reduce using rule 443 (empty -> .)
    METHOD_C        reduce using rule 443 (empty -> .)
    FUNC_C          reduce using rule 443 (empty -> .)
    NS_C            reduce using rule 443 (empty -> .)
    START_HEREDOC   reduce using rule 443 (empty -> .)
    START_NOWDOC    reduce using rule 443 (empty -> .)
    BACKTICK        reduce using rule 443 (empty -> .)
    DOLLAR          reduce using rule 443 (empty -> .)
    VARIABLE        reduce using rule 443 (empty -> .)
    $end            reduce using rule 443 (empty -> .)
    RBRACE          reduce using rule 443 (empty -> .)
    YIELD           reduce using rule 443 (empty -> .)
    ENDIF           reduce using rule 443 (empty -> .)
    ENDWHILE        reduce using rule 443 (empty -> .)
    ENDDECLARE      reduce using rule 443 (empty -> .)
    ENDFOREACH      reduce using rule 443 (empty -> .)
    CASE            reduce using rule 443 (empty -> .)
    DEFAULT         reduce using rule 443 (empty -> .)
    ENDSWITCH       reduce using rule 443 (empty -> .)
    ENDFOR          reduce using rule 443 (empty -> .)

  ! ELSEIF          [ reduce using rule 443 (empty -> .) ]
  ! ELSE            [ reduce using rule 443 (empty -> .) ]

    else_single                    shift and go to state 811
    empty                          shift and go to state 813

state 741

    (62) elseif_list -> empty .

    ELSEIF          reduce using rule 62 (elseif_list -> empty .)
    ELSE            reduce using rule 62 (elseif_list -> empty .)
    HALT_COMPILER   reduce using rule 62 (elseif_list -> empty .)
    NAMESPACE       reduce using rule 62 (elseif_list -> empty .)
    CONST           reduce using rule 62 (elseif_list -> empty .)
    USE             reduce using rule 62 (elseif_list -> empty .)
    LBRACE          reduce using rule 62 (elseif_list -> empty .)
    IF              reduce using rule 62 (elseif_list -> empty .)
    WHILE           reduce using rule 62 (elseif_list -> empty .)
    DO              reduce using rule 62 (elseif_list -> empty .)
    FOR             reduce using rule 62 (elseif_list -> empty .)
    FOREACH         reduce using rule 62 (elseif_list -> empty .)
    SWITCH          reduce using rule 62 (elseif_list -> empty .)
    BREAK           reduce using rule 62 (elseif_list -> empty .)
    CONTINUE        reduce using rule 62 (elseif_list -> empty .)
    RETURN          reduce using rule 62 (elseif_list -> empty .)
    GLOBAL          reduce using rule 62 (elseif_list -> empty .)
    STATIC          reduce using rule 62 (elseif_list -> empty .)
    ECHO            reduce using rule 62 (elseif_list -> empty .)
    INLINE_HTML     reduce using rule 62 (elseif_list -> empty .)
    UNSET           reduce using rule 62 (elseif_list -> empty .)
    SEMI            reduce using rule 62 (elseif_list -> empty .)
    TRY             reduce using rule 62 (elseif_list -> empty .)
    THROW           reduce using rule 62 (elseif_list -> empty .)
    DECLARE         reduce using rule 62 (elseif_list -> empty .)
    FUNCTION        reduce using rule 62 (elseif_list -> empty .)
    INTERFACE       reduce using rule 62 (elseif_list -> empty .)
    TRAIT           reduce using rule 62 (elseif_list -> empty .)
    NEW             reduce using rule 62 (elseif_list -> empty .)
    CLONE           reduce using rule 62 (elseif_list -> empty .)
    LIST            reduce using rule 62 (elseif_list -> empty .)
    ARRAY           reduce using rule 62 (elseif_list -> empty .)
    LBRACKET        reduce using rule 62 (elseif_list -> empty .)
    PLUS            reduce using rule 62 (elseif_list -> empty .)
    MINUS           reduce using rule 62 (elseif_list -> empty .)
    NOT             reduce using rule 62 (elseif_list -> empty .)
    BOOLEAN_NOT     reduce using rule 62 (elseif_list -> empty .)
    INC             reduce using rule 62 (elseif_list -> empty .)
    DEC             reduce using rule 62 (elseif_list -> empty .)
    INT_CAST        reduce using rule 62 (elseif_list -> empty .)
    DOUBLE_CAST     reduce using rule 62 (elseif_list -> empty .)
    STRING_CAST     reduce using rule 62 (elseif_list -> empty .)
    ARRAY_CAST      reduce using rule 62 (elseif_list -> empty .)
    OBJECT_CAST     reduce using rule 62 (elseif_list -> empty .)
    BOOL_CAST       reduce using rule 62 (elseif_list -> empty .)
    UNSET_CAST      reduce using rule 62 (elseif_list -> empty .)
    BINARY_CAST     reduce using rule 62 (elseif_list -> empty .)
    ISSET           reduce using rule 62 (elseif_list -> empty .)
    EMPTY           reduce using rule 62 (elseif_list -> empty .)
    EVAL            reduce using rule 62 (elseif_list -> empty .)
    INCLUDE         reduce using rule 62 (elseif_list -> empty .)
    INCLUDE_ONCE    reduce using rule 62 (elseif_list -> empty .)
    REQUIRE         reduce using rule 62 (elseif_list -> empty .)
    REQUIRE_ONCE    reduce using rule 62 (elseif_list -> empty .)
    PRINT           reduce using rule 62 (elseif_list -> empty .)
    AT              reduce using rule 62 (elseif_list -> empty .)
    LPAREN          reduce using rule 62 (elseif_list -> empty .)
    CLASS           reduce using rule 62 (elseif_list -> empty .)
    ABSTRACT        reduce using rule 62 (elseif_list -> empty .)
    FINAL           reduce using rule 62 (elseif_list -> empty .)
    QUOTE           reduce using rule 62 (elseif_list -> empty .)
    STRING          reduce using rule 62 (elseif_list -> empty .)
    STRING_VARNAME  reduce using rule 62 (elseif_list -> empty .)
    NS_SEPARATOR    reduce using rule 62 (elseif_list -> empty .)
    EXIT            reduce using rule 62 (elseif_list -> empty .)
    DIE             reduce using rule 62 (elseif_list -> empty .)
    LNUMBER         reduce using rule 62 (elseif_list -> empty .)
    DNUMBER         reduce using rule 62 (elseif_list -> empty .)
    CONSTANT_ENCAPSED_STRING reduce using rule 62 (elseif_list -> empty .)
    LINE            reduce using rule 62 (elseif_list -> empty .)
    FILE            reduce using rule 62 (elseif_list -> empty .)
    DIR             reduce using rule 62 (elseif_list -> empty .)
    CLASS_C         reduce using rule 62 (elseif_list -> empty .)
    METHOD_C        reduce using rule 62 (elseif_list -> empty .)
    FUNC_C          reduce using rule 62 (elseif_list -> empty .)
    NS_C            reduce using rule 62 (elseif_list -> empty .)
    START_HEREDOC   reduce using rule 62 (elseif_list -> empty .)
    START_NOWDOC    reduce using rule 62 (elseif_list -> empty .)
    BACKTICK        reduce using rule 62 (elseif_list -> empty .)
    DOLLAR          reduce using rule 62 (elseif_list -> empty .)
    VARIABLE        reduce using rule 62 (elseif_list -> empty .)
    $end            reduce using rule 62 (elseif_list -> empty .)
    RBRACE          reduce using rule 62 (elseif_list -> empty .)
    YIELD           reduce using rule 62 (elseif_list -> empty .)
    ENDIF           reduce using rule 62 (elseif_list -> empty .)
    ENDWHILE        reduce using rule 62 (elseif_list -> empty .)
    ENDDECLARE      reduce using rule 62 (elseif_list -> empty .)
    ENDFOREACH      reduce using rule 62 (elseif_list -> empty .)
    CASE            reduce using rule 62 (elseif_list -> empty .)
    DEFAULT         reduce using rule 62 (elseif_list -> empty .)
    ENDSWITCH       reduce using rule 62 (elseif_list -> empty .)
    ENDFOR          reduce using rule 62 (elseif_list -> empty .)


state 742

    (32) statement -> IF LPAREN expr RPAREN COLON inner_statement_list . new_elseif_list new_else_single ENDIF SEMI
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (66) new_elseif_list -> . empty
    (67) new_elseif_list -> . new_elseif_list ELSEIF LPAREN expr RPAREN COLON inner_statement_list
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) inner_statement -> . YIELD SEMI
    (29) inner_statement -> . YIELD expr SEMI
    (443) empty -> .
    (30) statement -> . LBRACE inner_statement_list RBRACE
    (31) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (33) statement -> . WHILE LPAREN expr RPAREN while_statement
    (34) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (35) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (36) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (37) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (38) statement -> . BREAK SEMI
    (39) statement -> . BREAK expr SEMI
    (40) statement -> . CONTINUE SEMI
    (41) statement -> . CONTINUE expr SEMI
    (42) statement -> . RETURN SEMI
    (43) statement -> . RETURN expr SEMI
    (44) statement -> . GLOBAL global_var_list SEMI
    (45) statement -> . STATIC static_var_list SEMI
    (46) statement -> . ECHO echo_expr_list SEMI
    (47) statement -> . INLINE_HTML
    (48) statement -> . expr SEMI
    (49) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (50) statement -> . SEMI
    (51) statement -> . TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
    (56) statement -> . THROW expr SEMI
    (57) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (108) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (109) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (110) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (111) class_declaration_statement -> . TRAIT STRING LBRACE trait_statement_list RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (112) class_entry_type -> . CLASS
    (113) class_entry_type -> . ABSTRACT CLASS
    (114) class_entry_type -> . FINAL CLASS
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    HALT_COMPILER   shift and go to state 290
    YIELD           shift and go to state 291
    ELSEIF          reduce using rule 443 (empty -> .)
    ELSE            reduce using rule 443 (empty -> .)
    ENDIF           reduce using rule 443 (empty -> .)
    LBRACE          shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    FOREACH         shift and go to state 21
    SWITCH          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    GLOBAL          shift and go to state 26
    STATIC          shift and go to state 27
    ECHO            shift and go to state 28
    INLINE_HTML     shift and go to state 29
    UNSET           shift and go to state 30
    SEMI            shift and go to state 10
    TRY             shift and go to state 31
    THROW           shift and go to state 32
    DECLARE         shift and go to state 33
    FUNCTION        shift and go to state 34
    INTERFACE       shift and go to state 37
    TRAIT           shift and go to state 38
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    CLASS           shift and go to state 70
    ABSTRACT        shift and go to state 71
    FINAL           shift and go to state 72
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 17
    new_elseif_list                shift and go to state 815
    inner_statement                shift and go to state 286
    empty                          shift and go to state 816
    statement                      shift and go to state 287
    function_declaration_statement shift and go to state 288
    class_declaration_statement    shift and go to state 289
    class_entry_type               shift and go to state 36
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 743

    (220) method_or_not -> LPAREN function_call_parameter_list RPAREN .

    SEMI            reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    OBJECT_OPERATOR reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    LBRACE          reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_AND     reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_OR      reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_AND     reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_OR      reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_XOR     reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    XOR             reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    CONCAT          reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    MUL             reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    DIV             reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    SL              reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    SR              reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    MOD             reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    IS_IDENTICAL    reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    IS_EQUAL        reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_EQUAL    reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER      reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER      reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    INSTANCEOF      reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    QUESTION        reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    COMMA           reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    DOUBLE_ARROW    reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    RBRACE          reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    PLUS_EQUAL      reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    MINUS_EQUAL     reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    MUL_EQUAL       reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    DIV_EQUAL       reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    CONCAT_EQUAL    reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    MOD_EQUAL       reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    AND_EQUAL       reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    OR_EQUAL        reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    XOR_EQUAL       reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    SL_EQUAL        reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    SR_EQUAL        reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    INC             reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    DEC             reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)
    LBRACKET        reduce using rule 220 (method_or_not -> LPAREN function_call_parameter_list RPAREN .)


state 744

    (246) object_dim_list -> object_dim_list LBRACKET dim_offset . RBRACKET

    RBRACKET        shift and go to state 817


state 745

    (247) object_dim_list -> object_dim_list LBRACE expr . RBRACE
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    RBRACE          shift and go to state 818
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 746

    (71) while_statement -> COLON inner_statement_list . ENDWHILE SEMI
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) inner_statement -> . YIELD SEMI
    (29) inner_statement -> . YIELD expr SEMI
    (30) statement -> . LBRACE inner_statement_list RBRACE
    (31) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (33) statement -> . WHILE LPAREN expr RPAREN while_statement
    (34) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (35) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (36) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (37) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (38) statement -> . BREAK SEMI
    (39) statement -> . BREAK expr SEMI
    (40) statement -> . CONTINUE SEMI
    (41) statement -> . CONTINUE expr SEMI
    (42) statement -> . RETURN SEMI
    (43) statement -> . RETURN expr SEMI
    (44) statement -> . GLOBAL global_var_list SEMI
    (45) statement -> . STATIC static_var_list SEMI
    (46) statement -> . ECHO echo_expr_list SEMI
    (47) statement -> . INLINE_HTML
    (48) statement -> . expr SEMI
    (49) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (50) statement -> . SEMI
    (51) statement -> . TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
    (56) statement -> . THROW expr SEMI
    (57) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (108) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (109) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (110) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (111) class_declaration_statement -> . TRAIT STRING LBRACE trait_statement_list RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (112) class_entry_type -> . CLASS
    (113) class_entry_type -> . ABSTRACT CLASS
    (114) class_entry_type -> . FINAL CLASS
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    ENDWHILE        shift and go to state 819
    HALT_COMPILER   shift and go to state 290
    YIELD           shift and go to state 291
    LBRACE          shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    FOREACH         shift and go to state 21
    SWITCH          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    GLOBAL          shift and go to state 26
    STATIC          shift and go to state 27
    ECHO            shift and go to state 28
    INLINE_HTML     shift and go to state 29
    UNSET           shift and go to state 30
    SEMI            shift and go to state 10
    TRY             shift and go to state 31
    THROW           shift and go to state 32
    DECLARE         shift and go to state 33
    FUNCTION        shift and go to state 34
    INTERFACE       shift and go to state 37
    TRAIT           shift and go to state 38
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    CLASS           shift and go to state 70
    ABSTRACT        shift and go to state 71
    FINAL           shift and go to state 72
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    inner_statement                shift and go to state 286
    statement                      shift and go to state 287
    function_declaration_statement shift and go to state 288
    class_declaration_statement    shift and go to state 289
    expr                           shift and go to state 17
    class_entry_type               shift and go to state 36
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 747

    (34) statement -> DO statement WHILE LPAREN expr RPAREN . SEMI

    SEMI            shift and go to state 820


state 748

    (35) statement -> FOR LPAREN for_expr SEMI for_expr SEMI . for_expr RPAREN for_statement
    (72) for_expr -> . empty
    (73) for_expr -> . non_empty_for_expr
    (443) empty -> .
    (74) non_empty_for_expr -> . non_empty_for_expr COMMA expr
    (75) non_empty_for_expr -> . expr
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RPAREN          reduce using rule 443 (empty -> .)
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    for_expr                       shift and go to state 821
    empty                          shift and go to state 340
    non_empty_for_expr             shift and go to state 341
    expr                           shift and go to state 342
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 749

    (36) statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg . RPAREN foreach_statement

    RPAREN          shift and go to state 822


state 750

    (81) foreach_optional_arg -> empty .

    RPAREN          reduce using rule 81 (foreach_optional_arg -> empty .)


state 751

    (82) foreach_optional_arg -> DOUBLE_ARROW . foreach_variable
    (78) foreach_variable -> . LIST LPAREN assignment_list RPAREN
    (79) foreach_variable -> . variable
    (80) foreach_variable -> . AND variable
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LIST            shift and go to state 627
    AND             shift and go to state 629
    NS_SEPARATOR    shift and go to state 230
    NAMESPACE       shift and go to state 231
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107

    foreach_variable               shift and go to state 823
    variable                       shift and go to state 628
    base_variable_with_function_calls shift and go to state 73
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    namespace_name                 shift and go to state 229
    class_name                     shift and go to state 232
    variable_without_objects       shift and go to state 102
    variable_class_name            shift and go to state 233
    reference_variable             shift and go to state 234
    compound_variable              shift and go to state 106

state 752

    (78) foreach_variable -> LIST LPAREN . assignment_list RPAREN
    (200) assignment_list -> . assignment_list COMMA assignment_list_element
    (201) assignment_list -> . assignment_list_element
    (202) assignment_list_element -> . variable
    (203) assignment_list_element -> . empty
    (204) assignment_list_element -> . LIST LPAREN assignment_list RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (443) empty -> .
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LIST            shift and go to state 396
    RPAREN          reduce using rule 443 (empty -> .)
    COMMA           reduce using rule 443 (empty -> .)
    NS_SEPARATOR    shift and go to state 230
    NAMESPACE       shift and go to state 231
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107

    assignment_list                shift and go to state 824
    assignment_list_element        shift and go to state 398
    variable                       shift and go to state 399
    empty                          shift and go to state 400
    base_variable_with_function_calls shift and go to state 73
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    namespace_name                 shift and go to state 229
    class_name                     shift and go to state 232
    variable_without_objects       shift and go to state 102
    variable_class_name            shift and go to state 233
    reference_variable             shift and go to state 234
    compound_variable              shift and go to state 106

state 753

    (80) foreach_variable -> AND variable .
    (234) variable -> variable . LBRACKET dim_offset RBRACKET

    DOUBLE_ARROW    reduce using rule 80 (foreach_variable -> AND variable .)
    RPAREN          reduce using rule 80 (foreach_variable -> AND variable .)
    LBRACKET        shift and go to state 205


state 754

    (85) switch_case_list -> LBRACE case_list . RBRACE
    (90) case_list -> case_list . CASE expr case_separator inner_statement_list
    (91) case_list -> case_list . DEFAULT case_separator inner_statement_list

    RBRACE          shift and go to state 825
    CASE            shift and go to state 826
    DEFAULT         shift and go to state 827


state 755

    (86) switch_case_list -> LBRACE SEMI . case_list RBRACE
    (89) case_list -> . empty
    (90) case_list -> . case_list CASE expr case_separator inner_statement_list
    (91) case_list -> . case_list DEFAULT case_separator inner_statement_list
    (443) empty -> .

    RBRACE          reduce using rule 443 (empty -> .)
    CASE            reduce using rule 443 (empty -> .)
    DEFAULT         reduce using rule 443 (empty -> .)

    case_list                      shift and go to state 828
    empty                          shift and go to state 756

state 756

    (89) case_list -> empty .

    RBRACE          reduce using rule 89 (case_list -> empty .)
    CASE            reduce using rule 89 (case_list -> empty .)
    DEFAULT         reduce using rule 89 (case_list -> empty .)
    ENDSWITCH       reduce using rule 89 (case_list -> empty .)


state 757

    (87) switch_case_list -> COLON case_list . ENDSWITCH SEMI
    (90) case_list -> case_list . CASE expr case_separator inner_statement_list
    (91) case_list -> case_list . DEFAULT case_separator inner_statement_list

    ENDSWITCH       shift and go to state 829
    CASE            shift and go to state 826
    DEFAULT         shift and go to state 827


state 758

    (88) switch_case_list -> COLON SEMI . case_list ENDSWITCH SEMI
    (89) case_list -> . empty
    (90) case_list -> . case_list CASE expr case_separator inner_statement_list
    (91) case_list -> . case_list DEFAULT case_separator inner_statement_list
    (443) empty -> .

    ENDSWITCH       reduce using rule 443 (empty -> .)
    CASE            reduce using rule 443 (empty -> .)
    DEFAULT         reduce using rule 443 (empty -> .)

    case_list                      shift and go to state 830
    empty                          shift and go to state 756

state 759

    (51) statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .

    HALT_COMPILER   reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    NAMESPACE       reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    CONST           reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    USE             reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    LBRACE          reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    IF              reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    WHILE           reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    DO              reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    FOR             reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    FOREACH         reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    SWITCH          reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    BREAK           reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    CONTINUE        reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    RETURN          reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    GLOBAL          reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    STATIC          reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    ECHO            reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    INLINE_HTML     reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    UNSET           reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    SEMI            reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    TRY             reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    THROW           reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    DECLARE         reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    FUNCTION        reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    INTERFACE       reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    TRAIT           reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    NEW             reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    CLONE           reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    LIST            reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    ARRAY           reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    LBRACKET        reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    PLUS            reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    MINUS           reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    NOT             reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    BOOLEAN_NOT     reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    INC             reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    DEC             reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    INT_CAST        reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    DOUBLE_CAST     reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    STRING_CAST     reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    ARRAY_CAST      reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    OBJECT_CAST     reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    BOOL_CAST       reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    UNSET_CAST      reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    BINARY_CAST     reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    ISSET           reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    EMPTY           reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    EVAL            reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    INCLUDE         reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    INCLUDE_ONCE    reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    REQUIRE         reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    REQUIRE_ONCE    reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    PRINT           reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    AT              reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    LPAREN          reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    CLASS           reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    ABSTRACT        reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    FINAL           reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    QUOTE           reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    STRING          reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    STRING_VARNAME  reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    NS_SEPARATOR    reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    EXIT            reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    DIE             reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    LNUMBER         reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    DNUMBER         reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    CONSTANT_ENCAPSED_STRING reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    LINE            reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    FILE            reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    DIR             reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    CLASS_C         reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    METHOD_C        reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    FUNC_C          reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    NS_C            reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    START_HEREDOC   reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    START_NOWDOC    reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    BACKTICK        reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    DOLLAR          reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    VARIABLE        reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    $end            reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    RBRACE          reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    YIELD           reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    ELSEIF          reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    ELSE            reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    ENDIF           reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    ENDWHILE        reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    ENDDECLARE      reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    ENDFOREACH      reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    CASE            reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    DEFAULT         reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    ENDSWITCH       reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)
    ENDFOR          reduce using rule 51 (statement -> TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally .)


state 760

    (52) additional_catches -> additional_catches CATCH . LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE

    LPAREN          shift and go to state 831


state 761

    (54) maybe_finally -> FINALLY . LBRACE inner_statement_list RBRACE

    LBRACE          shift and go to state 832


state 762

    (55) maybe_finally -> empty .

    HALT_COMPILER   reduce using rule 55 (maybe_finally -> empty .)
    NAMESPACE       reduce using rule 55 (maybe_finally -> empty .)
    CONST           reduce using rule 55 (maybe_finally -> empty .)
    USE             reduce using rule 55 (maybe_finally -> empty .)
    LBRACE          reduce using rule 55 (maybe_finally -> empty .)
    IF              reduce using rule 55 (maybe_finally -> empty .)
    WHILE           reduce using rule 55 (maybe_finally -> empty .)
    DO              reduce using rule 55 (maybe_finally -> empty .)
    FOR             reduce using rule 55 (maybe_finally -> empty .)
    FOREACH         reduce using rule 55 (maybe_finally -> empty .)
    SWITCH          reduce using rule 55 (maybe_finally -> empty .)
    BREAK           reduce using rule 55 (maybe_finally -> empty .)
    CONTINUE        reduce using rule 55 (maybe_finally -> empty .)
    RETURN          reduce using rule 55 (maybe_finally -> empty .)
    GLOBAL          reduce using rule 55 (maybe_finally -> empty .)
    STATIC          reduce using rule 55 (maybe_finally -> empty .)
    ECHO            reduce using rule 55 (maybe_finally -> empty .)
    INLINE_HTML     reduce using rule 55 (maybe_finally -> empty .)
    UNSET           reduce using rule 55 (maybe_finally -> empty .)
    SEMI            reduce using rule 55 (maybe_finally -> empty .)
    TRY             reduce using rule 55 (maybe_finally -> empty .)
    THROW           reduce using rule 55 (maybe_finally -> empty .)
    DECLARE         reduce using rule 55 (maybe_finally -> empty .)
    FUNCTION        reduce using rule 55 (maybe_finally -> empty .)
    INTERFACE       reduce using rule 55 (maybe_finally -> empty .)
    TRAIT           reduce using rule 55 (maybe_finally -> empty .)
    NEW             reduce using rule 55 (maybe_finally -> empty .)
    CLONE           reduce using rule 55 (maybe_finally -> empty .)
    LIST            reduce using rule 55 (maybe_finally -> empty .)
    ARRAY           reduce using rule 55 (maybe_finally -> empty .)
    LBRACKET        reduce using rule 55 (maybe_finally -> empty .)
    PLUS            reduce using rule 55 (maybe_finally -> empty .)
    MINUS           reduce using rule 55 (maybe_finally -> empty .)
    NOT             reduce using rule 55 (maybe_finally -> empty .)
    BOOLEAN_NOT     reduce using rule 55 (maybe_finally -> empty .)
    INC             reduce using rule 55 (maybe_finally -> empty .)
    DEC             reduce using rule 55 (maybe_finally -> empty .)
    INT_CAST        reduce using rule 55 (maybe_finally -> empty .)
    DOUBLE_CAST     reduce using rule 55 (maybe_finally -> empty .)
    STRING_CAST     reduce using rule 55 (maybe_finally -> empty .)
    ARRAY_CAST      reduce using rule 55 (maybe_finally -> empty .)
    OBJECT_CAST     reduce using rule 55 (maybe_finally -> empty .)
    BOOL_CAST       reduce using rule 55 (maybe_finally -> empty .)
    UNSET_CAST      reduce using rule 55 (maybe_finally -> empty .)
    BINARY_CAST     reduce using rule 55 (maybe_finally -> empty .)
    ISSET           reduce using rule 55 (maybe_finally -> empty .)
    EMPTY           reduce using rule 55 (maybe_finally -> empty .)
    EVAL            reduce using rule 55 (maybe_finally -> empty .)
    INCLUDE         reduce using rule 55 (maybe_finally -> empty .)
    INCLUDE_ONCE    reduce using rule 55 (maybe_finally -> empty .)
    REQUIRE         reduce using rule 55 (maybe_finally -> empty .)
    REQUIRE_ONCE    reduce using rule 55 (maybe_finally -> empty .)
    PRINT           reduce using rule 55 (maybe_finally -> empty .)
    AT              reduce using rule 55 (maybe_finally -> empty .)
    LPAREN          reduce using rule 55 (maybe_finally -> empty .)
    CLASS           reduce using rule 55 (maybe_finally -> empty .)
    ABSTRACT        reduce using rule 55 (maybe_finally -> empty .)
    FINAL           reduce using rule 55 (maybe_finally -> empty .)
    QUOTE           reduce using rule 55 (maybe_finally -> empty .)
    STRING          reduce using rule 55 (maybe_finally -> empty .)
    STRING_VARNAME  reduce using rule 55 (maybe_finally -> empty .)
    NS_SEPARATOR    reduce using rule 55 (maybe_finally -> empty .)
    EXIT            reduce using rule 55 (maybe_finally -> empty .)
    DIE             reduce using rule 55 (maybe_finally -> empty .)
    LNUMBER         reduce using rule 55 (maybe_finally -> empty .)
    DNUMBER         reduce using rule 55 (maybe_finally -> empty .)
    CONSTANT_ENCAPSED_STRING reduce using rule 55 (maybe_finally -> empty .)
    LINE            reduce using rule 55 (maybe_finally -> empty .)
    FILE            reduce using rule 55 (maybe_finally -> empty .)
    DIR             reduce using rule 55 (maybe_finally -> empty .)
    CLASS_C         reduce using rule 55 (maybe_finally -> empty .)
    METHOD_C        reduce using rule 55 (maybe_finally -> empty .)
    FUNC_C          reduce using rule 55 (maybe_finally -> empty .)
    NS_C            reduce using rule 55 (maybe_finally -> empty .)
    START_HEREDOC   reduce using rule 55 (maybe_finally -> empty .)
    START_NOWDOC    reduce using rule 55 (maybe_finally -> empty .)
    BACKTICK        reduce using rule 55 (maybe_finally -> empty .)
    DOLLAR          reduce using rule 55 (maybe_finally -> empty .)
    VARIABLE        reduce using rule 55 (maybe_finally -> empty .)
    $end            reduce using rule 55 (maybe_finally -> empty .)
    RBRACE          reduce using rule 55 (maybe_finally -> empty .)
    YIELD           reduce using rule 55 (maybe_finally -> empty .)
    ELSEIF          reduce using rule 55 (maybe_finally -> empty .)
    ELSE            reduce using rule 55 (maybe_finally -> empty .)
    ENDIF           reduce using rule 55 (maybe_finally -> empty .)
    ENDWHILE        reduce using rule 55 (maybe_finally -> empty .)
    ENDDECLARE      reduce using rule 55 (maybe_finally -> empty .)
    ENDFOREACH      reduce using rule 55 (maybe_finally -> empty .)
    CASE            reduce using rule 55 (maybe_finally -> empty .)
    DEFAULT         reduce using rule 55 (maybe_finally -> empty .)
    ENDSWITCH       reduce using rule 55 (maybe_finally -> empty .)
    ENDFOR          reduce using rule 55 (maybe_finally -> empty .)


state 763

    (61) declare_statement -> COLON inner_statement_list . ENDDECLARE SEMI
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) inner_statement -> . YIELD SEMI
    (29) inner_statement -> . YIELD expr SEMI
    (30) statement -> . LBRACE inner_statement_list RBRACE
    (31) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (33) statement -> . WHILE LPAREN expr RPAREN while_statement
    (34) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (35) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (36) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (37) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (38) statement -> . BREAK SEMI
    (39) statement -> . BREAK expr SEMI
    (40) statement -> . CONTINUE SEMI
    (41) statement -> . CONTINUE expr SEMI
    (42) statement -> . RETURN SEMI
    (43) statement -> . RETURN expr SEMI
    (44) statement -> . GLOBAL global_var_list SEMI
    (45) statement -> . STATIC static_var_list SEMI
    (46) statement -> . ECHO echo_expr_list SEMI
    (47) statement -> . INLINE_HTML
    (48) statement -> . expr SEMI
    (49) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (50) statement -> . SEMI
    (51) statement -> . TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
    (56) statement -> . THROW expr SEMI
    (57) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (108) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (109) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (110) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (111) class_declaration_statement -> . TRAIT STRING LBRACE trait_statement_list RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (112) class_entry_type -> . CLASS
    (113) class_entry_type -> . ABSTRACT CLASS
    (114) class_entry_type -> . FINAL CLASS
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    ENDDECLARE      shift and go to state 833
    HALT_COMPILER   shift and go to state 290
    YIELD           shift and go to state 291
    LBRACE          shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    FOREACH         shift and go to state 21
    SWITCH          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    GLOBAL          shift and go to state 26
    STATIC          shift and go to state 27
    ECHO            shift and go to state 28
    INLINE_HTML     shift and go to state 29
    UNSET           shift and go to state 30
    SEMI            shift and go to state 10
    TRY             shift and go to state 31
    THROW           shift and go to state 32
    DECLARE         shift and go to state 33
    FUNCTION        shift and go to state 34
    INTERFACE       shift and go to state 37
    TRAIT           shift and go to state 38
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    CLASS           shift and go to state 70
    ABSTRACT        shift and go to state 71
    FINAL           shift and go to state 72
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    inner_statement                shift and go to state 286
    statement                      shift and go to state 287
    function_declaration_statement shift and go to state 288
    class_declaration_statement    shift and go to state 289
    expr                           shift and go to state 17
    class_entry_type               shift and go to state 36
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 764

    (59) declare_list -> declare_list COMMA STRING EQUALS . static_scalar
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_scalar                  shift and go to state 834
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 765

    (108) function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN . LBRACE inner_statement_list RBRACE

    LBRACE          shift and go to state 835


state 766

    (271) expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars . LBRACE inner_statement_list RBRACE

    LBRACE          shift and go to state 836


state 767

    (272) lexical_vars -> USE . LPAREN lexical_var_list RPAREN

    LPAREN          shift and go to state 837


state 768

    (273) lexical_vars -> empty .

    LBRACE          reduce using rule 273 (lexical_vars -> empty .)


state 769

    (169) parameter_list -> parameter_list COMMA parameter .

    RPAREN          reduce using rule 169 (parameter_list -> parameter_list COMMA parameter .)
    COMMA           reduce using rule 169 (parameter_list -> parameter_list COMMA parameter .)


state 770

    (176) parameter -> VARIABLE EQUALS static_scalar .

    RPAREN          reduce using rule 176 (parameter -> VARIABLE EQUALS static_scalar .)
    COMMA           reduce using rule 176 (parameter -> VARIABLE EQUALS static_scalar .)


state 771

    (177) parameter -> class_name VARIABLE EQUALS . static_scalar
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    class_name                     shift and go to state 469
    static_scalar                  shift and go to state 838
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 772

    (175) parameter -> class_name AND VARIABLE .
    (179) parameter -> class_name AND VARIABLE . EQUALS static_scalar

    RPAREN          reduce using rule 175 (parameter -> class_name AND VARIABLE .)
    COMMA           reduce using rule 175 (parameter -> class_name AND VARIABLE .)
    EQUALS          shift and go to state 839


state 773

    (178) parameter -> AND VARIABLE EQUALS . static_scalar
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_scalar                  shift and go to state 840
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 774

    (109) class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list . RBRACE
    (135) class_statement_list -> class_statement_list . class_statement
    (137) class_statement -> . method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body
    (138) class_statement -> . variable_modifiers class_variable_declaration SEMI
    (139) class_statement -> . class_constant_declaration SEMI
    (140) class_statement -> . USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE
    (141) class_statement -> . USE fully_qualified_class_name SEMI
    (154) method_modifiers -> . non_empty_member_modifiers
    (155) method_modifiers -> . empty
    (152) variable_modifiers -> . non_empty_member_modifiers
    (153) variable_modifiers -> . VAR
    (146) class_constant_declaration -> . class_constant_declaration COMMA STRING EQUALS static_expr
    (147) class_constant_declaration -> . CONST STRING EQUALS static_expr
    (158) non_empty_member_modifiers -> . non_empty_member_modifiers member_modifier
    (159) non_empty_member_modifiers -> . member_modifier
    (443) empty -> .
    (163) member_modifier -> . visibility_modifier
    (164) member_modifier -> . STATIC
    (165) member_modifier -> . ABSTRACT
    (166) member_modifier -> . FINAL
    (160) visibility_modifier -> . PUBLIC
    (161) visibility_modifier -> . PROTECTED
    (162) visibility_modifier -> . PRIVATE

    RBRACE          shift and go to state 841
    USE             shift and go to state 781
    VAR             shift and go to state 664
    CONST           shift and go to state 782
    FUNCTION        reduce using rule 443 (empty -> .)
    STATIC          shift and go to state 667
    ABSTRACT        shift and go to state 668
    FINAL           shift and go to state 669
    PUBLIC          shift and go to state 670
    PROTECTED       shift and go to state 671
    PRIVATE         shift and go to state 672

    class_statement                shift and go to state 777
    method_modifiers               shift and go to state 778
    variable_modifiers             shift and go to state 779
    class_constant_declaration     shift and go to state 780
    non_empty_member_modifiers     shift and go to state 662
    empty                          shift and go to state 663
    member_modifier                shift and go to state 665
    visibility_modifier            shift and go to state 666

state 775

    (119) fully_qualified_class_name -> NAMESPACE NS_SEPARATOR namespace_name .
    (428) namespace_name -> namespace_name . NS_SEPARATOR STRING

    IMPLEMENTS      reduce using rule 119 (fully_qualified_class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    LBRACE          reduce using rule 119 (fully_qualified_class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    COMMA           reduce using rule 119 (fully_qualified_class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    SEMI            reduce using rule 119 (fully_qualified_class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    VARIABLE        reduce using rule 119 (fully_qualified_class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    DOUBLE_COLON    reduce using rule 119 (fully_qualified_class_name -> NAMESPACE NS_SEPARATOR namespace_name .)
    NS_SEPARATOR    shift and go to state 118


state 776

    (110) class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .

    HALT_COMPILER   reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    NAMESPACE       reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    CONST           reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    USE             reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    LBRACE          reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    IF              reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    WHILE           reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    DO              reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    FOR             reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    FOREACH         reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    SWITCH          reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    BREAK           reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    CONTINUE        reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    RETURN          reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    GLOBAL          reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    STATIC          reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    ECHO            reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    INLINE_HTML     reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    UNSET           reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    SEMI            reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    TRY             reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    THROW           reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    DECLARE         reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    FUNCTION        reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    INTERFACE       reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    TRAIT           reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    NEW             reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    CLONE           reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    LIST            reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    ARRAY           reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    LBRACKET        reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    PLUS            reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    MINUS           reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    NOT             reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    BOOLEAN_NOT     reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    INC             reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    DEC             reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    INT_CAST        reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    DOUBLE_CAST     reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    STRING_CAST     reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    ARRAY_CAST      reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    OBJECT_CAST     reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    BOOL_CAST       reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    UNSET_CAST      reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    BINARY_CAST     reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    ISSET           reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    EMPTY           reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    EVAL            reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    INCLUDE         reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    INCLUDE_ONCE    reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    REQUIRE         reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    REQUIRE_ONCE    reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    PRINT           reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    AT              reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    LPAREN          reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    CLASS           reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    ABSTRACT        reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    FINAL           reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    QUOTE           reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    STRING          reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    STRING_VARNAME  reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    NS_SEPARATOR    reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    EXIT            reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    DIE             reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    LNUMBER         reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    DNUMBER         reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    LINE            reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    FILE            reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    DIR             reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    CLASS_C         reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    METHOD_C        reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    FUNC_C          reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    NS_C            reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    START_HEREDOC   reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    START_NOWDOC    reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    BACKTICK        reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    DOLLAR          reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    VARIABLE        reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    $end            reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    RBRACE          reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    YIELD           reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    ELSEIF          reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    ELSE            reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    ENDIF           reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    ENDWHILE        reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    ENDDECLARE      reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    ENDFOREACH      reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    CASE            reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    DEFAULT         reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    ENDSWITCH       reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)
    ENDFOR          reduce using rule 110 (class_declaration_statement -> INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE .)


state 777

    (135) class_statement_list -> class_statement_list class_statement .

    RBRACE          reduce using rule 135 (class_statement_list -> class_statement_list class_statement .)
    USE             reduce using rule 135 (class_statement_list -> class_statement_list class_statement .)
    VAR             reduce using rule 135 (class_statement_list -> class_statement_list class_statement .)
    CONST           reduce using rule 135 (class_statement_list -> class_statement_list class_statement .)
    STATIC          reduce using rule 135 (class_statement_list -> class_statement_list class_statement .)
    ABSTRACT        reduce using rule 135 (class_statement_list -> class_statement_list class_statement .)
    FINAL           reduce using rule 135 (class_statement_list -> class_statement_list class_statement .)
    PUBLIC          reduce using rule 135 (class_statement_list -> class_statement_list class_statement .)
    PROTECTED       reduce using rule 135 (class_statement_list -> class_statement_list class_statement .)
    PRIVATE         reduce using rule 135 (class_statement_list -> class_statement_list class_statement .)
    FUNCTION        reduce using rule 135 (class_statement_list -> class_statement_list class_statement .)


state 778

    (137) class_statement -> method_modifiers . FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body

    FUNCTION        shift and go to state 842


state 779

    (138) class_statement -> variable_modifiers . class_variable_declaration SEMI
    (142) class_variable_declaration -> . class_variable_declaration COMMA VARIABLE EQUALS static_scalar
    (143) class_variable_declaration -> . VARIABLE EQUALS static_scalar
    (144) class_variable_declaration -> . class_variable_declaration COMMA VARIABLE
    (145) class_variable_declaration -> . VARIABLE

    VARIABLE        shift and go to state 786

    class_variable_declaration     shift and go to state 843

state 780

    (139) class_statement -> class_constant_declaration . SEMI
    (146) class_constant_declaration -> class_constant_declaration . COMMA STRING EQUALS static_expr

    SEMI            shift and go to state 844
    COMMA           shift and go to state 845


state 781

    (140) class_statement -> USE . fully_qualified_class_name LBRACE trait_modifiers_list RBRACE
    (141) class_statement -> USE . fully_qualified_class_name SEMI
    (117) fully_qualified_class_name -> . namespace_name
    (118) fully_qualified_class_name -> . NS_SEPARATOR namespace_name
    (119) fully_qualified_class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    NS_SEPARATOR    shift and go to state 517
    NAMESPACE       shift and go to state 518
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117

    fully_qualified_class_name     shift and go to state 846
    namespace_name                 shift and go to state 516

state 782

    (147) class_constant_declaration -> CONST . STRING EQUALS static_expr

    STRING          shift and go to state 847


state 783

    (148) interface_list -> interface_list COMMA fully_qualified_class_name .

    COMMA           reduce using rule 148 (interface_list -> interface_list COMMA fully_qualified_class_name .)
    LBRACE          reduce using rule 148 (interface_list -> interface_list COMMA fully_qualified_class_name .)


state 784

    (131) trait_statement -> method_modifiers FUNCTION . is_reference STRING LPAREN parameter_list RPAREN method_body
    (167) is_reference -> . AND
    (168) is_reference -> . empty
    (443) empty -> .

    AND             shift and go to state 184
    STRING          reduce using rule 443 (empty -> .)

    is_reference                   shift and go to state 848
    empty                          shift and go to state 185

state 785

    (132) trait_statement -> variable_modifiers class_variable_declaration . SEMI
    (142) class_variable_declaration -> class_variable_declaration . COMMA VARIABLE EQUALS static_scalar
    (144) class_variable_declaration -> class_variable_declaration . COMMA VARIABLE

    SEMI            shift and go to state 849
    COMMA           shift and go to state 850


state 786

    (143) class_variable_declaration -> VARIABLE . EQUALS static_scalar
    (145) class_variable_declaration -> VARIABLE .

    EQUALS          shift and go to state 851
    SEMI            reduce using rule 145 (class_variable_declaration -> VARIABLE .)
    COMMA           reduce using rule 145 (class_variable_declaration -> VARIABLE .)


state 787

    (133) trait_statement -> USE fully_qualified_class_name . LBRACE trait_modifiers_list RBRACE
    (134) trait_statement -> USE fully_qualified_class_name . SEMI

    LBRACE          shift and go to state 852
    SEMI            shift and go to state 853


state 788

    (158) non_empty_member_modifiers -> non_empty_member_modifiers member_modifier .

    STATIC          reduce using rule 158 (non_empty_member_modifiers -> non_empty_member_modifiers member_modifier .)
    ABSTRACT        reduce using rule 158 (non_empty_member_modifiers -> non_empty_member_modifiers member_modifier .)
    FINAL           reduce using rule 158 (non_empty_member_modifiers -> non_empty_member_modifiers member_modifier .)
    PUBLIC          reduce using rule 158 (non_empty_member_modifiers -> non_empty_member_modifiers member_modifier .)
    PROTECTED       reduce using rule 158 (non_empty_member_modifiers -> non_empty_member_modifiers member_modifier .)
    PRIVATE         reduce using rule 158 (non_empty_member_modifiers -> non_empty_member_modifiers member_modifier .)
    FUNCTION        reduce using rule 158 (non_empty_member_modifiers -> non_empty_member_modifiers member_modifier .)
    VARIABLE        reduce using rule 158 (non_empty_member_modifiers -> non_empty_member_modifiers member_modifier .)


state 789

    (231) static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .

    OBJECT_OPERATOR reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    LPAREN          reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    SEMI            reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    LBRACE          reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    BOOLEAN_AND     reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    BOOLEAN_OR      reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    LOGICAL_AND     reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    LOGICAL_OR      reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    LOGICAL_XOR     reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    AND             reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    OR              reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    XOR             reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    CONCAT          reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    PLUS            reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    MINUS           reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    MUL             reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    DIV             reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    SL              reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    SR              reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    MOD             reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_IDENTICAL    reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_EQUAL        reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_NOT_EQUAL    reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_SMALLER      reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_GREATER      reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    INSTANCEOF      reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    QUESTION        reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    RPAREN          reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    COMMA           reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    DOUBLE_ARROW    reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    RBRACKET        reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    RBRACE          reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    COLON           reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)
    AS              reduce using rule 231 (static_member -> class_name DOUBLE_COLON LBRACE expr RBRACE .)


state 790

    (195) dynamic_class_name_variable_property -> OBJECT_OPERATOR . object_property
    (243) object_property -> . variable_name object_dim_list
    (244) object_property -> . variable_without_objects
    (248) variable_name -> . STRING
    (249) variable_name -> . LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    STRING          shift and go to state 303
    LBRACE          shift and go to state 304
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    object_property                shift and go to state 854
    variable_name                  shift and go to state 301
    variable_without_objects       shift and go to state 302
    simple_indirect_reference      shift and go to state 305
    reference_variable             shift and go to state 271
    compound_variable              shift and go to state 106

state 791

    (193) dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .

    OBJECT_OPERATOR reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    LPAREN          reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    SEMI            reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    LBRACE          reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    BOOLEAN_AND     reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    BOOLEAN_OR      reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    LOGICAL_AND     reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    LOGICAL_OR      reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    LOGICAL_XOR     reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    AND             reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    OR              reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    XOR             reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    CONCAT          reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    PLUS            reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    MINUS           reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    MUL             reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    DIV             reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    SL              reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    SR              reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    MOD             reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    IS_IDENTICAL    reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    IS_NOT_IDENTICAL reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    IS_EQUAL        reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    IS_NOT_EQUAL    reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    IS_SMALLER      reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    IS_SMALLER_OR_EQUAL reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    IS_GREATER      reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    IS_GREATER_OR_EQUAL reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    INSTANCEOF      reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    QUESTION        reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    RPAREN          reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    COMMA           reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    DOUBLE_ARROW    reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    RBRACKET        reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    RBRACE          reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    COLON           reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)
    AS              reduce using rule 193 (dynamic_class_name_variable_properties -> dynamic_class_name_variable_properties dynamic_class_name_variable_property .)


state 792

    (232) static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .

    OBJECT_OPERATOR reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    LPAREN          reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    SEMI            reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    LBRACE          reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    BOOLEAN_AND     reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    BOOLEAN_OR      reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    LOGICAL_AND     reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    LOGICAL_OR      reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    LOGICAL_XOR     reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    AND             reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    OR              reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    XOR             reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    CONCAT          reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    PLUS            reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    MINUS           reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    MUL             reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    DIV             reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    SL              reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    SR              reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    MOD             reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_IDENTICAL    reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_EQUAL        reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_NOT_EQUAL    reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_SMALLER      reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_GREATER      reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    INSTANCEOF      reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    QUESTION        reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    RPAREN          reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    COMMA           reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    DOUBLE_ARROW    reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    RBRACKET        reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    RBRACE          reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    COLON           reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)
    AS              reduce using rule 232 (static_member -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE .)


state 793

    (204) assignment_list_element -> LIST LPAREN assignment_list RPAREN .

    RPAREN          reduce using rule 204 (assignment_list_element -> LIST LPAREN assignment_list RPAREN .)
    COMMA           reduce using rule 204 (assignment_list_element -> LIST LPAREN assignment_list RPAREN .)


state 794

    (199) expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    SEMI            reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .)
    OBJECT_OPERATOR reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .)
    LBRACE          reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .)
    LOGICAL_AND     reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .)
    LOGICAL_OR      reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .)
    LOGICAL_XOR     reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .)
    RPAREN          reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .)
    COMMA           reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .)
    DOUBLE_ARROW    reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .)
    RBRACKET        reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .)
    RBRACE          reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .)
    COLON           reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .)
    AS              reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .)
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158

  ! BOOLEAN_AND     [ reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! BOOLEAN_OR      [ reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! AND             [ reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! OR              [ reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! XOR             [ reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! CONCAT          [ reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! PLUS            [ reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! MINUS           [ reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! MUL             [ reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! DIV             [ reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! SL              [ reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! SR              [ reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! MOD             [ reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! IS_IDENTICAL    [ reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! IS_EQUAL        [ reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! IS_SMALLER      [ reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! IS_GREATER      [ reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! INSTANCEOF      [ reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! QUESTION        [ reduce using rule 199 (expr -> LIST LPAREN assignment_list RPAREN EQUALS expr .) ]
  ! OBJECT_OPERATOR [ shift and go to state 131 ]
  ! LBRACE          [ shift and go to state 132 ]
  ! LOGICAL_AND     [ shift and go to state 135 ]
  ! LOGICAL_OR      [ shift and go to state 136 ]
  ! LOGICAL_XOR     [ shift and go to state 137 ]


state 795

    (261) non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr DOUBLE_ARROW expr .
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    COMMA           reduce using rule 261 (non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr DOUBLE_ARROW expr .)
    RBRACKET        reduce using rule 261 (non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr DOUBLE_ARROW expr .)
    RPAREN          reduce using rule 261 (non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr DOUBLE_ARROW expr .)
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 796

    (260) non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr DOUBLE_ARROW AND . variable
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NS_SEPARATOR    shift and go to state 230
    NAMESPACE       shift and go to state 231
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107

    variable                       shift and go to state 855
    base_variable_with_function_calls shift and go to state 73
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    namespace_name                 shift and go to state 229
    class_name                     shift and go to state 232
    variable_without_objects       shift and go to state 102
    variable_class_name            shift and go to state 233
    reference_variable             shift and go to state 234
    compound_variable              shift and go to state 106

state 797

    (224) variable_property -> OBJECT_OPERATOR . object_property method_or_not
    (243) object_property -> . variable_name object_dim_list
    (244) object_property -> . variable_without_objects
    (248) variable_name -> . STRING
    (249) variable_name -> . LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    STRING          shift and go to state 303
    LBRACE          shift and go to state 304
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    object_property                shift and go to state 856
    variable_name                  shift and go to state 301
    variable_without_objects       shift and go to state 302
    simple_indirect_reference      shift and go to state 305
    reference_variable             shift and go to state 271
    compound_variable              shift and go to state 106

state 798

    (222) variable_properties -> variable_properties variable_property .

    OBJECT_OPERATOR reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    EQUALS          reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    PLUS_EQUAL      reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    MINUS_EQUAL     reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    MUL_EQUAL       reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    DIV_EQUAL       reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    CONCAT_EQUAL    reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    MOD_EQUAL       reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    AND_EQUAL       reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    OR_EQUAL        reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    XOR_EQUAL       reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    SL_EQUAL        reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    SR_EQUAL        reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    INC             reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    DEC             reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    LBRACKET        reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    SEMI            reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    LBRACE          reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    BOOLEAN_AND     reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    BOOLEAN_OR      reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    LOGICAL_AND     reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    LOGICAL_OR      reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    LOGICAL_XOR     reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    AND             reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    OR              reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    XOR             reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    CONCAT          reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    PLUS            reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    MINUS           reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    MUL             reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    DIV             reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    SL              reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    SR              reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    MOD             reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    IS_IDENTICAL    reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    IS_NOT_IDENTICAL reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    IS_EQUAL        reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    IS_NOT_EQUAL    reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    IS_SMALLER      reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    IS_SMALLER_OR_EQUAL reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    IS_GREATER      reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    IS_GREATER_OR_EQUAL reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    INSTANCEOF      reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    QUESTION        reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    RPAREN          reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    COMMA           reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    DOUBLE_ARROW    reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    RBRACKET        reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    RBRACE          reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    COLON           reduce using rule 222 (variable_properties -> variable_properties variable_property .)
    AS              reduce using rule 222 (variable_properties -> variable_properties variable_property .)


state 799

    (435) encaps_var -> VARIABLE LBRACKET encaps_var_offset RBRACKET .

    QUOTE           reduce using rule 435 (encaps_var -> VARIABLE LBRACKET encaps_var_offset RBRACKET .)
    ENCAPSED_AND_WHITESPACE reduce using rule 435 (encaps_var -> VARIABLE LBRACKET encaps_var_offset RBRACKET .)
    VARIABLE        reduce using rule 435 (encaps_var -> VARIABLE LBRACKET encaps_var_offset RBRACKET .)
    DOLLAR_OPEN_CURLY_BRACES reduce using rule 435 (encaps_var -> VARIABLE LBRACKET encaps_var_offset RBRACKET .)
    CURLY_OPEN      reduce using rule 435 (encaps_var -> VARIABLE LBRACKET encaps_var_offset RBRACKET .)
    END_HEREDOC     reduce using rule 435 (encaps_var -> VARIABLE LBRACKET encaps_var_offset RBRACKET .)
    BACKTICK        reduce using rule 435 (encaps_var -> VARIABLE LBRACKET encaps_var_offset RBRACKET .)


state 800

    (438) encaps_var -> DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET expr . RBRACKET RBRACE
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    RBRACKET        shift and go to state 857
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 801

    (212) function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .

    OBJECT_OPERATOR reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    PLUS_EQUAL      reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    MINUS_EQUAL     reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    MUL_EQUAL       reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    DIV_EQUAL       reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    CONCAT_EQUAL    reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    MOD_EQUAL       reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    AND_EQUAL       reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    OR_EQUAL        reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    XOR_EQUAL       reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    SL_EQUAL        reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    SR_EQUAL        reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    INC             reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    DEC             reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    LBRACKET        reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    SEMI            reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    LBRACE          reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_AND     reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_OR      reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_AND     reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_OR      reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_XOR     reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    XOR             reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    CONCAT          reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    MUL             reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    DIV             reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    SL              reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    SR              reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    MOD             reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_IDENTICAL    reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_EQUAL        reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_EQUAL    reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER      reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER      reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    INSTANCEOF      reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    QUESTION        reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    COMMA           reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    DOUBLE_ARROW    reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    RBRACE          reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 212 (function_call -> class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)


state 802

    (213) function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .

    OBJECT_OPERATOR reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    PLUS_EQUAL      reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MINUS_EQUAL     reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MUL_EQUAL       reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    DIV_EQUAL       reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    CONCAT_EQUAL    reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MOD_EQUAL       reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    AND_EQUAL       reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    OR_EQUAL        reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    XOR_EQUAL       reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SL_EQUAL        reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SR_EQUAL        reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    INC             reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    DEC             reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    LBRACKET        reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SEMI            reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    LBRACE          reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_AND     reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_OR      reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_AND     reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_OR      reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_XOR     reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    XOR             reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    CONCAT          reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MUL             reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    DIV             reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SL              reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SR              reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MOD             reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_IDENTICAL    reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_EQUAL        reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_EQUAL    reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER      reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER      reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    INSTANCEOF      reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    QUESTION        reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    COMMA           reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    DOUBLE_ARROW    reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    RBRACE          reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 213 (function_call -> class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)


state 803

    (216) function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN . function_call_parameter_list RPAREN
    (266) function_call_parameter_list -> . function_call_parameter_list COMMA function_call_parameter
    (267) function_call_parameter_list -> . function_call_parameter
    (268) function_call_parameter_list -> . empty
    (269) function_call_parameter -> . expr
    (270) function_call_parameter -> . AND variable
    (443) empty -> .
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 284
    RPAREN          reduce using rule 443 (empty -> .)
    COMMA           reduce using rule 443 (empty -> .)
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    class_name                     shift and go to state 86
    expr                           shift and go to state 283
    function_call_parameter_list   shift and go to state 858
    function_call_parameter        shift and go to state 281
    empty                          shift and go to state 282
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 804

    (214) function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .

    OBJECT_OPERATOR reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    PLUS_EQUAL      reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    MINUS_EQUAL     reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    MUL_EQUAL       reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    DIV_EQUAL       reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    CONCAT_EQUAL    reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    MOD_EQUAL       reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    AND_EQUAL       reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    OR_EQUAL        reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    XOR_EQUAL       reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    SL_EQUAL        reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    SR_EQUAL        reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    INC             reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    DEC             reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    LBRACKET        reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    SEMI            reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    LBRACE          reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_AND     reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_OR      reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_AND     reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_OR      reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_XOR     reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    XOR             reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    CONCAT          reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    MUL             reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    DIV             reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    SL              reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    SR              reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    MOD             reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_IDENTICAL    reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_EQUAL        reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_EQUAL    reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER      reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER      reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    INSTANCEOF      reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    QUESTION        reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    COMMA           reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    DOUBLE_ARROW    reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    RBRACE          reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 214 (function_call -> variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN .)


state 805

    (215) function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .

    OBJECT_OPERATOR reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    PLUS_EQUAL      reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MINUS_EQUAL     reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MUL_EQUAL       reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    DIV_EQUAL       reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    CONCAT_EQUAL    reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MOD_EQUAL       reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    AND_EQUAL       reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    OR_EQUAL        reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    XOR_EQUAL       reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SL_EQUAL        reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SR_EQUAL        reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    INC             reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    DEC             reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    LBRACKET        reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SEMI            reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    LBRACE          reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_AND     reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_OR      reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_AND     reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_OR      reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_XOR     reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    XOR             reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    CONCAT          reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MUL             reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    DIV             reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SL              reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    SR              reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    MOD             reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_IDENTICAL    reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_EQUAL        reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_EQUAL    reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER      reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER      reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    INSTANCEOF      reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    QUESTION        reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    COMMA           reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    DOUBLE_ARROW    reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    RBRACE          reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 215 (function_call -> variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN .)


state 806

    (217) function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN . function_call_parameter_list RPAREN
    (266) function_call_parameter_list -> . function_call_parameter_list COMMA function_call_parameter
    (267) function_call_parameter_list -> . function_call_parameter
    (268) function_call_parameter_list -> . empty
    (269) function_call_parameter -> . expr
    (270) function_call_parameter -> . AND variable
    (443) empty -> .
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    AND             shift and go to state 284
    RPAREN          reduce using rule 443 (empty -> .)
    COMMA           reduce using rule 443 (empty -> .)
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    variable_class_name            shift and go to state 87
    expr                           shift and go to state 283
    function_call_parameter_list   shift and go to state 859
    function_call_parameter        shift and go to state 281
    empty                          shift and go to state 282
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 807

    (394) static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .

    BOOLEAN_AND     reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    BOOLEAN_OR      reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    LOGICAL_AND     reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    LOGICAL_OR      reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    LOGICAL_XOR     reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    AND             reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    OR              reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    XOR             reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    CONCAT          reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    PLUS            reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    MINUS           reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    MUL             reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    DIV             reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    SL              reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    SR              reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    MOD             reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    IS_IDENTICAL    reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    IS_EQUAL        reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    IS_NOT_EQUAL    reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    IS_SMALLER      reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    IS_GREATER      reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    SEMI            reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    COMMA           reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    RPAREN          reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    DOUBLE_ARROW    reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)
    RBRACKET        reduce using rule 394 (static_scalar -> ARRAY LPAREN static_array_pair_list RPAREN .)


state 808

    (398) static_non_empty_array_pair_list -> static_non_empty_array_pair_list COMMA static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    COMMA           reduce using rule 398 (static_non_empty_array_pair_list -> static_non_empty_array_pair_list COMMA static_expr .)
    RBRACKET        reduce using rule 398 (static_non_empty_array_pair_list -> static_non_empty_array_pair_list COMMA static_expr .)
    RPAREN          reduce using rule 398 (static_non_empty_array_pair_list -> static_non_empty_array_pair_list COMMA static_expr .)
    BOOLEAN_AND     shift and go to state 571
    BOOLEAN_OR      shift and go to state 572
    LOGICAL_AND     shift and go to state 573
    LOGICAL_OR      shift and go to state 574
    LOGICAL_XOR     shift and go to state 575
    AND             shift and go to state 576
    OR              shift and go to state 577
    XOR             shift and go to state 578
    CONCAT          shift and go to state 579
    PLUS            shift and go to state 580
    MINUS           shift and go to state 581
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    SL              shift and go to state 584
    SR              shift and go to state 585
    MOD             shift and go to state 586
    IS_IDENTICAL    shift and go to state 587
    IS_NOT_IDENTICAL shift and go to state 588
    IS_EQUAL        shift and go to state 589
    IS_NOT_EQUAL    shift and go to state 590
    IS_SMALLER      shift and go to state 591
    IS_SMALLER_OR_EQUAL shift and go to state 592
    IS_GREATER      shift and go to state 593
    IS_GREATER_OR_EQUAL shift and go to state 594


state 809

    (400) static_non_empty_array_pair_list -> static_non_empty_array_pair_list COMMA static_scalar . DOUBLE_ARROW static_expr
    (402) static_expr -> static_scalar .

    DOUBLE_ARROW    shift and go to state 860
    BOOLEAN_AND     reduce using rule 402 (static_expr -> static_scalar .)
    BOOLEAN_OR      reduce using rule 402 (static_expr -> static_scalar .)
    LOGICAL_AND     reduce using rule 402 (static_expr -> static_scalar .)
    LOGICAL_OR      reduce using rule 402 (static_expr -> static_scalar .)
    LOGICAL_XOR     reduce using rule 402 (static_expr -> static_scalar .)
    AND             reduce using rule 402 (static_expr -> static_scalar .)
    OR              reduce using rule 402 (static_expr -> static_scalar .)
    XOR             reduce using rule 402 (static_expr -> static_scalar .)
    CONCAT          reduce using rule 402 (static_expr -> static_scalar .)
    PLUS            reduce using rule 402 (static_expr -> static_scalar .)
    MINUS           reduce using rule 402 (static_expr -> static_scalar .)
    MUL             reduce using rule 402 (static_expr -> static_scalar .)
    DIV             reduce using rule 402 (static_expr -> static_scalar .)
    SL              reduce using rule 402 (static_expr -> static_scalar .)
    SR              reduce using rule 402 (static_expr -> static_scalar .)
    MOD             reduce using rule 402 (static_expr -> static_scalar .)
    IS_IDENTICAL    reduce using rule 402 (static_expr -> static_scalar .)
    IS_NOT_IDENTICAL reduce using rule 402 (static_expr -> static_scalar .)
    IS_EQUAL        reduce using rule 402 (static_expr -> static_scalar .)
    IS_NOT_EQUAL    reduce using rule 402 (static_expr -> static_scalar .)
    IS_SMALLER      reduce using rule 402 (static_expr -> static_scalar .)
    IS_SMALLER_OR_EQUAL reduce using rule 402 (static_expr -> static_scalar .)
    IS_GREATER      reduce using rule 402 (static_expr -> static_scalar .)
    IS_GREATER_OR_EQUAL reduce using rule 402 (static_expr -> static_scalar .)
    COMMA           reduce using rule 402 (static_expr -> static_scalar .)
    RBRACKET        reduce using rule 402 (static_expr -> static_scalar .)
    RPAREN          reduce using rule 402 (static_expr -> static_scalar .)


state 810

    (401) static_non_empty_array_pair_list -> static_scalar DOUBLE_ARROW static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    COMMA           reduce using rule 401 (static_non_empty_array_pair_list -> static_scalar DOUBLE_ARROW static_expr .)
    RBRACKET        reduce using rule 401 (static_non_empty_array_pair_list -> static_scalar DOUBLE_ARROW static_expr .)
    RPAREN          reduce using rule 401 (static_non_empty_array_pair_list -> static_scalar DOUBLE_ARROW static_expr .)
    BOOLEAN_AND     shift and go to state 571
    BOOLEAN_OR      shift and go to state 572
    LOGICAL_AND     shift and go to state 573
    LOGICAL_OR      shift and go to state 574
    LOGICAL_XOR     shift and go to state 575
    AND             shift and go to state 576
    OR              shift and go to state 577
    XOR             shift and go to state 578
    CONCAT          shift and go to state 579
    PLUS            shift and go to state 580
    MINUS           shift and go to state 581
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    SL              shift and go to state 584
    SR              shift and go to state 585
    MOD             shift and go to state 586
    IS_IDENTICAL    shift and go to state 587
    IS_NOT_IDENTICAL shift and go to state 588
    IS_EQUAL        shift and go to state 589
    IS_NOT_EQUAL    shift and go to state 590
    IS_SMALLER      shift and go to state 591
    IS_SMALLER_OR_EQUAL shift and go to state 592
    IS_GREATER      shift and go to state 593
    IS_GREATER_OR_EQUAL shift and go to state 594


state 811

    (31) statement -> IF LPAREN expr RPAREN statement elseif_list else_single .

    HALT_COMPILER   reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    NAMESPACE       reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    CONST           reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    USE             reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    LBRACE          reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    IF              reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    WHILE           reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    DO              reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    FOR             reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    FOREACH         reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    SWITCH          reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    BREAK           reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    CONTINUE        reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    RETURN          reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    GLOBAL          reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    STATIC          reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    ECHO            reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    INLINE_HTML     reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    UNSET           reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    SEMI            reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    TRY             reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    THROW           reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    DECLARE         reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    FUNCTION        reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    INTERFACE       reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    TRAIT           reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    NEW             reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    CLONE           reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    LIST            reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    ARRAY           reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    LBRACKET        reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    PLUS            reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    MINUS           reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    NOT             reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    BOOLEAN_NOT     reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    INC             reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    DEC             reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    INT_CAST        reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    DOUBLE_CAST     reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    STRING_CAST     reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    ARRAY_CAST      reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    OBJECT_CAST     reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    BOOL_CAST       reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    UNSET_CAST      reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    BINARY_CAST     reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    ISSET           reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    EMPTY           reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    EVAL            reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    INCLUDE         reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    INCLUDE_ONCE    reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    REQUIRE         reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    REQUIRE_ONCE    reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    PRINT           reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    AT              reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    LPAREN          reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    CLASS           reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    ABSTRACT        reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    FINAL           reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    QUOTE           reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    STRING          reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    STRING_VARNAME  reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    NS_SEPARATOR    reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    EXIT            reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    DIE             reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    LNUMBER         reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    DNUMBER         reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    CONSTANT_ENCAPSED_STRING reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    LINE            reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    FILE            reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    DIR             reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    CLASS_C         reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    METHOD_C        reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    FUNC_C          reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    NS_C            reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    START_HEREDOC   reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    START_NOWDOC    reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    BACKTICK        reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    DOLLAR          reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    VARIABLE        reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    $end            reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    RBRACE          reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    YIELD           reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    ELSEIF          reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    ELSE            reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    ENDIF           reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    ENDWHILE        reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    ENDDECLARE      reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    ENDFOREACH      reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    CASE            reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    DEFAULT         reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    ENDSWITCH       reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)
    ENDFOR          reduce using rule 31 (statement -> IF LPAREN expr RPAREN statement elseif_list else_single .)


state 812

    (63) elseif_list -> elseif_list ELSEIF . LPAREN expr RPAREN statement

    LPAREN          shift and go to state 861


state 813

    (64) else_single -> empty .

    ELSEIF          reduce using rule 64 (else_single -> empty .)
    ELSE            reduce using rule 64 (else_single -> empty .)
    HALT_COMPILER   reduce using rule 64 (else_single -> empty .)
    NAMESPACE       reduce using rule 64 (else_single -> empty .)
    CONST           reduce using rule 64 (else_single -> empty .)
    USE             reduce using rule 64 (else_single -> empty .)
    LBRACE          reduce using rule 64 (else_single -> empty .)
    IF              reduce using rule 64 (else_single -> empty .)
    WHILE           reduce using rule 64 (else_single -> empty .)
    DO              reduce using rule 64 (else_single -> empty .)
    FOR             reduce using rule 64 (else_single -> empty .)
    FOREACH         reduce using rule 64 (else_single -> empty .)
    SWITCH          reduce using rule 64 (else_single -> empty .)
    BREAK           reduce using rule 64 (else_single -> empty .)
    CONTINUE        reduce using rule 64 (else_single -> empty .)
    RETURN          reduce using rule 64 (else_single -> empty .)
    GLOBAL          reduce using rule 64 (else_single -> empty .)
    STATIC          reduce using rule 64 (else_single -> empty .)
    ECHO            reduce using rule 64 (else_single -> empty .)
    INLINE_HTML     reduce using rule 64 (else_single -> empty .)
    UNSET           reduce using rule 64 (else_single -> empty .)
    SEMI            reduce using rule 64 (else_single -> empty .)
    TRY             reduce using rule 64 (else_single -> empty .)
    THROW           reduce using rule 64 (else_single -> empty .)
    DECLARE         reduce using rule 64 (else_single -> empty .)
    FUNCTION        reduce using rule 64 (else_single -> empty .)
    INTERFACE       reduce using rule 64 (else_single -> empty .)
    TRAIT           reduce using rule 64 (else_single -> empty .)
    NEW             reduce using rule 64 (else_single -> empty .)
    CLONE           reduce using rule 64 (else_single -> empty .)
    LIST            reduce using rule 64 (else_single -> empty .)
    ARRAY           reduce using rule 64 (else_single -> empty .)
    LBRACKET        reduce using rule 64 (else_single -> empty .)
    PLUS            reduce using rule 64 (else_single -> empty .)
    MINUS           reduce using rule 64 (else_single -> empty .)
    NOT             reduce using rule 64 (else_single -> empty .)
    BOOLEAN_NOT     reduce using rule 64 (else_single -> empty .)
    INC             reduce using rule 64 (else_single -> empty .)
    DEC             reduce using rule 64 (else_single -> empty .)
    INT_CAST        reduce using rule 64 (else_single -> empty .)
    DOUBLE_CAST     reduce using rule 64 (else_single -> empty .)
    STRING_CAST     reduce using rule 64 (else_single -> empty .)
    ARRAY_CAST      reduce using rule 64 (else_single -> empty .)
    OBJECT_CAST     reduce using rule 64 (else_single -> empty .)
    BOOL_CAST       reduce using rule 64 (else_single -> empty .)
    UNSET_CAST      reduce using rule 64 (else_single -> empty .)
    BINARY_CAST     reduce using rule 64 (else_single -> empty .)
    ISSET           reduce using rule 64 (else_single -> empty .)
    EMPTY           reduce using rule 64 (else_single -> empty .)
    EVAL            reduce using rule 64 (else_single -> empty .)
    INCLUDE         reduce using rule 64 (else_single -> empty .)
    INCLUDE_ONCE    reduce using rule 64 (else_single -> empty .)
    REQUIRE         reduce using rule 64 (else_single -> empty .)
    REQUIRE_ONCE    reduce using rule 64 (else_single -> empty .)
    PRINT           reduce using rule 64 (else_single -> empty .)
    AT              reduce using rule 64 (else_single -> empty .)
    LPAREN          reduce using rule 64 (else_single -> empty .)
    CLASS           reduce using rule 64 (else_single -> empty .)
    ABSTRACT        reduce using rule 64 (else_single -> empty .)
    FINAL           reduce using rule 64 (else_single -> empty .)
    QUOTE           reduce using rule 64 (else_single -> empty .)
    STRING          reduce using rule 64 (else_single -> empty .)
    STRING_VARNAME  reduce using rule 64 (else_single -> empty .)
    NS_SEPARATOR    reduce using rule 64 (else_single -> empty .)
    EXIT            reduce using rule 64 (else_single -> empty .)
    DIE             reduce using rule 64 (else_single -> empty .)
    LNUMBER         reduce using rule 64 (else_single -> empty .)
    DNUMBER         reduce using rule 64 (else_single -> empty .)
    CONSTANT_ENCAPSED_STRING reduce using rule 64 (else_single -> empty .)
    LINE            reduce using rule 64 (else_single -> empty .)
    FILE            reduce using rule 64 (else_single -> empty .)
    DIR             reduce using rule 64 (else_single -> empty .)
    CLASS_C         reduce using rule 64 (else_single -> empty .)
    METHOD_C        reduce using rule 64 (else_single -> empty .)
    FUNC_C          reduce using rule 64 (else_single -> empty .)
    NS_C            reduce using rule 64 (else_single -> empty .)
    START_HEREDOC   reduce using rule 64 (else_single -> empty .)
    START_NOWDOC    reduce using rule 64 (else_single -> empty .)
    BACKTICK        reduce using rule 64 (else_single -> empty .)
    DOLLAR          reduce using rule 64 (else_single -> empty .)
    VARIABLE        reduce using rule 64 (else_single -> empty .)
    $end            reduce using rule 64 (else_single -> empty .)
    RBRACE          reduce using rule 64 (else_single -> empty .)
    YIELD           reduce using rule 64 (else_single -> empty .)
    ENDIF           reduce using rule 64 (else_single -> empty .)
    ENDWHILE        reduce using rule 64 (else_single -> empty .)
    ENDDECLARE      reduce using rule 64 (else_single -> empty .)
    ENDFOREACH      reduce using rule 64 (else_single -> empty .)
    CASE            reduce using rule 64 (else_single -> empty .)
    DEFAULT         reduce using rule 64 (else_single -> empty .)
    ENDSWITCH       reduce using rule 64 (else_single -> empty .)
    ENDFOR          reduce using rule 64 (else_single -> empty .)


state 814

    (65) else_single -> ELSE . statement
    (30) statement -> . LBRACE inner_statement_list RBRACE
    (31) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (33) statement -> . WHILE LPAREN expr RPAREN while_statement
    (34) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (35) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (36) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (37) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (38) statement -> . BREAK SEMI
    (39) statement -> . BREAK expr SEMI
    (40) statement -> . CONTINUE SEMI
    (41) statement -> . CONTINUE expr SEMI
    (42) statement -> . RETURN SEMI
    (43) statement -> . RETURN expr SEMI
    (44) statement -> . GLOBAL global_var_list SEMI
    (45) statement -> . STATIC static_var_list SEMI
    (46) statement -> . ECHO echo_expr_list SEMI
    (47) statement -> . INLINE_HTML
    (48) statement -> . expr SEMI
    (49) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (50) statement -> . SEMI
    (51) statement -> . TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
    (56) statement -> . THROW expr SEMI
    (57) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LBRACE          shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    FOREACH         shift and go to state 21
    SWITCH          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    GLOBAL          shift and go to state 26
    STATIC          shift and go to state 27
    ECHO            shift and go to state 28
    INLINE_HTML     shift and go to state 29
    UNSET           shift and go to state 30
    SEMI            shift and go to state 10
    TRY             shift and go to state 31
    THROW           shift and go to state 32
    DECLARE         shift and go to state 33
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    statement                      shift and go to state 862
    expr                           shift and go to state 17
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 815

    (32) statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list . new_else_single ENDIF SEMI
    (67) new_elseif_list -> new_elseif_list . ELSEIF LPAREN expr RPAREN COLON inner_statement_list
    (68) new_else_single -> . empty
    (69) new_else_single -> . ELSE COLON inner_statement_list
    (443) empty -> .

    ELSEIF          shift and go to state 864
    ELSE            shift and go to state 866
    ENDIF           reduce using rule 443 (empty -> .)

    new_else_single                shift and go to state 863
    empty                          shift and go to state 865

state 816

    (66) new_elseif_list -> empty .

    ELSEIF          reduce using rule 66 (new_elseif_list -> empty .)
    ELSE            reduce using rule 66 (new_elseif_list -> empty .)
    ENDIF           reduce using rule 66 (new_elseif_list -> empty .)


state 817

    (246) object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .

    LBRACKET        reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    LBRACE          reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    LPAREN          reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    SEMI            reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    OBJECT_OPERATOR reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    BOOLEAN_AND     reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    BOOLEAN_OR      reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    LOGICAL_AND     reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    LOGICAL_OR      reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    LOGICAL_XOR     reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    AND             reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    OR              reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    XOR             reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    CONCAT          reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    PLUS            reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    MINUS           reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    MUL             reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    DIV             reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    SL              reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    SR              reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    MOD             reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    IS_IDENTICAL    reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    IS_NOT_IDENTICAL reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    IS_EQUAL        reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    IS_NOT_EQUAL    reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    IS_SMALLER      reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    IS_SMALLER_OR_EQUAL reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    IS_GREATER      reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    IS_GREATER_OR_EQUAL reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    INSTANCEOF      reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    QUESTION        reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    RPAREN          reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    COMMA           reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    DOUBLE_ARROW    reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    RBRACKET        reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    RBRACE          reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    COLON           reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    AS              reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    EQUALS          reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    PLUS_EQUAL      reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    MINUS_EQUAL     reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    MUL_EQUAL       reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    DIV_EQUAL       reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    CONCAT_EQUAL    reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    MOD_EQUAL       reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    AND_EQUAL       reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    OR_EQUAL        reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    XOR_EQUAL       reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    SL_EQUAL        reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    SR_EQUAL        reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    INC             reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)
    DEC             reduce using rule 246 (object_dim_list -> object_dim_list LBRACKET dim_offset RBRACKET .)


state 818

    (247) object_dim_list -> object_dim_list LBRACE expr RBRACE .

    LBRACKET        reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    LBRACE          reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    LPAREN          reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    SEMI            reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    OBJECT_OPERATOR reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    BOOLEAN_AND     reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    BOOLEAN_OR      reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    LOGICAL_AND     reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    LOGICAL_OR      reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    LOGICAL_XOR     reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    AND             reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    OR              reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    XOR             reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    CONCAT          reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    PLUS            reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    MINUS           reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    MUL             reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    DIV             reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    SL              reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    SR              reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    MOD             reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    IS_IDENTICAL    reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    IS_EQUAL        reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    IS_NOT_EQUAL    reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    IS_SMALLER      reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    IS_GREATER      reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    INSTANCEOF      reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    QUESTION        reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    RPAREN          reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    COMMA           reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    DOUBLE_ARROW    reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    RBRACKET        reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    RBRACE          reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    COLON           reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    AS              reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    EQUALS          reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    PLUS_EQUAL      reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    MINUS_EQUAL     reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    MUL_EQUAL       reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    DIV_EQUAL       reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    CONCAT_EQUAL    reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    MOD_EQUAL       reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    AND_EQUAL       reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    OR_EQUAL        reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    XOR_EQUAL       reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    SL_EQUAL        reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    SR_EQUAL        reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    INC             reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)
    DEC             reduce using rule 247 (object_dim_list -> object_dim_list LBRACE expr RBRACE .)


state 819

    (71) while_statement -> COLON inner_statement_list ENDWHILE . SEMI

    SEMI            shift and go to state 867


state 820

    (34) statement -> DO statement WHILE LPAREN expr RPAREN SEMI .

    HALT_COMPILER   reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    NAMESPACE       reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    CONST           reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    USE             reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    LBRACE          reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    IF              reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    WHILE           reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    DO              reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    FOR             reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    FOREACH         reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    SWITCH          reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    BREAK           reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    CONTINUE        reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    RETURN          reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    GLOBAL          reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    STATIC          reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    ECHO            reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    INLINE_HTML     reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    UNSET           reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    SEMI            reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    TRY             reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    THROW           reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    DECLARE         reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    FUNCTION        reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    INTERFACE       reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    TRAIT           reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    NEW             reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    CLONE           reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    LIST            reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    ARRAY           reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    LBRACKET        reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    PLUS            reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    MINUS           reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    NOT             reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    INC             reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    DEC             reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    INT_CAST        reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    DOUBLE_CAST     reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    STRING_CAST     reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    ARRAY_CAST      reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    OBJECT_CAST     reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    BOOL_CAST       reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    UNSET_CAST      reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    BINARY_CAST     reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    ISSET           reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    EMPTY           reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    EVAL            reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    INCLUDE         reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    INCLUDE_ONCE    reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    REQUIRE         reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    REQUIRE_ONCE    reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    PRINT           reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    AT              reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    LPAREN          reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    CLASS           reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    ABSTRACT        reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    FINAL           reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    QUOTE           reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    STRING          reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    STRING_VARNAME  reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    NS_SEPARATOR    reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    EXIT            reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    DIE             reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    LNUMBER         reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    DNUMBER         reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    LINE            reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    FILE            reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    DIR             reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    CLASS_C         reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    METHOD_C        reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    FUNC_C          reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    NS_C            reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    START_HEREDOC   reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    START_NOWDOC    reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    BACKTICK        reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    DOLLAR          reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    VARIABLE        reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    $end            reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    RBRACE          reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    YIELD           reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    ELSEIF          reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    ELSE            reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    ENDIF           reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    ENDWHILE        reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    ENDDECLARE      reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    ENDFOREACH      reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    CASE            reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    DEFAULT         reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    ENDSWITCH       reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)
    ENDFOR          reduce using rule 34 (statement -> DO statement WHILE LPAREN expr RPAREN SEMI .)


state 821

    (35) statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr . RPAREN for_statement

    RPAREN          shift and go to state 868


state 822

    (36) statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN . foreach_statement
    (83) foreach_statement -> . statement
    (84) foreach_statement -> . COLON inner_statement_list ENDFOREACH SEMI
    (30) statement -> . LBRACE inner_statement_list RBRACE
    (31) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (33) statement -> . WHILE LPAREN expr RPAREN while_statement
    (34) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (35) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (36) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (37) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (38) statement -> . BREAK SEMI
    (39) statement -> . BREAK expr SEMI
    (40) statement -> . CONTINUE SEMI
    (41) statement -> . CONTINUE expr SEMI
    (42) statement -> . RETURN SEMI
    (43) statement -> . RETURN expr SEMI
    (44) statement -> . GLOBAL global_var_list SEMI
    (45) statement -> . STATIC static_var_list SEMI
    (46) statement -> . ECHO echo_expr_list SEMI
    (47) statement -> . INLINE_HTML
    (48) statement -> . expr SEMI
    (49) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (50) statement -> . SEMI
    (51) statement -> . TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
    (56) statement -> . THROW expr SEMI
    (57) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    COLON           shift and go to state 871
    LBRACE          shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    FOREACH         shift and go to state 21
    SWITCH          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    GLOBAL          shift and go to state 26
    STATIC          shift and go to state 27
    ECHO            shift and go to state 28
    INLINE_HTML     shift and go to state 29
    UNSET           shift and go to state 30
    SEMI            shift and go to state 10
    TRY             shift and go to state 31
    THROW           shift and go to state 32
    DECLARE         shift and go to state 33
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 17
    foreach_statement              shift and go to state 869
    statement                      shift and go to state 870
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 823

    (82) foreach_optional_arg -> DOUBLE_ARROW foreach_variable .

    RPAREN          reduce using rule 82 (foreach_optional_arg -> DOUBLE_ARROW foreach_variable .)


state 824

    (78) foreach_variable -> LIST LPAREN assignment_list . RPAREN
    (200) assignment_list -> assignment_list . COMMA assignment_list_element

    RPAREN          shift and go to state 872
    COMMA           shift and go to state 535


state 825

    (85) switch_case_list -> LBRACE case_list RBRACE .

    HALT_COMPILER   reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    NAMESPACE       reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    CONST           reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    USE             reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    LBRACE          reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    IF              reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    WHILE           reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    DO              reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    FOR             reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    FOREACH         reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    SWITCH          reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    BREAK           reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    CONTINUE        reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    RETURN          reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    GLOBAL          reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    STATIC          reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    ECHO            reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    INLINE_HTML     reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    UNSET           reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    SEMI            reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    TRY             reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    THROW           reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    DECLARE         reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    FUNCTION        reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    INTERFACE       reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    TRAIT           reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    NEW             reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    CLONE           reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    LIST            reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    ARRAY           reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    LBRACKET        reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    PLUS            reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    MINUS           reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    NOT             reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    BOOLEAN_NOT     reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    INC             reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    DEC             reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    INT_CAST        reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    DOUBLE_CAST     reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    STRING_CAST     reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    ARRAY_CAST      reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    OBJECT_CAST     reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    BOOL_CAST       reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    UNSET_CAST      reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    BINARY_CAST     reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    ISSET           reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    EMPTY           reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    EVAL            reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    INCLUDE         reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    INCLUDE_ONCE    reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    REQUIRE         reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    REQUIRE_ONCE    reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    PRINT           reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    AT              reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    LPAREN          reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    CLASS           reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    ABSTRACT        reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    FINAL           reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    QUOTE           reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    STRING          reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    STRING_VARNAME  reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    NS_SEPARATOR    reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    EXIT            reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    DIE             reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    LNUMBER         reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    DNUMBER         reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    LINE            reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    FILE            reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    DIR             reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    CLASS_C         reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    METHOD_C        reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    FUNC_C          reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    NS_C            reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    START_HEREDOC   reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    START_NOWDOC    reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    BACKTICK        reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    DOLLAR          reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    VARIABLE        reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    $end            reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    RBRACE          reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    YIELD           reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    ELSEIF          reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    ELSE            reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    ENDIF           reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    ENDWHILE        reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    ENDDECLARE      reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    ENDFOREACH      reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    CASE            reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    DEFAULT         reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    ENDSWITCH       reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)
    ENDFOR          reduce using rule 85 (switch_case_list -> LBRACE case_list RBRACE .)


state 826

    (90) case_list -> case_list CASE . expr case_separator inner_statement_list
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 873
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 827

    (91) case_list -> case_list DEFAULT . case_separator inner_statement_list
    (92) case_separator -> . COLON
    (93) case_separator -> . SEMI

    COLON           shift and go to state 875
    SEMI            shift and go to state 876

    case_separator                 shift and go to state 874

state 828

    (86) switch_case_list -> LBRACE SEMI case_list . RBRACE
    (90) case_list -> case_list . CASE expr case_separator inner_statement_list
    (91) case_list -> case_list . DEFAULT case_separator inner_statement_list

    RBRACE          shift and go to state 877
    CASE            shift and go to state 826
    DEFAULT         shift and go to state 827


state 829

    (87) switch_case_list -> COLON case_list ENDSWITCH . SEMI

    SEMI            shift and go to state 878


state 830

    (88) switch_case_list -> COLON SEMI case_list . ENDSWITCH SEMI
    (90) case_list -> case_list . CASE expr case_separator inner_statement_list
    (91) case_list -> case_list . DEFAULT case_separator inner_statement_list

    ENDSWITCH       shift and go to state 879
    CASE            shift and go to state 826
    DEFAULT         shift and go to state 827


state 831

    (52) additional_catches -> additional_catches CATCH LPAREN . fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE
    (117) fully_qualified_class_name -> . namespace_name
    (118) fully_qualified_class_name -> . NS_SEPARATOR namespace_name
    (119) fully_qualified_class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    NS_SEPARATOR    shift and go to state 517
    NAMESPACE       shift and go to state 518
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117

    fully_qualified_class_name     shift and go to state 880
    namespace_name                 shift and go to state 516

state 832

    (54) maybe_finally -> FINALLY LBRACE . inner_statement_list RBRACE
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (443) empty -> .

    RBRACE          reduce using rule 443 (empty -> .)
    HALT_COMPILER   reduce using rule 443 (empty -> .)
    YIELD           reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    IF              reduce using rule 443 (empty -> .)
    WHILE           reduce using rule 443 (empty -> .)
    DO              reduce using rule 443 (empty -> .)
    FOR             reduce using rule 443 (empty -> .)
    FOREACH         reduce using rule 443 (empty -> .)
    SWITCH          reduce using rule 443 (empty -> .)
    BREAK           reduce using rule 443 (empty -> .)
    CONTINUE        reduce using rule 443 (empty -> .)
    RETURN          reduce using rule 443 (empty -> .)
    GLOBAL          reduce using rule 443 (empty -> .)
    STATIC          reduce using rule 443 (empty -> .)
    ECHO            reduce using rule 443 (empty -> .)
    INLINE_HTML     reduce using rule 443 (empty -> .)
    UNSET           reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    TRY             reduce using rule 443 (empty -> .)
    THROW           reduce using rule 443 (empty -> .)
    DECLARE         reduce using rule 443 (empty -> .)
    FUNCTION        reduce using rule 443 (empty -> .)
    INTERFACE       reduce using rule 443 (empty -> .)
    TRAIT           reduce using rule 443 (empty -> .)
    NEW             reduce using rule 443 (empty -> .)
    CLONE           reduce using rule 443 (empty -> .)
    LIST            reduce using rule 443 (empty -> .)
    ARRAY           reduce using rule 443 (empty -> .)
    LBRACKET        reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    NOT             reduce using rule 443 (empty -> .)
    BOOLEAN_NOT     reduce using rule 443 (empty -> .)
    INC             reduce using rule 443 (empty -> .)
    DEC             reduce using rule 443 (empty -> .)
    INT_CAST        reduce using rule 443 (empty -> .)
    DOUBLE_CAST     reduce using rule 443 (empty -> .)
    STRING_CAST     reduce using rule 443 (empty -> .)
    ARRAY_CAST      reduce using rule 443 (empty -> .)
    OBJECT_CAST     reduce using rule 443 (empty -> .)
    BOOL_CAST       reduce using rule 443 (empty -> .)
    UNSET_CAST      reduce using rule 443 (empty -> .)
    BINARY_CAST     reduce using rule 443 (empty -> .)
    ISSET           reduce using rule 443 (empty -> .)
    EMPTY           reduce using rule 443 (empty -> .)
    EVAL            reduce using rule 443 (empty -> .)
    INCLUDE         reduce using rule 443 (empty -> .)
    INCLUDE_ONCE    reduce using rule 443 (empty -> .)
    REQUIRE         reduce using rule 443 (empty -> .)
    REQUIRE_ONCE    reduce using rule 443 (empty -> .)
    PRINT           reduce using rule 443 (empty -> .)
    AT              reduce using rule 443 (empty -> .)
    LPAREN          reduce using rule 443 (empty -> .)
    CLASS           reduce using rule 443 (empty -> .)
    ABSTRACT        reduce using rule 443 (empty -> .)
    FINAL           reduce using rule 443 (empty -> .)
    QUOTE           reduce using rule 443 (empty -> .)
    STRING          reduce using rule 443 (empty -> .)
    STRING_VARNAME  reduce using rule 443 (empty -> .)
    NS_SEPARATOR    reduce using rule 443 (empty -> .)
    NAMESPACE       reduce using rule 443 (empty -> .)
    EXIT            reduce using rule 443 (empty -> .)
    DIE             reduce using rule 443 (empty -> .)
    LNUMBER         reduce using rule 443 (empty -> .)
    DNUMBER         reduce using rule 443 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 443 (empty -> .)
    LINE            reduce using rule 443 (empty -> .)
    FILE            reduce using rule 443 (empty -> .)
    DIR             reduce using rule 443 (empty -> .)
    CLASS_C         reduce using rule 443 (empty -> .)
    METHOD_C        reduce using rule 443 (empty -> .)
    FUNC_C          reduce using rule 443 (empty -> .)
    NS_C            reduce using rule 443 (empty -> .)
    START_HEREDOC   reduce using rule 443 (empty -> .)
    START_NOWDOC    reduce using rule 443 (empty -> .)
    BACKTICK        reduce using rule 443 (empty -> .)
    DOLLAR          reduce using rule 443 (empty -> .)
    VARIABLE        reduce using rule 443 (empty -> .)

    inner_statement_list           shift and go to state 881
    empty                          shift and go to state 121

state 833

    (61) declare_statement -> COLON inner_statement_list ENDDECLARE . SEMI

    SEMI            shift and go to state 882


state 834

    (59) declare_list -> declare_list COMMA STRING EQUALS static_scalar .

    RPAREN          reduce using rule 59 (declare_list -> declare_list COMMA STRING EQUALS static_scalar .)
    COMMA           reduce using rule 59 (declare_list -> declare_list COMMA STRING EQUALS static_scalar .)


state 835

    (108) function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE . inner_statement_list RBRACE
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (443) empty -> .

    RBRACE          reduce using rule 443 (empty -> .)
    HALT_COMPILER   reduce using rule 443 (empty -> .)
    YIELD           reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    IF              reduce using rule 443 (empty -> .)
    WHILE           reduce using rule 443 (empty -> .)
    DO              reduce using rule 443 (empty -> .)
    FOR             reduce using rule 443 (empty -> .)
    FOREACH         reduce using rule 443 (empty -> .)
    SWITCH          reduce using rule 443 (empty -> .)
    BREAK           reduce using rule 443 (empty -> .)
    CONTINUE        reduce using rule 443 (empty -> .)
    RETURN          reduce using rule 443 (empty -> .)
    GLOBAL          reduce using rule 443 (empty -> .)
    STATIC          reduce using rule 443 (empty -> .)
    ECHO            reduce using rule 443 (empty -> .)
    INLINE_HTML     reduce using rule 443 (empty -> .)
    UNSET           reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    TRY             reduce using rule 443 (empty -> .)
    THROW           reduce using rule 443 (empty -> .)
    DECLARE         reduce using rule 443 (empty -> .)
    FUNCTION        reduce using rule 443 (empty -> .)
    INTERFACE       reduce using rule 443 (empty -> .)
    TRAIT           reduce using rule 443 (empty -> .)
    NEW             reduce using rule 443 (empty -> .)
    CLONE           reduce using rule 443 (empty -> .)
    LIST            reduce using rule 443 (empty -> .)
    ARRAY           reduce using rule 443 (empty -> .)
    LBRACKET        reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    NOT             reduce using rule 443 (empty -> .)
    BOOLEAN_NOT     reduce using rule 443 (empty -> .)
    INC             reduce using rule 443 (empty -> .)
    DEC             reduce using rule 443 (empty -> .)
    INT_CAST        reduce using rule 443 (empty -> .)
    DOUBLE_CAST     reduce using rule 443 (empty -> .)
    STRING_CAST     reduce using rule 443 (empty -> .)
    ARRAY_CAST      reduce using rule 443 (empty -> .)
    OBJECT_CAST     reduce using rule 443 (empty -> .)
    BOOL_CAST       reduce using rule 443 (empty -> .)
    UNSET_CAST      reduce using rule 443 (empty -> .)
    BINARY_CAST     reduce using rule 443 (empty -> .)
    ISSET           reduce using rule 443 (empty -> .)
    EMPTY           reduce using rule 443 (empty -> .)
    EVAL            reduce using rule 443 (empty -> .)
    INCLUDE         reduce using rule 443 (empty -> .)
    INCLUDE_ONCE    reduce using rule 443 (empty -> .)
    REQUIRE         reduce using rule 443 (empty -> .)
    REQUIRE_ONCE    reduce using rule 443 (empty -> .)
    PRINT           reduce using rule 443 (empty -> .)
    AT              reduce using rule 443 (empty -> .)
    LPAREN          reduce using rule 443 (empty -> .)
    CLASS           reduce using rule 443 (empty -> .)
    ABSTRACT        reduce using rule 443 (empty -> .)
    FINAL           reduce using rule 443 (empty -> .)
    QUOTE           reduce using rule 443 (empty -> .)
    STRING          reduce using rule 443 (empty -> .)
    STRING_VARNAME  reduce using rule 443 (empty -> .)
    NS_SEPARATOR    reduce using rule 443 (empty -> .)
    NAMESPACE       reduce using rule 443 (empty -> .)
    EXIT            reduce using rule 443 (empty -> .)
    DIE             reduce using rule 443 (empty -> .)
    LNUMBER         reduce using rule 443 (empty -> .)
    DNUMBER         reduce using rule 443 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 443 (empty -> .)
    LINE            reduce using rule 443 (empty -> .)
    FILE            reduce using rule 443 (empty -> .)
    DIR             reduce using rule 443 (empty -> .)
    CLASS_C         reduce using rule 443 (empty -> .)
    METHOD_C        reduce using rule 443 (empty -> .)
    FUNC_C          reduce using rule 443 (empty -> .)
    NS_C            reduce using rule 443 (empty -> .)
    START_HEREDOC   reduce using rule 443 (empty -> .)
    START_NOWDOC    reduce using rule 443 (empty -> .)
    BACKTICK        reduce using rule 443 (empty -> .)
    DOLLAR          reduce using rule 443 (empty -> .)
    VARIABLE        reduce using rule 443 (empty -> .)

    inner_statement_list           shift and go to state 883
    empty                          shift and go to state 121

state 836

    (271) expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE . inner_statement_list RBRACE
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (443) empty -> .

    RBRACE          reduce using rule 443 (empty -> .)
    HALT_COMPILER   reduce using rule 443 (empty -> .)
    YIELD           reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    IF              reduce using rule 443 (empty -> .)
    WHILE           reduce using rule 443 (empty -> .)
    DO              reduce using rule 443 (empty -> .)
    FOR             reduce using rule 443 (empty -> .)
    FOREACH         reduce using rule 443 (empty -> .)
    SWITCH          reduce using rule 443 (empty -> .)
    BREAK           reduce using rule 443 (empty -> .)
    CONTINUE        reduce using rule 443 (empty -> .)
    RETURN          reduce using rule 443 (empty -> .)
    GLOBAL          reduce using rule 443 (empty -> .)
    STATIC          reduce using rule 443 (empty -> .)
    ECHO            reduce using rule 443 (empty -> .)
    INLINE_HTML     reduce using rule 443 (empty -> .)
    UNSET           reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    TRY             reduce using rule 443 (empty -> .)
    THROW           reduce using rule 443 (empty -> .)
    DECLARE         reduce using rule 443 (empty -> .)
    FUNCTION        reduce using rule 443 (empty -> .)
    INTERFACE       reduce using rule 443 (empty -> .)
    TRAIT           reduce using rule 443 (empty -> .)
    NEW             reduce using rule 443 (empty -> .)
    CLONE           reduce using rule 443 (empty -> .)
    LIST            reduce using rule 443 (empty -> .)
    ARRAY           reduce using rule 443 (empty -> .)
    LBRACKET        reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    NOT             reduce using rule 443 (empty -> .)
    BOOLEAN_NOT     reduce using rule 443 (empty -> .)
    INC             reduce using rule 443 (empty -> .)
    DEC             reduce using rule 443 (empty -> .)
    INT_CAST        reduce using rule 443 (empty -> .)
    DOUBLE_CAST     reduce using rule 443 (empty -> .)
    STRING_CAST     reduce using rule 443 (empty -> .)
    ARRAY_CAST      reduce using rule 443 (empty -> .)
    OBJECT_CAST     reduce using rule 443 (empty -> .)
    BOOL_CAST       reduce using rule 443 (empty -> .)
    UNSET_CAST      reduce using rule 443 (empty -> .)
    BINARY_CAST     reduce using rule 443 (empty -> .)
    ISSET           reduce using rule 443 (empty -> .)
    EMPTY           reduce using rule 443 (empty -> .)
    EVAL            reduce using rule 443 (empty -> .)
    INCLUDE         reduce using rule 443 (empty -> .)
    INCLUDE_ONCE    reduce using rule 443 (empty -> .)
    REQUIRE         reduce using rule 443 (empty -> .)
    REQUIRE_ONCE    reduce using rule 443 (empty -> .)
    PRINT           reduce using rule 443 (empty -> .)
    AT              reduce using rule 443 (empty -> .)
    LPAREN          reduce using rule 443 (empty -> .)
    CLASS           reduce using rule 443 (empty -> .)
    ABSTRACT        reduce using rule 443 (empty -> .)
    FINAL           reduce using rule 443 (empty -> .)
    QUOTE           reduce using rule 443 (empty -> .)
    STRING          reduce using rule 443 (empty -> .)
    STRING_VARNAME  reduce using rule 443 (empty -> .)
    NS_SEPARATOR    reduce using rule 443 (empty -> .)
    NAMESPACE       reduce using rule 443 (empty -> .)
    EXIT            reduce using rule 443 (empty -> .)
    DIE             reduce using rule 443 (empty -> .)
    LNUMBER         reduce using rule 443 (empty -> .)
    DNUMBER         reduce using rule 443 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 443 (empty -> .)
    LINE            reduce using rule 443 (empty -> .)
    FILE            reduce using rule 443 (empty -> .)
    DIR             reduce using rule 443 (empty -> .)
    CLASS_C         reduce using rule 443 (empty -> .)
    METHOD_C        reduce using rule 443 (empty -> .)
    FUNC_C          reduce using rule 443 (empty -> .)
    NS_C            reduce using rule 443 (empty -> .)
    START_HEREDOC   reduce using rule 443 (empty -> .)
    START_NOWDOC    reduce using rule 443 (empty -> .)
    BACKTICK        reduce using rule 443 (empty -> .)
    DOLLAR          reduce using rule 443 (empty -> .)
    VARIABLE        reduce using rule 443 (empty -> .)

    inner_statement_list           shift and go to state 884
    empty                          shift and go to state 121

state 837

    (272) lexical_vars -> USE LPAREN . lexical_var_list RPAREN
    (274) lexical_var_list -> . lexical_var_list COMMA AND VARIABLE
    (275) lexical_var_list -> . lexical_var_list COMMA VARIABLE
    (276) lexical_var_list -> . AND VARIABLE
    (277) lexical_var_list -> . VARIABLE

    AND             shift and go to state 886
    VARIABLE        shift and go to state 887

    lexical_var_list               shift and go to state 885

state 838

    (177) parameter -> class_name VARIABLE EQUALS static_scalar .

    RPAREN          reduce using rule 177 (parameter -> class_name VARIABLE EQUALS static_scalar .)
    COMMA           reduce using rule 177 (parameter -> class_name VARIABLE EQUALS static_scalar .)


state 839

    (179) parameter -> class_name AND VARIABLE EQUALS . static_scalar
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    class_name                     shift and go to state 469
    static_scalar                  shift and go to state 888
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 840

    (178) parameter -> AND VARIABLE EQUALS static_scalar .

    RPAREN          reduce using rule 178 (parameter -> AND VARIABLE EQUALS static_scalar .)
    COMMA           reduce using rule 178 (parameter -> AND VARIABLE EQUALS static_scalar .)


state 841

    (109) class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .

    HALT_COMPILER   reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    NAMESPACE       reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    CONST           reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    USE             reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    LBRACE          reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    IF              reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    WHILE           reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    DO              reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    FOR             reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    FOREACH         reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    SWITCH          reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    BREAK           reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    CONTINUE        reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    RETURN          reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    GLOBAL          reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    STATIC          reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    ECHO            reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    INLINE_HTML     reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    UNSET           reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    SEMI            reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    TRY             reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    THROW           reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    DECLARE         reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    FUNCTION        reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    INTERFACE       reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    TRAIT           reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    NEW             reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    CLONE           reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    LIST            reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    ARRAY           reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    LBRACKET        reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    PLUS            reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    MINUS           reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    NOT             reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    BOOLEAN_NOT     reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    INC             reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    DEC             reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    INT_CAST        reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    DOUBLE_CAST     reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    STRING_CAST     reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    ARRAY_CAST      reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    OBJECT_CAST     reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    BOOL_CAST       reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    UNSET_CAST      reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    BINARY_CAST     reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    ISSET           reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    EMPTY           reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    EVAL            reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    INCLUDE         reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    INCLUDE_ONCE    reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    REQUIRE         reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    REQUIRE_ONCE    reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    PRINT           reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    AT              reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    LPAREN          reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    CLASS           reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    ABSTRACT        reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    FINAL           reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    QUOTE           reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    STRING          reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    STRING_VARNAME  reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    NS_SEPARATOR    reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    EXIT            reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    DIE             reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    LNUMBER         reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    DNUMBER         reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    LINE            reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    FILE            reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    DIR             reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    CLASS_C         reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    METHOD_C        reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    FUNC_C          reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    NS_C            reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    START_HEREDOC   reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    START_NOWDOC    reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    BACKTICK        reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    DOLLAR          reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    VARIABLE        reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    $end            reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    RBRACE          reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    YIELD           reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    ELSEIF          reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    ELSE            reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    ENDIF           reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    ENDWHILE        reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    ENDDECLARE      reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    ENDFOREACH      reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    CASE            reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    DEFAULT         reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    ENDSWITCH       reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)
    ENDFOR          reduce using rule 109 (class_declaration_statement -> class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE .)


state 842

    (137) class_statement -> method_modifiers FUNCTION . is_reference STRING LPAREN parameter_list RPAREN method_body
    (167) is_reference -> . AND
    (168) is_reference -> . empty
    (443) empty -> .

    AND             shift and go to state 184
    STRING          reduce using rule 443 (empty -> .)

    is_reference                   shift and go to state 889
    empty                          shift and go to state 185

state 843

    (138) class_statement -> variable_modifiers class_variable_declaration . SEMI
    (142) class_variable_declaration -> class_variable_declaration . COMMA VARIABLE EQUALS static_scalar
    (144) class_variable_declaration -> class_variable_declaration . COMMA VARIABLE

    SEMI            shift and go to state 890
    COMMA           shift and go to state 850


state 844

    (139) class_statement -> class_constant_declaration SEMI .

    RBRACE          reduce using rule 139 (class_statement -> class_constant_declaration SEMI .)
    USE             reduce using rule 139 (class_statement -> class_constant_declaration SEMI .)
    VAR             reduce using rule 139 (class_statement -> class_constant_declaration SEMI .)
    CONST           reduce using rule 139 (class_statement -> class_constant_declaration SEMI .)
    STATIC          reduce using rule 139 (class_statement -> class_constant_declaration SEMI .)
    ABSTRACT        reduce using rule 139 (class_statement -> class_constant_declaration SEMI .)
    FINAL           reduce using rule 139 (class_statement -> class_constant_declaration SEMI .)
    PUBLIC          reduce using rule 139 (class_statement -> class_constant_declaration SEMI .)
    PROTECTED       reduce using rule 139 (class_statement -> class_constant_declaration SEMI .)
    PRIVATE         reduce using rule 139 (class_statement -> class_constant_declaration SEMI .)
    FUNCTION        reduce using rule 139 (class_statement -> class_constant_declaration SEMI .)


state 845

    (146) class_constant_declaration -> class_constant_declaration COMMA . STRING EQUALS static_expr

    STRING          shift and go to state 891


state 846

    (140) class_statement -> USE fully_qualified_class_name . LBRACE trait_modifiers_list RBRACE
    (141) class_statement -> USE fully_qualified_class_name . SEMI

    LBRACE          shift and go to state 892
    SEMI            shift and go to state 893


state 847

    (147) class_constant_declaration -> CONST STRING . EQUALS static_expr

    EQUALS          shift and go to state 894


state 848

    (131) trait_statement -> method_modifiers FUNCTION is_reference . STRING LPAREN parameter_list RPAREN method_body

    STRING          shift and go to state 895


state 849

    (132) trait_statement -> variable_modifiers class_variable_declaration SEMI .

    RBRACE          reduce using rule 132 (trait_statement -> variable_modifiers class_variable_declaration SEMI .)
    USE             reduce using rule 132 (trait_statement -> variable_modifiers class_variable_declaration SEMI .)
    VAR             reduce using rule 132 (trait_statement -> variable_modifiers class_variable_declaration SEMI .)
    STATIC          reduce using rule 132 (trait_statement -> variable_modifiers class_variable_declaration SEMI .)
    ABSTRACT        reduce using rule 132 (trait_statement -> variable_modifiers class_variable_declaration SEMI .)
    FINAL           reduce using rule 132 (trait_statement -> variable_modifiers class_variable_declaration SEMI .)
    PUBLIC          reduce using rule 132 (trait_statement -> variable_modifiers class_variable_declaration SEMI .)
    PROTECTED       reduce using rule 132 (trait_statement -> variable_modifiers class_variable_declaration SEMI .)
    PRIVATE         reduce using rule 132 (trait_statement -> variable_modifiers class_variable_declaration SEMI .)
    FUNCTION        reduce using rule 132 (trait_statement -> variable_modifiers class_variable_declaration SEMI .)


state 850

    (142) class_variable_declaration -> class_variable_declaration COMMA . VARIABLE EQUALS static_scalar
    (144) class_variable_declaration -> class_variable_declaration COMMA . VARIABLE

    VARIABLE        shift and go to state 896


state 851

    (143) class_variable_declaration -> VARIABLE EQUALS . static_scalar
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_scalar                  shift and go to state 897
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 852

    (133) trait_statement -> USE fully_qualified_class_name LBRACE . trait_modifiers_list RBRACE
    (122) trait_modifiers_list -> . trait_modifiers_list trait_modifier
    (123) trait_modifiers_list -> . empty
    (443) empty -> .

    RBRACE          reduce using rule 443 (empty -> .)
    STRING          reduce using rule 443 (empty -> .)
    NS_SEPARATOR    reduce using rule 443 (empty -> .)
    NAMESPACE       reduce using rule 443 (empty -> .)
    ARRAY           reduce using rule 443 (empty -> .)

    trait_modifiers_list           shift and go to state 898
    empty                          shift and go to state 899

state 853

    (134) trait_statement -> USE fully_qualified_class_name SEMI .

    RBRACE          reduce using rule 134 (trait_statement -> USE fully_qualified_class_name SEMI .)
    USE             reduce using rule 134 (trait_statement -> USE fully_qualified_class_name SEMI .)
    VAR             reduce using rule 134 (trait_statement -> USE fully_qualified_class_name SEMI .)
    STATIC          reduce using rule 134 (trait_statement -> USE fully_qualified_class_name SEMI .)
    ABSTRACT        reduce using rule 134 (trait_statement -> USE fully_qualified_class_name SEMI .)
    FINAL           reduce using rule 134 (trait_statement -> USE fully_qualified_class_name SEMI .)
    PUBLIC          reduce using rule 134 (trait_statement -> USE fully_qualified_class_name SEMI .)
    PROTECTED       reduce using rule 134 (trait_statement -> USE fully_qualified_class_name SEMI .)
    PRIVATE         reduce using rule 134 (trait_statement -> USE fully_qualified_class_name SEMI .)
    FUNCTION        reduce using rule 134 (trait_statement -> USE fully_qualified_class_name SEMI .)


state 854

    (195) dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .

    OBJECT_OPERATOR reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    LPAREN          reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    SEMI            reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    LBRACE          reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    BOOLEAN_AND     reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    BOOLEAN_OR      reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    LOGICAL_AND     reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    LOGICAL_OR      reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    LOGICAL_XOR     reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    AND             reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    OR              reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    XOR             reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    CONCAT          reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    PLUS            reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    MINUS           reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    MUL             reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    DIV             reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    SL              reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    SR              reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    MOD             reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    IS_IDENTICAL    reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    IS_NOT_IDENTICAL reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    IS_EQUAL        reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    IS_NOT_EQUAL    reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    IS_SMALLER      reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    IS_SMALLER_OR_EQUAL reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    IS_GREATER      reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    IS_GREATER_OR_EQUAL reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    INSTANCEOF      reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    QUESTION        reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    RPAREN          reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    COMMA           reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    DOUBLE_ARROW    reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    RBRACKET        reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    RBRACE          reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    COLON           reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)
    AS              reduce using rule 195 (dynamic_class_name_variable_property -> OBJECT_OPERATOR object_property .)


state 855

    (260) non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr DOUBLE_ARROW AND variable .
    (234) variable -> variable . LBRACKET dim_offset RBRACKET

    COMMA           reduce using rule 260 (non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr DOUBLE_ARROW AND variable .)
    RBRACKET        reduce using rule 260 (non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr DOUBLE_ARROW AND variable .)
    RPAREN          reduce using rule 260 (non_empty_array_pair_list -> non_empty_array_pair_list COMMA expr DOUBLE_ARROW AND variable .)
    LBRACKET        shift and go to state 205


state 856

    (224) variable_property -> OBJECT_OPERATOR object_property . method_or_not
    (220) method_or_not -> . LPAREN function_call_parameter_list RPAREN
    (221) method_or_not -> . empty
    (443) empty -> .

    LPAREN          shift and go to state 479
    OBJECT_OPERATOR reduce using rule 443 (empty -> .)
    EQUALS          reduce using rule 443 (empty -> .)
    PLUS_EQUAL      reduce using rule 443 (empty -> .)
    MINUS_EQUAL     reduce using rule 443 (empty -> .)
    MUL_EQUAL       reduce using rule 443 (empty -> .)
    DIV_EQUAL       reduce using rule 443 (empty -> .)
    CONCAT_EQUAL    reduce using rule 443 (empty -> .)
    MOD_EQUAL       reduce using rule 443 (empty -> .)
    AND_EQUAL       reduce using rule 443 (empty -> .)
    OR_EQUAL        reduce using rule 443 (empty -> .)
    XOR_EQUAL       reduce using rule 443 (empty -> .)
    SL_EQUAL        reduce using rule 443 (empty -> .)
    SR_EQUAL        reduce using rule 443 (empty -> .)
    INC             reduce using rule 443 (empty -> .)
    DEC             reduce using rule 443 (empty -> .)
    LBRACKET        reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    BOOLEAN_AND     reduce using rule 443 (empty -> .)
    BOOLEAN_OR      reduce using rule 443 (empty -> .)
    LOGICAL_AND     reduce using rule 443 (empty -> .)
    LOGICAL_OR      reduce using rule 443 (empty -> .)
    LOGICAL_XOR     reduce using rule 443 (empty -> .)
    AND             reduce using rule 443 (empty -> .)
    OR              reduce using rule 443 (empty -> .)
    XOR             reduce using rule 443 (empty -> .)
    CONCAT          reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    MUL             reduce using rule 443 (empty -> .)
    DIV             reduce using rule 443 (empty -> .)
    SL              reduce using rule 443 (empty -> .)
    SR              reduce using rule 443 (empty -> .)
    MOD             reduce using rule 443 (empty -> .)
    IS_IDENTICAL    reduce using rule 443 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 443 (empty -> .)
    IS_EQUAL        reduce using rule 443 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 443 (empty -> .)
    IS_SMALLER      reduce using rule 443 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 443 (empty -> .)
    IS_GREATER      reduce using rule 443 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 443 (empty -> .)
    INSTANCEOF      reduce using rule 443 (empty -> .)
    QUESTION        reduce using rule 443 (empty -> .)
    RPAREN          reduce using rule 443 (empty -> .)
    COMMA           reduce using rule 443 (empty -> .)
    DOUBLE_ARROW    reduce using rule 443 (empty -> .)
    RBRACKET        reduce using rule 443 (empty -> .)
    RBRACE          reduce using rule 443 (empty -> .)
    COLON           reduce using rule 443 (empty -> .)
    AS              reduce using rule 443 (empty -> .)

    method_or_not                  shift and go to state 900
    empty                          shift and go to state 480

state 857

    (438) encaps_var -> DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET expr RBRACKET . RBRACE

    RBRACE          shift and go to state 901


state 858

    (216) function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list . RPAREN
    (266) function_call_parameter_list -> function_call_parameter_list . COMMA function_call_parameter

    RPAREN          shift and go to state 902
    COMMA           shift and go to state 446


state 859

    (217) function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list . RPAREN
    (266) function_call_parameter_list -> function_call_parameter_list . COMMA function_call_parameter

    RPAREN          shift and go to state 903
    COMMA           shift and go to state 446


state 860

    (400) static_non_empty_array_pair_list -> static_non_empty_array_pair_list COMMA static_scalar DOUBLE_ARROW . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_scalar                  shift and go to state 454
    static_expr                    shift and go to state 904
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 861

    (63) elseif_list -> elseif_list ELSEIF LPAREN . expr RPAREN statement
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 905
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 862

    (65) else_single -> ELSE statement .

    ELSEIF          reduce using rule 65 (else_single -> ELSE statement .)
    ELSE            reduce using rule 65 (else_single -> ELSE statement .)
    HALT_COMPILER   reduce using rule 65 (else_single -> ELSE statement .)
    NAMESPACE       reduce using rule 65 (else_single -> ELSE statement .)
    CONST           reduce using rule 65 (else_single -> ELSE statement .)
    USE             reduce using rule 65 (else_single -> ELSE statement .)
    LBRACE          reduce using rule 65 (else_single -> ELSE statement .)
    IF              reduce using rule 65 (else_single -> ELSE statement .)
    WHILE           reduce using rule 65 (else_single -> ELSE statement .)
    DO              reduce using rule 65 (else_single -> ELSE statement .)
    FOR             reduce using rule 65 (else_single -> ELSE statement .)
    FOREACH         reduce using rule 65 (else_single -> ELSE statement .)
    SWITCH          reduce using rule 65 (else_single -> ELSE statement .)
    BREAK           reduce using rule 65 (else_single -> ELSE statement .)
    CONTINUE        reduce using rule 65 (else_single -> ELSE statement .)
    RETURN          reduce using rule 65 (else_single -> ELSE statement .)
    GLOBAL          reduce using rule 65 (else_single -> ELSE statement .)
    STATIC          reduce using rule 65 (else_single -> ELSE statement .)
    ECHO            reduce using rule 65 (else_single -> ELSE statement .)
    INLINE_HTML     reduce using rule 65 (else_single -> ELSE statement .)
    UNSET           reduce using rule 65 (else_single -> ELSE statement .)
    SEMI            reduce using rule 65 (else_single -> ELSE statement .)
    TRY             reduce using rule 65 (else_single -> ELSE statement .)
    THROW           reduce using rule 65 (else_single -> ELSE statement .)
    DECLARE         reduce using rule 65 (else_single -> ELSE statement .)
    FUNCTION        reduce using rule 65 (else_single -> ELSE statement .)
    INTERFACE       reduce using rule 65 (else_single -> ELSE statement .)
    TRAIT           reduce using rule 65 (else_single -> ELSE statement .)
    NEW             reduce using rule 65 (else_single -> ELSE statement .)
    CLONE           reduce using rule 65 (else_single -> ELSE statement .)
    LIST            reduce using rule 65 (else_single -> ELSE statement .)
    ARRAY           reduce using rule 65 (else_single -> ELSE statement .)
    LBRACKET        reduce using rule 65 (else_single -> ELSE statement .)
    PLUS            reduce using rule 65 (else_single -> ELSE statement .)
    MINUS           reduce using rule 65 (else_single -> ELSE statement .)
    NOT             reduce using rule 65 (else_single -> ELSE statement .)
    BOOLEAN_NOT     reduce using rule 65 (else_single -> ELSE statement .)
    INC             reduce using rule 65 (else_single -> ELSE statement .)
    DEC             reduce using rule 65 (else_single -> ELSE statement .)
    INT_CAST        reduce using rule 65 (else_single -> ELSE statement .)
    DOUBLE_CAST     reduce using rule 65 (else_single -> ELSE statement .)
    STRING_CAST     reduce using rule 65 (else_single -> ELSE statement .)
    ARRAY_CAST      reduce using rule 65 (else_single -> ELSE statement .)
    OBJECT_CAST     reduce using rule 65 (else_single -> ELSE statement .)
    BOOL_CAST       reduce using rule 65 (else_single -> ELSE statement .)
    UNSET_CAST      reduce using rule 65 (else_single -> ELSE statement .)
    BINARY_CAST     reduce using rule 65 (else_single -> ELSE statement .)
    ISSET           reduce using rule 65 (else_single -> ELSE statement .)
    EMPTY           reduce using rule 65 (else_single -> ELSE statement .)
    EVAL            reduce using rule 65 (else_single -> ELSE statement .)
    INCLUDE         reduce using rule 65 (else_single -> ELSE statement .)
    INCLUDE_ONCE    reduce using rule 65 (else_single -> ELSE statement .)
    REQUIRE         reduce using rule 65 (else_single -> ELSE statement .)
    REQUIRE_ONCE    reduce using rule 65 (else_single -> ELSE statement .)
    PRINT           reduce using rule 65 (else_single -> ELSE statement .)
    AT              reduce using rule 65 (else_single -> ELSE statement .)
    LPAREN          reduce using rule 65 (else_single -> ELSE statement .)
    CLASS           reduce using rule 65 (else_single -> ELSE statement .)
    ABSTRACT        reduce using rule 65 (else_single -> ELSE statement .)
    FINAL           reduce using rule 65 (else_single -> ELSE statement .)
    QUOTE           reduce using rule 65 (else_single -> ELSE statement .)
    STRING          reduce using rule 65 (else_single -> ELSE statement .)
    STRING_VARNAME  reduce using rule 65 (else_single -> ELSE statement .)
    NS_SEPARATOR    reduce using rule 65 (else_single -> ELSE statement .)
    EXIT            reduce using rule 65 (else_single -> ELSE statement .)
    DIE             reduce using rule 65 (else_single -> ELSE statement .)
    LNUMBER         reduce using rule 65 (else_single -> ELSE statement .)
    DNUMBER         reduce using rule 65 (else_single -> ELSE statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 65 (else_single -> ELSE statement .)
    LINE            reduce using rule 65 (else_single -> ELSE statement .)
    FILE            reduce using rule 65 (else_single -> ELSE statement .)
    DIR             reduce using rule 65 (else_single -> ELSE statement .)
    CLASS_C         reduce using rule 65 (else_single -> ELSE statement .)
    METHOD_C        reduce using rule 65 (else_single -> ELSE statement .)
    FUNC_C          reduce using rule 65 (else_single -> ELSE statement .)
    NS_C            reduce using rule 65 (else_single -> ELSE statement .)
    START_HEREDOC   reduce using rule 65 (else_single -> ELSE statement .)
    START_NOWDOC    reduce using rule 65 (else_single -> ELSE statement .)
    BACKTICK        reduce using rule 65 (else_single -> ELSE statement .)
    DOLLAR          reduce using rule 65 (else_single -> ELSE statement .)
    VARIABLE        reduce using rule 65 (else_single -> ELSE statement .)
    $end            reduce using rule 65 (else_single -> ELSE statement .)
    RBRACE          reduce using rule 65 (else_single -> ELSE statement .)
    YIELD           reduce using rule 65 (else_single -> ELSE statement .)
    ENDIF           reduce using rule 65 (else_single -> ELSE statement .)
    ENDWHILE        reduce using rule 65 (else_single -> ELSE statement .)
    ENDDECLARE      reduce using rule 65 (else_single -> ELSE statement .)
    ENDFOREACH      reduce using rule 65 (else_single -> ELSE statement .)
    CASE            reduce using rule 65 (else_single -> ELSE statement .)
    DEFAULT         reduce using rule 65 (else_single -> ELSE statement .)
    ENDSWITCH       reduce using rule 65 (else_single -> ELSE statement .)
    ENDFOR          reduce using rule 65 (else_single -> ELSE statement .)


state 863

    (32) statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single . ENDIF SEMI

    ENDIF           shift and go to state 906


state 864

    (67) new_elseif_list -> new_elseif_list ELSEIF . LPAREN expr RPAREN COLON inner_statement_list

    LPAREN          shift and go to state 907


state 865

    (68) new_else_single -> empty .

    ENDIF           reduce using rule 68 (new_else_single -> empty .)


state 866

    (69) new_else_single -> ELSE . COLON inner_statement_list

    COLON           shift and go to state 908


state 867

    (71) while_statement -> COLON inner_statement_list ENDWHILE SEMI .

    ELSEIF          reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    ELSE            reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    HALT_COMPILER   reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    NAMESPACE       reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    CONST           reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    USE             reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    LBRACE          reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    IF              reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    WHILE           reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    DO              reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    FOR             reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    FOREACH         reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    SWITCH          reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    BREAK           reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    CONTINUE        reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    RETURN          reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    GLOBAL          reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    STATIC          reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    ECHO            reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    INLINE_HTML     reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    UNSET           reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    SEMI            reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    TRY             reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    THROW           reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    DECLARE         reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    FUNCTION        reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    INTERFACE       reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    TRAIT           reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    NEW             reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    CLONE           reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    LIST            reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    ARRAY           reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    LBRACKET        reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    PLUS            reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    MINUS           reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    NOT             reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    BOOLEAN_NOT     reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    INC             reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    DEC             reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    INT_CAST        reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    DOUBLE_CAST     reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    STRING_CAST     reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    ARRAY_CAST      reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    OBJECT_CAST     reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    BOOL_CAST       reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    UNSET_CAST      reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    BINARY_CAST     reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    ISSET           reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    EMPTY           reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    EVAL            reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    INCLUDE         reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    INCLUDE_ONCE    reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    REQUIRE         reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    REQUIRE_ONCE    reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    PRINT           reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    AT              reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    LPAREN          reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    CLASS           reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    ABSTRACT        reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    FINAL           reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    QUOTE           reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    STRING          reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    STRING_VARNAME  reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    NS_SEPARATOR    reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    EXIT            reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    DIE             reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    LNUMBER         reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    DNUMBER         reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    LINE            reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    FILE            reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    DIR             reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    CLASS_C         reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    METHOD_C        reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    FUNC_C          reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    NS_C            reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    START_HEREDOC   reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    START_NOWDOC    reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    BACKTICK        reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    DOLLAR          reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    VARIABLE        reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    $end            reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    RBRACE          reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    YIELD           reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    ENDIF           reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    ENDWHILE        reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    ENDDECLARE      reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    ENDFOREACH      reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    CASE            reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    DEFAULT         reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    ENDSWITCH       reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)
    ENDFOR          reduce using rule 71 (while_statement -> COLON inner_statement_list ENDWHILE SEMI .)


state 868

    (35) statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN . for_statement
    (76) for_statement -> . statement
    (77) for_statement -> . COLON inner_statement_list ENDFOR SEMI
    (30) statement -> . LBRACE inner_statement_list RBRACE
    (31) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (33) statement -> . WHILE LPAREN expr RPAREN while_statement
    (34) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (35) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (36) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (37) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (38) statement -> . BREAK SEMI
    (39) statement -> . BREAK expr SEMI
    (40) statement -> . CONTINUE SEMI
    (41) statement -> . CONTINUE expr SEMI
    (42) statement -> . RETURN SEMI
    (43) statement -> . RETURN expr SEMI
    (44) statement -> . GLOBAL global_var_list SEMI
    (45) statement -> . STATIC static_var_list SEMI
    (46) statement -> . ECHO echo_expr_list SEMI
    (47) statement -> . INLINE_HTML
    (48) statement -> . expr SEMI
    (49) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (50) statement -> . SEMI
    (51) statement -> . TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
    (56) statement -> . THROW expr SEMI
    (57) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    COLON           shift and go to state 911
    LBRACE          shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    FOREACH         shift and go to state 21
    SWITCH          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    GLOBAL          shift and go to state 26
    STATIC          shift and go to state 27
    ECHO            shift and go to state 28
    INLINE_HTML     shift and go to state 29
    UNSET           shift and go to state 30
    SEMI            shift and go to state 10
    TRY             shift and go to state 31
    THROW           shift and go to state 32
    DECLARE         shift and go to state 33
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    for_statement                  shift and go to state 909
    statement                      shift and go to state 910
    expr                           shift and go to state 17
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 869

    (36) statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .

    HALT_COMPILER   reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    NAMESPACE       reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    CONST           reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    USE             reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    LBRACE          reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    IF              reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    WHILE           reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    DO              reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    FOR             reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    FOREACH         reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    SWITCH          reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    BREAK           reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    CONTINUE        reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    RETURN          reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    GLOBAL          reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    STATIC          reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    ECHO            reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    INLINE_HTML     reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    UNSET           reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    SEMI            reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    TRY             reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    THROW           reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    DECLARE         reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    FUNCTION        reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    INTERFACE       reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    TRAIT           reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    NEW             reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    CLONE           reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    LIST            reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    ARRAY           reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    LBRACKET        reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    PLUS            reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    MINUS           reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    NOT             reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    BOOLEAN_NOT     reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    INC             reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    DEC             reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    INT_CAST        reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    DOUBLE_CAST     reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    STRING_CAST     reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    ARRAY_CAST      reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    OBJECT_CAST     reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    BOOL_CAST       reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    UNSET_CAST      reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    BINARY_CAST     reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    ISSET           reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    EMPTY           reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    EVAL            reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    INCLUDE         reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    INCLUDE_ONCE    reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    REQUIRE         reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    REQUIRE_ONCE    reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    PRINT           reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    AT              reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    LPAREN          reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    CLASS           reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    ABSTRACT        reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    FINAL           reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    QUOTE           reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    STRING          reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    STRING_VARNAME  reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    NS_SEPARATOR    reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    EXIT            reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    DIE             reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    LNUMBER         reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    DNUMBER         reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    LINE            reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    FILE            reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    DIR             reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    CLASS_C         reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    METHOD_C        reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    FUNC_C          reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    NS_C            reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    START_HEREDOC   reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    START_NOWDOC    reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    BACKTICK        reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    DOLLAR          reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    VARIABLE        reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    $end            reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    RBRACE          reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    YIELD           reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    ELSEIF          reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    ELSE            reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    ENDIF           reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    ENDWHILE        reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    ENDDECLARE      reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    ENDFOREACH      reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    CASE            reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    DEFAULT         reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    ENDSWITCH       reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)
    ENDFOR          reduce using rule 36 (statement -> FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement .)


state 870

    (83) foreach_statement -> statement .

    ELSEIF          reduce using rule 83 (foreach_statement -> statement .)
    ELSE            reduce using rule 83 (foreach_statement -> statement .)
    HALT_COMPILER   reduce using rule 83 (foreach_statement -> statement .)
    NAMESPACE       reduce using rule 83 (foreach_statement -> statement .)
    CONST           reduce using rule 83 (foreach_statement -> statement .)
    USE             reduce using rule 83 (foreach_statement -> statement .)
    LBRACE          reduce using rule 83 (foreach_statement -> statement .)
    IF              reduce using rule 83 (foreach_statement -> statement .)
    WHILE           reduce using rule 83 (foreach_statement -> statement .)
    DO              reduce using rule 83 (foreach_statement -> statement .)
    FOR             reduce using rule 83 (foreach_statement -> statement .)
    FOREACH         reduce using rule 83 (foreach_statement -> statement .)
    SWITCH          reduce using rule 83 (foreach_statement -> statement .)
    BREAK           reduce using rule 83 (foreach_statement -> statement .)
    CONTINUE        reduce using rule 83 (foreach_statement -> statement .)
    RETURN          reduce using rule 83 (foreach_statement -> statement .)
    GLOBAL          reduce using rule 83 (foreach_statement -> statement .)
    STATIC          reduce using rule 83 (foreach_statement -> statement .)
    ECHO            reduce using rule 83 (foreach_statement -> statement .)
    INLINE_HTML     reduce using rule 83 (foreach_statement -> statement .)
    UNSET           reduce using rule 83 (foreach_statement -> statement .)
    SEMI            reduce using rule 83 (foreach_statement -> statement .)
    TRY             reduce using rule 83 (foreach_statement -> statement .)
    THROW           reduce using rule 83 (foreach_statement -> statement .)
    DECLARE         reduce using rule 83 (foreach_statement -> statement .)
    FUNCTION        reduce using rule 83 (foreach_statement -> statement .)
    INTERFACE       reduce using rule 83 (foreach_statement -> statement .)
    TRAIT           reduce using rule 83 (foreach_statement -> statement .)
    NEW             reduce using rule 83 (foreach_statement -> statement .)
    CLONE           reduce using rule 83 (foreach_statement -> statement .)
    LIST            reduce using rule 83 (foreach_statement -> statement .)
    ARRAY           reduce using rule 83 (foreach_statement -> statement .)
    LBRACKET        reduce using rule 83 (foreach_statement -> statement .)
    PLUS            reduce using rule 83 (foreach_statement -> statement .)
    MINUS           reduce using rule 83 (foreach_statement -> statement .)
    NOT             reduce using rule 83 (foreach_statement -> statement .)
    BOOLEAN_NOT     reduce using rule 83 (foreach_statement -> statement .)
    INC             reduce using rule 83 (foreach_statement -> statement .)
    DEC             reduce using rule 83 (foreach_statement -> statement .)
    INT_CAST        reduce using rule 83 (foreach_statement -> statement .)
    DOUBLE_CAST     reduce using rule 83 (foreach_statement -> statement .)
    STRING_CAST     reduce using rule 83 (foreach_statement -> statement .)
    ARRAY_CAST      reduce using rule 83 (foreach_statement -> statement .)
    OBJECT_CAST     reduce using rule 83 (foreach_statement -> statement .)
    BOOL_CAST       reduce using rule 83 (foreach_statement -> statement .)
    UNSET_CAST      reduce using rule 83 (foreach_statement -> statement .)
    BINARY_CAST     reduce using rule 83 (foreach_statement -> statement .)
    ISSET           reduce using rule 83 (foreach_statement -> statement .)
    EMPTY           reduce using rule 83 (foreach_statement -> statement .)
    EVAL            reduce using rule 83 (foreach_statement -> statement .)
    INCLUDE         reduce using rule 83 (foreach_statement -> statement .)
    INCLUDE_ONCE    reduce using rule 83 (foreach_statement -> statement .)
    REQUIRE         reduce using rule 83 (foreach_statement -> statement .)
    REQUIRE_ONCE    reduce using rule 83 (foreach_statement -> statement .)
    PRINT           reduce using rule 83 (foreach_statement -> statement .)
    AT              reduce using rule 83 (foreach_statement -> statement .)
    LPAREN          reduce using rule 83 (foreach_statement -> statement .)
    CLASS           reduce using rule 83 (foreach_statement -> statement .)
    ABSTRACT        reduce using rule 83 (foreach_statement -> statement .)
    FINAL           reduce using rule 83 (foreach_statement -> statement .)
    QUOTE           reduce using rule 83 (foreach_statement -> statement .)
    STRING          reduce using rule 83 (foreach_statement -> statement .)
    STRING_VARNAME  reduce using rule 83 (foreach_statement -> statement .)
    NS_SEPARATOR    reduce using rule 83 (foreach_statement -> statement .)
    EXIT            reduce using rule 83 (foreach_statement -> statement .)
    DIE             reduce using rule 83 (foreach_statement -> statement .)
    LNUMBER         reduce using rule 83 (foreach_statement -> statement .)
    DNUMBER         reduce using rule 83 (foreach_statement -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 83 (foreach_statement -> statement .)
    LINE            reduce using rule 83 (foreach_statement -> statement .)
    FILE            reduce using rule 83 (foreach_statement -> statement .)
    DIR             reduce using rule 83 (foreach_statement -> statement .)
    CLASS_C         reduce using rule 83 (foreach_statement -> statement .)
    METHOD_C        reduce using rule 83 (foreach_statement -> statement .)
    FUNC_C          reduce using rule 83 (foreach_statement -> statement .)
    NS_C            reduce using rule 83 (foreach_statement -> statement .)
    START_HEREDOC   reduce using rule 83 (foreach_statement -> statement .)
    START_NOWDOC    reduce using rule 83 (foreach_statement -> statement .)
    BACKTICK        reduce using rule 83 (foreach_statement -> statement .)
    DOLLAR          reduce using rule 83 (foreach_statement -> statement .)
    VARIABLE        reduce using rule 83 (foreach_statement -> statement .)
    $end            reduce using rule 83 (foreach_statement -> statement .)
    RBRACE          reduce using rule 83 (foreach_statement -> statement .)
    YIELD           reduce using rule 83 (foreach_statement -> statement .)
    ENDIF           reduce using rule 83 (foreach_statement -> statement .)
    ENDWHILE        reduce using rule 83 (foreach_statement -> statement .)
    ENDDECLARE      reduce using rule 83 (foreach_statement -> statement .)
    ENDFOREACH      reduce using rule 83 (foreach_statement -> statement .)
    CASE            reduce using rule 83 (foreach_statement -> statement .)
    DEFAULT         reduce using rule 83 (foreach_statement -> statement .)
    ENDSWITCH       reduce using rule 83 (foreach_statement -> statement .)
    ENDFOR          reduce using rule 83 (foreach_statement -> statement .)


state 871

    (84) foreach_statement -> COLON . inner_statement_list ENDFOREACH SEMI
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (443) empty -> .

    ENDFOREACH      reduce using rule 443 (empty -> .)
    HALT_COMPILER   reduce using rule 443 (empty -> .)
    YIELD           reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    IF              reduce using rule 443 (empty -> .)
    WHILE           reduce using rule 443 (empty -> .)
    DO              reduce using rule 443 (empty -> .)
    FOR             reduce using rule 443 (empty -> .)
    FOREACH         reduce using rule 443 (empty -> .)
    SWITCH          reduce using rule 443 (empty -> .)
    BREAK           reduce using rule 443 (empty -> .)
    CONTINUE        reduce using rule 443 (empty -> .)
    RETURN          reduce using rule 443 (empty -> .)
    GLOBAL          reduce using rule 443 (empty -> .)
    STATIC          reduce using rule 443 (empty -> .)
    ECHO            reduce using rule 443 (empty -> .)
    INLINE_HTML     reduce using rule 443 (empty -> .)
    UNSET           reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    TRY             reduce using rule 443 (empty -> .)
    THROW           reduce using rule 443 (empty -> .)
    DECLARE         reduce using rule 443 (empty -> .)
    FUNCTION        reduce using rule 443 (empty -> .)
    INTERFACE       reduce using rule 443 (empty -> .)
    TRAIT           reduce using rule 443 (empty -> .)
    NEW             reduce using rule 443 (empty -> .)
    CLONE           reduce using rule 443 (empty -> .)
    LIST            reduce using rule 443 (empty -> .)
    ARRAY           reduce using rule 443 (empty -> .)
    LBRACKET        reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    NOT             reduce using rule 443 (empty -> .)
    BOOLEAN_NOT     reduce using rule 443 (empty -> .)
    INC             reduce using rule 443 (empty -> .)
    DEC             reduce using rule 443 (empty -> .)
    INT_CAST        reduce using rule 443 (empty -> .)
    DOUBLE_CAST     reduce using rule 443 (empty -> .)
    STRING_CAST     reduce using rule 443 (empty -> .)
    ARRAY_CAST      reduce using rule 443 (empty -> .)
    OBJECT_CAST     reduce using rule 443 (empty -> .)
    BOOL_CAST       reduce using rule 443 (empty -> .)
    UNSET_CAST      reduce using rule 443 (empty -> .)
    BINARY_CAST     reduce using rule 443 (empty -> .)
    ISSET           reduce using rule 443 (empty -> .)
    EMPTY           reduce using rule 443 (empty -> .)
    EVAL            reduce using rule 443 (empty -> .)
    INCLUDE         reduce using rule 443 (empty -> .)
    INCLUDE_ONCE    reduce using rule 443 (empty -> .)
    REQUIRE         reduce using rule 443 (empty -> .)
    REQUIRE_ONCE    reduce using rule 443 (empty -> .)
    PRINT           reduce using rule 443 (empty -> .)
    AT              reduce using rule 443 (empty -> .)
    LPAREN          reduce using rule 443 (empty -> .)
    CLASS           reduce using rule 443 (empty -> .)
    ABSTRACT        reduce using rule 443 (empty -> .)
    FINAL           reduce using rule 443 (empty -> .)
    QUOTE           reduce using rule 443 (empty -> .)
    STRING          reduce using rule 443 (empty -> .)
    STRING_VARNAME  reduce using rule 443 (empty -> .)
    NS_SEPARATOR    reduce using rule 443 (empty -> .)
    NAMESPACE       reduce using rule 443 (empty -> .)
    EXIT            reduce using rule 443 (empty -> .)
    DIE             reduce using rule 443 (empty -> .)
    LNUMBER         reduce using rule 443 (empty -> .)
    DNUMBER         reduce using rule 443 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 443 (empty -> .)
    LINE            reduce using rule 443 (empty -> .)
    FILE            reduce using rule 443 (empty -> .)
    DIR             reduce using rule 443 (empty -> .)
    CLASS_C         reduce using rule 443 (empty -> .)
    METHOD_C        reduce using rule 443 (empty -> .)
    FUNC_C          reduce using rule 443 (empty -> .)
    NS_C            reduce using rule 443 (empty -> .)
    START_HEREDOC   reduce using rule 443 (empty -> .)
    START_NOWDOC    reduce using rule 443 (empty -> .)
    BACKTICK        reduce using rule 443 (empty -> .)
    DOLLAR          reduce using rule 443 (empty -> .)
    VARIABLE        reduce using rule 443 (empty -> .)

    inner_statement_list           shift and go to state 912
    empty                          shift and go to state 121

state 872

    (78) foreach_variable -> LIST LPAREN assignment_list RPAREN .

    DOUBLE_ARROW    reduce using rule 78 (foreach_variable -> LIST LPAREN assignment_list RPAREN .)
    RPAREN          reduce using rule 78 (foreach_variable -> LIST LPAREN assignment_list RPAREN .)


state 873

    (90) case_list -> case_list CASE expr . case_separator inner_statement_list
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr
    (92) case_separator -> . COLON
    (93) case_separator -> . SEMI

    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158
    COLON           shift and go to state 875
    SEMI            shift and go to state 876

    case_separator                 shift and go to state 913

state 874

    (91) case_list -> case_list DEFAULT case_separator . inner_statement_list
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (443) empty -> .

    HALT_COMPILER   reduce using rule 443 (empty -> .)
    YIELD           reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    IF              reduce using rule 443 (empty -> .)
    WHILE           reduce using rule 443 (empty -> .)
    DO              reduce using rule 443 (empty -> .)
    FOR             reduce using rule 443 (empty -> .)
    FOREACH         reduce using rule 443 (empty -> .)
    SWITCH          reduce using rule 443 (empty -> .)
    BREAK           reduce using rule 443 (empty -> .)
    CONTINUE        reduce using rule 443 (empty -> .)
    RETURN          reduce using rule 443 (empty -> .)
    GLOBAL          reduce using rule 443 (empty -> .)
    STATIC          reduce using rule 443 (empty -> .)
    ECHO            reduce using rule 443 (empty -> .)
    INLINE_HTML     reduce using rule 443 (empty -> .)
    UNSET           reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    TRY             reduce using rule 443 (empty -> .)
    THROW           reduce using rule 443 (empty -> .)
    DECLARE         reduce using rule 443 (empty -> .)
    FUNCTION        reduce using rule 443 (empty -> .)
    INTERFACE       reduce using rule 443 (empty -> .)
    TRAIT           reduce using rule 443 (empty -> .)
    NEW             reduce using rule 443 (empty -> .)
    CLONE           reduce using rule 443 (empty -> .)
    LIST            reduce using rule 443 (empty -> .)
    ARRAY           reduce using rule 443 (empty -> .)
    LBRACKET        reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    NOT             reduce using rule 443 (empty -> .)
    BOOLEAN_NOT     reduce using rule 443 (empty -> .)
    INC             reduce using rule 443 (empty -> .)
    DEC             reduce using rule 443 (empty -> .)
    INT_CAST        reduce using rule 443 (empty -> .)
    DOUBLE_CAST     reduce using rule 443 (empty -> .)
    STRING_CAST     reduce using rule 443 (empty -> .)
    ARRAY_CAST      reduce using rule 443 (empty -> .)
    OBJECT_CAST     reduce using rule 443 (empty -> .)
    BOOL_CAST       reduce using rule 443 (empty -> .)
    UNSET_CAST      reduce using rule 443 (empty -> .)
    BINARY_CAST     reduce using rule 443 (empty -> .)
    ISSET           reduce using rule 443 (empty -> .)
    EMPTY           reduce using rule 443 (empty -> .)
    EVAL            reduce using rule 443 (empty -> .)
    INCLUDE         reduce using rule 443 (empty -> .)
    INCLUDE_ONCE    reduce using rule 443 (empty -> .)
    REQUIRE         reduce using rule 443 (empty -> .)
    REQUIRE_ONCE    reduce using rule 443 (empty -> .)
    PRINT           reduce using rule 443 (empty -> .)
    AT              reduce using rule 443 (empty -> .)
    LPAREN          reduce using rule 443 (empty -> .)
    CLASS           reduce using rule 443 (empty -> .)
    ABSTRACT        reduce using rule 443 (empty -> .)
    FINAL           reduce using rule 443 (empty -> .)
    QUOTE           reduce using rule 443 (empty -> .)
    STRING          reduce using rule 443 (empty -> .)
    STRING_VARNAME  reduce using rule 443 (empty -> .)
    NS_SEPARATOR    reduce using rule 443 (empty -> .)
    NAMESPACE       reduce using rule 443 (empty -> .)
    EXIT            reduce using rule 443 (empty -> .)
    DIE             reduce using rule 443 (empty -> .)
    LNUMBER         reduce using rule 443 (empty -> .)
    DNUMBER         reduce using rule 443 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 443 (empty -> .)
    LINE            reduce using rule 443 (empty -> .)
    FILE            reduce using rule 443 (empty -> .)
    DIR             reduce using rule 443 (empty -> .)
    CLASS_C         reduce using rule 443 (empty -> .)
    METHOD_C        reduce using rule 443 (empty -> .)
    FUNC_C          reduce using rule 443 (empty -> .)
    NS_C            reduce using rule 443 (empty -> .)
    START_HEREDOC   reduce using rule 443 (empty -> .)
    START_NOWDOC    reduce using rule 443 (empty -> .)
    BACKTICK        reduce using rule 443 (empty -> .)
    DOLLAR          reduce using rule 443 (empty -> .)
    VARIABLE        reduce using rule 443 (empty -> .)
    RBRACE          reduce using rule 443 (empty -> .)
    CASE            reduce using rule 443 (empty -> .)
    DEFAULT         reduce using rule 443 (empty -> .)
    ENDSWITCH       reduce using rule 443 (empty -> .)

    inner_statement_list           shift and go to state 914
    empty                          shift and go to state 121

state 875

    (92) case_separator -> COLON .

    HALT_COMPILER   reduce using rule 92 (case_separator -> COLON .)
    YIELD           reduce using rule 92 (case_separator -> COLON .)
    LBRACE          reduce using rule 92 (case_separator -> COLON .)
    IF              reduce using rule 92 (case_separator -> COLON .)
    WHILE           reduce using rule 92 (case_separator -> COLON .)
    DO              reduce using rule 92 (case_separator -> COLON .)
    FOR             reduce using rule 92 (case_separator -> COLON .)
    FOREACH         reduce using rule 92 (case_separator -> COLON .)
    SWITCH          reduce using rule 92 (case_separator -> COLON .)
    BREAK           reduce using rule 92 (case_separator -> COLON .)
    CONTINUE        reduce using rule 92 (case_separator -> COLON .)
    RETURN          reduce using rule 92 (case_separator -> COLON .)
    GLOBAL          reduce using rule 92 (case_separator -> COLON .)
    STATIC          reduce using rule 92 (case_separator -> COLON .)
    ECHO            reduce using rule 92 (case_separator -> COLON .)
    INLINE_HTML     reduce using rule 92 (case_separator -> COLON .)
    UNSET           reduce using rule 92 (case_separator -> COLON .)
    SEMI            reduce using rule 92 (case_separator -> COLON .)
    TRY             reduce using rule 92 (case_separator -> COLON .)
    THROW           reduce using rule 92 (case_separator -> COLON .)
    DECLARE         reduce using rule 92 (case_separator -> COLON .)
    FUNCTION        reduce using rule 92 (case_separator -> COLON .)
    INTERFACE       reduce using rule 92 (case_separator -> COLON .)
    TRAIT           reduce using rule 92 (case_separator -> COLON .)
    NEW             reduce using rule 92 (case_separator -> COLON .)
    CLONE           reduce using rule 92 (case_separator -> COLON .)
    LIST            reduce using rule 92 (case_separator -> COLON .)
    ARRAY           reduce using rule 92 (case_separator -> COLON .)
    LBRACKET        reduce using rule 92 (case_separator -> COLON .)
    PLUS            reduce using rule 92 (case_separator -> COLON .)
    MINUS           reduce using rule 92 (case_separator -> COLON .)
    NOT             reduce using rule 92 (case_separator -> COLON .)
    BOOLEAN_NOT     reduce using rule 92 (case_separator -> COLON .)
    INC             reduce using rule 92 (case_separator -> COLON .)
    DEC             reduce using rule 92 (case_separator -> COLON .)
    INT_CAST        reduce using rule 92 (case_separator -> COLON .)
    DOUBLE_CAST     reduce using rule 92 (case_separator -> COLON .)
    STRING_CAST     reduce using rule 92 (case_separator -> COLON .)
    ARRAY_CAST      reduce using rule 92 (case_separator -> COLON .)
    OBJECT_CAST     reduce using rule 92 (case_separator -> COLON .)
    BOOL_CAST       reduce using rule 92 (case_separator -> COLON .)
    UNSET_CAST      reduce using rule 92 (case_separator -> COLON .)
    BINARY_CAST     reduce using rule 92 (case_separator -> COLON .)
    ISSET           reduce using rule 92 (case_separator -> COLON .)
    EMPTY           reduce using rule 92 (case_separator -> COLON .)
    EVAL            reduce using rule 92 (case_separator -> COLON .)
    INCLUDE         reduce using rule 92 (case_separator -> COLON .)
    INCLUDE_ONCE    reduce using rule 92 (case_separator -> COLON .)
    REQUIRE         reduce using rule 92 (case_separator -> COLON .)
    REQUIRE_ONCE    reduce using rule 92 (case_separator -> COLON .)
    PRINT           reduce using rule 92 (case_separator -> COLON .)
    AT              reduce using rule 92 (case_separator -> COLON .)
    LPAREN          reduce using rule 92 (case_separator -> COLON .)
    CLASS           reduce using rule 92 (case_separator -> COLON .)
    ABSTRACT        reduce using rule 92 (case_separator -> COLON .)
    FINAL           reduce using rule 92 (case_separator -> COLON .)
    QUOTE           reduce using rule 92 (case_separator -> COLON .)
    STRING          reduce using rule 92 (case_separator -> COLON .)
    STRING_VARNAME  reduce using rule 92 (case_separator -> COLON .)
    NS_SEPARATOR    reduce using rule 92 (case_separator -> COLON .)
    NAMESPACE       reduce using rule 92 (case_separator -> COLON .)
    EXIT            reduce using rule 92 (case_separator -> COLON .)
    DIE             reduce using rule 92 (case_separator -> COLON .)
    LNUMBER         reduce using rule 92 (case_separator -> COLON .)
    DNUMBER         reduce using rule 92 (case_separator -> COLON .)
    CONSTANT_ENCAPSED_STRING reduce using rule 92 (case_separator -> COLON .)
    LINE            reduce using rule 92 (case_separator -> COLON .)
    FILE            reduce using rule 92 (case_separator -> COLON .)
    DIR             reduce using rule 92 (case_separator -> COLON .)
    CLASS_C         reduce using rule 92 (case_separator -> COLON .)
    METHOD_C        reduce using rule 92 (case_separator -> COLON .)
    FUNC_C          reduce using rule 92 (case_separator -> COLON .)
    NS_C            reduce using rule 92 (case_separator -> COLON .)
    START_HEREDOC   reduce using rule 92 (case_separator -> COLON .)
    START_NOWDOC    reduce using rule 92 (case_separator -> COLON .)
    BACKTICK        reduce using rule 92 (case_separator -> COLON .)
    DOLLAR          reduce using rule 92 (case_separator -> COLON .)
    VARIABLE        reduce using rule 92 (case_separator -> COLON .)
    RBRACE          reduce using rule 92 (case_separator -> COLON .)
    CASE            reduce using rule 92 (case_separator -> COLON .)
    DEFAULT         reduce using rule 92 (case_separator -> COLON .)
    ENDSWITCH       reduce using rule 92 (case_separator -> COLON .)


state 876

    (93) case_separator -> SEMI .

    HALT_COMPILER   reduce using rule 93 (case_separator -> SEMI .)
    YIELD           reduce using rule 93 (case_separator -> SEMI .)
    LBRACE          reduce using rule 93 (case_separator -> SEMI .)
    IF              reduce using rule 93 (case_separator -> SEMI .)
    WHILE           reduce using rule 93 (case_separator -> SEMI .)
    DO              reduce using rule 93 (case_separator -> SEMI .)
    FOR             reduce using rule 93 (case_separator -> SEMI .)
    FOREACH         reduce using rule 93 (case_separator -> SEMI .)
    SWITCH          reduce using rule 93 (case_separator -> SEMI .)
    BREAK           reduce using rule 93 (case_separator -> SEMI .)
    CONTINUE        reduce using rule 93 (case_separator -> SEMI .)
    RETURN          reduce using rule 93 (case_separator -> SEMI .)
    GLOBAL          reduce using rule 93 (case_separator -> SEMI .)
    STATIC          reduce using rule 93 (case_separator -> SEMI .)
    ECHO            reduce using rule 93 (case_separator -> SEMI .)
    INLINE_HTML     reduce using rule 93 (case_separator -> SEMI .)
    UNSET           reduce using rule 93 (case_separator -> SEMI .)
    SEMI            reduce using rule 93 (case_separator -> SEMI .)
    TRY             reduce using rule 93 (case_separator -> SEMI .)
    THROW           reduce using rule 93 (case_separator -> SEMI .)
    DECLARE         reduce using rule 93 (case_separator -> SEMI .)
    FUNCTION        reduce using rule 93 (case_separator -> SEMI .)
    INTERFACE       reduce using rule 93 (case_separator -> SEMI .)
    TRAIT           reduce using rule 93 (case_separator -> SEMI .)
    NEW             reduce using rule 93 (case_separator -> SEMI .)
    CLONE           reduce using rule 93 (case_separator -> SEMI .)
    LIST            reduce using rule 93 (case_separator -> SEMI .)
    ARRAY           reduce using rule 93 (case_separator -> SEMI .)
    LBRACKET        reduce using rule 93 (case_separator -> SEMI .)
    PLUS            reduce using rule 93 (case_separator -> SEMI .)
    MINUS           reduce using rule 93 (case_separator -> SEMI .)
    NOT             reduce using rule 93 (case_separator -> SEMI .)
    BOOLEAN_NOT     reduce using rule 93 (case_separator -> SEMI .)
    INC             reduce using rule 93 (case_separator -> SEMI .)
    DEC             reduce using rule 93 (case_separator -> SEMI .)
    INT_CAST        reduce using rule 93 (case_separator -> SEMI .)
    DOUBLE_CAST     reduce using rule 93 (case_separator -> SEMI .)
    STRING_CAST     reduce using rule 93 (case_separator -> SEMI .)
    ARRAY_CAST      reduce using rule 93 (case_separator -> SEMI .)
    OBJECT_CAST     reduce using rule 93 (case_separator -> SEMI .)
    BOOL_CAST       reduce using rule 93 (case_separator -> SEMI .)
    UNSET_CAST      reduce using rule 93 (case_separator -> SEMI .)
    BINARY_CAST     reduce using rule 93 (case_separator -> SEMI .)
    ISSET           reduce using rule 93 (case_separator -> SEMI .)
    EMPTY           reduce using rule 93 (case_separator -> SEMI .)
    EVAL            reduce using rule 93 (case_separator -> SEMI .)
    INCLUDE         reduce using rule 93 (case_separator -> SEMI .)
    INCLUDE_ONCE    reduce using rule 93 (case_separator -> SEMI .)
    REQUIRE         reduce using rule 93 (case_separator -> SEMI .)
    REQUIRE_ONCE    reduce using rule 93 (case_separator -> SEMI .)
    PRINT           reduce using rule 93 (case_separator -> SEMI .)
    AT              reduce using rule 93 (case_separator -> SEMI .)
    LPAREN          reduce using rule 93 (case_separator -> SEMI .)
    CLASS           reduce using rule 93 (case_separator -> SEMI .)
    ABSTRACT        reduce using rule 93 (case_separator -> SEMI .)
    FINAL           reduce using rule 93 (case_separator -> SEMI .)
    QUOTE           reduce using rule 93 (case_separator -> SEMI .)
    STRING          reduce using rule 93 (case_separator -> SEMI .)
    STRING_VARNAME  reduce using rule 93 (case_separator -> SEMI .)
    NS_SEPARATOR    reduce using rule 93 (case_separator -> SEMI .)
    NAMESPACE       reduce using rule 93 (case_separator -> SEMI .)
    EXIT            reduce using rule 93 (case_separator -> SEMI .)
    DIE             reduce using rule 93 (case_separator -> SEMI .)
    LNUMBER         reduce using rule 93 (case_separator -> SEMI .)
    DNUMBER         reduce using rule 93 (case_separator -> SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 93 (case_separator -> SEMI .)
    LINE            reduce using rule 93 (case_separator -> SEMI .)
    FILE            reduce using rule 93 (case_separator -> SEMI .)
    DIR             reduce using rule 93 (case_separator -> SEMI .)
    CLASS_C         reduce using rule 93 (case_separator -> SEMI .)
    METHOD_C        reduce using rule 93 (case_separator -> SEMI .)
    FUNC_C          reduce using rule 93 (case_separator -> SEMI .)
    NS_C            reduce using rule 93 (case_separator -> SEMI .)
    START_HEREDOC   reduce using rule 93 (case_separator -> SEMI .)
    START_NOWDOC    reduce using rule 93 (case_separator -> SEMI .)
    BACKTICK        reduce using rule 93 (case_separator -> SEMI .)
    DOLLAR          reduce using rule 93 (case_separator -> SEMI .)
    VARIABLE        reduce using rule 93 (case_separator -> SEMI .)
    RBRACE          reduce using rule 93 (case_separator -> SEMI .)
    CASE            reduce using rule 93 (case_separator -> SEMI .)
    DEFAULT         reduce using rule 93 (case_separator -> SEMI .)
    ENDSWITCH       reduce using rule 93 (case_separator -> SEMI .)


state 877

    (86) switch_case_list -> LBRACE SEMI case_list RBRACE .

    HALT_COMPILER   reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    NAMESPACE       reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    CONST           reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    USE             reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    LBRACE          reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    IF              reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    WHILE           reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    DO              reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    FOR             reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    FOREACH         reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    SWITCH          reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    BREAK           reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    CONTINUE        reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    RETURN          reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    GLOBAL          reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    STATIC          reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    ECHO            reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    INLINE_HTML     reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    UNSET           reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    SEMI            reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    TRY             reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    THROW           reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    DECLARE         reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    FUNCTION        reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    INTERFACE       reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    TRAIT           reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    NEW             reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    CLONE           reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    LIST            reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    ARRAY           reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    LBRACKET        reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    PLUS            reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    MINUS           reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    NOT             reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    BOOLEAN_NOT     reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    INC             reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    DEC             reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    INT_CAST        reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    DOUBLE_CAST     reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    STRING_CAST     reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    ARRAY_CAST      reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    OBJECT_CAST     reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    BOOL_CAST       reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    UNSET_CAST      reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    BINARY_CAST     reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    ISSET           reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    EMPTY           reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    EVAL            reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    INCLUDE         reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    INCLUDE_ONCE    reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    REQUIRE         reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    REQUIRE_ONCE    reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    PRINT           reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    AT              reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    LPAREN          reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    CLASS           reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    ABSTRACT        reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    FINAL           reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    QUOTE           reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    STRING          reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    STRING_VARNAME  reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    NS_SEPARATOR    reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    EXIT            reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    DIE             reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    LNUMBER         reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    DNUMBER         reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    LINE            reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    FILE            reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    DIR             reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    CLASS_C         reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    METHOD_C        reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    FUNC_C          reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    NS_C            reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    START_HEREDOC   reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    START_NOWDOC    reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    BACKTICK        reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    DOLLAR          reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    VARIABLE        reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    $end            reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    RBRACE          reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    YIELD           reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    ELSEIF          reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    ELSE            reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    ENDIF           reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    ENDWHILE        reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    ENDDECLARE      reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    ENDFOREACH      reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    CASE            reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    DEFAULT         reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    ENDSWITCH       reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)
    ENDFOR          reduce using rule 86 (switch_case_list -> LBRACE SEMI case_list RBRACE .)


state 878

    (87) switch_case_list -> COLON case_list ENDSWITCH SEMI .

    HALT_COMPILER   reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    NAMESPACE       reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    CONST           reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    USE             reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    LBRACE          reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    IF              reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    WHILE           reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    DO              reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    FOR             reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    FOREACH         reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    SWITCH          reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    BREAK           reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    CONTINUE        reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    RETURN          reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    GLOBAL          reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    STATIC          reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    ECHO            reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    INLINE_HTML     reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    UNSET           reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    SEMI            reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    TRY             reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    THROW           reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    DECLARE         reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    FUNCTION        reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    INTERFACE       reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    TRAIT           reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    NEW             reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    CLONE           reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    LIST            reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    ARRAY           reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    LBRACKET        reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    PLUS            reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    MINUS           reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    NOT             reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    BOOLEAN_NOT     reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    INC             reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    DEC             reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    INT_CAST        reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    DOUBLE_CAST     reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    STRING_CAST     reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    ARRAY_CAST      reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    OBJECT_CAST     reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    BOOL_CAST       reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    UNSET_CAST      reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    BINARY_CAST     reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    ISSET           reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    EMPTY           reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    EVAL            reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    INCLUDE         reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    INCLUDE_ONCE    reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    REQUIRE         reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    REQUIRE_ONCE    reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    PRINT           reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    AT              reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    LPAREN          reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    CLASS           reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    ABSTRACT        reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    FINAL           reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    QUOTE           reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    STRING          reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    STRING_VARNAME  reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    NS_SEPARATOR    reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    EXIT            reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    DIE             reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    LNUMBER         reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    DNUMBER         reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    LINE            reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    FILE            reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    DIR             reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    CLASS_C         reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    METHOD_C        reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    FUNC_C          reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    NS_C            reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    START_HEREDOC   reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    START_NOWDOC    reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    BACKTICK        reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    DOLLAR          reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    VARIABLE        reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    $end            reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    RBRACE          reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    YIELD           reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    ELSEIF          reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    ELSE            reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    ENDIF           reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    ENDWHILE        reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    ENDDECLARE      reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    ENDFOREACH      reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    CASE            reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    DEFAULT         reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    ENDSWITCH       reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)
    ENDFOR          reduce using rule 87 (switch_case_list -> COLON case_list ENDSWITCH SEMI .)


state 879

    (88) switch_case_list -> COLON SEMI case_list ENDSWITCH . SEMI

    SEMI            shift and go to state 915


state 880

    (52) additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name . VARIABLE RPAREN LBRACE inner_statement_list RBRACE

    VARIABLE        shift and go to state 916


state 881

    (54) maybe_finally -> FINALLY LBRACE inner_statement_list . RBRACE
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) inner_statement -> . YIELD SEMI
    (29) inner_statement -> . YIELD expr SEMI
    (30) statement -> . LBRACE inner_statement_list RBRACE
    (31) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (33) statement -> . WHILE LPAREN expr RPAREN while_statement
    (34) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (35) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (36) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (37) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (38) statement -> . BREAK SEMI
    (39) statement -> . BREAK expr SEMI
    (40) statement -> . CONTINUE SEMI
    (41) statement -> . CONTINUE expr SEMI
    (42) statement -> . RETURN SEMI
    (43) statement -> . RETURN expr SEMI
    (44) statement -> . GLOBAL global_var_list SEMI
    (45) statement -> . STATIC static_var_list SEMI
    (46) statement -> . ECHO echo_expr_list SEMI
    (47) statement -> . INLINE_HTML
    (48) statement -> . expr SEMI
    (49) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (50) statement -> . SEMI
    (51) statement -> . TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
    (56) statement -> . THROW expr SEMI
    (57) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (108) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (109) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (110) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (111) class_declaration_statement -> . TRAIT STRING LBRACE trait_statement_list RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (112) class_entry_type -> . CLASS
    (113) class_entry_type -> . ABSTRACT CLASS
    (114) class_entry_type -> . FINAL CLASS
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RBRACE          shift and go to state 917
    HALT_COMPILER   shift and go to state 290
    YIELD           shift and go to state 291
    LBRACE          shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    FOREACH         shift and go to state 21
    SWITCH          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    GLOBAL          shift and go to state 26
    STATIC          shift and go to state 27
    ECHO            shift and go to state 28
    INLINE_HTML     shift and go to state 29
    UNSET           shift and go to state 30
    SEMI            shift and go to state 10
    TRY             shift and go to state 31
    THROW           shift and go to state 32
    DECLARE         shift and go to state 33
    FUNCTION        shift and go to state 34
    INTERFACE       shift and go to state 37
    TRAIT           shift and go to state 38
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    CLASS           shift and go to state 70
    ABSTRACT        shift and go to state 71
    FINAL           shift and go to state 72
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    inner_statement                shift and go to state 286
    statement                      shift and go to state 287
    function_declaration_statement shift and go to state 288
    class_declaration_statement    shift and go to state 289
    expr                           shift and go to state 17
    class_entry_type               shift and go to state 36
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 882

    (61) declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .

    ELSEIF          reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    ELSE            reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    HALT_COMPILER   reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    NAMESPACE       reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    CONST           reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    USE             reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    LBRACE          reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    IF              reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    WHILE           reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    DO              reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    FOR             reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    FOREACH         reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    SWITCH          reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    BREAK           reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    CONTINUE        reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    RETURN          reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    GLOBAL          reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    STATIC          reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    ECHO            reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    INLINE_HTML     reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    UNSET           reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    SEMI            reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    TRY             reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    THROW           reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    DECLARE         reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    FUNCTION        reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    INTERFACE       reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    TRAIT           reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    NEW             reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    CLONE           reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    LIST            reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    ARRAY           reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    LBRACKET        reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    PLUS            reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    MINUS           reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    NOT             reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    BOOLEAN_NOT     reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    INC             reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    DEC             reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    INT_CAST        reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    DOUBLE_CAST     reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    STRING_CAST     reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    ARRAY_CAST      reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    OBJECT_CAST     reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    BOOL_CAST       reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    UNSET_CAST      reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    BINARY_CAST     reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    ISSET           reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    EMPTY           reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    EVAL            reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    INCLUDE         reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    INCLUDE_ONCE    reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    REQUIRE         reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    REQUIRE_ONCE    reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    PRINT           reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    AT              reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    LPAREN          reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    CLASS           reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    ABSTRACT        reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    FINAL           reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    QUOTE           reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    STRING          reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    STRING_VARNAME  reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    NS_SEPARATOR    reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    EXIT            reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    DIE             reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    LNUMBER         reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    DNUMBER         reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    LINE            reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    FILE            reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    DIR             reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    CLASS_C         reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    METHOD_C        reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    FUNC_C          reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    NS_C            reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    START_HEREDOC   reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    START_NOWDOC    reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    BACKTICK        reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    DOLLAR          reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    VARIABLE        reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    $end            reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    RBRACE          reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    YIELD           reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    ENDIF           reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    ENDWHILE        reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    ENDDECLARE      reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    ENDFOREACH      reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    CASE            reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    DEFAULT         reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    ENDSWITCH       reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)
    ENDFOR          reduce using rule 61 (declare_statement -> COLON inner_statement_list ENDDECLARE SEMI .)


state 883

    (108) function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list . RBRACE
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) inner_statement -> . YIELD SEMI
    (29) inner_statement -> . YIELD expr SEMI
    (30) statement -> . LBRACE inner_statement_list RBRACE
    (31) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (33) statement -> . WHILE LPAREN expr RPAREN while_statement
    (34) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (35) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (36) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (37) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (38) statement -> . BREAK SEMI
    (39) statement -> . BREAK expr SEMI
    (40) statement -> . CONTINUE SEMI
    (41) statement -> . CONTINUE expr SEMI
    (42) statement -> . RETURN SEMI
    (43) statement -> . RETURN expr SEMI
    (44) statement -> . GLOBAL global_var_list SEMI
    (45) statement -> . STATIC static_var_list SEMI
    (46) statement -> . ECHO echo_expr_list SEMI
    (47) statement -> . INLINE_HTML
    (48) statement -> . expr SEMI
    (49) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (50) statement -> . SEMI
    (51) statement -> . TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
    (56) statement -> . THROW expr SEMI
    (57) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (108) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (109) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (110) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (111) class_declaration_statement -> . TRAIT STRING LBRACE trait_statement_list RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (112) class_entry_type -> . CLASS
    (113) class_entry_type -> . ABSTRACT CLASS
    (114) class_entry_type -> . FINAL CLASS
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RBRACE          shift and go to state 918
    HALT_COMPILER   shift and go to state 290
    YIELD           shift and go to state 291
    LBRACE          shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    FOREACH         shift and go to state 21
    SWITCH          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    GLOBAL          shift and go to state 26
    STATIC          shift and go to state 27
    ECHO            shift and go to state 28
    INLINE_HTML     shift and go to state 29
    UNSET           shift and go to state 30
    SEMI            shift and go to state 10
    TRY             shift and go to state 31
    THROW           shift and go to state 32
    DECLARE         shift and go to state 33
    FUNCTION        shift and go to state 34
    INTERFACE       shift and go to state 37
    TRAIT           shift and go to state 38
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    CLASS           shift and go to state 70
    ABSTRACT        shift and go to state 71
    FINAL           shift and go to state 72
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    inner_statement                shift and go to state 286
    statement                      shift and go to state 287
    function_declaration_statement shift and go to state 288
    class_declaration_statement    shift and go to state 289
    expr                           shift and go to state 17
    class_entry_type               shift and go to state 36
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 884

    (271) expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list . RBRACE
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) inner_statement -> . YIELD SEMI
    (29) inner_statement -> . YIELD expr SEMI
    (30) statement -> . LBRACE inner_statement_list RBRACE
    (31) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (33) statement -> . WHILE LPAREN expr RPAREN while_statement
    (34) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (35) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (36) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (37) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (38) statement -> . BREAK SEMI
    (39) statement -> . BREAK expr SEMI
    (40) statement -> . CONTINUE SEMI
    (41) statement -> . CONTINUE expr SEMI
    (42) statement -> . RETURN SEMI
    (43) statement -> . RETURN expr SEMI
    (44) statement -> . GLOBAL global_var_list SEMI
    (45) statement -> . STATIC static_var_list SEMI
    (46) statement -> . ECHO echo_expr_list SEMI
    (47) statement -> . INLINE_HTML
    (48) statement -> . expr SEMI
    (49) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (50) statement -> . SEMI
    (51) statement -> . TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
    (56) statement -> . THROW expr SEMI
    (57) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (108) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (109) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (110) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (111) class_declaration_statement -> . TRAIT STRING LBRACE trait_statement_list RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (112) class_entry_type -> . CLASS
    (113) class_entry_type -> . ABSTRACT CLASS
    (114) class_entry_type -> . FINAL CLASS
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RBRACE          shift and go to state 919
    HALT_COMPILER   shift and go to state 290
    YIELD           shift and go to state 291
    LBRACE          shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    FOREACH         shift and go to state 21
    SWITCH          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    GLOBAL          shift and go to state 26
    STATIC          shift and go to state 27
    ECHO            shift and go to state 28
    INLINE_HTML     shift and go to state 29
    UNSET           shift and go to state 30
    SEMI            shift and go to state 10
    TRY             shift and go to state 31
    THROW           shift and go to state 32
    DECLARE         shift and go to state 33
    FUNCTION        shift and go to state 34
    INTERFACE       shift and go to state 37
    TRAIT           shift and go to state 38
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    CLASS           shift and go to state 70
    ABSTRACT        shift and go to state 71
    FINAL           shift and go to state 72
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    inner_statement                shift and go to state 286
    statement                      shift and go to state 287
    function_declaration_statement shift and go to state 288
    class_declaration_statement    shift and go to state 289
    expr                           shift and go to state 17
    class_entry_type               shift and go to state 36
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 885

    (272) lexical_vars -> USE LPAREN lexical_var_list . RPAREN
    (274) lexical_var_list -> lexical_var_list . COMMA AND VARIABLE
    (275) lexical_var_list -> lexical_var_list . COMMA VARIABLE

    RPAREN          shift and go to state 920
    COMMA           shift and go to state 921


state 886

    (276) lexical_var_list -> AND . VARIABLE

    VARIABLE        shift and go to state 922


state 887

    (277) lexical_var_list -> VARIABLE .

    RPAREN          reduce using rule 277 (lexical_var_list -> VARIABLE .)
    COMMA           reduce using rule 277 (lexical_var_list -> VARIABLE .)


state 888

    (179) parameter -> class_name AND VARIABLE EQUALS static_scalar .

    RPAREN          reduce using rule 179 (parameter -> class_name AND VARIABLE EQUALS static_scalar .)
    COMMA           reduce using rule 179 (parameter -> class_name AND VARIABLE EQUALS static_scalar .)


state 889

    (137) class_statement -> method_modifiers FUNCTION is_reference . STRING LPAREN parameter_list RPAREN method_body

    STRING          shift and go to state 923


state 890

    (138) class_statement -> variable_modifiers class_variable_declaration SEMI .

    RBRACE          reduce using rule 138 (class_statement -> variable_modifiers class_variable_declaration SEMI .)
    USE             reduce using rule 138 (class_statement -> variable_modifiers class_variable_declaration SEMI .)
    VAR             reduce using rule 138 (class_statement -> variable_modifiers class_variable_declaration SEMI .)
    CONST           reduce using rule 138 (class_statement -> variable_modifiers class_variable_declaration SEMI .)
    STATIC          reduce using rule 138 (class_statement -> variable_modifiers class_variable_declaration SEMI .)
    ABSTRACT        reduce using rule 138 (class_statement -> variable_modifiers class_variable_declaration SEMI .)
    FINAL           reduce using rule 138 (class_statement -> variable_modifiers class_variable_declaration SEMI .)
    PUBLIC          reduce using rule 138 (class_statement -> variable_modifiers class_variable_declaration SEMI .)
    PROTECTED       reduce using rule 138 (class_statement -> variable_modifiers class_variable_declaration SEMI .)
    PRIVATE         reduce using rule 138 (class_statement -> variable_modifiers class_variable_declaration SEMI .)
    FUNCTION        reduce using rule 138 (class_statement -> variable_modifiers class_variable_declaration SEMI .)


state 891

    (146) class_constant_declaration -> class_constant_declaration COMMA STRING . EQUALS static_expr

    EQUALS          shift and go to state 924


state 892

    (140) class_statement -> USE fully_qualified_class_name LBRACE . trait_modifiers_list RBRACE
    (122) trait_modifiers_list -> . trait_modifiers_list trait_modifier
    (123) trait_modifiers_list -> . empty
    (443) empty -> .

    RBRACE          reduce using rule 443 (empty -> .)
    STRING          reduce using rule 443 (empty -> .)
    NS_SEPARATOR    reduce using rule 443 (empty -> .)
    NAMESPACE       reduce using rule 443 (empty -> .)
    ARRAY           reduce using rule 443 (empty -> .)

    trait_modifiers_list           shift and go to state 925
    empty                          shift and go to state 899

state 893

    (141) class_statement -> USE fully_qualified_class_name SEMI .

    RBRACE          reduce using rule 141 (class_statement -> USE fully_qualified_class_name SEMI .)
    USE             reduce using rule 141 (class_statement -> USE fully_qualified_class_name SEMI .)
    VAR             reduce using rule 141 (class_statement -> USE fully_qualified_class_name SEMI .)
    CONST           reduce using rule 141 (class_statement -> USE fully_qualified_class_name SEMI .)
    STATIC          reduce using rule 141 (class_statement -> USE fully_qualified_class_name SEMI .)
    ABSTRACT        reduce using rule 141 (class_statement -> USE fully_qualified_class_name SEMI .)
    FINAL           reduce using rule 141 (class_statement -> USE fully_qualified_class_name SEMI .)
    PUBLIC          reduce using rule 141 (class_statement -> USE fully_qualified_class_name SEMI .)
    PROTECTED       reduce using rule 141 (class_statement -> USE fully_qualified_class_name SEMI .)
    PRIVATE         reduce using rule 141 (class_statement -> USE fully_qualified_class_name SEMI .)
    FUNCTION        reduce using rule 141 (class_statement -> USE fully_qualified_class_name SEMI .)


state 894

    (147) class_constant_declaration -> CONST STRING EQUALS . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 926
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 895

    (131) trait_statement -> method_modifiers FUNCTION is_reference STRING . LPAREN parameter_list RPAREN method_body

    LPAREN          shift and go to state 927


state 896

    (142) class_variable_declaration -> class_variable_declaration COMMA VARIABLE . EQUALS static_scalar
    (144) class_variable_declaration -> class_variable_declaration COMMA VARIABLE .

    EQUALS          shift and go to state 928
    SEMI            reduce using rule 144 (class_variable_declaration -> class_variable_declaration COMMA VARIABLE .)
    COMMA           reduce using rule 144 (class_variable_declaration -> class_variable_declaration COMMA VARIABLE .)


state 897

    (143) class_variable_declaration -> VARIABLE EQUALS static_scalar .

    SEMI            reduce using rule 143 (class_variable_declaration -> VARIABLE EQUALS static_scalar .)
    COMMA           reduce using rule 143 (class_variable_declaration -> VARIABLE EQUALS static_scalar .)


state 898

    (133) trait_statement -> USE fully_qualified_class_name LBRACE trait_modifiers_list . RBRACE
    (122) trait_modifiers_list -> trait_modifiers_list . trait_modifier
    (126) trait_modifier -> . trait_member AS STRING SEMI
    (127) trait_modifier -> . trait_member AS visibility_modifier STRING SEMI
    (128) trait_modifier -> . trait_member AS visibility_modifier SEMI
    (124) trait_member -> . fully_qualified_class_name DOUBLE_COLON STRING
    (125) trait_member -> . STRING
    (117) fully_qualified_class_name -> . namespace_name
    (118) fully_qualified_class_name -> . NS_SEPARATOR namespace_name
    (119) fully_qualified_class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    RBRACE          shift and go to state 930
    STRING          shift and go to state 933
    NS_SEPARATOR    shift and go to state 517
    NAMESPACE       shift and go to state 518
    ARRAY           shift and go to state 117

    fully_qualified_class_name     shift and go to state 929
    trait_modifier                 shift and go to state 931
    trait_member                   shift and go to state 932
    namespace_name                 shift and go to state 516

state 899

    (123) trait_modifiers_list -> empty .

    RBRACE          reduce using rule 123 (trait_modifiers_list -> empty .)
    STRING          reduce using rule 123 (trait_modifiers_list -> empty .)
    NS_SEPARATOR    reduce using rule 123 (trait_modifiers_list -> empty .)
    NAMESPACE       reduce using rule 123 (trait_modifiers_list -> empty .)
    ARRAY           reduce using rule 123 (trait_modifiers_list -> empty .)


state 900

    (224) variable_property -> OBJECT_OPERATOR object_property method_or_not .

    OBJECT_OPERATOR reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    EQUALS          reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    PLUS_EQUAL      reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    MINUS_EQUAL     reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    MUL_EQUAL       reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    DIV_EQUAL       reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    CONCAT_EQUAL    reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    MOD_EQUAL       reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    AND_EQUAL       reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    OR_EQUAL        reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    XOR_EQUAL       reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    SL_EQUAL        reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    SR_EQUAL        reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    INC             reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    DEC             reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    LBRACKET        reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    SEMI            reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    LBRACE          reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    BOOLEAN_AND     reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    BOOLEAN_OR      reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    LOGICAL_AND     reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    LOGICAL_OR      reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    LOGICAL_XOR     reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    AND             reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    OR              reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    XOR             reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    CONCAT          reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    PLUS            reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    MINUS           reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    MUL             reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    DIV             reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    SL              reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    SR              reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    MOD             reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    IS_IDENTICAL    reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    IS_NOT_IDENTICAL reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    IS_EQUAL        reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    IS_NOT_EQUAL    reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    IS_SMALLER      reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    IS_SMALLER_OR_EQUAL reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    IS_GREATER      reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    IS_GREATER_OR_EQUAL reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    INSTANCEOF      reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    QUESTION        reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    RPAREN          reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    COMMA           reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    DOUBLE_ARROW    reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    RBRACKET        reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    RBRACE          reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    COLON           reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)
    AS              reduce using rule 224 (variable_property -> OBJECT_OPERATOR object_property method_or_not .)


state 901

    (438) encaps_var -> DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET expr RBRACKET RBRACE .

    QUOTE           reduce using rule 438 (encaps_var -> DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET expr RBRACKET RBRACE .)
    ENCAPSED_AND_WHITESPACE reduce using rule 438 (encaps_var -> DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET expr RBRACKET RBRACE .)
    VARIABLE        reduce using rule 438 (encaps_var -> DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET expr RBRACKET RBRACE .)
    DOLLAR_OPEN_CURLY_BRACES reduce using rule 438 (encaps_var -> DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET expr RBRACKET RBRACE .)
    CURLY_OPEN      reduce using rule 438 (encaps_var -> DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET expr RBRACKET RBRACE .)
    END_HEREDOC     reduce using rule 438 (encaps_var -> DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET expr RBRACKET RBRACE .)
    BACKTICK        reduce using rule 438 (encaps_var -> DOLLAR_OPEN_CURLY_BRACES STRING_VARNAME LBRACKET expr RBRACKET RBRACE .)


state 902

    (216) function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .

    OBJECT_OPERATOR reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    PLUS_EQUAL      reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    MINUS_EQUAL     reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    MUL_EQUAL       reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    DIV_EQUAL       reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    CONCAT_EQUAL    reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    MOD_EQUAL       reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    AND_EQUAL       reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    OR_EQUAL        reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    XOR_EQUAL       reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    SL_EQUAL        reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    SR_EQUAL        reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    INC             reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    DEC             reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    LBRACKET        reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    SEMI            reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    LBRACE          reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_AND     reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_OR      reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_AND     reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_OR      reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_XOR     reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    XOR             reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    CONCAT          reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    MUL             reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    DIV             reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    SL              reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    SR              reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    MOD             reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    IS_IDENTICAL    reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    IS_EQUAL        reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_EQUAL    reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER      reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER      reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    INSTANCEOF      reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    QUESTION        reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    COMMA           reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    DOUBLE_ARROW    reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    RBRACE          reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 216 (function_call -> class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)


state 903

    (217) function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .

    OBJECT_OPERATOR reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    EQUALS          reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    PLUS_EQUAL      reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    MINUS_EQUAL     reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    MUL_EQUAL       reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    DIV_EQUAL       reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    CONCAT_EQUAL    reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    MOD_EQUAL       reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    AND_EQUAL       reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    OR_EQUAL        reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    XOR_EQUAL       reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    SL_EQUAL        reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    SR_EQUAL        reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    INC             reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    DEC             reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    LBRACKET        reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    SEMI            reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    LBRACE          reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_AND     reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    BOOLEAN_OR      reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_AND     reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_OR      reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    LOGICAL_XOR     reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    AND             reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    OR              reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    XOR             reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    CONCAT          reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    PLUS            reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    MINUS           reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    MUL             reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    DIV             reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    SL              reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    SR              reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    MOD             reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    IS_IDENTICAL    reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    IS_EQUAL        reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    IS_NOT_EQUAL    reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER      reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER      reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    INSTANCEOF      reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    QUESTION        reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    RPAREN          reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    COMMA           reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    DOUBLE_ARROW    reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    RBRACKET        reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    RBRACE          reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    COLON           reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)
    AS              reduce using rule 217 (function_call -> variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN .)


state 904

    (400) static_non_empty_array_pair_list -> static_non_empty_array_pair_list COMMA static_scalar DOUBLE_ARROW static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    COMMA           reduce using rule 400 (static_non_empty_array_pair_list -> static_non_empty_array_pair_list COMMA static_scalar DOUBLE_ARROW static_expr .)
    RBRACKET        reduce using rule 400 (static_non_empty_array_pair_list -> static_non_empty_array_pair_list COMMA static_scalar DOUBLE_ARROW static_expr .)
    RPAREN          reduce using rule 400 (static_non_empty_array_pair_list -> static_non_empty_array_pair_list COMMA static_scalar DOUBLE_ARROW static_expr .)
    BOOLEAN_AND     shift and go to state 571
    BOOLEAN_OR      shift and go to state 572
    LOGICAL_AND     shift and go to state 573
    LOGICAL_OR      shift and go to state 574
    LOGICAL_XOR     shift and go to state 575
    AND             shift and go to state 576
    OR              shift and go to state 577
    XOR             shift and go to state 578
    CONCAT          shift and go to state 579
    PLUS            shift and go to state 580
    MINUS           shift and go to state 581
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    SL              shift and go to state 584
    SR              shift and go to state 585
    MOD             shift and go to state 586
    IS_IDENTICAL    shift and go to state 587
    IS_NOT_IDENTICAL shift and go to state 588
    IS_EQUAL        shift and go to state 589
    IS_NOT_EQUAL    shift and go to state 590
    IS_SMALLER      shift and go to state 591
    IS_SMALLER_OR_EQUAL shift and go to state 592
    IS_GREATER      shift and go to state 593
    IS_GREATER_OR_EQUAL shift and go to state 594


state 905

    (63) elseif_list -> elseif_list ELSEIF LPAREN expr . RPAREN statement
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    RPAREN          shift and go to state 934
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 906

    (32) statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF . SEMI

    SEMI            shift and go to state 935


state 907

    (67) new_elseif_list -> new_elseif_list ELSEIF LPAREN . expr RPAREN COLON inner_statement_list
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    STATIC          shift and go to state 111
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 936
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 908

    (69) new_else_single -> ELSE COLON . inner_statement_list
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (443) empty -> .

    HALT_COMPILER   reduce using rule 443 (empty -> .)
    YIELD           reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    IF              reduce using rule 443 (empty -> .)
    WHILE           reduce using rule 443 (empty -> .)
    DO              reduce using rule 443 (empty -> .)
    FOR             reduce using rule 443 (empty -> .)
    FOREACH         reduce using rule 443 (empty -> .)
    SWITCH          reduce using rule 443 (empty -> .)
    BREAK           reduce using rule 443 (empty -> .)
    CONTINUE        reduce using rule 443 (empty -> .)
    RETURN          reduce using rule 443 (empty -> .)
    GLOBAL          reduce using rule 443 (empty -> .)
    STATIC          reduce using rule 443 (empty -> .)
    ECHO            reduce using rule 443 (empty -> .)
    INLINE_HTML     reduce using rule 443 (empty -> .)
    UNSET           reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    TRY             reduce using rule 443 (empty -> .)
    THROW           reduce using rule 443 (empty -> .)
    DECLARE         reduce using rule 443 (empty -> .)
    FUNCTION        reduce using rule 443 (empty -> .)
    INTERFACE       reduce using rule 443 (empty -> .)
    TRAIT           reduce using rule 443 (empty -> .)
    NEW             reduce using rule 443 (empty -> .)
    CLONE           reduce using rule 443 (empty -> .)
    LIST            reduce using rule 443 (empty -> .)
    ARRAY           reduce using rule 443 (empty -> .)
    LBRACKET        reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    NOT             reduce using rule 443 (empty -> .)
    BOOLEAN_NOT     reduce using rule 443 (empty -> .)
    INC             reduce using rule 443 (empty -> .)
    DEC             reduce using rule 443 (empty -> .)
    INT_CAST        reduce using rule 443 (empty -> .)
    DOUBLE_CAST     reduce using rule 443 (empty -> .)
    STRING_CAST     reduce using rule 443 (empty -> .)
    ARRAY_CAST      reduce using rule 443 (empty -> .)
    OBJECT_CAST     reduce using rule 443 (empty -> .)
    BOOL_CAST       reduce using rule 443 (empty -> .)
    UNSET_CAST      reduce using rule 443 (empty -> .)
    BINARY_CAST     reduce using rule 443 (empty -> .)
    ISSET           reduce using rule 443 (empty -> .)
    EMPTY           reduce using rule 443 (empty -> .)
    EVAL            reduce using rule 443 (empty -> .)
    INCLUDE         reduce using rule 443 (empty -> .)
    INCLUDE_ONCE    reduce using rule 443 (empty -> .)
    REQUIRE         reduce using rule 443 (empty -> .)
    REQUIRE_ONCE    reduce using rule 443 (empty -> .)
    PRINT           reduce using rule 443 (empty -> .)
    AT              reduce using rule 443 (empty -> .)
    LPAREN          reduce using rule 443 (empty -> .)
    CLASS           reduce using rule 443 (empty -> .)
    ABSTRACT        reduce using rule 443 (empty -> .)
    FINAL           reduce using rule 443 (empty -> .)
    QUOTE           reduce using rule 443 (empty -> .)
    STRING          reduce using rule 443 (empty -> .)
    STRING_VARNAME  reduce using rule 443 (empty -> .)
    NS_SEPARATOR    reduce using rule 443 (empty -> .)
    NAMESPACE       reduce using rule 443 (empty -> .)
    EXIT            reduce using rule 443 (empty -> .)
    DIE             reduce using rule 443 (empty -> .)
    LNUMBER         reduce using rule 443 (empty -> .)
    DNUMBER         reduce using rule 443 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 443 (empty -> .)
    LINE            reduce using rule 443 (empty -> .)
    FILE            reduce using rule 443 (empty -> .)
    DIR             reduce using rule 443 (empty -> .)
    CLASS_C         reduce using rule 443 (empty -> .)
    METHOD_C        reduce using rule 443 (empty -> .)
    FUNC_C          reduce using rule 443 (empty -> .)
    NS_C            reduce using rule 443 (empty -> .)
    START_HEREDOC   reduce using rule 443 (empty -> .)
    START_NOWDOC    reduce using rule 443 (empty -> .)
    BACKTICK        reduce using rule 443 (empty -> .)
    DOLLAR          reduce using rule 443 (empty -> .)
    VARIABLE        reduce using rule 443 (empty -> .)
    ENDIF           reduce using rule 443 (empty -> .)

    inner_statement_list           shift and go to state 937
    empty                          shift and go to state 121

state 909

    (35) statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .

    HALT_COMPILER   reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    NAMESPACE       reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    CONST           reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    USE             reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    LBRACE          reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    IF              reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    WHILE           reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    DO              reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    FOR             reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    FOREACH         reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    SWITCH          reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    BREAK           reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    CONTINUE        reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    RETURN          reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    GLOBAL          reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    STATIC          reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    ECHO            reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    INLINE_HTML     reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    UNSET           reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    SEMI            reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    TRY             reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    THROW           reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    DECLARE         reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    FUNCTION        reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    INTERFACE       reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    TRAIT           reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    NEW             reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    CLONE           reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    LIST            reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    ARRAY           reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    LBRACKET        reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    PLUS            reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    MINUS           reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    NOT             reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    BOOLEAN_NOT     reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    INC             reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    DEC             reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    INT_CAST        reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    DOUBLE_CAST     reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    STRING_CAST     reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    ARRAY_CAST      reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    OBJECT_CAST     reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    BOOL_CAST       reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    UNSET_CAST      reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    BINARY_CAST     reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    ISSET           reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    EMPTY           reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    EVAL            reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    INCLUDE         reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    INCLUDE_ONCE    reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    REQUIRE         reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    REQUIRE_ONCE    reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    PRINT           reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    AT              reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    LPAREN          reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    CLASS           reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    ABSTRACT        reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    FINAL           reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    QUOTE           reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    STRING          reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    STRING_VARNAME  reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    NS_SEPARATOR    reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    EXIT            reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    DIE             reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    LNUMBER         reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    DNUMBER         reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    LINE            reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    FILE            reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    DIR             reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    CLASS_C         reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    METHOD_C        reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    FUNC_C          reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    NS_C            reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    START_HEREDOC   reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    START_NOWDOC    reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    BACKTICK        reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    DOLLAR          reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    VARIABLE        reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    $end            reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    RBRACE          reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    YIELD           reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    ELSEIF          reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    ELSE            reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    ENDIF           reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    ENDWHILE        reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    ENDDECLARE      reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    ENDFOREACH      reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    CASE            reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    DEFAULT         reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    ENDSWITCH       reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)
    ENDFOR          reduce using rule 35 (statement -> FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement .)


state 910

    (76) for_statement -> statement .

    ELSEIF          reduce using rule 76 (for_statement -> statement .)
    ELSE            reduce using rule 76 (for_statement -> statement .)
    HALT_COMPILER   reduce using rule 76 (for_statement -> statement .)
    NAMESPACE       reduce using rule 76 (for_statement -> statement .)
    CONST           reduce using rule 76 (for_statement -> statement .)
    USE             reduce using rule 76 (for_statement -> statement .)
    LBRACE          reduce using rule 76 (for_statement -> statement .)
    IF              reduce using rule 76 (for_statement -> statement .)
    WHILE           reduce using rule 76 (for_statement -> statement .)
    DO              reduce using rule 76 (for_statement -> statement .)
    FOR             reduce using rule 76 (for_statement -> statement .)
    FOREACH         reduce using rule 76 (for_statement -> statement .)
    SWITCH          reduce using rule 76 (for_statement -> statement .)
    BREAK           reduce using rule 76 (for_statement -> statement .)
    CONTINUE        reduce using rule 76 (for_statement -> statement .)
    RETURN          reduce using rule 76 (for_statement -> statement .)
    GLOBAL          reduce using rule 76 (for_statement -> statement .)
    STATIC          reduce using rule 76 (for_statement -> statement .)
    ECHO            reduce using rule 76 (for_statement -> statement .)
    INLINE_HTML     reduce using rule 76 (for_statement -> statement .)
    UNSET           reduce using rule 76 (for_statement -> statement .)
    SEMI            reduce using rule 76 (for_statement -> statement .)
    TRY             reduce using rule 76 (for_statement -> statement .)
    THROW           reduce using rule 76 (for_statement -> statement .)
    DECLARE         reduce using rule 76 (for_statement -> statement .)
    FUNCTION        reduce using rule 76 (for_statement -> statement .)
    INTERFACE       reduce using rule 76 (for_statement -> statement .)
    TRAIT           reduce using rule 76 (for_statement -> statement .)
    NEW             reduce using rule 76 (for_statement -> statement .)
    CLONE           reduce using rule 76 (for_statement -> statement .)
    LIST            reduce using rule 76 (for_statement -> statement .)
    ARRAY           reduce using rule 76 (for_statement -> statement .)
    LBRACKET        reduce using rule 76 (for_statement -> statement .)
    PLUS            reduce using rule 76 (for_statement -> statement .)
    MINUS           reduce using rule 76 (for_statement -> statement .)
    NOT             reduce using rule 76 (for_statement -> statement .)
    BOOLEAN_NOT     reduce using rule 76 (for_statement -> statement .)
    INC             reduce using rule 76 (for_statement -> statement .)
    DEC             reduce using rule 76 (for_statement -> statement .)
    INT_CAST        reduce using rule 76 (for_statement -> statement .)
    DOUBLE_CAST     reduce using rule 76 (for_statement -> statement .)
    STRING_CAST     reduce using rule 76 (for_statement -> statement .)
    ARRAY_CAST      reduce using rule 76 (for_statement -> statement .)
    OBJECT_CAST     reduce using rule 76 (for_statement -> statement .)
    BOOL_CAST       reduce using rule 76 (for_statement -> statement .)
    UNSET_CAST      reduce using rule 76 (for_statement -> statement .)
    BINARY_CAST     reduce using rule 76 (for_statement -> statement .)
    ISSET           reduce using rule 76 (for_statement -> statement .)
    EMPTY           reduce using rule 76 (for_statement -> statement .)
    EVAL            reduce using rule 76 (for_statement -> statement .)
    INCLUDE         reduce using rule 76 (for_statement -> statement .)
    INCLUDE_ONCE    reduce using rule 76 (for_statement -> statement .)
    REQUIRE         reduce using rule 76 (for_statement -> statement .)
    REQUIRE_ONCE    reduce using rule 76 (for_statement -> statement .)
    PRINT           reduce using rule 76 (for_statement -> statement .)
    AT              reduce using rule 76 (for_statement -> statement .)
    LPAREN          reduce using rule 76 (for_statement -> statement .)
    CLASS           reduce using rule 76 (for_statement -> statement .)
    ABSTRACT        reduce using rule 76 (for_statement -> statement .)
    FINAL           reduce using rule 76 (for_statement -> statement .)
    QUOTE           reduce using rule 76 (for_statement -> statement .)
    STRING          reduce using rule 76 (for_statement -> statement .)
    STRING_VARNAME  reduce using rule 76 (for_statement -> statement .)
    NS_SEPARATOR    reduce using rule 76 (for_statement -> statement .)
    EXIT            reduce using rule 76 (for_statement -> statement .)
    DIE             reduce using rule 76 (for_statement -> statement .)
    LNUMBER         reduce using rule 76 (for_statement -> statement .)
    DNUMBER         reduce using rule 76 (for_statement -> statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 76 (for_statement -> statement .)
    LINE            reduce using rule 76 (for_statement -> statement .)
    FILE            reduce using rule 76 (for_statement -> statement .)
    DIR             reduce using rule 76 (for_statement -> statement .)
    CLASS_C         reduce using rule 76 (for_statement -> statement .)
    METHOD_C        reduce using rule 76 (for_statement -> statement .)
    FUNC_C          reduce using rule 76 (for_statement -> statement .)
    NS_C            reduce using rule 76 (for_statement -> statement .)
    START_HEREDOC   reduce using rule 76 (for_statement -> statement .)
    START_NOWDOC    reduce using rule 76 (for_statement -> statement .)
    BACKTICK        reduce using rule 76 (for_statement -> statement .)
    DOLLAR          reduce using rule 76 (for_statement -> statement .)
    VARIABLE        reduce using rule 76 (for_statement -> statement .)
    $end            reduce using rule 76 (for_statement -> statement .)
    RBRACE          reduce using rule 76 (for_statement -> statement .)
    YIELD           reduce using rule 76 (for_statement -> statement .)
    ENDIF           reduce using rule 76 (for_statement -> statement .)
    ENDWHILE        reduce using rule 76 (for_statement -> statement .)
    ENDDECLARE      reduce using rule 76 (for_statement -> statement .)
    ENDFOREACH      reduce using rule 76 (for_statement -> statement .)
    CASE            reduce using rule 76 (for_statement -> statement .)
    DEFAULT         reduce using rule 76 (for_statement -> statement .)
    ENDSWITCH       reduce using rule 76 (for_statement -> statement .)
    ENDFOR          reduce using rule 76 (for_statement -> statement .)


state 911

    (77) for_statement -> COLON . inner_statement_list ENDFOR SEMI
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (443) empty -> .

    ENDFOR          reduce using rule 443 (empty -> .)
    HALT_COMPILER   reduce using rule 443 (empty -> .)
    YIELD           reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    IF              reduce using rule 443 (empty -> .)
    WHILE           reduce using rule 443 (empty -> .)
    DO              reduce using rule 443 (empty -> .)
    FOR             reduce using rule 443 (empty -> .)
    FOREACH         reduce using rule 443 (empty -> .)
    SWITCH          reduce using rule 443 (empty -> .)
    BREAK           reduce using rule 443 (empty -> .)
    CONTINUE        reduce using rule 443 (empty -> .)
    RETURN          reduce using rule 443 (empty -> .)
    GLOBAL          reduce using rule 443 (empty -> .)
    STATIC          reduce using rule 443 (empty -> .)
    ECHO            reduce using rule 443 (empty -> .)
    INLINE_HTML     reduce using rule 443 (empty -> .)
    UNSET           reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    TRY             reduce using rule 443 (empty -> .)
    THROW           reduce using rule 443 (empty -> .)
    DECLARE         reduce using rule 443 (empty -> .)
    FUNCTION        reduce using rule 443 (empty -> .)
    INTERFACE       reduce using rule 443 (empty -> .)
    TRAIT           reduce using rule 443 (empty -> .)
    NEW             reduce using rule 443 (empty -> .)
    CLONE           reduce using rule 443 (empty -> .)
    LIST            reduce using rule 443 (empty -> .)
    ARRAY           reduce using rule 443 (empty -> .)
    LBRACKET        reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    NOT             reduce using rule 443 (empty -> .)
    BOOLEAN_NOT     reduce using rule 443 (empty -> .)
    INC             reduce using rule 443 (empty -> .)
    DEC             reduce using rule 443 (empty -> .)
    INT_CAST        reduce using rule 443 (empty -> .)
    DOUBLE_CAST     reduce using rule 443 (empty -> .)
    STRING_CAST     reduce using rule 443 (empty -> .)
    ARRAY_CAST      reduce using rule 443 (empty -> .)
    OBJECT_CAST     reduce using rule 443 (empty -> .)
    BOOL_CAST       reduce using rule 443 (empty -> .)
    UNSET_CAST      reduce using rule 443 (empty -> .)
    BINARY_CAST     reduce using rule 443 (empty -> .)
    ISSET           reduce using rule 443 (empty -> .)
    EMPTY           reduce using rule 443 (empty -> .)
    EVAL            reduce using rule 443 (empty -> .)
    INCLUDE         reduce using rule 443 (empty -> .)
    INCLUDE_ONCE    reduce using rule 443 (empty -> .)
    REQUIRE         reduce using rule 443 (empty -> .)
    REQUIRE_ONCE    reduce using rule 443 (empty -> .)
    PRINT           reduce using rule 443 (empty -> .)
    AT              reduce using rule 443 (empty -> .)
    LPAREN          reduce using rule 443 (empty -> .)
    CLASS           reduce using rule 443 (empty -> .)
    ABSTRACT        reduce using rule 443 (empty -> .)
    FINAL           reduce using rule 443 (empty -> .)
    QUOTE           reduce using rule 443 (empty -> .)
    STRING          reduce using rule 443 (empty -> .)
    STRING_VARNAME  reduce using rule 443 (empty -> .)
    NS_SEPARATOR    reduce using rule 443 (empty -> .)
    NAMESPACE       reduce using rule 443 (empty -> .)
    EXIT            reduce using rule 443 (empty -> .)
    DIE             reduce using rule 443 (empty -> .)
    LNUMBER         reduce using rule 443 (empty -> .)
    DNUMBER         reduce using rule 443 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 443 (empty -> .)
    LINE            reduce using rule 443 (empty -> .)
    FILE            reduce using rule 443 (empty -> .)
    DIR             reduce using rule 443 (empty -> .)
    CLASS_C         reduce using rule 443 (empty -> .)
    METHOD_C        reduce using rule 443 (empty -> .)
    FUNC_C          reduce using rule 443 (empty -> .)
    NS_C            reduce using rule 443 (empty -> .)
    START_HEREDOC   reduce using rule 443 (empty -> .)
    START_NOWDOC    reduce using rule 443 (empty -> .)
    BACKTICK        reduce using rule 443 (empty -> .)
    DOLLAR          reduce using rule 443 (empty -> .)
    VARIABLE        reduce using rule 443 (empty -> .)

    inner_statement_list           shift and go to state 938
    empty                          shift and go to state 121

state 912

    (84) foreach_statement -> COLON inner_statement_list . ENDFOREACH SEMI
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) inner_statement -> . YIELD SEMI
    (29) inner_statement -> . YIELD expr SEMI
    (30) statement -> . LBRACE inner_statement_list RBRACE
    (31) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (33) statement -> . WHILE LPAREN expr RPAREN while_statement
    (34) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (35) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (36) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (37) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (38) statement -> . BREAK SEMI
    (39) statement -> . BREAK expr SEMI
    (40) statement -> . CONTINUE SEMI
    (41) statement -> . CONTINUE expr SEMI
    (42) statement -> . RETURN SEMI
    (43) statement -> . RETURN expr SEMI
    (44) statement -> . GLOBAL global_var_list SEMI
    (45) statement -> . STATIC static_var_list SEMI
    (46) statement -> . ECHO echo_expr_list SEMI
    (47) statement -> . INLINE_HTML
    (48) statement -> . expr SEMI
    (49) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (50) statement -> . SEMI
    (51) statement -> . TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
    (56) statement -> . THROW expr SEMI
    (57) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (108) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (109) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (110) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (111) class_declaration_statement -> . TRAIT STRING LBRACE trait_statement_list RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (112) class_entry_type -> . CLASS
    (113) class_entry_type -> . ABSTRACT CLASS
    (114) class_entry_type -> . FINAL CLASS
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    ENDFOREACH      shift and go to state 939
    HALT_COMPILER   shift and go to state 290
    YIELD           shift and go to state 291
    LBRACE          shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    FOREACH         shift and go to state 21
    SWITCH          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    GLOBAL          shift and go to state 26
    STATIC          shift and go to state 27
    ECHO            shift and go to state 28
    INLINE_HTML     shift and go to state 29
    UNSET           shift and go to state 30
    SEMI            shift and go to state 10
    TRY             shift and go to state 31
    THROW           shift and go to state 32
    DECLARE         shift and go to state 33
    FUNCTION        shift and go to state 34
    INTERFACE       shift and go to state 37
    TRAIT           shift and go to state 38
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    CLASS           shift and go to state 70
    ABSTRACT        shift and go to state 71
    FINAL           shift and go to state 72
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    inner_statement                shift and go to state 286
    statement                      shift and go to state 287
    function_declaration_statement shift and go to state 288
    class_declaration_statement    shift and go to state 289
    expr                           shift and go to state 17
    class_entry_type               shift and go to state 36
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 913

    (90) case_list -> case_list CASE expr case_separator . inner_statement_list
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (443) empty -> .

    HALT_COMPILER   reduce using rule 443 (empty -> .)
    YIELD           reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    IF              reduce using rule 443 (empty -> .)
    WHILE           reduce using rule 443 (empty -> .)
    DO              reduce using rule 443 (empty -> .)
    FOR             reduce using rule 443 (empty -> .)
    FOREACH         reduce using rule 443 (empty -> .)
    SWITCH          reduce using rule 443 (empty -> .)
    BREAK           reduce using rule 443 (empty -> .)
    CONTINUE        reduce using rule 443 (empty -> .)
    RETURN          reduce using rule 443 (empty -> .)
    GLOBAL          reduce using rule 443 (empty -> .)
    STATIC          reduce using rule 443 (empty -> .)
    ECHO            reduce using rule 443 (empty -> .)
    INLINE_HTML     reduce using rule 443 (empty -> .)
    UNSET           reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    TRY             reduce using rule 443 (empty -> .)
    THROW           reduce using rule 443 (empty -> .)
    DECLARE         reduce using rule 443 (empty -> .)
    FUNCTION        reduce using rule 443 (empty -> .)
    INTERFACE       reduce using rule 443 (empty -> .)
    TRAIT           reduce using rule 443 (empty -> .)
    NEW             reduce using rule 443 (empty -> .)
    CLONE           reduce using rule 443 (empty -> .)
    LIST            reduce using rule 443 (empty -> .)
    ARRAY           reduce using rule 443 (empty -> .)
    LBRACKET        reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    NOT             reduce using rule 443 (empty -> .)
    BOOLEAN_NOT     reduce using rule 443 (empty -> .)
    INC             reduce using rule 443 (empty -> .)
    DEC             reduce using rule 443 (empty -> .)
    INT_CAST        reduce using rule 443 (empty -> .)
    DOUBLE_CAST     reduce using rule 443 (empty -> .)
    STRING_CAST     reduce using rule 443 (empty -> .)
    ARRAY_CAST      reduce using rule 443 (empty -> .)
    OBJECT_CAST     reduce using rule 443 (empty -> .)
    BOOL_CAST       reduce using rule 443 (empty -> .)
    UNSET_CAST      reduce using rule 443 (empty -> .)
    BINARY_CAST     reduce using rule 443 (empty -> .)
    ISSET           reduce using rule 443 (empty -> .)
    EMPTY           reduce using rule 443 (empty -> .)
    EVAL            reduce using rule 443 (empty -> .)
    INCLUDE         reduce using rule 443 (empty -> .)
    INCLUDE_ONCE    reduce using rule 443 (empty -> .)
    REQUIRE         reduce using rule 443 (empty -> .)
    REQUIRE_ONCE    reduce using rule 443 (empty -> .)
    PRINT           reduce using rule 443 (empty -> .)
    AT              reduce using rule 443 (empty -> .)
    LPAREN          reduce using rule 443 (empty -> .)
    CLASS           reduce using rule 443 (empty -> .)
    ABSTRACT        reduce using rule 443 (empty -> .)
    FINAL           reduce using rule 443 (empty -> .)
    QUOTE           reduce using rule 443 (empty -> .)
    STRING          reduce using rule 443 (empty -> .)
    STRING_VARNAME  reduce using rule 443 (empty -> .)
    NS_SEPARATOR    reduce using rule 443 (empty -> .)
    NAMESPACE       reduce using rule 443 (empty -> .)
    EXIT            reduce using rule 443 (empty -> .)
    DIE             reduce using rule 443 (empty -> .)
    LNUMBER         reduce using rule 443 (empty -> .)
    DNUMBER         reduce using rule 443 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 443 (empty -> .)
    LINE            reduce using rule 443 (empty -> .)
    FILE            reduce using rule 443 (empty -> .)
    DIR             reduce using rule 443 (empty -> .)
    CLASS_C         reduce using rule 443 (empty -> .)
    METHOD_C        reduce using rule 443 (empty -> .)
    FUNC_C          reduce using rule 443 (empty -> .)
    NS_C            reduce using rule 443 (empty -> .)
    START_HEREDOC   reduce using rule 443 (empty -> .)
    START_NOWDOC    reduce using rule 443 (empty -> .)
    BACKTICK        reduce using rule 443 (empty -> .)
    DOLLAR          reduce using rule 443 (empty -> .)
    VARIABLE        reduce using rule 443 (empty -> .)
    RBRACE          reduce using rule 443 (empty -> .)
    CASE            reduce using rule 443 (empty -> .)
    DEFAULT         reduce using rule 443 (empty -> .)
    ENDSWITCH       reduce using rule 443 (empty -> .)

    inner_statement_list           shift and go to state 940
    empty                          shift and go to state 121

state 914

    (91) case_list -> case_list DEFAULT case_separator inner_statement_list .
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) inner_statement -> . YIELD SEMI
    (29) inner_statement -> . YIELD expr SEMI
    (30) statement -> . LBRACE inner_statement_list RBRACE
    (31) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (33) statement -> . WHILE LPAREN expr RPAREN while_statement
    (34) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (35) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (36) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (37) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (38) statement -> . BREAK SEMI
    (39) statement -> . BREAK expr SEMI
    (40) statement -> . CONTINUE SEMI
    (41) statement -> . CONTINUE expr SEMI
    (42) statement -> . RETURN SEMI
    (43) statement -> . RETURN expr SEMI
    (44) statement -> . GLOBAL global_var_list SEMI
    (45) statement -> . STATIC static_var_list SEMI
    (46) statement -> . ECHO echo_expr_list SEMI
    (47) statement -> . INLINE_HTML
    (48) statement -> . expr SEMI
    (49) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (50) statement -> . SEMI
    (51) statement -> . TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
    (56) statement -> . THROW expr SEMI
    (57) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (108) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (109) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (110) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (111) class_declaration_statement -> . TRAIT STRING LBRACE trait_statement_list RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (112) class_entry_type -> . CLASS
    (113) class_entry_type -> . ABSTRACT CLASS
    (114) class_entry_type -> . FINAL CLASS
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RBRACE          reduce using rule 91 (case_list -> case_list DEFAULT case_separator inner_statement_list .)
    CASE            reduce using rule 91 (case_list -> case_list DEFAULT case_separator inner_statement_list .)
    DEFAULT         reduce using rule 91 (case_list -> case_list DEFAULT case_separator inner_statement_list .)
    ENDSWITCH       reduce using rule 91 (case_list -> case_list DEFAULT case_separator inner_statement_list .)
    HALT_COMPILER   shift and go to state 290
    YIELD           shift and go to state 291
    LBRACE          shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    FOREACH         shift and go to state 21
    SWITCH          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    GLOBAL          shift and go to state 26
    STATIC          shift and go to state 27
    ECHO            shift and go to state 28
    INLINE_HTML     shift and go to state 29
    UNSET           shift and go to state 30
    SEMI            shift and go to state 10
    TRY             shift and go to state 31
    THROW           shift and go to state 32
    DECLARE         shift and go to state 33
    FUNCTION        shift and go to state 34
    INTERFACE       shift and go to state 37
    TRAIT           shift and go to state 38
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    CLASS           shift and go to state 70
    ABSTRACT        shift and go to state 71
    FINAL           shift and go to state 72
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    inner_statement                shift and go to state 286
    statement                      shift and go to state 287
    function_declaration_statement shift and go to state 288
    class_declaration_statement    shift and go to state 289
    expr                           shift and go to state 17
    class_entry_type               shift and go to state 36
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 915

    (88) switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .

    HALT_COMPILER   reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    NAMESPACE       reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    CONST           reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    USE             reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    LBRACE          reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    IF              reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    WHILE           reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    DO              reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    FOR             reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    FOREACH         reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    SWITCH          reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    BREAK           reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    CONTINUE        reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    RETURN          reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    GLOBAL          reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    STATIC          reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    ECHO            reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    INLINE_HTML     reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    UNSET           reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    SEMI            reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    TRY             reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    THROW           reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    DECLARE         reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    FUNCTION        reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    INTERFACE       reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    TRAIT           reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    NEW             reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    CLONE           reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    LIST            reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    ARRAY           reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    LBRACKET        reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    PLUS            reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    MINUS           reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    NOT             reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    BOOLEAN_NOT     reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    INC             reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    DEC             reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    INT_CAST        reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    DOUBLE_CAST     reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    STRING_CAST     reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    ARRAY_CAST      reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    OBJECT_CAST     reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    BOOL_CAST       reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    UNSET_CAST      reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    BINARY_CAST     reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    ISSET           reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    EMPTY           reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    EVAL            reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    INCLUDE         reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    INCLUDE_ONCE    reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    REQUIRE         reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    REQUIRE_ONCE    reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    PRINT           reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    AT              reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    LPAREN          reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    CLASS           reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    ABSTRACT        reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    FINAL           reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    QUOTE           reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    STRING          reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    STRING_VARNAME  reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    NS_SEPARATOR    reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    EXIT            reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    DIE             reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    LNUMBER         reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    DNUMBER         reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    LINE            reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    FILE            reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    DIR             reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    CLASS_C         reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    METHOD_C        reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    FUNC_C          reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    NS_C            reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    START_HEREDOC   reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    START_NOWDOC    reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    BACKTICK        reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    DOLLAR          reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    VARIABLE        reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    $end            reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    RBRACE          reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    YIELD           reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    ELSEIF          reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    ELSE            reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    ENDIF           reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    ENDWHILE        reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    ENDDECLARE      reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    ENDFOREACH      reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    CASE            reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    DEFAULT         reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    ENDSWITCH       reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)
    ENDFOR          reduce using rule 88 (switch_case_list -> COLON SEMI case_list ENDSWITCH SEMI .)


state 916

    (52) additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE . RPAREN LBRACE inner_statement_list RBRACE

    RPAREN          shift and go to state 941


state 917

    (54) maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .

    HALT_COMPILER   reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    NAMESPACE       reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    CONST           reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    USE             reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    LBRACE          reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    IF              reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    WHILE           reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    DO              reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    FOR             reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    FOREACH         reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    SWITCH          reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    BREAK           reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    CONTINUE        reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    RETURN          reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    GLOBAL          reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    STATIC          reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    ECHO            reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    INLINE_HTML     reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    UNSET           reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    SEMI            reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    TRY             reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    THROW           reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    DECLARE         reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    FUNCTION        reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    INTERFACE       reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    TRAIT           reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    NEW             reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    CLONE           reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    LIST            reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    ARRAY           reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    LBRACKET        reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    PLUS            reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    MINUS           reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    NOT             reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    BOOLEAN_NOT     reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    INC             reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    DEC             reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    INT_CAST        reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    DOUBLE_CAST     reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    STRING_CAST     reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    ARRAY_CAST      reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    OBJECT_CAST     reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    BOOL_CAST       reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    UNSET_CAST      reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    BINARY_CAST     reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    ISSET           reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    EMPTY           reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    EVAL            reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    INCLUDE         reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    INCLUDE_ONCE    reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    REQUIRE         reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    REQUIRE_ONCE    reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    PRINT           reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    AT              reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    LPAREN          reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    CLASS           reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    ABSTRACT        reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    FINAL           reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    QUOTE           reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    STRING          reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    STRING_VARNAME  reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    NS_SEPARATOR    reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    EXIT            reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    DIE             reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    LNUMBER         reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    DNUMBER         reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    LINE            reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    FILE            reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    DIR             reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    CLASS_C         reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    METHOD_C        reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    FUNC_C          reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    NS_C            reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    START_HEREDOC   reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    START_NOWDOC    reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    BACKTICK        reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    DOLLAR          reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    VARIABLE        reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    $end            reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    RBRACE          reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    YIELD           reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    ELSEIF          reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    ELSE            reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    ENDIF           reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    ENDWHILE        reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    ENDDECLARE      reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    ENDFOREACH      reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    CASE            reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    DEFAULT         reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    ENDSWITCH       reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)
    ENDFOR          reduce using rule 54 (maybe_finally -> FINALLY LBRACE inner_statement_list RBRACE .)


state 918

    (108) function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .

    HALT_COMPILER   reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    NAMESPACE       reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    CONST           reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    USE             reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    LBRACE          reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    IF              reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    WHILE           reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    DO              reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    FOR             reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    FOREACH         reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    SWITCH          reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    BREAK           reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    CONTINUE        reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    RETURN          reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    GLOBAL          reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    STATIC          reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    ECHO            reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    INLINE_HTML     reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    UNSET           reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    SEMI            reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    TRY             reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    THROW           reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    DECLARE         reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    FUNCTION        reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    INTERFACE       reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    TRAIT           reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    NEW             reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    CLONE           reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    LIST            reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    ARRAY           reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    LBRACKET        reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    PLUS            reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    MINUS           reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    NOT             reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    BOOLEAN_NOT     reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    INC             reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    DEC             reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    INT_CAST        reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    DOUBLE_CAST     reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    STRING_CAST     reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    ARRAY_CAST      reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    OBJECT_CAST     reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    BOOL_CAST       reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    UNSET_CAST      reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    BINARY_CAST     reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    ISSET           reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    EMPTY           reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    EVAL            reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    INCLUDE         reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    INCLUDE_ONCE    reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    REQUIRE         reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    REQUIRE_ONCE    reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    PRINT           reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    AT              reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    LPAREN          reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    CLASS           reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    ABSTRACT        reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    FINAL           reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    QUOTE           reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    STRING          reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    STRING_VARNAME  reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    NS_SEPARATOR    reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    EXIT            reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    DIE             reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    LNUMBER         reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    DNUMBER         reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    LINE            reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    FILE            reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    DIR             reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    CLASS_C         reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    METHOD_C        reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    FUNC_C          reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    NS_C            reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    START_HEREDOC   reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    START_NOWDOC    reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    BACKTICK        reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    DOLLAR          reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    VARIABLE        reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    $end            reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    RBRACE          reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    YIELD           reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    ELSEIF          reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    ELSE            reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    ENDIF           reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    ENDWHILE        reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    ENDDECLARE      reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    ENDFOREACH      reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    CASE            reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    DEFAULT         reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    ENDSWITCH       reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)
    ENDFOR          reduce using rule 108 (function_declaration_statement -> FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE .)


state 919

    (271) expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .

    SEMI            reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    OBJECT_OPERATOR reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    LBRACE          reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    BOOLEAN_AND     reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    BOOLEAN_OR      reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    LOGICAL_AND     reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    LOGICAL_OR      reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    LOGICAL_XOR     reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    AND             reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    OR              reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    XOR             reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    CONCAT          reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    PLUS            reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    MINUS           reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    MUL             reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    DIV             reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    SL              reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    SR              reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    MOD             reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    IS_IDENTICAL    reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    IS_EQUAL        reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    IS_NOT_EQUAL    reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    IS_SMALLER      reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    IS_GREATER      reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    INSTANCEOF      reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    QUESTION        reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    RPAREN          reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    COMMA           reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    DOUBLE_ARROW    reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    RBRACKET        reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    RBRACE          reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    COLON           reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)
    AS              reduce using rule 271 (expr -> FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE .)


state 920

    (272) lexical_vars -> USE LPAREN lexical_var_list RPAREN .

    LBRACE          reduce using rule 272 (lexical_vars -> USE LPAREN lexical_var_list RPAREN .)


state 921

    (274) lexical_var_list -> lexical_var_list COMMA . AND VARIABLE
    (275) lexical_var_list -> lexical_var_list COMMA . VARIABLE

    AND             shift and go to state 942
    VARIABLE        shift and go to state 943


state 922

    (276) lexical_var_list -> AND VARIABLE .

    RPAREN          reduce using rule 276 (lexical_var_list -> AND VARIABLE .)
    COMMA           reduce using rule 276 (lexical_var_list -> AND VARIABLE .)


state 923

    (137) class_statement -> method_modifiers FUNCTION is_reference STRING . LPAREN parameter_list RPAREN method_body

    LPAREN          shift and go to state 944


state 924

    (146) class_constant_declaration -> class_constant_declaration COMMA STRING EQUALS . static_expr
    (402) static_expr -> . static_scalar
    (403) static_expr -> . static_expr BOOLEAN_AND static_expr
    (404) static_expr -> . static_expr BOOLEAN_OR static_expr
    (405) static_expr -> . static_expr LOGICAL_AND static_expr
    (406) static_expr -> . static_expr LOGICAL_OR static_expr
    (407) static_expr -> . static_expr LOGICAL_XOR static_expr
    (408) static_expr -> . static_expr AND static_expr
    (409) static_expr -> . static_expr OR static_expr
    (410) static_expr -> . static_expr XOR static_expr
    (411) static_expr -> . static_expr CONCAT static_expr
    (412) static_expr -> . static_expr PLUS static_expr
    (413) static_expr -> . static_expr MINUS static_expr
    (414) static_expr -> . static_expr MUL static_expr
    (415) static_expr -> . static_expr DIV static_expr
    (416) static_expr -> . static_expr SL static_expr
    (417) static_expr -> . static_expr SR static_expr
    (418) static_expr -> . static_expr MOD static_expr
    (419) static_expr -> . static_expr IS_IDENTICAL static_expr
    (420) static_expr -> . static_expr IS_NOT_IDENTICAL static_expr
    (421) static_expr -> . static_expr IS_EQUAL static_expr
    (422) static_expr -> . static_expr IS_NOT_EQUAL static_expr
    (423) static_expr -> . static_expr IS_SMALLER static_expr
    (424) static_expr -> . static_expr IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> . static_expr IS_GREATER static_expr
    (426) static_expr -> . static_expr IS_GREATER_OR_EQUAL static_expr
    (427) static_expr -> . LPAREN static_expr RPAREN
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LPAREN          shift and go to state 457
    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_expr                    shift and go to state 945
    static_scalar                  shift and go to state 454
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 925

    (140) class_statement -> USE fully_qualified_class_name LBRACE trait_modifiers_list . RBRACE
    (122) trait_modifiers_list -> trait_modifiers_list . trait_modifier
    (126) trait_modifier -> . trait_member AS STRING SEMI
    (127) trait_modifier -> . trait_member AS visibility_modifier STRING SEMI
    (128) trait_modifier -> . trait_member AS visibility_modifier SEMI
    (124) trait_member -> . fully_qualified_class_name DOUBLE_COLON STRING
    (125) trait_member -> . STRING
    (117) fully_qualified_class_name -> . namespace_name
    (118) fully_qualified_class_name -> . NS_SEPARATOR namespace_name
    (119) fully_qualified_class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    RBRACE          shift and go to state 946
    STRING          shift and go to state 933
    NS_SEPARATOR    shift and go to state 517
    NAMESPACE       shift and go to state 518
    ARRAY           shift and go to state 117

    fully_qualified_class_name     shift and go to state 929
    trait_modifier                 shift and go to state 931
    trait_member                   shift and go to state 932
    namespace_name                 shift and go to state 516

state 926

    (147) class_constant_declaration -> CONST STRING EQUALS static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    SEMI            reduce using rule 147 (class_constant_declaration -> CONST STRING EQUALS static_expr .)
    COMMA           reduce using rule 147 (class_constant_declaration -> CONST STRING EQUALS static_expr .)
    BOOLEAN_AND     shift and go to state 571
    BOOLEAN_OR      shift and go to state 572
    LOGICAL_AND     shift and go to state 573
    LOGICAL_OR      shift and go to state 574
    LOGICAL_XOR     shift and go to state 575
    AND             shift and go to state 576
    OR              shift and go to state 577
    XOR             shift and go to state 578
    CONCAT          shift and go to state 579
    PLUS            shift and go to state 580
    MINUS           shift and go to state 581
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    SL              shift and go to state 584
    SR              shift and go to state 585
    MOD             shift and go to state 586
    IS_IDENTICAL    shift and go to state 587
    IS_NOT_IDENTICAL shift and go to state 588
    IS_EQUAL        shift and go to state 589
    IS_NOT_EQUAL    shift and go to state 590
    IS_SMALLER      shift and go to state 591
    IS_SMALLER_OR_EQUAL shift and go to state 592
    IS_GREATER      shift and go to state 593
    IS_GREATER_OR_EQUAL shift and go to state 594


state 927

    (131) trait_statement -> method_modifiers FUNCTION is_reference STRING LPAREN . parameter_list RPAREN method_body
    (169) parameter_list -> . parameter_list COMMA parameter
    (170) parameter_list -> . parameter
    (171) parameter_list -> . empty
    (172) parameter -> . VARIABLE
    (173) parameter -> . class_name VARIABLE
    (174) parameter -> . AND VARIABLE
    (175) parameter -> . class_name AND VARIABLE
    (176) parameter -> . VARIABLE EQUALS static_scalar
    (177) parameter -> . class_name VARIABLE EQUALS static_scalar
    (178) parameter -> . AND VARIABLE EQUALS static_scalar
    (179) parameter -> . class_name AND VARIABLE EQUALS static_scalar
    (443) empty -> .
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    VARIABLE        shift and go to state 508
    AND             shift and go to state 510
    RPAREN          reduce using rule 443 (empty -> .)
    COMMA           reduce using rule 443 (empty -> .)
    NS_SEPARATOR    shift and go to state 210
    NAMESPACE       shift and go to state 211
    STATIC          shift and go to state 111
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117

    parameter_list                 shift and go to state 947
    parameter                      shift and go to state 506
    empty                          shift and go to state 507
    class_name                     shift and go to state 509
    namespace_name                 shift and go to state 209

state 928

    (142) class_variable_declaration -> class_variable_declaration COMMA VARIABLE EQUALS . static_scalar
    (378) static_scalar -> . common_scalar
    (379) static_scalar -> . class_constant
    (380) static_scalar -> . QUOTE QUOTE
    (381) static_scalar -> . QUOTE ENCAPSED_AND_WHITESPACE QUOTE
    (382) static_scalar -> . static_heredoc
    (383) static_scalar -> . nowdoc
    (384) static_scalar -> . class_name_constant
    (389) static_scalar -> . namespace_name
    (390) static_scalar -> . NS_SEPARATOR namespace_name
    (391) static_scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (392) static_scalar -> . PLUS static_scalar
    (393) static_scalar -> . MINUS static_scalar
    (394) static_scalar -> . ARRAY LPAREN static_array_pair_list RPAREN
    (395) static_scalar -> . LBRACKET static_array_pair_list RBRACKET
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (386) static_heredoc -> . START_HEREDOC multiple_encapsed END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    QUOTE           shift and go to state 460
    NS_SEPARATOR    shift and go to state 465
    NAMESPACE       shift and go to state 466
    PLUS            shift and go to state 455
    MINUS           shift and go to state 456
    ARRAY           shift and go to state 467
    LBRACKET        shift and go to state 468
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    STRING          shift and go to state 452
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 471
    START_NOWDOC    shift and go to state 99
    STATIC          shift and go to state 111
    VARIABLE        shift and go to state 107
    DOLLAR          shift and go to state 473

    static_scalar                  shift and go to state 948
    common_scalar                  shift and go to state 458
    class_constant                 shift and go to state 459
    static_heredoc                 shift and go to state 461
    nowdoc                         shift and go to state 462
    class_name_constant            shift and go to state 463
    namespace_name                 shift and go to state 464
    class_name                     shift and go to state 469
    variable_class_name            shift and go to state 470
    reference_variable             shift and go to state 472
    compound_variable              shift and go to state 106

state 929

    (124) trait_member -> fully_qualified_class_name . DOUBLE_COLON STRING

    DOUBLE_COLON    shift and go to state 949


state 930

    (133) trait_statement -> USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE .

    RBRACE          reduce using rule 133 (trait_statement -> USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE .)
    USE             reduce using rule 133 (trait_statement -> USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE .)
    VAR             reduce using rule 133 (trait_statement -> USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE .)
    STATIC          reduce using rule 133 (trait_statement -> USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE .)
    ABSTRACT        reduce using rule 133 (trait_statement -> USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE .)
    FINAL           reduce using rule 133 (trait_statement -> USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE .)
    PUBLIC          reduce using rule 133 (trait_statement -> USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE .)
    PROTECTED       reduce using rule 133 (trait_statement -> USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE .)
    PRIVATE         reduce using rule 133 (trait_statement -> USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE .)
    FUNCTION        reduce using rule 133 (trait_statement -> USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE .)


state 931

    (122) trait_modifiers_list -> trait_modifiers_list trait_modifier .

    RBRACE          reduce using rule 122 (trait_modifiers_list -> trait_modifiers_list trait_modifier .)
    STRING          reduce using rule 122 (trait_modifiers_list -> trait_modifiers_list trait_modifier .)
    NS_SEPARATOR    reduce using rule 122 (trait_modifiers_list -> trait_modifiers_list trait_modifier .)
    NAMESPACE       reduce using rule 122 (trait_modifiers_list -> trait_modifiers_list trait_modifier .)
    ARRAY           reduce using rule 122 (trait_modifiers_list -> trait_modifiers_list trait_modifier .)


state 932

    (126) trait_modifier -> trait_member . AS STRING SEMI
    (127) trait_modifier -> trait_member . AS visibility_modifier STRING SEMI
    (128) trait_modifier -> trait_member . AS visibility_modifier SEMI

    AS              shift and go to state 950


state 933

    (125) trait_member -> STRING .
    (429) namespace_name -> STRING .

    AS              reduce using rule 125 (trait_member -> STRING .)
    NS_SEPARATOR    reduce using rule 429 (namespace_name -> STRING .)
    DOUBLE_COLON    reduce using rule 429 (namespace_name -> STRING .)


state 934

    (63) elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN . statement
    (30) statement -> . LBRACE inner_statement_list RBRACE
    (31) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (33) statement -> . WHILE LPAREN expr RPAREN while_statement
    (34) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (35) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (36) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (37) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (38) statement -> . BREAK SEMI
    (39) statement -> . BREAK expr SEMI
    (40) statement -> . CONTINUE SEMI
    (41) statement -> . CONTINUE expr SEMI
    (42) statement -> . RETURN SEMI
    (43) statement -> . RETURN expr SEMI
    (44) statement -> . GLOBAL global_var_list SEMI
    (45) statement -> . STATIC static_var_list SEMI
    (46) statement -> . ECHO echo_expr_list SEMI
    (47) statement -> . INLINE_HTML
    (48) statement -> . expr SEMI
    (49) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (50) statement -> . SEMI
    (51) statement -> . TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
    (56) statement -> . THROW expr SEMI
    (57) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    LBRACE          shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    FOREACH         shift and go to state 21
    SWITCH          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    GLOBAL          shift and go to state 26
    STATIC          shift and go to state 27
    ECHO            shift and go to state 28
    INLINE_HTML     shift and go to state 29
    UNSET           shift and go to state 30
    SEMI            shift and go to state 10
    TRY             shift and go to state 31
    THROW           shift and go to state 32
    DECLARE         shift and go to state 33
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    FUNCTION        shift and go to state 110
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 17
    statement                      shift and go to state 951
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 935

    (32) statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .

    HALT_COMPILER   reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    NAMESPACE       reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    CONST           reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    USE             reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    LBRACE          reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    IF              reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    WHILE           reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    DO              reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    FOR             reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    FOREACH         reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    SWITCH          reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    BREAK           reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    CONTINUE        reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    RETURN          reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    GLOBAL          reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    STATIC          reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    ECHO            reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    INLINE_HTML     reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    UNSET           reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    SEMI            reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    TRY             reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    THROW           reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    DECLARE         reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    FUNCTION        reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    INTERFACE       reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    TRAIT           reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    NEW             reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    CLONE           reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    LIST            reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    ARRAY           reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    LBRACKET        reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    PLUS            reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    MINUS           reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    NOT             reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    BOOLEAN_NOT     reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    INC             reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    DEC             reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    INT_CAST        reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    DOUBLE_CAST     reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    STRING_CAST     reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    ARRAY_CAST      reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    OBJECT_CAST     reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    BOOL_CAST       reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    UNSET_CAST      reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    BINARY_CAST     reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    ISSET           reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    EMPTY           reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    EVAL            reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    INCLUDE         reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    INCLUDE_ONCE    reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    REQUIRE         reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    REQUIRE_ONCE    reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    PRINT           reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    AT              reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    LPAREN          reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    CLASS           reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    ABSTRACT        reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    FINAL           reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    QUOTE           reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    STRING          reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    STRING_VARNAME  reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    NS_SEPARATOR    reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    EXIT            reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    DIE             reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    LNUMBER         reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    DNUMBER         reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    LINE            reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    FILE            reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    DIR             reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    CLASS_C         reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    METHOD_C        reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    FUNC_C          reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    NS_C            reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    START_HEREDOC   reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    START_NOWDOC    reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    BACKTICK        reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    DOLLAR          reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    VARIABLE        reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    $end            reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    RBRACE          reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    YIELD           reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    ELSEIF          reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    ELSE            reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    ENDIF           reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    ENDWHILE        reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    ENDDECLARE      reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    ENDFOREACH      reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    CASE            reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    DEFAULT         reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    ENDSWITCH       reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)
    ENDFOR          reduce using rule 32 (statement -> IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI .)


state 936

    (67) new_elseif_list -> new_elseif_list ELSEIF LPAREN expr . RPAREN COLON inner_statement_list
    (184) expr -> expr . OBJECT_OPERATOR object_property method_or_not
    (238) expr -> expr . LBRACE dim_offset RBRACE
    (289) expr -> expr . BOOLEAN_AND expr
    (290) expr -> expr . BOOLEAN_OR expr
    (291) expr -> expr . LOGICAL_AND expr
    (292) expr -> expr . LOGICAL_OR expr
    (293) expr -> expr . LOGICAL_XOR expr
    (294) expr -> expr . AND expr
    (295) expr -> expr . OR expr
    (296) expr -> expr . XOR expr
    (297) expr -> expr . CONCAT expr
    (298) expr -> expr . PLUS expr
    (299) expr -> expr . MINUS expr
    (300) expr -> expr . MUL expr
    (301) expr -> expr . DIV expr
    (302) expr -> expr . SL expr
    (303) expr -> expr . SR expr
    (304) expr -> expr . MOD expr
    (305) expr -> expr . IS_IDENTICAL expr
    (306) expr -> expr . IS_NOT_IDENTICAL expr
    (307) expr -> expr . IS_EQUAL expr
    (308) expr -> expr . IS_NOT_EQUAL expr
    (309) expr -> expr . IS_SMALLER expr
    (310) expr -> expr . IS_SMALLER_OR_EQUAL expr
    (311) expr -> expr . IS_GREATER expr
    (312) expr -> expr . IS_GREATER_OR_EQUAL expr
    (313) expr -> expr . INSTANCEOF expr
    (314) expr -> expr . INSTANCEOF STATIC
    (319) expr -> expr . QUESTION expr COLON expr
    (320) expr -> expr . QUESTION COLON expr

    RPAREN          shift and go to state 952
    OBJECT_OPERATOR shift and go to state 131
    LBRACE          shift and go to state 132
    BOOLEAN_AND     shift and go to state 133
    BOOLEAN_OR      shift and go to state 134
    LOGICAL_AND     shift and go to state 135
    LOGICAL_OR      shift and go to state 136
    LOGICAL_XOR     shift and go to state 137
    AND             shift and go to state 138
    OR              shift and go to state 139
    XOR             shift and go to state 140
    CONCAT          shift and go to state 141
    PLUS            shift and go to state 142
    MINUS           shift and go to state 143
    MUL             shift and go to state 144
    DIV             shift and go to state 145
    SL              shift and go to state 146
    SR              shift and go to state 147
    MOD             shift and go to state 148
    IS_IDENTICAL    shift and go to state 149
    IS_NOT_IDENTICAL shift and go to state 150
    IS_EQUAL        shift and go to state 151
    IS_NOT_EQUAL    shift and go to state 152
    IS_SMALLER      shift and go to state 153
    IS_SMALLER_OR_EQUAL shift and go to state 154
    IS_GREATER      shift and go to state 155
    IS_GREATER_OR_EQUAL shift and go to state 156
    INSTANCEOF      shift and go to state 157
    QUESTION        shift and go to state 158


state 937

    (69) new_else_single -> ELSE COLON inner_statement_list .
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) inner_statement -> . YIELD SEMI
    (29) inner_statement -> . YIELD expr SEMI
    (30) statement -> . LBRACE inner_statement_list RBRACE
    (31) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (33) statement -> . WHILE LPAREN expr RPAREN while_statement
    (34) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (35) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (36) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (37) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (38) statement -> . BREAK SEMI
    (39) statement -> . BREAK expr SEMI
    (40) statement -> . CONTINUE SEMI
    (41) statement -> . CONTINUE expr SEMI
    (42) statement -> . RETURN SEMI
    (43) statement -> . RETURN expr SEMI
    (44) statement -> . GLOBAL global_var_list SEMI
    (45) statement -> . STATIC static_var_list SEMI
    (46) statement -> . ECHO echo_expr_list SEMI
    (47) statement -> . INLINE_HTML
    (48) statement -> . expr SEMI
    (49) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (50) statement -> . SEMI
    (51) statement -> . TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
    (56) statement -> . THROW expr SEMI
    (57) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (108) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (109) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (110) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (111) class_declaration_statement -> . TRAIT STRING LBRACE trait_statement_list RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (112) class_entry_type -> . CLASS
    (113) class_entry_type -> . ABSTRACT CLASS
    (114) class_entry_type -> . FINAL CLASS
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    ENDIF           reduce using rule 69 (new_else_single -> ELSE COLON inner_statement_list .)
    HALT_COMPILER   shift and go to state 290
    YIELD           shift and go to state 291
    LBRACE          shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    FOREACH         shift and go to state 21
    SWITCH          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    GLOBAL          shift and go to state 26
    STATIC          shift and go to state 27
    ECHO            shift and go to state 28
    INLINE_HTML     shift and go to state 29
    UNSET           shift and go to state 30
    SEMI            shift and go to state 10
    TRY             shift and go to state 31
    THROW           shift and go to state 32
    DECLARE         shift and go to state 33
    FUNCTION        shift and go to state 34
    INTERFACE       shift and go to state 37
    TRAIT           shift and go to state 38
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    CLASS           shift and go to state 70
    ABSTRACT        shift and go to state 71
    FINAL           shift and go to state 72
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    inner_statement                shift and go to state 286
    statement                      shift and go to state 287
    function_declaration_statement shift and go to state 288
    class_declaration_statement    shift and go to state 289
    expr                           shift and go to state 17
    class_entry_type               shift and go to state 36
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 938

    (77) for_statement -> COLON inner_statement_list . ENDFOR SEMI
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) inner_statement -> . YIELD SEMI
    (29) inner_statement -> . YIELD expr SEMI
    (30) statement -> . LBRACE inner_statement_list RBRACE
    (31) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (33) statement -> . WHILE LPAREN expr RPAREN while_statement
    (34) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (35) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (36) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (37) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (38) statement -> . BREAK SEMI
    (39) statement -> . BREAK expr SEMI
    (40) statement -> . CONTINUE SEMI
    (41) statement -> . CONTINUE expr SEMI
    (42) statement -> . RETURN SEMI
    (43) statement -> . RETURN expr SEMI
    (44) statement -> . GLOBAL global_var_list SEMI
    (45) statement -> . STATIC static_var_list SEMI
    (46) statement -> . ECHO echo_expr_list SEMI
    (47) statement -> . INLINE_HTML
    (48) statement -> . expr SEMI
    (49) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (50) statement -> . SEMI
    (51) statement -> . TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
    (56) statement -> . THROW expr SEMI
    (57) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (108) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (109) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (110) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (111) class_declaration_statement -> . TRAIT STRING LBRACE trait_statement_list RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (112) class_entry_type -> . CLASS
    (113) class_entry_type -> . ABSTRACT CLASS
    (114) class_entry_type -> . FINAL CLASS
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    ENDFOR          shift and go to state 953
    HALT_COMPILER   shift and go to state 290
    YIELD           shift and go to state 291
    LBRACE          shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    FOREACH         shift and go to state 21
    SWITCH          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    GLOBAL          shift and go to state 26
    STATIC          shift and go to state 27
    ECHO            shift and go to state 28
    INLINE_HTML     shift and go to state 29
    UNSET           shift and go to state 30
    SEMI            shift and go to state 10
    TRY             shift and go to state 31
    THROW           shift and go to state 32
    DECLARE         shift and go to state 33
    FUNCTION        shift and go to state 34
    INTERFACE       shift and go to state 37
    TRAIT           shift and go to state 38
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    CLASS           shift and go to state 70
    ABSTRACT        shift and go to state 71
    FINAL           shift and go to state 72
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    inner_statement                shift and go to state 286
    statement                      shift and go to state 287
    function_declaration_statement shift and go to state 288
    class_declaration_statement    shift and go to state 289
    expr                           shift and go to state 17
    class_entry_type               shift and go to state 36
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 939

    (84) foreach_statement -> COLON inner_statement_list ENDFOREACH . SEMI

    SEMI            shift and go to state 954


state 940

    (90) case_list -> case_list CASE expr case_separator inner_statement_list .
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) inner_statement -> . YIELD SEMI
    (29) inner_statement -> . YIELD expr SEMI
    (30) statement -> . LBRACE inner_statement_list RBRACE
    (31) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (33) statement -> . WHILE LPAREN expr RPAREN while_statement
    (34) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (35) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (36) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (37) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (38) statement -> . BREAK SEMI
    (39) statement -> . BREAK expr SEMI
    (40) statement -> . CONTINUE SEMI
    (41) statement -> . CONTINUE expr SEMI
    (42) statement -> . RETURN SEMI
    (43) statement -> . RETURN expr SEMI
    (44) statement -> . GLOBAL global_var_list SEMI
    (45) statement -> . STATIC static_var_list SEMI
    (46) statement -> . ECHO echo_expr_list SEMI
    (47) statement -> . INLINE_HTML
    (48) statement -> . expr SEMI
    (49) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (50) statement -> . SEMI
    (51) statement -> . TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
    (56) statement -> . THROW expr SEMI
    (57) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (108) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (109) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (110) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (111) class_declaration_statement -> . TRAIT STRING LBRACE trait_statement_list RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (112) class_entry_type -> . CLASS
    (113) class_entry_type -> . ABSTRACT CLASS
    (114) class_entry_type -> . FINAL CLASS
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RBRACE          reduce using rule 90 (case_list -> case_list CASE expr case_separator inner_statement_list .)
    CASE            reduce using rule 90 (case_list -> case_list CASE expr case_separator inner_statement_list .)
    DEFAULT         reduce using rule 90 (case_list -> case_list CASE expr case_separator inner_statement_list .)
    ENDSWITCH       reduce using rule 90 (case_list -> case_list CASE expr case_separator inner_statement_list .)
    HALT_COMPILER   shift and go to state 290
    YIELD           shift and go to state 291
    LBRACE          shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    FOREACH         shift and go to state 21
    SWITCH          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    GLOBAL          shift and go to state 26
    STATIC          shift and go to state 27
    ECHO            shift and go to state 28
    INLINE_HTML     shift and go to state 29
    UNSET           shift and go to state 30
    SEMI            shift and go to state 10
    TRY             shift and go to state 31
    THROW           shift and go to state 32
    DECLARE         shift and go to state 33
    FUNCTION        shift and go to state 34
    INTERFACE       shift and go to state 37
    TRAIT           shift and go to state 38
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    CLASS           shift and go to state 70
    ABSTRACT        shift and go to state 71
    FINAL           shift and go to state 72
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 17
    inner_statement                shift and go to state 286
    statement                      shift and go to state 287
    function_declaration_statement shift and go to state 288
    class_declaration_statement    shift and go to state 289
    class_entry_type               shift and go to state 36
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 941

    (52) additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN . LBRACE inner_statement_list RBRACE

    LBRACE          shift and go to state 955


state 942

    (274) lexical_var_list -> lexical_var_list COMMA AND . VARIABLE

    VARIABLE        shift and go to state 956


state 943

    (275) lexical_var_list -> lexical_var_list COMMA VARIABLE .

    RPAREN          reduce using rule 275 (lexical_var_list -> lexical_var_list COMMA VARIABLE .)
    COMMA           reduce using rule 275 (lexical_var_list -> lexical_var_list COMMA VARIABLE .)


state 944

    (137) class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN . parameter_list RPAREN method_body
    (169) parameter_list -> . parameter_list COMMA parameter
    (170) parameter_list -> . parameter
    (171) parameter_list -> . empty
    (172) parameter -> . VARIABLE
    (173) parameter -> . class_name VARIABLE
    (174) parameter -> . AND VARIABLE
    (175) parameter -> . class_name AND VARIABLE
    (176) parameter -> . VARIABLE EQUALS static_scalar
    (177) parameter -> . class_name VARIABLE EQUALS static_scalar
    (178) parameter -> . AND VARIABLE EQUALS static_scalar
    (179) parameter -> . class_name AND VARIABLE EQUALS static_scalar
    (443) empty -> .
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY

    VARIABLE        shift and go to state 508
    AND             shift and go to state 510
    RPAREN          reduce using rule 443 (empty -> .)
    COMMA           reduce using rule 443 (empty -> .)
    NS_SEPARATOR    shift and go to state 210
    NAMESPACE       shift and go to state 211
    STATIC          shift and go to state 111
    STRING          shift and go to state 116
    ARRAY           shift and go to state 117

    parameter_list                 shift and go to state 957
    parameter                      shift and go to state 506
    empty                          shift and go to state 507
    class_name                     shift and go to state 509
    namespace_name                 shift and go to state 209

state 945

    (146) class_constant_declaration -> class_constant_declaration COMMA STRING EQUALS static_expr .
    (403) static_expr -> static_expr . BOOLEAN_AND static_expr
    (404) static_expr -> static_expr . BOOLEAN_OR static_expr
    (405) static_expr -> static_expr . LOGICAL_AND static_expr
    (406) static_expr -> static_expr . LOGICAL_OR static_expr
    (407) static_expr -> static_expr . LOGICAL_XOR static_expr
    (408) static_expr -> static_expr . AND static_expr
    (409) static_expr -> static_expr . OR static_expr
    (410) static_expr -> static_expr . XOR static_expr
    (411) static_expr -> static_expr . CONCAT static_expr
    (412) static_expr -> static_expr . PLUS static_expr
    (413) static_expr -> static_expr . MINUS static_expr
    (414) static_expr -> static_expr . MUL static_expr
    (415) static_expr -> static_expr . DIV static_expr
    (416) static_expr -> static_expr . SL static_expr
    (417) static_expr -> static_expr . SR static_expr
    (418) static_expr -> static_expr . MOD static_expr
    (419) static_expr -> static_expr . IS_IDENTICAL static_expr
    (420) static_expr -> static_expr . IS_NOT_IDENTICAL static_expr
    (421) static_expr -> static_expr . IS_EQUAL static_expr
    (422) static_expr -> static_expr . IS_NOT_EQUAL static_expr
    (423) static_expr -> static_expr . IS_SMALLER static_expr
    (424) static_expr -> static_expr . IS_SMALLER_OR_EQUAL static_expr
    (425) static_expr -> static_expr . IS_GREATER static_expr
    (426) static_expr -> static_expr . IS_GREATER_OR_EQUAL static_expr

    SEMI            reduce using rule 146 (class_constant_declaration -> class_constant_declaration COMMA STRING EQUALS static_expr .)
    COMMA           reduce using rule 146 (class_constant_declaration -> class_constant_declaration COMMA STRING EQUALS static_expr .)
    BOOLEAN_AND     shift and go to state 571
    BOOLEAN_OR      shift and go to state 572
    LOGICAL_AND     shift and go to state 573
    LOGICAL_OR      shift and go to state 574
    LOGICAL_XOR     shift and go to state 575
    AND             shift and go to state 576
    OR              shift and go to state 577
    XOR             shift and go to state 578
    CONCAT          shift and go to state 579
    PLUS            shift and go to state 580
    MINUS           shift and go to state 581
    MUL             shift and go to state 582
    DIV             shift and go to state 583
    SL              shift and go to state 584
    SR              shift and go to state 585
    MOD             shift and go to state 586
    IS_IDENTICAL    shift and go to state 587
    IS_NOT_IDENTICAL shift and go to state 588
    IS_EQUAL        shift and go to state 589
    IS_NOT_EQUAL    shift and go to state 590
    IS_SMALLER      shift and go to state 591
    IS_SMALLER_OR_EQUAL shift and go to state 592
    IS_GREATER      shift and go to state 593
    IS_GREATER_OR_EQUAL shift and go to state 594


state 946

    (140) class_statement -> USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE .

    RBRACE          reduce using rule 140 (class_statement -> USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE .)
    USE             reduce using rule 140 (class_statement -> USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE .)
    VAR             reduce using rule 140 (class_statement -> USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE .)
    CONST           reduce using rule 140 (class_statement -> USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE .)
    STATIC          reduce using rule 140 (class_statement -> USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE .)
    ABSTRACT        reduce using rule 140 (class_statement -> USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE .)
    FINAL           reduce using rule 140 (class_statement -> USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE .)
    PUBLIC          reduce using rule 140 (class_statement -> USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE .)
    PROTECTED       reduce using rule 140 (class_statement -> USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE .)
    PRIVATE         reduce using rule 140 (class_statement -> USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE .)
    FUNCTION        reduce using rule 140 (class_statement -> USE fully_qualified_class_name LBRACE trait_modifiers_list RBRACE .)


state 947

    (131) trait_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list . RPAREN method_body
    (169) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 958
    COMMA           shift and go to state 645


state 948

    (142) class_variable_declaration -> class_variable_declaration COMMA VARIABLE EQUALS static_scalar .

    SEMI            reduce using rule 142 (class_variable_declaration -> class_variable_declaration COMMA VARIABLE EQUALS static_scalar .)
    COMMA           reduce using rule 142 (class_variable_declaration -> class_variable_declaration COMMA VARIABLE EQUALS static_scalar .)


state 949

    (124) trait_member -> fully_qualified_class_name DOUBLE_COLON . STRING

    STRING          shift and go to state 959


state 950

    (126) trait_modifier -> trait_member AS . STRING SEMI
    (127) trait_modifier -> trait_member AS . visibility_modifier STRING SEMI
    (128) trait_modifier -> trait_member AS . visibility_modifier SEMI
    (160) visibility_modifier -> . PUBLIC
    (161) visibility_modifier -> . PROTECTED
    (162) visibility_modifier -> . PRIVATE

    STRING          shift and go to state 960
    PUBLIC          shift and go to state 670
    PROTECTED       shift and go to state 671
    PRIVATE         shift and go to state 672

    visibility_modifier            shift and go to state 961

state 951

    (63) elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .

    ELSEIF          reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    ELSE            reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    HALT_COMPILER   reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    NAMESPACE       reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    CONST           reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    USE             reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    LBRACE          reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    IF              reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    WHILE           reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    DO              reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    FOR             reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    FOREACH         reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    SWITCH          reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    BREAK           reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    CONTINUE        reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    RETURN          reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    GLOBAL          reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    STATIC          reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    ECHO            reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    INLINE_HTML     reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    UNSET           reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    SEMI            reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    TRY             reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    THROW           reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    DECLARE         reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    FUNCTION        reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    INTERFACE       reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    TRAIT           reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    NEW             reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    CLONE           reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    LIST            reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    ARRAY           reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    LBRACKET        reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    PLUS            reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    MINUS           reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    NOT             reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    BOOLEAN_NOT     reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    INC             reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    DEC             reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    INT_CAST        reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    DOUBLE_CAST     reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    STRING_CAST     reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    ARRAY_CAST      reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    OBJECT_CAST     reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    BOOL_CAST       reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    UNSET_CAST      reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    BINARY_CAST     reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    ISSET           reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    EMPTY           reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    EVAL            reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    INCLUDE         reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    INCLUDE_ONCE    reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    REQUIRE         reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    REQUIRE_ONCE    reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    PRINT           reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    AT              reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    LPAREN          reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    CLASS           reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    ABSTRACT        reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    FINAL           reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    QUOTE           reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    STRING          reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    STRING_VARNAME  reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    NS_SEPARATOR    reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    EXIT            reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    DIE             reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    LNUMBER         reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    DNUMBER         reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    CONSTANT_ENCAPSED_STRING reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    LINE            reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    FILE            reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    DIR             reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    CLASS_C         reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    METHOD_C        reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    FUNC_C          reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    NS_C            reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    START_HEREDOC   reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    START_NOWDOC    reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    BACKTICK        reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    DOLLAR          reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    VARIABLE        reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    $end            reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    RBRACE          reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    YIELD           reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    ENDIF           reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    ENDWHILE        reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    ENDDECLARE      reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    ENDFOREACH      reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    CASE            reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    DEFAULT         reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    ENDSWITCH       reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)
    ENDFOR          reduce using rule 63 (elseif_list -> elseif_list ELSEIF LPAREN expr RPAREN statement .)


state 952

    (67) new_elseif_list -> new_elseif_list ELSEIF LPAREN expr RPAREN . COLON inner_statement_list

    COLON           shift and go to state 962


state 953

    (77) for_statement -> COLON inner_statement_list ENDFOR . SEMI

    SEMI            shift and go to state 963


state 954

    (84) foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .

    ELSEIF          reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    ELSE            reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    HALT_COMPILER   reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    NAMESPACE       reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    CONST           reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    USE             reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    LBRACE          reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    IF              reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    WHILE           reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    DO              reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    FOR             reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    FOREACH         reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    SWITCH          reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    BREAK           reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    CONTINUE        reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    RETURN          reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    GLOBAL          reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    STATIC          reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    ECHO            reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    INLINE_HTML     reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    UNSET           reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    SEMI            reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    TRY             reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    THROW           reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    DECLARE         reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    FUNCTION        reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    INTERFACE       reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    TRAIT           reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    NEW             reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    CLONE           reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    LIST            reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    ARRAY           reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    LBRACKET        reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    PLUS            reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    MINUS           reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    NOT             reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    BOOLEAN_NOT     reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    INC             reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    DEC             reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    INT_CAST        reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    DOUBLE_CAST     reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    STRING_CAST     reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    ARRAY_CAST      reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    OBJECT_CAST     reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    BOOL_CAST       reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    UNSET_CAST      reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    BINARY_CAST     reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    ISSET           reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    EMPTY           reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    EVAL            reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    INCLUDE         reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    INCLUDE_ONCE    reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    REQUIRE         reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    REQUIRE_ONCE    reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    PRINT           reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    AT              reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    LPAREN          reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    CLASS           reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    ABSTRACT        reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    FINAL           reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    QUOTE           reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    STRING          reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    STRING_VARNAME  reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    NS_SEPARATOR    reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    EXIT            reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    DIE             reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    LNUMBER         reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    DNUMBER         reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    LINE            reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    FILE            reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    DIR             reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    CLASS_C         reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    METHOD_C        reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    FUNC_C          reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    NS_C            reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    START_HEREDOC   reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    START_NOWDOC    reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    BACKTICK        reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    DOLLAR          reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    VARIABLE        reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    $end            reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    RBRACE          reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    YIELD           reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    ENDIF           reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    ENDWHILE        reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    ENDDECLARE      reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    ENDFOREACH      reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    CASE            reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    DEFAULT         reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    ENDSWITCH       reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)
    ENDFOR          reduce using rule 84 (foreach_statement -> COLON inner_statement_list ENDFOREACH SEMI .)


state 955

    (52) additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE . inner_statement_list RBRACE
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (443) empty -> .

    RBRACE          reduce using rule 443 (empty -> .)
    HALT_COMPILER   reduce using rule 443 (empty -> .)
    YIELD           reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    IF              reduce using rule 443 (empty -> .)
    WHILE           reduce using rule 443 (empty -> .)
    DO              reduce using rule 443 (empty -> .)
    FOR             reduce using rule 443 (empty -> .)
    FOREACH         reduce using rule 443 (empty -> .)
    SWITCH          reduce using rule 443 (empty -> .)
    BREAK           reduce using rule 443 (empty -> .)
    CONTINUE        reduce using rule 443 (empty -> .)
    RETURN          reduce using rule 443 (empty -> .)
    GLOBAL          reduce using rule 443 (empty -> .)
    STATIC          reduce using rule 443 (empty -> .)
    ECHO            reduce using rule 443 (empty -> .)
    INLINE_HTML     reduce using rule 443 (empty -> .)
    UNSET           reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    TRY             reduce using rule 443 (empty -> .)
    THROW           reduce using rule 443 (empty -> .)
    DECLARE         reduce using rule 443 (empty -> .)
    FUNCTION        reduce using rule 443 (empty -> .)
    INTERFACE       reduce using rule 443 (empty -> .)
    TRAIT           reduce using rule 443 (empty -> .)
    NEW             reduce using rule 443 (empty -> .)
    CLONE           reduce using rule 443 (empty -> .)
    LIST            reduce using rule 443 (empty -> .)
    ARRAY           reduce using rule 443 (empty -> .)
    LBRACKET        reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    NOT             reduce using rule 443 (empty -> .)
    BOOLEAN_NOT     reduce using rule 443 (empty -> .)
    INC             reduce using rule 443 (empty -> .)
    DEC             reduce using rule 443 (empty -> .)
    INT_CAST        reduce using rule 443 (empty -> .)
    DOUBLE_CAST     reduce using rule 443 (empty -> .)
    STRING_CAST     reduce using rule 443 (empty -> .)
    ARRAY_CAST      reduce using rule 443 (empty -> .)
    OBJECT_CAST     reduce using rule 443 (empty -> .)
    BOOL_CAST       reduce using rule 443 (empty -> .)
    UNSET_CAST      reduce using rule 443 (empty -> .)
    BINARY_CAST     reduce using rule 443 (empty -> .)
    ISSET           reduce using rule 443 (empty -> .)
    EMPTY           reduce using rule 443 (empty -> .)
    EVAL            reduce using rule 443 (empty -> .)
    INCLUDE         reduce using rule 443 (empty -> .)
    INCLUDE_ONCE    reduce using rule 443 (empty -> .)
    REQUIRE         reduce using rule 443 (empty -> .)
    REQUIRE_ONCE    reduce using rule 443 (empty -> .)
    PRINT           reduce using rule 443 (empty -> .)
    AT              reduce using rule 443 (empty -> .)
    LPAREN          reduce using rule 443 (empty -> .)
    CLASS           reduce using rule 443 (empty -> .)
    ABSTRACT        reduce using rule 443 (empty -> .)
    FINAL           reduce using rule 443 (empty -> .)
    QUOTE           reduce using rule 443 (empty -> .)
    STRING          reduce using rule 443 (empty -> .)
    STRING_VARNAME  reduce using rule 443 (empty -> .)
    NS_SEPARATOR    reduce using rule 443 (empty -> .)
    NAMESPACE       reduce using rule 443 (empty -> .)
    EXIT            reduce using rule 443 (empty -> .)
    DIE             reduce using rule 443 (empty -> .)
    LNUMBER         reduce using rule 443 (empty -> .)
    DNUMBER         reduce using rule 443 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 443 (empty -> .)
    LINE            reduce using rule 443 (empty -> .)
    FILE            reduce using rule 443 (empty -> .)
    DIR             reduce using rule 443 (empty -> .)
    CLASS_C         reduce using rule 443 (empty -> .)
    METHOD_C        reduce using rule 443 (empty -> .)
    FUNC_C          reduce using rule 443 (empty -> .)
    NS_C            reduce using rule 443 (empty -> .)
    START_HEREDOC   reduce using rule 443 (empty -> .)
    START_NOWDOC    reduce using rule 443 (empty -> .)
    BACKTICK        reduce using rule 443 (empty -> .)
    DOLLAR          reduce using rule 443 (empty -> .)
    VARIABLE        reduce using rule 443 (empty -> .)

    inner_statement_list           shift and go to state 964
    empty                          shift and go to state 121

state 956

    (274) lexical_var_list -> lexical_var_list COMMA AND VARIABLE .

    RPAREN          reduce using rule 274 (lexical_var_list -> lexical_var_list COMMA AND VARIABLE .)
    COMMA           reduce using rule 274 (lexical_var_list -> lexical_var_list COMMA AND VARIABLE .)


state 957

    (137) class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list . RPAREN method_body
    (169) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 965
    COMMA           shift and go to state 645


state 958

    (131) trait_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN . method_body
    (156) method_body -> . LBRACE inner_statement_list RBRACE
    (157) method_body -> . SEMI

    LBRACE          shift and go to state 967
    SEMI            shift and go to state 968

    method_body                    shift and go to state 966

state 959

    (124) trait_member -> fully_qualified_class_name DOUBLE_COLON STRING .

    AS              reduce using rule 124 (trait_member -> fully_qualified_class_name DOUBLE_COLON STRING .)


state 960

    (126) trait_modifier -> trait_member AS STRING . SEMI

    SEMI            shift and go to state 969


state 961

    (127) trait_modifier -> trait_member AS visibility_modifier . STRING SEMI
    (128) trait_modifier -> trait_member AS visibility_modifier . SEMI

    STRING          shift and go to state 970
    SEMI            shift and go to state 971


state 962

    (67) new_elseif_list -> new_elseif_list ELSEIF LPAREN expr RPAREN COLON . inner_statement_list
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (443) empty -> .

    HALT_COMPILER   reduce using rule 443 (empty -> .)
    YIELD           reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    IF              reduce using rule 443 (empty -> .)
    WHILE           reduce using rule 443 (empty -> .)
    DO              reduce using rule 443 (empty -> .)
    FOR             reduce using rule 443 (empty -> .)
    FOREACH         reduce using rule 443 (empty -> .)
    SWITCH          reduce using rule 443 (empty -> .)
    BREAK           reduce using rule 443 (empty -> .)
    CONTINUE        reduce using rule 443 (empty -> .)
    RETURN          reduce using rule 443 (empty -> .)
    GLOBAL          reduce using rule 443 (empty -> .)
    STATIC          reduce using rule 443 (empty -> .)
    ECHO            reduce using rule 443 (empty -> .)
    INLINE_HTML     reduce using rule 443 (empty -> .)
    UNSET           reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    TRY             reduce using rule 443 (empty -> .)
    THROW           reduce using rule 443 (empty -> .)
    DECLARE         reduce using rule 443 (empty -> .)
    FUNCTION        reduce using rule 443 (empty -> .)
    INTERFACE       reduce using rule 443 (empty -> .)
    TRAIT           reduce using rule 443 (empty -> .)
    NEW             reduce using rule 443 (empty -> .)
    CLONE           reduce using rule 443 (empty -> .)
    LIST            reduce using rule 443 (empty -> .)
    ARRAY           reduce using rule 443 (empty -> .)
    LBRACKET        reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    NOT             reduce using rule 443 (empty -> .)
    BOOLEAN_NOT     reduce using rule 443 (empty -> .)
    INC             reduce using rule 443 (empty -> .)
    DEC             reduce using rule 443 (empty -> .)
    INT_CAST        reduce using rule 443 (empty -> .)
    DOUBLE_CAST     reduce using rule 443 (empty -> .)
    STRING_CAST     reduce using rule 443 (empty -> .)
    ARRAY_CAST      reduce using rule 443 (empty -> .)
    OBJECT_CAST     reduce using rule 443 (empty -> .)
    BOOL_CAST       reduce using rule 443 (empty -> .)
    UNSET_CAST      reduce using rule 443 (empty -> .)
    BINARY_CAST     reduce using rule 443 (empty -> .)
    ISSET           reduce using rule 443 (empty -> .)
    EMPTY           reduce using rule 443 (empty -> .)
    EVAL            reduce using rule 443 (empty -> .)
    INCLUDE         reduce using rule 443 (empty -> .)
    INCLUDE_ONCE    reduce using rule 443 (empty -> .)
    REQUIRE         reduce using rule 443 (empty -> .)
    REQUIRE_ONCE    reduce using rule 443 (empty -> .)
    PRINT           reduce using rule 443 (empty -> .)
    AT              reduce using rule 443 (empty -> .)
    LPAREN          reduce using rule 443 (empty -> .)
    CLASS           reduce using rule 443 (empty -> .)
    ABSTRACT        reduce using rule 443 (empty -> .)
    FINAL           reduce using rule 443 (empty -> .)
    QUOTE           reduce using rule 443 (empty -> .)
    STRING          reduce using rule 443 (empty -> .)
    STRING_VARNAME  reduce using rule 443 (empty -> .)
    NS_SEPARATOR    reduce using rule 443 (empty -> .)
    NAMESPACE       reduce using rule 443 (empty -> .)
    EXIT            reduce using rule 443 (empty -> .)
    DIE             reduce using rule 443 (empty -> .)
    LNUMBER         reduce using rule 443 (empty -> .)
    DNUMBER         reduce using rule 443 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 443 (empty -> .)
    LINE            reduce using rule 443 (empty -> .)
    FILE            reduce using rule 443 (empty -> .)
    DIR             reduce using rule 443 (empty -> .)
    CLASS_C         reduce using rule 443 (empty -> .)
    METHOD_C        reduce using rule 443 (empty -> .)
    FUNC_C          reduce using rule 443 (empty -> .)
    NS_C            reduce using rule 443 (empty -> .)
    START_HEREDOC   reduce using rule 443 (empty -> .)
    START_NOWDOC    reduce using rule 443 (empty -> .)
    BACKTICK        reduce using rule 443 (empty -> .)
    DOLLAR          reduce using rule 443 (empty -> .)
    VARIABLE        reduce using rule 443 (empty -> .)
    ELSEIF          reduce using rule 443 (empty -> .)
    ELSE            reduce using rule 443 (empty -> .)
    ENDIF           reduce using rule 443 (empty -> .)

    inner_statement_list           shift and go to state 972
    empty                          shift and go to state 121

state 963

    (77) for_statement -> COLON inner_statement_list ENDFOR SEMI .

    ELSEIF          reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    ELSE            reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    HALT_COMPILER   reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    NAMESPACE       reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    CONST           reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    USE             reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    LBRACE          reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    IF              reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    WHILE           reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    DO              reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    FOR             reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    FOREACH         reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    SWITCH          reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    BREAK           reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    CONTINUE        reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    RETURN          reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    GLOBAL          reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    STATIC          reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    ECHO            reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    INLINE_HTML     reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    UNSET           reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    SEMI            reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    TRY             reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    THROW           reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    DECLARE         reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    FUNCTION        reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    INTERFACE       reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    TRAIT           reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    NEW             reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    CLONE           reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    LIST            reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    ARRAY           reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    LBRACKET        reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    PLUS            reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    MINUS           reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    NOT             reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    BOOLEAN_NOT     reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    INC             reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    DEC             reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    INT_CAST        reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    DOUBLE_CAST     reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    STRING_CAST     reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    ARRAY_CAST      reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    OBJECT_CAST     reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    BOOL_CAST       reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    UNSET_CAST      reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    BINARY_CAST     reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    ISSET           reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    EMPTY           reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    EVAL            reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    INCLUDE         reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    INCLUDE_ONCE    reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    REQUIRE         reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    REQUIRE_ONCE    reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    PRINT           reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    AT              reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    LPAREN          reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    CLASS           reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    ABSTRACT        reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    FINAL           reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    QUOTE           reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    STRING          reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    STRING_VARNAME  reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    NS_SEPARATOR    reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    EXIT            reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    DIE             reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    LNUMBER         reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    DNUMBER         reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    CONSTANT_ENCAPSED_STRING reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    LINE            reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    FILE            reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    DIR             reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    CLASS_C         reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    METHOD_C        reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    FUNC_C          reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    NS_C            reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    START_HEREDOC   reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    START_NOWDOC    reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    BACKTICK        reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    DOLLAR          reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    VARIABLE        reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    $end            reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    RBRACE          reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    YIELD           reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    ENDIF           reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    ENDWHILE        reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    ENDDECLARE      reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    ENDFOREACH      reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    CASE            reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    DEFAULT         reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    ENDSWITCH       reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)
    ENDFOR          reduce using rule 77 (for_statement -> COLON inner_statement_list ENDFOR SEMI .)


state 964

    (52) additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list . RBRACE
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) inner_statement -> . YIELD SEMI
    (29) inner_statement -> . YIELD expr SEMI
    (30) statement -> . LBRACE inner_statement_list RBRACE
    (31) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (33) statement -> . WHILE LPAREN expr RPAREN while_statement
    (34) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (35) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (36) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (37) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (38) statement -> . BREAK SEMI
    (39) statement -> . BREAK expr SEMI
    (40) statement -> . CONTINUE SEMI
    (41) statement -> . CONTINUE expr SEMI
    (42) statement -> . RETURN SEMI
    (43) statement -> . RETURN expr SEMI
    (44) statement -> . GLOBAL global_var_list SEMI
    (45) statement -> . STATIC static_var_list SEMI
    (46) statement -> . ECHO echo_expr_list SEMI
    (47) statement -> . INLINE_HTML
    (48) statement -> . expr SEMI
    (49) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (50) statement -> . SEMI
    (51) statement -> . TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
    (56) statement -> . THROW expr SEMI
    (57) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (108) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (109) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (110) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (111) class_declaration_statement -> . TRAIT STRING LBRACE trait_statement_list RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (112) class_entry_type -> . CLASS
    (113) class_entry_type -> . ABSTRACT CLASS
    (114) class_entry_type -> . FINAL CLASS
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RBRACE          shift and go to state 973
    HALT_COMPILER   shift and go to state 290
    YIELD           shift and go to state 291
    LBRACE          shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    FOREACH         shift and go to state 21
    SWITCH          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    GLOBAL          shift and go to state 26
    STATIC          shift and go to state 27
    ECHO            shift and go to state 28
    INLINE_HTML     shift and go to state 29
    UNSET           shift and go to state 30
    SEMI            shift and go to state 10
    TRY             shift and go to state 31
    THROW           shift and go to state 32
    DECLARE         shift and go to state 33
    FUNCTION        shift and go to state 34
    INTERFACE       shift and go to state 37
    TRAIT           shift and go to state 38
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    CLASS           shift and go to state 70
    ABSTRACT        shift and go to state 71
    FINAL           shift and go to state 72
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    inner_statement                shift and go to state 286
    statement                      shift and go to state 287
    function_declaration_statement shift and go to state 288
    class_declaration_statement    shift and go to state 289
    expr                           shift and go to state 17
    class_entry_type               shift and go to state 36
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 965

    (137) class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN . method_body
    (156) method_body -> . LBRACE inner_statement_list RBRACE
    (157) method_body -> . SEMI

    LBRACE          shift and go to state 967
    SEMI            shift and go to state 968

    method_body                    shift and go to state 974

state 966

    (131) trait_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .

    RBRACE          reduce using rule 131 (trait_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    USE             reduce using rule 131 (trait_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    VAR             reduce using rule 131 (trait_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    STATIC          reduce using rule 131 (trait_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    ABSTRACT        reduce using rule 131 (trait_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    FINAL           reduce using rule 131 (trait_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    PUBLIC          reduce using rule 131 (trait_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    PROTECTED       reduce using rule 131 (trait_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    PRIVATE         reduce using rule 131 (trait_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    FUNCTION        reduce using rule 131 (trait_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)


state 967

    (156) method_body -> LBRACE . inner_statement_list RBRACE
    (22) inner_statement_list -> . inner_statement_list inner_statement
    (23) inner_statement_list -> . empty
    (443) empty -> .

    RBRACE          reduce using rule 443 (empty -> .)
    HALT_COMPILER   reduce using rule 443 (empty -> .)
    YIELD           reduce using rule 443 (empty -> .)
    LBRACE          reduce using rule 443 (empty -> .)
    IF              reduce using rule 443 (empty -> .)
    WHILE           reduce using rule 443 (empty -> .)
    DO              reduce using rule 443 (empty -> .)
    FOR             reduce using rule 443 (empty -> .)
    FOREACH         reduce using rule 443 (empty -> .)
    SWITCH          reduce using rule 443 (empty -> .)
    BREAK           reduce using rule 443 (empty -> .)
    CONTINUE        reduce using rule 443 (empty -> .)
    RETURN          reduce using rule 443 (empty -> .)
    GLOBAL          reduce using rule 443 (empty -> .)
    STATIC          reduce using rule 443 (empty -> .)
    ECHO            reduce using rule 443 (empty -> .)
    INLINE_HTML     reduce using rule 443 (empty -> .)
    UNSET           reduce using rule 443 (empty -> .)
    SEMI            reduce using rule 443 (empty -> .)
    TRY             reduce using rule 443 (empty -> .)
    THROW           reduce using rule 443 (empty -> .)
    DECLARE         reduce using rule 443 (empty -> .)
    FUNCTION        reduce using rule 443 (empty -> .)
    INTERFACE       reduce using rule 443 (empty -> .)
    TRAIT           reduce using rule 443 (empty -> .)
    NEW             reduce using rule 443 (empty -> .)
    CLONE           reduce using rule 443 (empty -> .)
    LIST            reduce using rule 443 (empty -> .)
    ARRAY           reduce using rule 443 (empty -> .)
    LBRACKET        reduce using rule 443 (empty -> .)
    PLUS            reduce using rule 443 (empty -> .)
    MINUS           reduce using rule 443 (empty -> .)
    NOT             reduce using rule 443 (empty -> .)
    BOOLEAN_NOT     reduce using rule 443 (empty -> .)
    INC             reduce using rule 443 (empty -> .)
    DEC             reduce using rule 443 (empty -> .)
    INT_CAST        reduce using rule 443 (empty -> .)
    DOUBLE_CAST     reduce using rule 443 (empty -> .)
    STRING_CAST     reduce using rule 443 (empty -> .)
    ARRAY_CAST      reduce using rule 443 (empty -> .)
    OBJECT_CAST     reduce using rule 443 (empty -> .)
    BOOL_CAST       reduce using rule 443 (empty -> .)
    UNSET_CAST      reduce using rule 443 (empty -> .)
    BINARY_CAST     reduce using rule 443 (empty -> .)
    ISSET           reduce using rule 443 (empty -> .)
    EMPTY           reduce using rule 443 (empty -> .)
    EVAL            reduce using rule 443 (empty -> .)
    INCLUDE         reduce using rule 443 (empty -> .)
    INCLUDE_ONCE    reduce using rule 443 (empty -> .)
    REQUIRE         reduce using rule 443 (empty -> .)
    REQUIRE_ONCE    reduce using rule 443 (empty -> .)
    PRINT           reduce using rule 443 (empty -> .)
    AT              reduce using rule 443 (empty -> .)
    LPAREN          reduce using rule 443 (empty -> .)
    CLASS           reduce using rule 443 (empty -> .)
    ABSTRACT        reduce using rule 443 (empty -> .)
    FINAL           reduce using rule 443 (empty -> .)
    QUOTE           reduce using rule 443 (empty -> .)
    STRING          reduce using rule 443 (empty -> .)
    STRING_VARNAME  reduce using rule 443 (empty -> .)
    NS_SEPARATOR    reduce using rule 443 (empty -> .)
    NAMESPACE       reduce using rule 443 (empty -> .)
    EXIT            reduce using rule 443 (empty -> .)
    DIE             reduce using rule 443 (empty -> .)
    LNUMBER         reduce using rule 443 (empty -> .)
    DNUMBER         reduce using rule 443 (empty -> .)
    CONSTANT_ENCAPSED_STRING reduce using rule 443 (empty -> .)
    LINE            reduce using rule 443 (empty -> .)
    FILE            reduce using rule 443 (empty -> .)
    DIR             reduce using rule 443 (empty -> .)
    CLASS_C         reduce using rule 443 (empty -> .)
    METHOD_C        reduce using rule 443 (empty -> .)
    FUNC_C          reduce using rule 443 (empty -> .)
    NS_C            reduce using rule 443 (empty -> .)
    START_HEREDOC   reduce using rule 443 (empty -> .)
    START_NOWDOC    reduce using rule 443 (empty -> .)
    BACKTICK        reduce using rule 443 (empty -> .)
    DOLLAR          reduce using rule 443 (empty -> .)
    VARIABLE        reduce using rule 443 (empty -> .)

    inner_statement_list           shift and go to state 975
    empty                          shift and go to state 121

state 968

    (157) method_body -> SEMI .

    RBRACE          reduce using rule 157 (method_body -> SEMI .)
    USE             reduce using rule 157 (method_body -> SEMI .)
    VAR             reduce using rule 157 (method_body -> SEMI .)
    STATIC          reduce using rule 157 (method_body -> SEMI .)
    ABSTRACT        reduce using rule 157 (method_body -> SEMI .)
    FINAL           reduce using rule 157 (method_body -> SEMI .)
    PUBLIC          reduce using rule 157 (method_body -> SEMI .)
    PROTECTED       reduce using rule 157 (method_body -> SEMI .)
    PRIVATE         reduce using rule 157 (method_body -> SEMI .)
    FUNCTION        reduce using rule 157 (method_body -> SEMI .)
    CONST           reduce using rule 157 (method_body -> SEMI .)


state 969

    (126) trait_modifier -> trait_member AS STRING SEMI .

    RBRACE          reduce using rule 126 (trait_modifier -> trait_member AS STRING SEMI .)
    STRING          reduce using rule 126 (trait_modifier -> trait_member AS STRING SEMI .)
    NS_SEPARATOR    reduce using rule 126 (trait_modifier -> trait_member AS STRING SEMI .)
    NAMESPACE       reduce using rule 126 (trait_modifier -> trait_member AS STRING SEMI .)
    ARRAY           reduce using rule 126 (trait_modifier -> trait_member AS STRING SEMI .)


state 970

    (127) trait_modifier -> trait_member AS visibility_modifier STRING . SEMI

    SEMI            shift and go to state 976


state 971

    (128) trait_modifier -> trait_member AS visibility_modifier SEMI .

    RBRACE          reduce using rule 128 (trait_modifier -> trait_member AS visibility_modifier SEMI .)
    STRING          reduce using rule 128 (trait_modifier -> trait_member AS visibility_modifier SEMI .)
    NS_SEPARATOR    reduce using rule 128 (trait_modifier -> trait_member AS visibility_modifier SEMI .)
    NAMESPACE       reduce using rule 128 (trait_modifier -> trait_member AS visibility_modifier SEMI .)
    ARRAY           reduce using rule 128 (trait_modifier -> trait_member AS visibility_modifier SEMI .)


state 972

    (67) new_elseif_list -> new_elseif_list ELSEIF LPAREN expr RPAREN COLON inner_statement_list .
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) inner_statement -> . YIELD SEMI
    (29) inner_statement -> . YIELD expr SEMI
    (30) statement -> . LBRACE inner_statement_list RBRACE
    (31) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (33) statement -> . WHILE LPAREN expr RPAREN while_statement
    (34) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (35) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (36) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (37) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (38) statement -> . BREAK SEMI
    (39) statement -> . BREAK expr SEMI
    (40) statement -> . CONTINUE SEMI
    (41) statement -> . CONTINUE expr SEMI
    (42) statement -> . RETURN SEMI
    (43) statement -> . RETURN expr SEMI
    (44) statement -> . GLOBAL global_var_list SEMI
    (45) statement -> . STATIC static_var_list SEMI
    (46) statement -> . ECHO echo_expr_list SEMI
    (47) statement -> . INLINE_HTML
    (48) statement -> . expr SEMI
    (49) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (50) statement -> . SEMI
    (51) statement -> . TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
    (56) statement -> . THROW expr SEMI
    (57) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (108) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (109) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (110) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (111) class_declaration_statement -> . TRAIT STRING LBRACE trait_statement_list RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (112) class_entry_type -> . CLASS
    (113) class_entry_type -> . ABSTRACT CLASS
    (114) class_entry_type -> . FINAL CLASS
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    ELSEIF          reduce using rule 67 (new_elseif_list -> new_elseif_list ELSEIF LPAREN expr RPAREN COLON inner_statement_list .)
    ELSE            reduce using rule 67 (new_elseif_list -> new_elseif_list ELSEIF LPAREN expr RPAREN COLON inner_statement_list .)
    ENDIF           reduce using rule 67 (new_elseif_list -> new_elseif_list ELSEIF LPAREN expr RPAREN COLON inner_statement_list .)
    HALT_COMPILER   shift and go to state 290
    YIELD           shift and go to state 291
    LBRACE          shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    FOREACH         shift and go to state 21
    SWITCH          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    GLOBAL          shift and go to state 26
    STATIC          shift and go to state 27
    ECHO            shift and go to state 28
    INLINE_HTML     shift and go to state 29
    UNSET           shift and go to state 30
    SEMI            shift and go to state 10
    TRY             shift and go to state 31
    THROW           shift and go to state 32
    DECLARE         shift and go to state 33
    FUNCTION        shift and go to state 34
    INTERFACE       shift and go to state 37
    TRAIT           shift and go to state 38
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    CLASS           shift and go to state 70
    ABSTRACT        shift and go to state 71
    FINAL           shift and go to state 72
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    expr                           shift and go to state 17
    inner_statement                shift and go to state 286
    statement                      shift and go to state 287
    function_declaration_statement shift and go to state 288
    class_declaration_statement    shift and go to state 289
    class_entry_type               shift and go to state 36
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 973

    (52) additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .

    CATCH           reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    FINALLY         reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    HALT_COMPILER   reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    NAMESPACE       reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    CONST           reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    USE             reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    LBRACE          reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    IF              reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    WHILE           reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    DO              reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    FOR             reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    FOREACH         reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    SWITCH          reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    BREAK           reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    CONTINUE        reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    RETURN          reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    GLOBAL          reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    STATIC          reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    ECHO            reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    INLINE_HTML     reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    UNSET           reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    SEMI            reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    TRY             reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    THROW           reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    DECLARE         reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    FUNCTION        reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    INTERFACE       reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    TRAIT           reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    NEW             reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    CLONE           reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    LIST            reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    ARRAY           reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    LBRACKET        reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    PLUS            reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    MINUS           reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    NOT             reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    BOOLEAN_NOT     reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    INC             reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    DEC             reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    INT_CAST        reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    DOUBLE_CAST     reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    STRING_CAST     reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    ARRAY_CAST      reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    OBJECT_CAST     reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    BOOL_CAST       reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    UNSET_CAST      reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    BINARY_CAST     reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    ISSET           reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    EMPTY           reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    EVAL            reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    INCLUDE         reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    INCLUDE_ONCE    reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    REQUIRE         reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    REQUIRE_ONCE    reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    PRINT           reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    AT              reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    LPAREN          reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    CLASS           reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    ABSTRACT        reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    FINAL           reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    QUOTE           reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    STRING          reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    STRING_VARNAME  reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    NS_SEPARATOR    reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    EXIT            reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    DIE             reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    LNUMBER         reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    DNUMBER         reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    CONSTANT_ENCAPSED_STRING reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    LINE            reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    FILE            reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    DIR             reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    CLASS_C         reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    METHOD_C        reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    FUNC_C          reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    NS_C            reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    START_HEREDOC   reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    START_NOWDOC    reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    BACKTICK        reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    DOLLAR          reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    VARIABLE        reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    $end            reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    RBRACE          reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    YIELD           reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    ELSEIF          reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    ELSE            reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    ENDIF           reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    ENDWHILE        reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    ENDDECLARE      reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    ENDFOREACH      reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    CASE            reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    DEFAULT         reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    ENDSWITCH       reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)
    ENDFOR          reduce using rule 52 (additional_catches -> additional_catches CATCH LPAREN fully_qualified_class_name VARIABLE RPAREN LBRACE inner_statement_list RBRACE .)


state 974

    (137) class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .

    RBRACE          reduce using rule 137 (class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    USE             reduce using rule 137 (class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    VAR             reduce using rule 137 (class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    CONST           reduce using rule 137 (class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    STATIC          reduce using rule 137 (class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    ABSTRACT        reduce using rule 137 (class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    FINAL           reduce using rule 137 (class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    PUBLIC          reduce using rule 137 (class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    PROTECTED       reduce using rule 137 (class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    PRIVATE         reduce using rule 137 (class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)
    FUNCTION        reduce using rule 137 (class_statement -> method_modifiers FUNCTION is_reference STRING LPAREN parameter_list RPAREN method_body .)


state 975

    (156) method_body -> LBRACE inner_statement_list . RBRACE
    (22) inner_statement_list -> inner_statement_list . inner_statement
    (24) inner_statement -> . statement
    (25) inner_statement -> . function_declaration_statement
    (26) inner_statement -> . class_declaration_statement
    (27) inner_statement -> . HALT_COMPILER LPAREN RPAREN SEMI
    (28) inner_statement -> . YIELD SEMI
    (29) inner_statement -> . YIELD expr SEMI
    (30) statement -> . LBRACE inner_statement_list RBRACE
    (31) statement -> . IF LPAREN expr RPAREN statement elseif_list else_single
    (32) statement -> . IF LPAREN expr RPAREN COLON inner_statement_list new_elseif_list new_else_single ENDIF SEMI
    (33) statement -> . WHILE LPAREN expr RPAREN while_statement
    (34) statement -> . DO statement WHILE LPAREN expr RPAREN SEMI
    (35) statement -> . FOR LPAREN for_expr SEMI for_expr SEMI for_expr RPAREN for_statement
    (36) statement -> . FOREACH LPAREN expr AS foreach_variable foreach_optional_arg RPAREN foreach_statement
    (37) statement -> . SWITCH LPAREN expr RPAREN switch_case_list
    (38) statement -> . BREAK SEMI
    (39) statement -> . BREAK expr SEMI
    (40) statement -> . CONTINUE SEMI
    (41) statement -> . CONTINUE expr SEMI
    (42) statement -> . RETURN SEMI
    (43) statement -> . RETURN expr SEMI
    (44) statement -> . GLOBAL global_var_list SEMI
    (45) statement -> . STATIC static_var_list SEMI
    (46) statement -> . ECHO echo_expr_list SEMI
    (47) statement -> . INLINE_HTML
    (48) statement -> . expr SEMI
    (49) statement -> . UNSET LPAREN unset_variables RPAREN SEMI
    (50) statement -> . SEMI
    (51) statement -> . TRY LBRACE inner_statement_list RBRACE additional_catches maybe_finally
    (56) statement -> . THROW expr SEMI
    (57) statement -> . DECLARE LPAREN declare_list RPAREN declare_statement
    (108) function_declaration_statement -> . FUNCTION is_reference STRING LPAREN parameter_list RPAREN LBRACE inner_statement_list RBRACE
    (109) class_declaration_statement -> . class_entry_type STRING extends_from implements_list LBRACE class_statement_list RBRACE
    (110) class_declaration_statement -> . INTERFACE STRING interface_extends_list LBRACE class_statement_list RBRACE
    (111) class_declaration_statement -> . TRAIT STRING LBRACE trait_statement_list RBRACE
    (180) expr -> . variable
    (181) expr -> . variable EQUALS expr
    (182) expr -> . variable EQUALS AND expr
    (183) expr -> . NEW class_name_reference ctor_arguments
    (184) expr -> . expr OBJECT_OPERATOR object_property method_or_not
    (198) expr -> . CLONE expr
    (199) expr -> . LIST LPAREN assignment_list RPAREN EQUALS expr
    (238) expr -> . expr LBRACE dim_offset RBRACE
    (251) expr -> . scalar
    (252) expr -> . ARRAY LPAREN array_pair_list RPAREN
    (253) expr -> . LBRACKET array_pair_list RBRACKET
    (271) expr -> . FUNCTION is_reference LPAREN parameter_list RPAREN lexical_vars LBRACE inner_statement_list RBRACE
    (278) expr -> . variable PLUS_EQUAL expr
    (279) expr -> . variable MINUS_EQUAL expr
    (280) expr -> . variable MUL_EQUAL expr
    (281) expr -> . variable DIV_EQUAL expr
    (282) expr -> . variable CONCAT_EQUAL expr
    (283) expr -> . variable MOD_EQUAL expr
    (284) expr -> . variable AND_EQUAL expr
    (285) expr -> . variable OR_EQUAL expr
    (286) expr -> . variable XOR_EQUAL expr
    (287) expr -> . variable SL_EQUAL expr
    (288) expr -> . variable SR_EQUAL expr
    (289) expr -> . expr BOOLEAN_AND expr
    (290) expr -> . expr BOOLEAN_OR expr
    (291) expr -> . expr LOGICAL_AND expr
    (292) expr -> . expr LOGICAL_OR expr
    (293) expr -> . expr LOGICAL_XOR expr
    (294) expr -> . expr AND expr
    (295) expr -> . expr OR expr
    (296) expr -> . expr XOR expr
    (297) expr -> . expr CONCAT expr
    (298) expr -> . expr PLUS expr
    (299) expr -> . expr MINUS expr
    (300) expr -> . expr MUL expr
    (301) expr -> . expr DIV expr
    (302) expr -> . expr SL expr
    (303) expr -> . expr SR expr
    (304) expr -> . expr MOD expr
    (305) expr -> . expr IS_IDENTICAL expr
    (306) expr -> . expr IS_NOT_IDENTICAL expr
    (307) expr -> . expr IS_EQUAL expr
    (308) expr -> . expr IS_NOT_EQUAL expr
    (309) expr -> . expr IS_SMALLER expr
    (310) expr -> . expr IS_SMALLER_OR_EQUAL expr
    (311) expr -> . expr IS_GREATER expr
    (312) expr -> . expr IS_GREATER_OR_EQUAL expr
    (313) expr -> . expr INSTANCEOF expr
    (314) expr -> . expr INSTANCEOF STATIC
    (315) expr -> . PLUS expr
    (316) expr -> . MINUS expr
    (317) expr -> . NOT expr
    (318) expr -> . BOOLEAN_NOT expr
    (319) expr -> . expr QUESTION expr COLON expr
    (320) expr -> . expr QUESTION COLON expr
    (321) expr -> . INC variable
    (322) expr -> . DEC variable
    (323) expr -> . variable INC
    (324) expr -> . variable DEC
    (325) expr -> . INT_CAST expr
    (326) expr -> . DOUBLE_CAST expr
    (327) expr -> . STRING_CAST expr
    (328) expr -> . ARRAY_CAST expr
    (329) expr -> . OBJECT_CAST expr
    (330) expr -> . BOOL_CAST expr
    (331) expr -> . UNSET_CAST expr
    (332) expr -> . BINARY_CAST expr
    (333) expr -> . ISSET LPAREN isset_variables RPAREN
    (336) expr -> . EMPTY LPAREN expr RPAREN
    (337) expr -> . EVAL LPAREN expr RPAREN
    (338) expr -> . INCLUDE expr
    (339) expr -> . INCLUDE_ONCE expr
    (340) expr -> . REQUIRE expr
    (341) expr -> . REQUIRE_ONCE expr
    (344) expr -> . exit_or_die
    (345) expr -> . exit_or_die LPAREN RPAREN
    (346) expr -> . exit_or_die LPAREN expr RPAREN
    (347) expr -> . PRINT expr
    (348) expr -> . AT expr
    (349) expr -> . LPAREN expr RPAREN
    (112) class_entry_type -> . CLASS
    (113) class_entry_type -> . ABSTRACT CLASS
    (114) class_entry_type -> . FINAL CLASS
    (205) variable -> . base_variable_with_function_calls OBJECT_OPERATOR object_property method_or_not variable_properties
    (206) variable -> . base_variable_with_function_calls
    (234) variable -> . variable LBRACKET dim_offset RBRACKET
    (350) scalar -> . class_constant
    (351) scalar -> . common_scalar
    (352) scalar -> . QUOTE encaps_list QUOTE
    (353) scalar -> . STRING QUOTE encaps_list QUOTE
    (354) scalar -> . scalar_heredoc
    (355) scalar -> . nowdoc
    (356) scalar -> . class_name_constant
    (361) scalar -> . STRING_VARNAME
    (362) scalar -> . namespace_name
    (363) scalar -> . NS_SEPARATOR namespace_name
    (364) scalar -> . NAMESPACE NS_SEPARATOR namespace_name
    (342) exit_or_die -> . EXIT
    (343) exit_or_die -> . DIE
    (207) base_variable_with_function_calls -> . base_variable
    (208) base_variable_with_function_calls -> . function_call
    (365) class_constant -> . class_name DOUBLE_COLON STRING
    (366) class_constant -> . variable_class_name DOUBLE_COLON STRING
    (367) common_scalar -> . LNUMBER
    (368) common_scalar -> . DNUMBER
    (369) common_scalar -> . CONSTANT_ENCAPSED_STRING
    (370) common_scalar -> . STRING CONSTANT_ENCAPSED_STRING
    (371) common_scalar -> . LINE
    (372) common_scalar -> . FILE
    (373) common_scalar -> . DIR
    (374) common_scalar -> . CLASS_C
    (375) common_scalar -> . METHOD_C
    (376) common_scalar -> . FUNC_C
    (377) common_scalar -> . NS_C
    (357) scalar_heredoc -> . START_HEREDOC encaps_list END_HEREDOC
    (358) nowdoc -> . START_NOWDOC nowdoc_text_content END_NOWDOC
    (385) class_name_constant -> . class_name DOUBLE_COLON CLASS
    (428) namespace_name -> . namespace_name NS_SEPARATOR STRING
    (429) namespace_name -> . STRING
    (430) namespace_name -> . ARRAY
    (225) base_variable -> . simple_indirect_reference
    (226) base_variable -> . static_member
    (209) function_call -> . namespace_name LPAREN function_call_parameter_list RPAREN
    (210) function_call -> . NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (211) function_call -> . NAMESPACE NS_SEPARATOR namespace_name LPAREN function_call_parameter_list RPAREN
    (212) function_call -> . class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (213) function_call -> . class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (214) function_call -> . variable_class_name DOUBLE_COLON STRING LPAREN function_call_parameter_list RPAREN
    (215) function_call -> . variable_class_name DOUBLE_COLON variable_without_objects LPAREN function_call_parameter_list RPAREN
    (216) function_call -> . class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (217) function_call -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE LPAREN function_call_parameter_list RPAREN
    (218) function_call -> . variable_without_objects LPAREN function_call_parameter_list RPAREN
    (219) function_call -> . BACKTICK encaps_list BACKTICK
    (187) class_name -> . namespace_name
    (188) class_name -> . NS_SEPARATOR namespace_name
    (189) class_name -> . NAMESPACE NS_SEPARATOR namespace_name
    (190) class_name -> . STATIC
    (233) variable_class_name -> . reference_variable
    (227) simple_indirect_reference -> . DOLLAR simple_indirect_reference
    (228) simple_indirect_reference -> . reference_variable
    (229) static_member -> . class_name DOUBLE_COLON variable_without_objects
    (230) static_member -> . variable_class_name DOUBLE_COLON variable_without_objects
    (231) static_member -> . class_name DOUBLE_COLON LBRACE expr RBRACE
    (232) static_member -> . variable_class_name DOUBLE_COLON LBRACE expr RBRACE
    (250) variable_without_objects -> . simple_indirect_reference
    (235) reference_variable -> . reference_variable LBRACKET dim_offset RBRACKET
    (236) reference_variable -> . reference_variable LBRACE expr RBRACE
    (237) reference_variable -> . compound_variable
    (239) compound_variable -> . VARIABLE
    (240) compound_variable -> . DOLLAR LBRACE expr RBRACE

    RBRACE          shift and go to state 977
    HALT_COMPILER   shift and go to state 290
    YIELD           shift and go to state 291
    LBRACE          shift and go to state 13
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DO              shift and go to state 19
    FOR             shift and go to state 20
    FOREACH         shift and go to state 21
    SWITCH          shift and go to state 22
    BREAK           shift and go to state 23
    CONTINUE        shift and go to state 24
    RETURN          shift and go to state 25
    GLOBAL          shift and go to state 26
    STATIC          shift and go to state 27
    ECHO            shift and go to state 28
    INLINE_HTML     shift and go to state 29
    UNSET           shift and go to state 30
    SEMI            shift and go to state 10
    TRY             shift and go to state 31
    THROW           shift and go to state 32
    DECLARE         shift and go to state 33
    FUNCTION        shift and go to state 34
    INTERFACE       shift and go to state 37
    TRAIT           shift and go to state 38
    NEW             shift and go to state 40
    CLONE           shift and go to state 41
    LIST            shift and go to state 42
    ARRAY           shift and go to state 44
    LBRACKET        shift and go to state 45
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 48
    BOOLEAN_NOT     shift and go to state 49
    INC             shift and go to state 50
    DEC             shift and go to state 51
    INT_CAST        shift and go to state 52
    DOUBLE_CAST     shift and go to state 53
    STRING_CAST     shift and go to state 54
    ARRAY_CAST      shift and go to state 55
    OBJECT_CAST     shift and go to state 56
    BOOL_CAST       shift and go to state 57
    UNSET_CAST      shift and go to state 58
    BINARY_CAST     shift and go to state 59
    ISSET           shift and go to state 60
    EMPTY           shift and go to state 61
    EVAL            shift and go to state 62
    INCLUDE         shift and go to state 63
    INCLUDE_ONCE    shift and go to state 64
    REQUIRE         shift and go to state 65
    REQUIRE_ONCE    shift and go to state 66
    PRINT           shift and go to state 68
    AT              shift and go to state 69
    LPAREN          shift and go to state 9
    CLASS           shift and go to state 70
    ABSTRACT        shift and go to state 71
    FINAL           shift and go to state 72
    QUOTE           shift and go to state 76
    STRING          shift and go to state 35
    STRING_VARNAME  shift and go to state 80
    NS_SEPARATOR    shift and go to state 81
    NAMESPACE       shift and go to state 112
    EXIT            shift and go to state 82
    DIE             shift and go to state 83
    LNUMBER         shift and go to state 88
    DNUMBER         shift and go to state 89
    CONSTANT_ENCAPSED_STRING shift and go to state 90
    LINE            shift and go to state 91
    FILE            shift and go to state 92
    DIR             shift and go to state 93
    CLASS_C         shift and go to state 94
    METHOD_C        shift and go to state 95
    FUNC_C          shift and go to state 96
    NS_C            shift and go to state 97
    START_HEREDOC   shift and go to state 98
    START_NOWDOC    shift and go to state 99
    BACKTICK        shift and go to state 103
    DOLLAR          shift and go to state 105
    VARIABLE        shift and go to state 107

    inner_statement                shift and go to state 286
    statement                      shift and go to state 287
    function_declaration_statement shift and go to state 288
    class_declaration_statement    shift and go to state 289
    expr                           shift and go to state 17
    class_entry_type               shift and go to state 36
    variable                       shift and go to state 39
    scalar                         shift and go to state 43
    exit_or_die                    shift and go to state 67
    base_variable_with_function_calls shift and go to state 73
    class_constant                 shift and go to state 74
    common_scalar                  shift and go to state 75
    scalar_heredoc                 shift and go to state 77
    nowdoc                         shift and go to state 78
    class_name_constant            shift and go to state 79
    namespace_name                 shift and go to state 12
    base_variable                  shift and go to state 84
    function_call                  shift and go to state 85
    class_name                     shift and go to state 86
    variable_class_name            shift and go to state 87
    simple_indirect_reference      shift and go to state 100
    static_member                  shift and go to state 101
    variable_without_objects       shift and go to state 102
    reference_variable             shift and go to state 104
    compound_variable              shift and go to state 106

state 976

    (127) trait_modifier -> trait_member AS visibility_modifier STRING SEMI .

    RBRACE          reduce using rule 127 (trait_modifier -> trait_member AS visibility_modifier STRING SEMI .)
    STRING          reduce using rule 127 (trait_modifier -> trait_member AS visibility_modifier STRING SEMI .)
    NS_SEPARATOR    reduce using rule 127 (trait_modifier -> trait_member AS visibility_modifier STRING SEMI .)
    NAMESPACE       reduce using rule 127 (trait_modifier -> trait_member AS visibility_modifier STRING SEMI .)
    ARRAY           reduce using rule 127 (trait_modifier -> trait_member AS visibility_modifier STRING SEMI .)


state 977

    (156) method_body -> LBRACE inner_statement_list RBRACE .

    RBRACE          reduce using rule 156 (method_body -> LBRACE inner_statement_list RBRACE .)
    USE             reduce using rule 156 (method_body -> LBRACE inner_statement_list RBRACE .)
    VAR             reduce using rule 156 (method_body -> LBRACE inner_statement_list RBRACE .)
    STATIC          reduce using rule 156 (method_body -> LBRACE inner_statement_list RBRACE .)
    ABSTRACT        reduce using rule 156 (method_body -> LBRACE inner_statement_list RBRACE .)
    FINAL           reduce using rule 156 (method_body -> LBRACE inner_statement_list RBRACE .)
    PUBLIC          reduce using rule 156 (method_body -> LBRACE inner_statement_list RBRACE .)
    PROTECTED       reduce using rule 156 (method_body -> LBRACE inner_statement_list RBRACE .)
    PRIVATE         reduce using rule 156 (method_body -> LBRACE inner_statement_list RBRACE .)
    FUNCTION        reduce using rule 156 (method_body -> LBRACE inner_statement_list RBRACE .)
    CONST           reduce using rule 156 (method_body -> LBRACE inner_statement_list RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 44 resolved as shift
WARNING: shift/reduce conflict for OBJECT_OPERATOR in state 73 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 104 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 104 resolved as shift
WARNING: shift/reduce conflict for OBJECT_OPERATOR in state 212 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 214 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 234 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 234 resolved as shift
WARNING: shift/reduce conflict for OBJECT_OPERATOR in state 243 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 243 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN_AND in state 243 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN_OR in state 243 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_AND in state 243 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OR in state 243 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_XOR in state 243 resolved as shift
WARNING: shift/reduce conflict for AND in state 243 resolved as shift
WARNING: shift/reduce conflict for OR in state 243 resolved as shift
WARNING: shift/reduce conflict for XOR in state 243 resolved as shift
WARNING: shift/reduce conflict for CONCAT in state 243 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 243 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 243 resolved as shift
WARNING: shift/reduce conflict for MUL in state 243 resolved as shift
WARNING: shift/reduce conflict for DIV in state 243 resolved as shift
WARNING: shift/reduce conflict for SL in state 243 resolved as shift
WARNING: shift/reduce conflict for SR in state 243 resolved as shift
WARNING: shift/reduce conflict for MOD in state 243 resolved as shift
WARNING: shift/reduce conflict for IS_IDENTICAL in state 243 resolved as shift
WARNING: shift/reduce conflict for IS_NOT_IDENTICAL in state 243 resolved as shift
WARNING: shift/reduce conflict for IS_EQUAL in state 243 resolved as shift
WARNING: shift/reduce conflict for IS_NOT_EQUAL in state 243 resolved as shift
WARNING: shift/reduce conflict for IS_SMALLER in state 243 resolved as shift
WARNING: shift/reduce conflict for IS_SMALLER_OR_EQUAL in state 243 resolved as shift
WARNING: shift/reduce conflict for IS_GREATER in state 243 resolved as shift
WARNING: shift/reduce conflict for IS_GREATER_OR_EQUAL in state 243 resolved as shift
WARNING: shift/reduce conflict for INSTANCEOF in state 243 resolved as shift
WARNING: shift/reduce conflict for QUESTION in state 243 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 271 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 271 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 481 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 481 resolved as shift
WARNING: shift/reduce conflict for OBJECT_OPERATOR in state 675 resolved as shift
WARNING: shift/reduce conflict for OBJECT_OPERATOR in state 685 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 740 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 740 resolved as shift
